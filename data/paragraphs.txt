[ph]brltty-git-libbrlttybhd.so_deregister_tm_clones
lea rdi GLOBAL_VAR lea rax GLOBAL_VAR cmp rax rdi jz JUMP_ADDR_3	mov rax cs:xxx test rax rax jz JUMP_ADDR_3	jmp rax	retn
[ph]brltty-git-libbrlttybhd.so_register_tm_clones
lea rdi GLOBAL_VAR lea rsi GLOBAL_VAR sub rsi rdi mov rax rsi shr rsi CONST sar rax CONST add rsi rax sar rsi CONST jz JUMP_ADDR_3	mov rax cs:xxx test rax rax jz JUMP_ADDR_3	jmp rax	retn
[ph]brltty-git-libbrlttybhd.so___do_global_dtors_aux
endbr64 cmp cs:xxx CONST jnz JUMP_ADDR_4	push rbp cmp cs:xxx CONST mov rbp rsp jz JUMP_ADDR_3	mov rdi cs:xxx call cs:xxx	call callfunc_xxx mov cs:xxx CONST pop rbp retn	retn
[ph]brltty-git-libbrlttybhd.so_frame_dummy
endbr64 jmp UNK_JUMP_ADDR
[ph]brltty-git-libbrlttybhd.so_verifyPacket_ProfiLine
endbr64 cmp rdx CONST jnz JUMP_ADDR_2	mov [rcx] CONST	mov eax CONST retn
[ph]brltty-git-libbrlttybhd.so_verifyPacket_MobilLine
endbr64 mov r8 rsi lea rsi [rdx+CONST] movzx eax [rdx+r8+CONST] shr al CONST movzx eax al cmp rax rsi jz JUMP_ADDR_4	xor r8d r8d cmp rdx CONST jnz JUMP_ADDR_3	mov [rcx] CONST mov r8d CONST	mov eax r8d retn	mov r8d CONST test rax rax jnz JUMP_ADDR_3	mov [rcx] CONST mov eax r8d retn
[ph]brltty-git-libbrlttybhd.so_isIdentityResponse
endbr64 mov rax [CONST_VAR] mov rax [rax] movzx eax [rax+CONST] cmp [CONST_VAR] al setnz al movzx eax al lea eax [rax+rax+CONST] retn
[ph]brltty-git-libbrlttybhd.so_writeCells
push rbp mov rbp rsp push r13 push r12 mov r12 rdi push rbx mov ebx esi sub rsp CONST mov rdx [CONST_VAR] mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov rax [rdx] movzx ecx [rax+CONST] movzx eax [rax+CONST] lea eax [rcx+rax+CONST] mov rcx rsp add rax CONST and eax CONST cmp rsp rcx jz JUMP_ADDR_2	sub rsp CONST or [rsp+CONST+var_xxx] CONST cmp rsp rcx jnz JUMP_ADDR_1	sub rsp rax and eax CONST jnz JUMP_ADDR_13	mov [rsp+CONST+var_xxx] CONST mov rcx [rdx] mov r13 rsp lea r8 [rsp+CONST+var_xxx] lea rsi [rdx+CONST] movzx eax [rcx+CONST] cmp eax CONST jnb JUMP_ADDR_12	test al CONST jnz JUMP_ADDR_15	test eax eax jz JUMP_ADDR_8	movzx ecx [rdx+CONST] mov [r8] cl test al CONST jnz JUMP_ADDR_16	mov rcx [rdx]	lea rdi [r8+rax] movzx r8d [rcx+CONST] lea rsi [rdx+CONST] mov rdx r8 call cs:xxx sub rax r13 mov rcx rax test ebx ebx jnz JUMP_ADDR_14	mov rdx r13 xor esi esi mov rdi r12 call cs:xxx	mov rdx [rbp+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_17	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop rbp retn	mov rcx [rdx+CONST] lea rdi [rsp+CONST+var_xxx+CONST] mov [rsp+CONST+var_xxx] rcx mov rcx [CONST_VAR+rax+CONST] mov [r8+rax+CONST] rcx mov rcx r8 sub rcx rdi sub rsi rcx add ecx eax shr ecx CONST rep CONST jmp JUMP_ADDR_7	or [rsp+rax+CONST+var_xxx] CONST jmp JUMP_ADDR_3	mov r8 rax mov rcx r13 xor edx edx xor esi esi mov rdi r12 call cs:xxx jmp JUMP_ADDR_10	mov ecx [rdx+CONST] mov [r8] ecx mov ecx [CONST_VAR+rax+CONST] mov [r8+rax+CONST] ecx mov rcx [rdx] jmp JUMP_ADDR_8	movzx ecx [CONST_VAR+rax+CONST] mov [r8+rax+CONST] cx mov rcx [rdx] jmp JUMP_ADDR_8	call cs:xxx
[ph]brltty-git-libbrlttybhd.so_readPacket
endbr64 mov rax [CONST_VAR] mov rcx rdx xor r9d r9d mov rdx rsi xor esi esi mov rax [rax] mov r8 [rax+CONST] jmp cs:xxx
[ph]brltty-git-libbrlttybhd.so_brl_destruct
endbr64 push rbx mov rbx rdi xor esi esi call cs:xxx mov rdi [rbx] test rdi rdi jz JUMP_ADDR_2	call cs:xxx mov [rbx] CONST	pop rbx retn
[ph]brltty-git-libbrlttybhd.so_writeIdentifyRequest
endbr64 mov rdx [CONST_VAR] pxor xmm0 xmm0 xor esi esi movups [rdx+CONST] xmm0 movups [rdx+CONST] xmm0 movups [rdx+CONST] xmm0 movups [rdx+CONST] xmm0 movups [rdx+CONST] xmm0 mov rax [CONST_VAR] mov [rax+CONST] CONST jmp UNK_JUMP_ADDR
[ph]brltty-git-libbrlttybhd.so_brl_construct
endbr64 push r12 mov esi CONST push rbp mov rbp rdx push rbx mov rbx rdi mov edi CONST sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call cs:xxx mov [rbx] rax test rax rax jz JUMP_ADDR_8	mov r12 rsp mov rdi r12 call cs:xxx xor ecx ecx mov rdx r12 mov rsi rbp lea rax off_xxx mov rdi rbx mov [rsp+CONST+var_xxx] rax call cs:xxx test eax eax jnz JUMP_ADDR_5	mov rdi [rbx] call cs:xxx xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp pop r12 retn	mov rbp [rbx] mov rdi [rbx+CONST] call cs:xxx mov rdi cs:xxx mov [rbp+CONST] rax mov rax [rbx] mov rax [rax] movzx eax [rax+CONST] mov [rbx+CONST] eax call cs:xxx sub rsp CONST mov ecx CONST xor edx edx lea rax sub_xxx lea r9 sub_xxx mov esi CONST mov rdi rbx push rax lea r8 sub_xxx push CONST lea rax [rsp+CONST+var_xxx] push rax call cs:xxx mov rsp r12 test eax eax jz JUMP_ADDR_7	mov rax [rbx] mov rdx [rax] mov rdx [rdx+CONST] mov rcx [rdx] mov rdx [rdx+CONST] mov [rbx+CONST] rcx mov [rbx+CONST] rdx mov [rax+CONST] CONST mov eax CONST jmp JUMP_ADDR_3	xor esi esi mov rdi rbx call cs:xxx jmp JUMP_ADDR_2	call cs:xxx xor eax eax jmp JUMP_ADDR_3	call cs:xxx
[ph]brltty-git-libbrlttybhd.so_interpretKeysPacket_ProfiLine
endbr64 mov rax [CONST_VAR] movsx ecx [CONST_VAR] mov rax [rax] mov edx ecx not ecx and edx CONST shr ecx CONST movzx eax [rax+CONST] cmp al dl ja JUMP_ADDR_4	movzx esi al movzx r8d dl add esi [CONST_VAR+CONST] xor r9d r9d cmp r8d esi jnb JUMP_ADDR_5	sub edx eax mov esi CONST	sub rsp CONST movzx edx dl call cs:xxx mov eax CONST add rsp CONST retn	xor esi esi jmp JUMP_ADDR_3	mov eax r9d retn
[ph]brltty-git-libbrlttybhd.so_brl_writeWindow
endbr64 push rbp mov rax [CONST_VAR] xor r8d r8d mov rbp rdi mov edx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] xor ecx ecx lea rdi [rax+CONST] lea r9 [rax+CONST] call cs:xxx mov r8d eax mov eax CONST test r8d r8d jnz JUMP_ADDR_2	pop rbp retn	mov rdi rbp mov esi CONST call sub_xxx pop rbp test eax eax setnz al movzx eax al retn
[ph]brltty-git-libbrlttybhd.so_interpretKeysPacket_MobilLine
endbr64 sub rsp CONST movzx edx [CONST_VAR] mov rax [CONST_VAR] mov ecx edx shr cl CONST jz JUMP_ADDR_4	mov rax [rax] movzx ecx [rax+CONST] xor eax eax cmp dl cl jb JUMP_ADDR_3	sub edx ecx movzx edx dl cmp edx [CONST_VAR+CONST] jb JUMP_ADDR_5	add rsp CONST retn	lea r9 [rax+CONST] movzx eax [CONST_VAR+CONST] xor r8d r8d xor ecx ecx and eax CONST shl eax CONST or eax edx movzx edx [CONST_VAR+CONST] and edx CONST shl edx CONST or eax edx mov rdx r9 mov esi eax call cs:xxx mov eax CONST add rsp CONST retn	mov esi CONST call cs:xxx mov eax CONST jmp JUMP_ADDR_3
[ph]brltty-git-libbrlttybhd.so_brl_readCommand
endbr64 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea r12 [rsp+CONST+var_xxx] nop [rax+CONST]	mov rax [rbx] xor r9d r9d mov ecx CONST mov rdx r12 xor esi esi mov rdi rbx mov rax [rax] mov r8 [rax+CONST] call cs:xxx mov rbp rax test rax rax jz JUMP_ADDR_6	mov rax [rbx] mov rax [rax] movzx ecx [rax+CONST] cmp [rsp+CONST+var_xxx] cl jz JUMP_ADDR_5	mov rsi r12 mov rdi rbx call callfunc_xxx test eax eax jnz JUMP_ADDR_1	mov rsi rbp mov rdi r12 call cs:xxx jmp JUMP_ADDR_1	mov rdi rbx call cs:xxx jmp JUMP_ADDR_1	call cs:xxx mov edx CONST cmp [rax] CONST mov eax CONST cmovnz eax edx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST pop rbx pop rbp pop r12 retn	call cs:xxx
[ph]libcap-git-setcap_abort
endbr64 push rbp lea rbp GLOBAL_VAR push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rbx fs:xxx cmp cs:xxx rbx jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_3	mov edx CONST cmpxchg cs:xxx edx jmp JUMP_ADDR_5	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	mov rdi rbp call sub_xxx	mov cs:xxx rbx	inc cs:xxx cmp cs:xxx CONST jnz JUMP_ADDR_8	mov rsi rsp xor edx edx mov edi CONST mov cs:xxx CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx	mov eax cs:xxx cmp eax CONST jnz JUMP_ADDR_21	mov cs:xxx CONST mov eax cs:xxx dec eax mov cs:xxx eax jnz JUMP_ADDR_14	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_12	dec cs:xxx jmp JUMP_ADDR_14	xchg eax cs:xxx dec eax jle JUMP_ADDR_14	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall	mov edi CONST call sub_xxx mov rbx fs:xxx cmp cs:xxx rbx jz JUMP_ADDR_20	mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	mov edx CONST cmpxchg cs:xxx edx jmp JUMP_ADDR_19	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_19	mov rdi rbp call sub_xxx	mov cs:xxx rbx	inc cs:xxx jmp JUMP_ADDR_22	cmp eax CONST jnz JUMP_ADDR_23	lea rsi [rsp+CONST+var_xxx] mov ecx CONST xor eax eax xor edx edx mov cs:xxx CONST mov rdi rsi rep CONST mov edi CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx	cmp cs:xxx CONST jnz JUMP_ADDR_25	mov cs:xxx CONST mov edi CONST call sub_xxx	cmp cs:xxx CONST jnz JUMP_ADDR_27	mov cs:xxx CONST hlt	cmp cs:xxx CONST jnz JUMP_ADDR_29	mov cs:xxx CONST mov edi CONST call sub_xxx	hlt
[ph]libcap-git-setcap__IO_new_fclose.cold
test [rbp+CONST] CONST jnz JUMP_ADDR_4	mov rdi [rbp+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_fflush.cold
test [rbx] CONST jnz JUMP_ADDR_4	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_fwrite.cold
test [rbx] CONST jnz JUMP_ADDR_4	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_wfile_underflow.cold
mov rax [rsp] mov eax [rax] mov [rsp+CONST] eax test ah CONST jnz JUMP_ADDR_4	mov rax [rsp] mov rdi [rax+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_new_file_underflow.cold
test [r15] CONST jnz JUMP_ADDR_4	mov rdi [r15+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__dl_start
endbr64 push rax call sub_xxx
[ph]libcap-git-setcap__IO_fputs.cold
test [rbx] CONST jnz JUMP_ADDR_4	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_getdelim.cold
test [rbx] CONST jnz JUMP_ADDR_4	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub [CONST_VAR] CONST	mov rdi r8 call sub_xxx	xchg eax [CONST_VAR] sub eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap__start
endbr64 xor ebp ebp mov r9 rdx pop rsi mov rdx rsp and rsp CONST push rax push rsp mov r8 sub_xxx mov rcx sub_xxx mov rdi sub_xxx call sub_xxx
[ph]libcap-git-setcap__dl_relocate_static_pie
endbr64 retn
[ph]libcap-git-setcap_deregister_tm_clones
mov eax off_xxx cmp rax off_xxx jz JUMP_ADDR_3	mov rax CONST test rax rax jz JUMP_ADDR_3	mov edi off_xxx jmp rax	retn
[ph]libcap-git-setcap_register_tm_clones
mov esi off_xxx sub rsi off_xxx mov rax rsi shr rsi CONST sar rax CONST add rsi rax sar rsi CONST jz JUMP_ADDR_3	mov rax CONST test rax rax jz JUMP_ADDR_3	mov edi off_xxx jmp rax	retn
[ph]libcap-git-setcap___do_global_dtors_aux
endbr64 cmp cs:xxx CONST jnz JUMP_ADDR_4	push rbp mov rbp rsp call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_3	mov edi unk_xxx call sub_xxx	mov cs:xxx CONST pop rbp retn	retn
[ph]libcap-git-setcap_-1
sub rsp CONST lea rax [rsp+CONST+var_xxx] and rax CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_read_caps
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] CONST cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_7	mov rax off_xxx mov rax [rax] mov rcx rax mov edx CONST mov esi CONST lea rax GLOBAL_VAR mov rdi rax call sub_xxx jmp JUMP_ADDR_7	mov eax [rbp+var_xxx] movsxd rdx eax mov rax [rbp+var_xxx] mov rsi rax mov edi CONST call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_4	mov rax off_xxx mov rax [rax] mov rcx rax mov edx CONST mov esi CONST lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call sub_xxx	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_8	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jz JUMP_ADDR_8	mov eax [rbp+var_xxx] sub [rbp+var_xxx] eax mov eax [rbp+var_xxx] cdqe add [rbp+var_xxx] rax	cmp [rbp+var_xxx] CONST jg JUMP_ADDR_2	mov rax [rbp+var_xxx] mov [rax] CONST cmp [rbp+var_xxx] CONST jg JUMP_ADDR_10	mov eax CONST jmp JUMP_ADDR_11	mov eax CONST	leave retn
[ph]libcap-git-setcap_main
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST cmp [rbp+var_xxx] CONST jg JUMP_ADDR_2	mov edi CONST call callfunc_xxx	call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_72	mov rax off_xxx mov rax [rax] mov rcx rax mov edx CONST mov esi CONST lea rax GLOBAL_VAR mov rdi rax call sub_xxx jmp JUMP_ADDR_72	add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_6	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_72	mov rax [rbp+var_xxx] mov rax [rax] mov rsi rax lea rax GLOBAL_VAR mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_8	mov rax [rbp+var_xxx] mov rax [rax] mov rsi rax lea rax GLOBAL_VAR mov rdi rax mov eax CONST call sub_xxx mov edi CONST call sub_xxx	mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_10	mov edi CONST call callfunc_xxx	mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_12	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_72	mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_17	cmp [rbp+var_xxx] CONST jg JUMP_ADDR_15	mov rax off_xxx mov rax [rax] mov rcx rax mov edx CONST mov esi CONST lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call sub_xxx	sub [rbp+var_xxx] CONST add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov rax [rax] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] add eax CONST cmp eax CONST ja JUMP_ADDR_72	mov rax [rbp+var_xxx] mov rdx [rax] mov rax off_xxx mov rax [rax] lea rcx GLOBAL_VAR mov rsi rcx mov rdi rax mov eax CONST call sub_xxx mov edi CONST call sub_xxx	mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_19	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_28	mov rax [rbp+var_xxx] mov rax [rax] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call cs:xxx test eax eax jnz JUMP_ADDR_23	mov rax [rbp+var_xxx] mov rcx [rax] lea rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov rsi rcx mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_22	mov edi CONST call callfunc_xxx	lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax jmp JUMP_ADDR_24	mov rax [rbp+var_xxx] mov rax [rax] mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_26	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call callfunc_xxx	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_28	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call sub_xxx	sub [rbp+var_xxx] CONST cmp [rbp+var_xxx] CONST jg JUMP_ADDR_30	mov edi CONST call callfunc_xxx	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_53	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_33	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov [rbp+var_xxx] rax	add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov rax [rax] mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_35	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov [rbp+var_xxx] rax	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_37	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jz JUMP_ADDR_51	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_50	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jz JUMP_ADDR_40	mov edx [rbp+var_xxx] mov eax [rbp+var_xxx] mov esi eax lea rax GLOBAL_VAR mov rdi rax mov eax CONST call sub_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_42	lea rcx GLOBAL_VAR jmp JUMP_ADDR_43	lea rcx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_45	lea rdx GLOBAL_VAR jmp JUMP_ADDR_46	lea rdx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_48	lea rax GLOBAL_VAR jmp JUMP_ADDR_49	lea rax unk_xxx	mov rsi [rbp+var_xxx] mov rsi [CONST_VAR] mov r8 rcx mov rcx rdx mov rdx rax lea rax GLOBAL_VAR mov rdi rax mov eax CONST call sub_xxx	mov edi CONST call sub_xxx	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_70	mov rax [rbp+var_xxx] mov rax [rax] mov rsi rax lea rax GLOBAL_VAR mov rdi rax mov eax CONST call sub_xxx jmp JUMP_ADDR_70	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_59	mov [rbp+var_xxx] CONST lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r8d CONST mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_56	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call sub_xxx	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_58	lea rax GLOBAL_VAR mov rdi rax call sub_xxx mov edi CONST call sub_xxx	mov [rbp+var_xxx] CONST	add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov rax [rax] mov rdx [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_70	mov [rbp+var_xxx] CONST call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_64	lea rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov rax [rbp+var_xxx] mov rcx rdx mov edx CONST mov rdi rax call sub_xxx lea rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov rax [rbp+var_xxx] mov rcx rdx mov edx CONST mov rdi rax call sub_xxx mov edx [rbp+var_xxx] mov eax [rbp+var_xxx] or eax edx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] test eax eax setnz al movzx eax al or [rbp+var_xxx] eax mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jz JUMP_ADDR_63	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_65	add [rbp+var_xxx] CONST	lea rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov rax [rbp+var_xxx] mov rcx rdx mov edx CONST mov rdi rax call sub_xxx cmp eax CONST jnz JUMP_ADDR_61	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_68	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_68	mov rax off_xxx mov rax [rax] mov rcx rax mov edx CONST mov esi CONST lea rax GLOBAL_VAR mov rdi rax call sub_xxx	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov rcx rax mov rax [rbp+var_xxx] mov rdx [rax] mov rax off_xxx mov rax [rax] lea rsi GLOBAL_VAR mov rdi rax mov eax CONST call sub_xxx cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_70	mov edi CONST call callfunc_xxx	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_72	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx	sub [rbp+var_xxx] CONST cmp [rbp+var_xxx] CONST jg JUMP_ADDR_4	mov edi CONST call sub_xxx
[ph]libcap-git-setcap__initialize_libcap
endbr64 push rbp mov rbp rsp sub rsp CONST mov eax cs:xxx test eax eax jnz JUMP_ADDR_10	mov esi CONST mov edi CONST call sub_xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov edx [rbp+var_xxx] mov eax [rbp+var_xxx] add eax edx mov edx eax shr edx CONST add eax edx sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] mov edi eax call sub_xxx test eax eax jns JUMP_ADDR_4	mov eax [rbp+var_xxx] sub eax CONST mov [rbp+var_xxx] eax jmp JUMP_ADDR_5	mov eax [rbp+var_xxx] add eax CONST mov [rbp+var_xxx] eax	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jle JUMP_ADDR_2	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_8	mov eax [rbp+var_xxx] jmp JUMP_ADDR_9	mov eax CONST	mov cs:xxx eax jmp JUMP_ADDR_11	nop	leave retn
[ph]libcap-git-setcap_cap_max_bits
endbr64 push rbp mov rbp rsp mov eax cs:xxx pop rbp retn
[ph]libcap-git-setcap_cap_init
endbr64 push rbp mov rbp rsp sub rsp CONST mov esi CONST mov edi CONST call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_2	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_11	mov rax [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] add rax CONST mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov eax [rax] cmp eax CONST jz JUMP_ADDR_7	cmp eax CONST ja JUMP_ADDR_6	cmp eax CONST jz JUMP_ADDR_8	cmp eax CONST jz JUMP_ADDR_9	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_10	nop jmp JUMP_ADDR_10	nop jmp JUMP_ADDR_10	nop	mov rax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap__libcap_strdup
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_2	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_5	mov rax [rbp+var_xxx] mov rdi rax call cs:xxx add rax CONST mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_4	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_5	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call cs:xxx mov rax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_dup
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_6	call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_5	mov eax CONST jmp JUMP_ADDR_6	mov rcx [rbp+var_xxx] mov rax [rbp+var_xxx] mov edx CONST mov rsi rcx mov rdi rax call cs:xxx mov rax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_iab_init
endbr64 push rbp mov rbp rsp sub rsp CONST mov esi CONST mov edi CONST call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_cap_new_launcher
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov esi CONST mov edi CONST call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax+CONST] rdx mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax+CONST] rdx mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax+CONST] rdx mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_cap_func_launcher
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov esi CONST mov edi CONST call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax] rdx mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_cap_free
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_19	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_5	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_5	sub [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov edx CONST mov esi CONST mov rdi rax call cs:xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov eax CONST jmp JUMP_ADDR_19	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_8	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_8	mov rax [rbp+var_xxx] mov rdi rax call cs:xxx add rax CONST mov [rbp+var_xxx] rax sub [rbp+var_xxx] CONST mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call cs:xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov eax CONST jmp JUMP_ADDR_19	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_11	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_11	mov [rbp+var_xxx] CONST sub [rbp+var_xxx] CONST mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call cs:xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov eax CONST jmp JUMP_ADDR_19	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_18	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_18	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_15	mov rax [rbp+var_xxx] mov rax [rax+CONST] mov rdi rax call sub_xxx	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_17	mov rax [rbp+var_xxx] mov rax [rax+CONST] mov rdi rax call sub_xxx	mov [rbp+var_xxx] CONST sub [rbp+var_xxx] CONST mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call cs:xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov eax CONST jmp JUMP_ADDR_19	call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap__cap_syscall3
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov rdi rax mov eax CONST call sub_xxx leave retn
[ph]libcap-git-setcap__cap_syscall6
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov r8 [rbp+var_xxx] mov rdi [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rax [rbp+var_xxx] sub rsp CONST push [rbp+arg_xxx] mov r9 r8 mov r8 rdi mov rdi rax mov eax CONST call sub_xxx add rsp CONST leave retn
[ph]libcap-git-setcap_psx_load_syscalls
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov cs:xxx CONST nop pop rbp retn
[ph]libcap-git-setcap_cap_set_syscall
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_2	lea rax off_xxx mov rsi rax lea rax off_xxx mov rdi rax call sub_xxx jmp JUMP_ADDR_3	mov rax [rbp+var_xxx] mov cs:xxx rax mov rax [rbp+var_xxx] mov cs:xxx rax	nop leave retn
[ph]libcap-git-setcap__libcap_capset
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov eax cs:xxx test eax eax jz JUMP_ADDR_2	mov rax [rbp+var_xxx] mov r8 [rax] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx CONST mov rsi rax mov edi CONST call r8 jmp JUMP_ADDR_3	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx	leave retn
[ph]libcap-git-setcap__libcap_wprctl3
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov eax cs:xxx test eax eax jz JUMP_ADDR_2	mov rax [rbp+var_xxx] mov r8 [rax] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rax mov edi CONST call r8 jmp JUMP_ADDR_3	mov rax [rbp+var_xxx] mov edi eax mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r9d CONST mov r8d CONST mov ecx CONST mov rsi rax mov eax CONST call sub_xxx	leave retn
[ph]libcap-git-setcap__libcap_wprctl6
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov eax cs:xxx test eax eax jz JUMP_ADDR_2	mov rax [rbp+var_xxx] mov r10 [rax+CONST] mov rdi [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rsp CONST push [rbp+arg_xxx] mov r9 rdi mov r8 rsi mov rsi rax mov edi CONST call r10 add rsp CONST jmp JUMP_ADDR_3	mov rax [rbp+var_xxx] mov edi eax mov rsi [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r9 [rbp+arg_xxx] mov r8 rsi mov rsi rax mov eax CONST call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_get_proc
endbr64 push rbp mov rbp rsp sub rsp CONST call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_3	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST	mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap__cap_set_proc
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_4	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov rcx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_set_proc
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax [rbp+var_xxx] mov rsi rax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_capgetp
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_4	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov [rax+CONST] CONST mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_get_pid
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	mov rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov rsi rdx mov edi eax call sub_xxx test eax eax jz JUMP_ADDR_3	call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov [rbp+var_xxx] CONST	mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_capsetp
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_4	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] mov [rax+CONST] CONST mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_get_bound
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] cdqe mov edx CONST mov rsi rax mov edi CONST mov eax CONST call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_2	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov eax CONST jmp JUMP_ADDR_3	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap__cap_drop_bound
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov eax [rbp+var_xxx] movsxd rdx eax mov rax [rbp+var_xxx] mov ecx CONST mov esi CONST mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_2	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov eax CONST jmp JUMP_ADDR_3	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_drop_bound
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_cap_get_ambient
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] cdqe mov r8d CONST mov ecx CONST mov rdx rax mov esi CONST mov edi CONST mov eax CONST call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_2	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov eax CONST jmp JUMP_ADDR_3	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap__cap_set_ambient
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_4	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_8	mov eax [rbp+var_xxx] movsxd rcx eax mov eax [rbp+var_xxx] movsxd rdx eax mov rax [rbp+var_xxx] sub rsp CONST push CONST mov r9d CONST mov r8d CONST mov esi CONST mov rdi rax call sub_xxx add rsp CONST mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_7	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov eax CONST jmp JUMP_ADDR_8	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_set_ambient
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] esi mov edx [rbp+var_xxx] mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap__cap_reset_ambient
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_4	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_3	call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov eax CONST jmp JUMP_ADDR_8	add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_1	mov rax [rbp+var_xxx] sub rsp CONST push CONST mov r9d CONST mov r8d CONST mov ecx CONST mov edx CONST mov esi CONST mov rdi rax call sub_xxx add rsp CONST mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_7	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov eax CONST jmp JUMP_ADDR_8	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_reset_ambient
endbr64 push rbp mov rbp rsp lea rax off_xxx mov rdi rax call sub_xxx pop rbp retn
[ph]libcap-git-setcap_cap_get_secbits
endbr64 push rbp mov rbp rsp mov edx CONST mov esi CONST mov edi CONST mov eax CONST call sub_xxx pop rbp retn
[ph]libcap-git-setcap__cap_set_secbits
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx CONST mov esi CONST mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_cap_set_secbits
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap__cap_set_no_new_privs
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax [rbp+var_xxx] sub rsp CONST push CONST mov r9d CONST mov r8d CONST mov ecx CONST mov edx CONST mov esi CONST mov rdi rax call sub_xxx add rsp CONST nop leave retn
[ph]libcap-git-setcap_cap_prctl
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov rax [rbp+var_xxx] mov r10d eax mov rdi [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r9 rdi mov r8 rsi mov rsi rax mov edi r10d mov eax CONST call sub_xxx leave retn
[ph]libcap-git-setcap_cap_prctlw
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov rdi [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rsp CONST push [rbp+var_xxx] mov r9 rdi mov r8 rsi mov rsi rax lea rax off_xxx mov rdi rax call sub_xxx add rsp CONST leave retn
[ph]libcap-git-setcap__cap_set_mode
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi call sub_xxx mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov r8d CONST lea rdx unk_xxx mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx or [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_18	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_4	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_6	jmp JUMP_ADDR_15	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	jmp JUMP_ADDR_15	mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx	mov edi CONST call sub_xxx test eax eax jns JUMP_ADDR_9	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_10	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_16	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_17	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] mov edi eax call sub_xxx test eax eax jns JUMP_ADDR_12	mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx jmp JUMP_ADDR_18	call sub_xxx mov [rax] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_18	nop jmp JUMP_ADDR_18	nop	mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx or [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov eax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_cap_set_mode
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_cap_get_mode
endbr64 push rbp mov rbp rsp sub rsp CONST call sub_xxx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_24	call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_10	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_7	call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_12	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_12	mov eax CONST jmp JUMP_ADDR_24	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_9	mov eax CONST jmp JUMP_ADDR_24	add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	jmp JUMP_ADDR_13	nop	call sub_xxx mov [rbp+var_xxx] rax call sub_xxx mov [rbp+var_xxx] rax mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_15	mov eax CONST jmp JUMP_ADDR_24	mov eax [rbp+var_xxx] and eax CONST test eax eax jnz JUMP_ADDR_17	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_18	mov eax CONST jmp JUMP_ADDR_24	mov [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_23	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_22	mov eax CONST jmp JUMP_ADDR_24	add [rbp+var_xxx] CONST jmp JUMP_ADDR_19	nop mov eax CONST	leave retn
[ph]libcap-git-setcap__cap_setuid
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] CONST call sub_xxx mov [rbp+var_xxx] rax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r8d CONST mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov ecx CONST mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_5	mov eax cs:xxx test eax eax jz JUMP_ADDR_4	mov rax [rbp+var_xxx] mov r8 [rax] mov eax [rbp+var_xxx] mov ecx CONST mov edx CONST mov rsi rax mov edi CONST call r8 mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_5	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] eax	call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov ecx CONST mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov eax [rbp+var_xxx] mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_7	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_setuid
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap__cap_setgroups
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] CONST call sub_xxx mov [rbp+var_xxx] rax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r8d CONST mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax mov eax cs:xxx test eax eax jz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_3	mov rax [rbp+var_xxx] mov r8 [rax] mov eax [rbp+var_xxx] mov ecx CONST mov edx CONST mov rsi rax mov edi CONST call r8 mov [rbp+var_xxx] eax	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_5	mov rax [rbp+var_xxx] mov r8 [rax] mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx CONST mov rsi rax mov edi CONST call r8 mov [rbp+var_xxx] eax	cmp [rbp+var_xxx] CONST jns JUMP_ADDR_11	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_11	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_9	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] eax	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_11	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax	call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov eax [rbp+var_xxx] mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_13	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_setgroups
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov esi eax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_cap_iab_get_proc
endbr64 push rbp mov rbp rsp sub rsp CONST call sub_xxx mov [rbp+var_xxx] rax call sub_xxx mov [rbp+var_xxx] rax mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx CONST mov esi CONST mov rdi rax call sub_xxx call sub_xxx mov [rbp+var_xxx] eax jmp JUMP_ADDR_5	sub [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] mov edi eax call sub_xxx test eax eax jnz JUMP_ADDR_3	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx add rdx CONST mov eax [rax+rdx*4] or eax [rbp+var_xxx] mov edx eax mov rax [rbp+var_xxx] mov ecx [rbp+var_xxx] movsxd rcx ecx add rcx CONST mov [rax+rcx*4] edx	mov eax [rbp+var_xxx] mov edi eax call sub_xxx cmp eax CONST jnz JUMP_ADDR_5	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4+CONST] or eax [rbp+var_xxx] mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov [rax+rdx*4+CONST] ecx	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_1	mov rax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap__cap_iab_set_proc
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi call sub_xxx mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_2	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4] mov [rbp+var_xxx] eax mov rcx [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rsi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov eax [rax] or eax ecx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] not eax and eax [rbp+var_xxx] mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4+CONST] or ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx add rdx CONST mov eax [rax+rdx*4] or ecx eax mov edx ecx mov eax [rbp+var_xxx] or eax edx mov [rbp+var_xxx] eax mov rcx [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx lea rdx [rax+CONST] mov eax [rbp+var_xxx] mov [rdx] eax add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jle JUMP_ADDR_1	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_5	mov rax [rbp+var_xxx] mov r8d CONST lea rdx unk_xxx mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_18	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_19	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_14	call sub_xxx mov [rbp+var_xxx] eax jmp JUMP_ADDR_12	mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4+CONST] and eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_10	mov ecx [rbp+var_xxx] mov rax [rbp+var_xxx] mov edx CONST mov esi ecx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_15	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] add rdx CONST mov eax [rax+rdx*4] and eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_12	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_8	jmp JUMP_ADDR_17	nop jmp JUMP_ADDR_17	nop jmp JUMP_ADDR_17	nop	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx jmp JUMP_ADDR_20	nop jmp JUMP_ADDR_20	nop	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov eax [rbp+var_xxx] leave retn
[ph]libcap-git-setcap_cap_iab_set_proc
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax [rbp+var_xxx] mov rsi rax lea rax off_xxx mov rdi rax call sub_xxx leave retn
[ph]libcap-git-setcap_cap_launcher_callback
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax] rdx nop pop rbp retn
[ph]libcap-git-setcap_cap_launcher_setuid
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] mov [rax+CONST] CONST nop pop rbp retn
[ph]libcap-git-setcap_cap_launcher_setgroups
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx mov [rbp+var_xxx] rcx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax+CONST] rdx mov rax [rbp+var_xxx] mov [rax+CONST] CONST nop pop rbp retn
[ph]libcap-git-setcap_cap_launcher_set_mode
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov rax [rbp+var_xxx] mov [rax+CONST] CONST nop pop rbp retn
[ph]libcap-git-setcap_cap_launcher_set_iab
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax [rbp+var_xxx] mov rax [rax+CONST] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax+CONST] rdx mov rax [rbp+var_xxx] pop rbp retn
[ph]libcap-git-setcap_cap_launcher_set_chroot
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov [rdx+CONST] rax nop leave retn
[ph]libcap-git-setcap__cap_chroot
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] CONST call sub_xxx mov [rbp+var_xxx] rax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r8d CONST mov rcx rdx mov edx CONST mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_5	mov eax cs:xxx test eax eax jz JUMP_ADDR_4	mov rax [rbp+var_xxx] mov r8 [rax] mov rax [rbp+var_xxx] mov ecx CONST mov edx CONST mov rsi rax mov edi CONST call r8 mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_5	call sub_xxx mov edx [rbp+var_xxx] neg edx mov [rax] edx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax	call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov eax [rbp+var_xxx] mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_7	call sub_xxx	leave retn
[ph]libcap-git-setcap__cap_launch
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx lea rax off_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rax [rax] test rax rax jz JUMP_ADDR_2	mov rax [rbp+var_xxx] mov rdx [rax] mov rax [rbp+var_xxx] mov rdi rax call rdx test eax eax jnz JUMP_ADDR_15	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_4	mov edi CONST call sub_xxx	mov rax [rbp+var_xxx] mov eax [rax+CONST] test eax eax jz JUMP_ADDR_6	mov rax [rbp+var_xxx] mov edx [rax+CONST] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_16	mov rax [rbp+var_xxx] mov eax [rax+CONST] test eax eax jz JUMP_ADDR_8	mov rax [rbp+var_xxx] mov rcx [rax+CONST] mov rax [rbp+var_xxx] mov eax [rax+CONST] movsxd rdx eax mov rax [rbp+var_xxx] mov esi [rax+CONST] mov rax [rbp+var_xxx] mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_17	mov rax [rbp+var_xxx] mov eax [rax+CONST] test eax eax jz JUMP_ADDR_10	mov rax [rbp+var_xxx] mov edx [rax+CONST] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_18	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_12	mov rax [rbp+var_xxx] mov rdx [rax+CONST] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_19	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_14	mov rax [rbp+var_xxx] mov rdx [rax+CONST] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_20	mov rax [rbp+var_xxx] mov rax [rax+CONST] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rax [rax+CONST] mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rax [rax+CONST] mov rdx [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx jmp JUMP_ADDR_21	nop jmp JUMP_ADDR_21	nop jmp JUMP_ADDR_21	nop jmp JUMP_ADDR_21	nop jmp JUMP_ADDR_21	nop jmp JUMP_ADDR_21	nop	call sub_xxx mov rcx rax mov eax [rbp+var_xxx] mov edx CONST mov rsi rcx mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jns JUMP_ADDR_24	call sub_xxx mov eax [rax] cmp eax CONST jnz JUMP_ADDR_24	nop jmp JUMP_ADDR_21	nop mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov edi CONST call sub_xxx
[ph]libcap-git-setcap_cap_launch
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov rax [rbp+var_xxx] mov rax [rax] test rax rax jnz JUMP_ADDR_4	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_3	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_4	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_17	lea rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_6	mov eax CONST jmp JUMP_ADDR_17	call sub_xxx mov [rbp+var_xxx] eax call sub_xxx mov eax [rax] mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] mov edi eax call sub_xxx cmp [rbp+var_xxx] CONST js JUMP_ADDR_14	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_9	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov r8d CONST mov ecx CONST mov edx CONST lea rax GLOBAL_VAR mov rsi rax mov edi CONST mov eax CONST call sub_xxx mov eax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rsi rcx mov edi eax call sub_xxx	mov eax [rbp+var_xxx] lea rcx [rbp+var_xxx] mov edx CONST mov rsi rcx mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_15	cmp [rbp+var_xxx] CONST jns JUMP_ADDR_13	call sub_xxx mov eax [rax] cmp eax CONST jnz JUMP_ADDR_13	jmp JUMP_ADDR_9	lea rcx [rbp+var_xxx] mov eax [rbp+var_xxx] mov edx CONST mov rsi rcx mov edi eax call sub_xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_16	nop jmp JUMP_ADDR_16	nop	mov eax [rbp+var_xxx] mov edi eax call sub_xxx call sub_xxx mov edx [rbp+var_xxx] mov [rax] edx mov eax [rbp+var_xxx]	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_19	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_get_flag
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx mov [rbp+var_xxx] rcx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST js JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jg JUMP_ADDR_7	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_7	mov eax [rbp+var_xxx] sar eax CONST mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov edx [rdx+rax*4+CONST] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi and eax edx test eax eax setnz al movzx edx al mov rax [rbp+var_xxx] mov [rax] edx mov eax CONST jmp JUMP_ADDR_8	call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_set_flag
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8d cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jle JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jg JUMP_ADDR_16	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_16	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_14	mov eax [rbp+var_xxx] cdqe lea rdx ds:xxx mov rax [rbp+var_xxx] add rax rdx mov eax [rax] test eax eax js JUMP_ADDR_13	mov eax [rbp+var_xxx] cdqe lea rdx ds:xxx mov rax [rbp+var_xxx] add rax rdx mov eax [rax] cmp eax CONST jg JUMP_ADDR_13	mov eax [rbp+var_xxx] cdqe lea rdx ds:xxx mov rax [rbp+var_xxx] add rax rdx mov eax [rax] mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_12	mov eax [rbp+var_xxx] sar eax CONST mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov edx [rdx+rax*4+CONST] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov ecx esi mov eax [rbp+var_xxx] sar eax CONST mov esi edx or esi ecx mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rdi mov [rdx+rax*4+CONST] esi jmp JUMP_ADDR_13	mov eax [rbp+var_xxx] sar eax CONST mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov edx [rdx+rax*4+CONST] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi not eax mov ecx eax mov eax [rbp+var_xxx] sar eax CONST and edx ecx mov esi edx mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rdi mov [rdx+rax*4+CONST] esi	add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jl JUMP_ADDR_8	mov eax CONST jmp JUMP_ADDR_17	call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_clear
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_3	mov rax [rbp+var_xxx] add rax CONST mov edx CONST mov esi CONST mov rdi rax call cs:xxx mov eax CONST jmp JUMP_ADDR_4	call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_clear_flag
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi cmp [rbp+var_xxx] CONST ja JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_7	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov ecx [rbp+var_xxx] mov rax rcx add rax rax add rax rcx add rax rsi mov [rdx+rax*4+CONST] CONST add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_4	mov eax CONST jmp JUMP_ADDR_8	call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_compare
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_4	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_15	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rsi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov eax [rax] cmp ecx eax setnz al movzx esi al mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rdi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rdi add rax CONST mov eax [rax] cmp ecx eax jz JUMP_ADDR_8	mov eax CONST jmp JUMP_ADDR_9	mov eax CONST	or eax esi mov edi eax mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rsi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov eax [rax] cmp ecx eax jz JUMP_ADDR_11	mov eax CONST jmp JUMP_ADDR_12	mov eax CONST	or eax edi or [rbp+var_xxx] eax add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_6	mov eax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_cap_fill
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_10	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_5	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_6	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_10	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_8	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov ecx [rdx+rax*4+CONST] mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rsi eax mov rax rsi add rax rax add rax rsi add rax rdi mov [rdx+rax*4+CONST] ecx add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jle JUMP_ADDR_7	mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_iab_get_vector
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_3	call sub_xxx cmp [rbp+var_xxx] eax jl JUMP_ADDR_4	mov eax CONST jmp JUMP_ADDR_13	mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_11	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_12	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_9	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_10	jmp JUMP_ADDR_12	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4] and eax [rbp+var_xxx] test eax eax setnz al movzx eax al jmp JUMP_ADDR_13	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4+CONST] and eax [rbp+var_xxx] test eax eax setnz al movzx eax al jmp JUMP_ADDR_13	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] add rdx CONST mov eax [rax+rdx*4] and eax [rbp+var_xxx] test eax eax setnz al movzx eax al jmp JUMP_ADDR_13	mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_iab_set_vector
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx mov [rbp+var_xxx] ecx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_4	mov eax [rbp+var_xxx] shr eax CONST test eax eax jnz JUMP_ADDR_4	call sub_xxx cmp [rbp+var_xxx] eax jl JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_24	mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] not eax mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_18	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_22	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_10	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_14	jmp JUMP_ADDR_22	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4] and eax [rbp+var_xxx] mov edx eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_12	mov eax [rbp+var_xxx] jmp JUMP_ADDR_13	mov eax CONST	or eax edx mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4] ecx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov ecx [rax+rdx*4+CONST] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4] and ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4+CONST] ecx jmp JUMP_ADDR_23	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4+CONST] and eax [rbp+var_xxx] mov edx eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov eax [rbp+var_xxx] jmp JUMP_ADDR_17	mov eax CONST	or eax edx mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4+CONST] ecx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov ecx [rax+rdx*4] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4+CONST] or ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4] ecx jmp JUMP_ADDR_23	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] add rdx CONST mov eax [rax+rdx*4] and eax [rbp+var_xxx] mov edx eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_20	mov eax [rbp+var_xxx] jmp JUMP_ADDR_21	mov eax CONST	or eax edx mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] add rdx CONST mov [rax+rdx*4] ecx jmp JUMP_ADDR_23	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_24	mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_iab_fill
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] ecx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_4	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_20	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_7	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_20	nop mov [rbp+var_xxx] CONST jmp JUMP_ADDR_18	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_15	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_13	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_14	jmp JUMP_ADDR_16	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov ecx [rdx+rax*4+CONST] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov [rax+rdx*4] ecx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov ecx [rax+rdx*4+CONST] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4] and ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov [rax+rdx*4+CONST] ecx jmp JUMP_ADDR_17	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov ecx [rdx+rax*4+CONST] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov [rax+rdx*4+CONST] ecx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov esi [rax+rdx*4] mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rdi mov eax [rdx+rax*4+CONST] or esi eax mov ecx esi mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov [rax+rdx*4] ecx jmp JUMP_ADDR_17	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov eax [rdx+rax*4+CONST] not eax mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx add rdx CONST mov [rax+rdx*4] ecx jmp JUMP_ADDR_17	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_20	add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jle JUMP_ADDR_8	mov eax CONST	leave retn
[ph]libcap-git-setcap_setbits
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] edx mov [rbp+var_xxx] ecx mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_2	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov edx [rdx+rax*4+CONST] mov eax [rbp+var_xxx] cdqe lea rcx ds:xxx mov rax [rbp+var_xxx] add rax rcx mov eax [rax] mov esi edx or esi eax mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rdi mov [rdx+rax*4+CONST] esi	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_1	nop nop pop rbp retn
[ph]libcap-git-setcap_clrbits
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] edx mov [rbp+var_xxx] ecx mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_2	mov rdx [rbp+var_xxx] mov esi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rsi mov edx [rdx+rax*4+CONST] mov eax [rbp+var_xxx] cdqe lea rcx ds:xxx mov rax [rbp+var_xxx] add rax rcx mov eax [rax] not eax mov esi edx and esi eax mov rdx [rbp+var_xxx] mov edi [rbp+var_xxx] mov eax [rbp+var_xxx] movsxd rcx eax mov rax rcx add rax rax add rax rcx add rax rdi mov [rdx+rax*4+CONST] esi	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_1	nop nop pop rbp retn
[ph]libcap-git-setcap_namcmp
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi jmp JUMP_ADDR_2	add [rbp+var_xxx] CONST add [rbp+var_xxx] CONST	mov rax [rbp+var_xxx] movzx eax [rax] test al al jz JUMP_ADDR_4	mov rax [rbp+var_xxx] movzx eax [rax] movzx eax al mov edi eax call sub_xxx mov rdx [rbp+var_xxx] movzx edx [rdx] movsx edx dl cmp eax edx jz JUMP_ADDR_1	mov rax [rbp+var_xxx] movzx eax [rax] test al al jnz JUMP_ADDR_7	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movzx eax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_7	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_8	mov eax CONST jmp JUMP_ADDR_9	mov rax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap_forceall
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] edx call sub_xxx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_6	mov eax [rbp+var_xxx] shl eax CONST mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] lea edx [rax+CONST] mov eax [rbp+var_xxx] cmp edx eax ja JUMP_ADDR_3	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jnb JUMP_ADDR_5	mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl rdx cl mov rax rdx sub eax CONST mov [rbp+var_xxx] eax	mov eax [rbp+var_xxx] lea rdx ds:xxx mov rax [rbp+var_xxx] add rdx rax mov eax [rbp+var_xxx] and eax [rbp+var_xxx] mov [rdx] eax	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_1	nop leave retn
[ph]libcap-git-setcap_lookupname
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov rax [rbp+var_xxx] mov rax [rax] mov [rbp+var_xxx] rax call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movsx rax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jz JUMP_ADDR_4	mov rax [rbp+var_xxx] lea rcx [rbp+var_xxx] mov edx CONST mov rsi rcx mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_3	mov eax CONST jmp JUMP_ADDR_18	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov [rax] rdx mov rax [rbp+var_xxx] jmp JUMP_ADDR_18	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_8	call sub_xxx mov rdx [rax] mov eax [rbp+var_xxx] cdqe add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_10	add [rbp+var_xxx] CONST	mov rdx [rbp+var_xxx] mov eax [rbp+var_xxx] add rax rdx movzx eax [rax] movsx eax al mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_5	jmp JUMP_ADDR_11	nop	call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_16	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_16	mov eax [rbp+var_xxx] lea rdx ds:xxx lea rax off_xxx mov rax [rdx+rax] test rax rax jz JUMP_ADDR_16	mov eax [rbp+var_xxx] lea rdx ds:xxx lea rax off_xxx mov rdx [rdx+rax] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [rax] rdx mov eax [rbp+var_xxx] jmp JUMP_ADDR_18	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_13	mov eax CONST	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_20	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_from_text
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov rax [rbp+var_xxx] test rax rax jnz JUMP_ADDR_2	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_89	call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_4	mov eax CONST jmp JUMP_ADDR_89	mov rax [rbp+var_xxx] mov eax [rax] cmp eax CONST jz JUMP_ADDR_11	cmp eax CONST ja JUMP_ADDR_12	cmp eax CONST jz JUMP_ADDR_9	cmp eax CONST jz JUMP_ADDR_10	jmp JUMP_ADDR_12	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_89	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST lea rax [rbp+var_xxx] mov edx CONST mov esi CONST mov rdi rax call cs:xxx jmp JUMP_ADDR_15	mov rax [rbp+var_xxx] add rax CONST mov [rbp+var_xxx] rax	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movzx eax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_14	mov rax [rbp+var_xxx] movzx eax [rax] test al al jnz JUMP_ADDR_18	mov rax [rbp+var_xxx] jmp JUMP_ADDR_89	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movzx eax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_20	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_29	mov rax [rbp+var_xxx] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call sub_xxx test rax rax jz JUMP_ADDR_22	mov rax [rbp+var_xxx] add rax CONST mov [rbp+var_xxx] rax mov edx [rbp+var_xxx] lea rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx jmp JUMP_ADDR_24	lea rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_79	mov eax [rbp+var_xxx] sar eax CONST cdqe mov edx [rbp+rax*4+var_xxx] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi mov ecx eax mov eax [rbp+var_xxx] sar eax CONST or edx ecx cdqe mov [rbp+rax*4+var_xxx] edx	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_28	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] add rax CONST mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] movzx eax [rax] movzx eax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_20	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_80	jmp JUMP_ADDR_20	nop mov [rbp+var_xxx] CONST jmp JUMP_ADDR_32	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jz JUMP_ADDR_81	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jz JUMP_ADDR_81	mov edx [rbp+var_xxx] lea rax [rbp+var_xxx] mov esi CONST mov rdi rax call sub_xxx	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx movzx eax [rax] mov [rbp+var_xxx] al cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_40	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jz JUMP_ADDR_35	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_40	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_82	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx movzx eax [rax] cmp al CONST jnz JUMP_ADDR_38	mov eax CONST jmp JUMP_ADDR_39	mov eax CONST	mov [rbp+var_xxx] al jmp JUMP_ADDR_43	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_43	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_43	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_83	mov rax [rbp+var_xxx] movzx eax [rax] test al al jz JUMP_ADDR_54	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movsx rax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jnz JUMP_ADDR_54	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx movzx eax [rax] movsx eax al cmp eax CONST jz JUMP_ADDR_52	cmp eax CONST jg JUMP_ADDR_84	cmp eax CONST jz JUMP_ADDR_50	cmp eax CONST jz JUMP_ADDR_51	jmp JUMP_ADDR_84	or [rbp+var_xxx] CONST jmp JUMP_ADDR_53	or [rbp+var_xxx] CONST jmp JUMP_ADDR_53	or [rbp+var_xxx] CONST nop	jmp JUMP_ADDR_55	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_85	movsx eax [rbp+var_xxx] sub eax CONST cmp eax CONST ja JUMP_ADDR_72	mov eax eax lea rdx ds:xxx lea rax unk_xxx mov eax [rdx+rax] cdqe lea rdx unk_xxx add rax rdx jmp rax	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_64	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_60	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_62	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_70	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx jmp JUMP_ADDR_70	nop mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_66	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_68	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_71	mov edx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx edx mov edx CONST mov rdi rax call sub_xxx jmp JUMP_ADDR_71	nop jmp JUMP_ADDR_72	nop	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jz JUMP_ADDR_74	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_76	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_86	mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx movzx eax [rax] mov [rbp+var_xxx] al call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movsx rax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jz JUMP_ADDR_87	mov rax [rbp+var_xxx] movzx eax [rax] test al al jz JUMP_ADDR_13	call sub_xxx mov rdx [rax] mov rax [rbp+var_xxx] movzx eax [rax] movsx rax al add rax rax add rax rdx movzx eax [rax] movzx eax ax and eax CONST test eax eax jz JUMP_ADDR_43	jmp JUMP_ADDR_13	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop jmp JUMP_ADDR_88	nop	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST call sub_xxx mov [rax] CONST mov rax [rbp+var_xxx]	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_91	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_from_name
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi lea rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST js JUMP_ADDR_3	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_3	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax] edx	mov eax [rbp+var_xxx] shr eax CONST movzx eax al neg eax leave retn
[ph]libcap-git-setcap_cap_to_name
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax cmp [rbp+var_xxx] CONST js JUMP_ADDR_2	cmp [rbp+var_xxx] CONST jle JUMP_ADDR_3	mov edx [rbp+var_xxx] lea rax [rbp+var_xxx] lea rcx unk_xxx mov rsi rcx mov rdi rax mov eax CONST call sub_xxx mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov rax [rbp+var_xxx] jmp JUMP_ADDR_4	mov eax [rbp+var_xxx] cdqe lea rdx ds:xxx lea rax off_xxx mov rax [rdx+rax] mov rdi rax call sub_xxx	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_6	call sub_xxx	leave retn
[ph]libcap-git-setcap_getstateflags
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sar eax CONST mov rcx [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov edx [rax] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi and eax edx test eax eax jz JUMP_ADDR_2	or [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] sar eax CONST mov rcx [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov edx [rax] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi and eax edx test eax eax jz JUMP_ADDR_4	or [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] sar eax CONST mov rcx [rbp+var_xxx] movsxd rdx eax mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov edx [rax] mov eax [rbp+var_xxx] and eax CONST mov esi CONST mov ecx eax shl esi cl mov eax esi and eax edx test eax eax jz JUMP_ADDR_6	or [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] pop rbp retn
[ph]libcap-git-setcap_cap_to_text
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_86	lea rax [rbp+var_xxx] mov edx CONST mov esi CONST mov rdi rax call cs:xxx call sub_xxx mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx movsxd rdx eax mov edx [rbp+rdx*4+var_xxx] add edx CONST cdqe mov [rbp+rax*4+var_xxx] edx add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jb JUMP_ADDR_4	mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_9	mov eax [rbp+var_xxx] cdqe mov edx [rbp+rax*4+var_xxx] mov eax [rbp+var_xxx] cdqe mov eax [rbp+rax*4+var_xxx] cmp edx eax jl JUMP_ADDR_9	mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_7	lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_12	lea rcx unk_xxx jmp JUMP_ADDR_13	lea rcx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_15	lea rdx unk_xxx jmp JUMP_ADDR_16	lea rdx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_18	lea rax unk_xxx jmp JUMP_ADDR_19	lea rax unk_xxx	lea rdi [rbp+var_xxx] mov r8 rcx mov rcx rdx mov rdx rax lea rax GLOBAL_VAR mov rsi rax mov eax CONST call sub_xxx cdqe lea rdx [rbp+var_xxx] add rax rdx mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST jmp JUMP_ADDR_57	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jz JUMP_ADDR_57	mov eax [rbp+var_xxx] cdqe mov eax [rbp+rax*4+var_xxx] test eax eax jnz JUMP_ADDR_23	jmp JUMP_ADDR_57	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_29	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx cmp [rbp+var_xxx] eax jnz JUMP_ADDR_28	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdi rax call cs:xxx mov rdx rax lea rcx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rax rcx add rax rdx cmp rax CONST jbe JUMP_ADDR_27	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_86	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] lea rcx GLOBAL_VAR mov rsi rcx mov rdi rax mov eax CONST call sub_xxx cdqe add [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx	add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jb JUMP_ADDR_24	sub [rbp+var_xxx] CONST mov eax [rbp+var_xxx] not eax and eax [rbp+var_xxx] mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_44	mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_34	mov rax [rbp+var_xxx] add rax CONST movzx eax [rax] cmp al CONST jnz JUMP_ADDR_34	add [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_36	lea rcx unk_xxx jmp JUMP_ADDR_37	lea rcx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_39	lea rdx unk_xxx jmp JUMP_ADDR_40	lea rdx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_42	lea rax unk_xxx jmp JUMP_ADDR_43	lea rax unk_xxx	movsx esi [rbp+var_xxx] mov rdi [rbp+var_xxx] mov r9 rcx mov r8 rdx mov rcx rax mov edx esi lea rax GLOBAL_VAR mov rsi rax mov eax CONST call sub_xxx cdqe add [rbp+var_xxx] rax	mov eax [rbp+var_xxx] not eax and eax [rbp+var_xxx] mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_55	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_47	lea rcx unk_xxx jmp JUMP_ADDR_48	lea rcx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_50	lea rdx unk_xxx jmp JUMP_ADDR_51	lea rdx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_53	lea rax unk_xxx jmp JUMP_ADDR_54	lea rax unk_xxx	mov rdi [rbp+var_xxx] mov r8 rcx mov rcx rdx mov rdx rax lea rax GLOBAL_VAR mov rsi rax mov eax CONST call sub_xxx cdqe add [rbp+var_xxx] rax	lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rax rdx cmp rax CONST jle JUMP_ADDR_57	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_86	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx test eax eax jnz JUMP_ADDR_20	lea rax [rbp+var_xxx] mov edx CONST mov esi CONST mov rdi rax call cs:xxx mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_60	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx movsxd rdx eax mov edx [rbp+rdx*4+var_xxx] add edx CONST cdqe mov [rbp+rax*4+var_xxx] edx add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_59	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_82	mov eax [rbp+var_xxx] cdqe mov eax [rbp+rax*4+var_xxx] test eax eax jnz JUMP_ADDR_64	jmp JUMP_ADDR_82	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_70	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] mov esi edx mov rdi rax call sub_xxx cmp [rbp+var_xxx] eax jnz JUMP_ADDR_69	mov eax [rbp+var_xxx] mov edi eax call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdi rax call cs:xxx mov rdx rax lea rcx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rax rcx add rax rdx cmp rax CONST jbe JUMP_ADDR_68	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_86	mov rdx [rbp+var_xxx] mov rax [rbp+var_xxx] lea rcx GLOBAL_VAR mov rsi rcx mov rdi rax mov eax CONST call sub_xxx cdqe add [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov rdi rax call sub_xxx	add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_65	sub [rbp+var_xxx] CONST mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_73	lea rcx unk_xxx jmp JUMP_ADDR_74	lea rcx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_76	lea rdx unk_xxx jmp JUMP_ADDR_77	lea rdx unk_xxx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_79	lea rax unk_xxx jmp JUMP_ADDR_80	lea rax unk_xxx	mov rdi [rbp+var_xxx] mov r8 rcx mov rcx rdx mov rdx rax lea rax GLOBAL_VAR mov rsi rax mov eax CONST call sub_xxx cdqe add [rbp+var_xxx] rax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] sub rax rdx cmp rax CONST jle JUMP_ADDR_82	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_86	mov eax [rbp+var_xxx] lea edx [rax+CONST] mov [rbp+var_xxx] edx cmp eax CONST jg JUMP_ADDR_62	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_85	mov rax [rbp+var_xxx] sub rax [rbp+var_xxx] mov rdx rax mov rax [rbp+var_xxx] mov [rax] rdx	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_88	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_mode_name
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] edi cmp [rbp+var_xxx] CONST jz JUMP_ADDR_8	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_10	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_7	cmp [rbp+var_xxx] CONST ja JUMP_ADDR_10	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_9	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_10	lea rax GLOBAL_VAR jmp JUMP_ADDR_11	lea rax GLOBAL_VAR jmp JUMP_ADDR_11	lea rax GLOBAL_VAR jmp JUMP_ADDR_11	lea rax GLOBAL_VAR jmp JUMP_ADDR_11	lea rax GLOBAL_VAR	pop rbp retn
[ph]libcap-git-setcap_cap_iab_to_text
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax call sub_xxx mov [rbp+var_xxx] eax mov [rbp+var_xxx] CONST cmp [rbp+var_xxx] CONST jz JUMP_ADDR_22	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jnz JUMP_ADDR_22	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_21	mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4] and eax [rbp+var_xxx] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx mov eax [rax+rdx*4+CONST] and eax [rbp+var_xxx] mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] movsxd rdx edx add rdx CONST mov eax [rax+rdx*4] and eax [rbp+var_xxx] mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] or eax [rbp+var_xxx] or eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_19	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_6	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_8	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_10	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_13	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_13	mov rax [rbp+var_xxx] lea rdx [rax+CONST] mov [rbp+var_xxx] rdx mov [rax] CONST	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_15	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_20	cmp [rbp+var_xxx] CONST jg JUMP_ADDR_17	mov eax [rbp+var_xxx] cdqe lea rdx ds:xxx lea rax off_xxx mov rdx [rdx+rax] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call cs:xxx jmp JUMP_ADDR_18	mov edx [rbp+var_xxx] mov rax [rbp+var_xxx] lea rcx unk_xxx mov rsi rcx mov rdi rax mov eax CONST call sub_xxx	mov rax [rbp+var_xxx] mov rdi rax call cs:xxx add [rbp+var_xxx] rax mov [rbp+var_xxx] CONST jmp JUMP_ADDR_20	nop	add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jl JUMP_ADDR_3	mov rax [rbp+var_xxx] mov [rax] CONST lea rax [rbp+var_xxx] mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_24	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_iab_from_text
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi call sub_xxx mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_26	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_23	mov rax [rbp+var_xxx] movzx eax [rax] movsx eax al cmp eax CONST jz JUMP_ADDR_8	cmp eax CONST jg JUMP_ADDR_10	cmp eax CONST jz JUMP_ADDR_7	cmp eax CONST jz JUMP_ADDR_9	jmp JUMP_ADDR_10	or [rbp+var_xxx] CONST jmp JUMP_ADDR_22	or [rbp+var_xxx] CONST jmp JUMP_ADDR_22	or [rbp+var_xxx] CONST jmp JUMP_ADDR_22	nop cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_12	mov [rbp+var_xxx] CONST	lea rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_27	mov eax [rbp+var_xxx] sar eax CONST mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST mov edx CONST mov ecx eax shl edx cl mov eax edx mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_15	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4] or eax [rbp+var_xxx] mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4] ecx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_17	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov eax [rax+rdx*4+CONST] or eax [rbp+var_xxx] mov ecx eax mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*4+CONST] ecx	mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_19	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] add rdx CONST mov eax [rax+rdx*4] or eax [rbp+var_xxx] mov edx eax mov rax [rbp+var_xxx] mov ecx [rbp+var_xxx] add rcx CONST mov [rax+rcx*4] edx	mov rax [rbp+var_xxx] movzx eax [rax] test al al jz JUMP_ADDR_25	mov rax [rbp+var_xxx] movzx eax [rax] cmp al CONST jnz JUMP_ADDR_28	mov [rbp+var_xxx] CONST	mov rax [rbp+var_xxx] add rax CONST mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] movzx eax [rax] test al al jnz JUMP_ADDR_2	jmp JUMP_ADDR_26	nop	mov rax [rbp+var_xxx] jmp JUMP_ADDR_30	nop jmp JUMP_ADDR_29	nop	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx call sub_xxx mov [rax] CONST mov eax CONST	leave retn
[ph]libcap-git-setcap__fcaps_load
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] edx mov rax [rbp+var_xxx] mov eax [rax] mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_7	cmp eax CONST ja JUMP_ADDR_8	cmp eax CONST jz JUMP_ADDR_5	cmp eax CONST jz JUMP_ADDR_6	jmp JUMP_ADDR_8	mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sub eax CONST mov [rbp+var_xxx] eax jmp JUMP_ADDR_9	mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sub eax CONST mov [rbp+var_xxx] eax jmp JUMP_ADDR_9	mov [rbp+var_xxx] CONST mov eax [rbp+var_xxx] sub eax CONST mov [rbp+var_xxx] eax mov rax [rbp+var_xxx] mov edx [rax+CONST] mov rax [rbp+var_xxx] mov [rax+CONST] edx jmp JUMP_ADDR_9	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] jmp JUMP_ADDR_20	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_11	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] jmp JUMP_ADDR_20	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_15	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov edx [rax+rdx*8+CONST] mov rsi [rbp+var_xxx] mov ecx [rbp+var_xxx] mov rax rcx add rax rax add rax rcx shl rax CONST add rax rsi add rax CONST mov [rax] edx mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov edx [rax+rdx*8+CONST] mov rsi [rbp+var_xxx] mov ecx [rbp+var_xxx] mov rax rcx add rax rax add rax rcx shl rax CONST add rax rsi add rax CONST mov [rax] edx mov eax [rbp+var_xxx] and eax CONST test eax eax jz JUMP_ADDR_14	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rsi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov eax [rax] or ecx eax mov rsi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov [rax] ecx	add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jb JUMP_ADDR_12	jmp JUMP_ADDR_18	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov [rax] CONST mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov edx [rax] mov rsi [rbp+var_xxx] mov ecx [rbp+var_xxx] mov rax rcx add rax rax add rax rcx shl rax CONST add rax rsi add rax CONST mov [rax] edx mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov edx [rax] mov rsi [rbp+var_xxx] mov ecx [rbp+var_xxx] mov rax rcx add rax rax add rax rcx shl rax CONST add rax rsi add rax CONST mov [rax] edx add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_17	mov rax [rbp+var_xxx]	leave retn
[ph]libcap-git-setcap__fcaps_save
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_2	mov rax [rbp+var_xxx] sub rax CONST mov eax [rax] cmp eax CONST jz JUMP_ADDR_3	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_35	mov rax [rbp+var_xxx] mov eax [rax] cmp eax CONST jz JUMP_ADDR_9	cmp eax CONST ja JUMP_ADDR_10	cmp eax CONST jz JUMP_ADDR_8	cmp eax CONST jz JUMP_ADDR_9	jmp JUMP_ADDR_10	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_11	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_11	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_35	mov rax [rbp+var_xxx] mov eax [rax+CONST] test eax eax jz JUMP_ADDR_15	mov rax [rbp+var_xxx] mov eax [rax] cmp eax CONST ja JUMP_ADDR_14	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_35	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov rax [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] mov edx [rax+CONST] mov rax [rbp+var_xxx] mov [rax+CONST] edx	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_17	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov eax [rax] or [rbp+var_xxx] eax add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jb JUMP_ADDR_16	jmp JUMP_ADDR_24	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov eax [rax] test eax eax jnz JUMP_ADDR_22	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov eax [rax] test eax eax jnz JUMP_ADDR_22	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov eax [rax] test eax eax jz JUMP_ADDR_23	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_35	add [rbp+var_xxx] CONST	cmp [rbp+var_xxx] CONST jbe JUMP_ADDR_19	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_30	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*8+CONST] ecx mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+rdx*8+CONST] ecx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_29	mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov eax [rax] not eax mov edi eax mov rcx [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rcx add rax CONST mov ecx [rax] mov rsi [rbp+var_xxx] mov edx [rbp+var_xxx] mov rax rdx add rax rax add rax rdx shl rax CONST add rax rsi add rax CONST mov eax [rax] or eax ecx and eax edi test eax eax jz JUMP_ADDR_29	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_35	add [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] cmp eax [rbp+var_xxx] jb JUMP_ADDR_26	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_33	mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax] edx jmp JUMP_ADDR_34	mov eax [rbp+var_xxx] or eax CONST mov edx eax mov rax [rbp+var_xxx] mov [rax] edx	mov eax CONST	leave retn
[ph]libcap-git-setcap_cap_get_fd
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	lea rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov ecx CONST lea rsi GLOBAL_VAR mov edi eax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jg JUMP_ADDR_3	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_4	mov edx [rbp+var_xxx] mov rcx [rbp+var_xxx] lea rax [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_6	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_get_file
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov [rbp+var_xxx] rax cmp [rbp+var_xxx] CONST jz JUMP_ADDR_4	lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov ecx CONST lea rsi GLOBAL_VAR mov rdi rax call sub_xxx mov [rbp+var_xxx] eax cmp [rbp+var_xxx] CONST jg JUMP_ADDR_3	mov rax [rbp+var_xxx] mov rdi rax call sub_xxx mov [rbp+var_xxx] CONST jmp JUMP_ADDR_4	mov edx [rbp+var_xxx] mov rcx [rbp+var_xxx] lea rax [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_6	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_get_nsowner
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov rax [rbp+var_xxx] mov eax [rax+CONST] pop rbp retn
[ph]libcap-git-setcap_cap_set_fd
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov rsi rdx mov edi eax call sub_xxx test eax eax jz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_10	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_4	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_10	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_7	mov eax [rbp+var_xxx] lea rdx GLOBAL_VAR mov rsi rdx mov edi eax call sub_xxx jmp JUMP_ADDR_10	lea rdx [rbp+var_xxx] mov rcx [rbp+var_xxx] lea rax [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_9	mov eax CONST jmp JUMP_ADDR_10	mov eax [rbp+var_xxx] movsxd rcx eax lea rdx [rbp+var_xxx] mov eax [rbp+var_xxx] mov r8d CONST lea rsi GLOBAL_VAR mov edi eax call sub_xxx	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_12	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_set_file
endbr64 push rbp mov rbp rsp sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov rsi rdx mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_10	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_4	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_5	call sub_xxx mov [rax] CONST mov eax CONST jmp JUMP_ADDR_10	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_7	mov rax [rbp+var_xxx] lea rdx GLOBAL_VAR mov rsi rdx mov rdi rax call sub_xxx jmp JUMP_ADDR_10	lea rdx [rbp+var_xxx] mov rcx [rbp+var_xxx] lea rax [rbp+var_xxx] mov rsi rcx mov rdi rax call sub_xxx test eax eax jz JUMP_ADDR_9	mov eax CONST jmp JUMP_ADDR_10	mov eax [rbp+var_xxx] movsxd rcx eax lea rdx [rbp+var_xxx] mov rax [rbp+var_xxx] mov r8d CONST lea rsi GLOBAL_VAR mov rdi rax call sub_xxx	mov rdx [rbp+var_xxx] sub rdx fs:xxx jz JUMP_ADDR_12	call sub_xxx	leave retn
[ph]libcap-git-setcap_cap_set_nsowner
endbr64 push rbp mov rbp rsp mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov rax [rbp+var_xxx] mov edx [rbp+var_xxx] mov [rax+CONST] edx mov eax CONST pop rbp retn
[ph]libcap-git-setcap_handle_zhaoxin
push r12 mov eax CONST xor ecx ecx push rbp push rbx cpuid mov edx eax and edx CONST jz JUMP_ADDR_15	mov r8d edi lea r11d [CONST_VAR+CONST] xor esi esi lea ebp [CONST_VAR+CONST] lea r10d [CONST_VAR+CONST] lea r9d [CONST_VAR+CONST] mov edi CONST jmp JUMP_ADDR_4	cmp r9d CONST jbe JUMP_ADDR_10	add esi CONST mov eax edi mov ecx esi cpuid mov edx eax and edx CONST jz JUMP_ADDR_15	shr eax CONST and eax CONST cmp eax CONST setz r12b cmp edx CONST jnz JUMP_ADDR_6	test r12b r12b jnz JUMP_ADDR_2	cmp edx CONST jnz JUMP_ADDR_16	test r12b r12b jz JUMP_ADDR_16	cmp r10d CONST ja JUMP_ADDR_3	nop [rax+CONST]	lea eax [r8+CONST] mov edx CONST mov r8 rax imul rax rdx shr rax CONST lea edx [rax+rax*2] mov eax r8d sub eax edx jz JUMP_ADDR_14	sub eax CONST jz JUMP_ADDR_21	and ebx CONST lea rax [rbx+CONST]	pop rbx pop rbp pop r12 retn	mov eax ebx mov edx ebx add ecx CONST shr ebx CONST shr eax CONST and edx CONST and ebx CONST add edx CONST add eax CONST imul eax edx lea edx [rbx+CONST] imul eax ecx imul eax edx jmp JUMP_ADDR_13	xor eax eax jmp JUMP_ADDR_13	cmp r11d CONST ja JUMP_ADDR_18	cmp eax CONST jz JUMP_ADDR_10	cmp ebp CONST ja JUMP_ADDR_3	cmp eax CONST jz JUMP_ADDR_10	jmp JUMP_ADDR_3	mov eax ebx shr eax CONST add eax CONST jmp JUMP_ADDR_13
[ph]libcap-git-setcap_handle_amd
push rbx mov eax CONST cpuid xor edx edx cmp edi CONST setnle dl xor r8d r8d sub edx CONST cmp edx eax ja JUMP_ADDR_6	mov esi edi mov eax edx cpuid cmp edi CONST jle JUMP_ADDR_7	sub esi CONST cmp esi CONST ja JUMP_ADDR_29	lea rdi unk_xxx movsxd rax [CONST_VAR+rsi*4] add rax rdi jmp rax	xor r8d r8d test ch CONST jz JUMP_ADDR_6	movzx r8d cl	mov rax r8 pop rbx retn	add esi CONST mov ecx edx jmp JUMP_ADDR_2	shr ecx CONST movzx r8d cl cmp r8d CONST jnz JUMP_ADDR_6	lea r8d ds:xxx and r8d CONST jmp JUMP_ADDR_6	xor r8d r8d test ch CONST jz JUMP_ADDR_6	shr ecx CONST mov r8d ecx and r8d CONST jmp JUMP_ADDR_6	mov r8d ecx lea rsi unk_xxx shr r8d CONST mov edx r8d and edx CONST movsxd rax [CONST_VAR+rdx*4] add rax rsi jmp rax	xor r8d r8d test dh CONST jz JUMP_ADDR_6	lea r8d [rdx+rdx] and r8d CONST jmp JUMP_ADDR_6	mov r8d edx lea rcx unk_xxx shr r8d CONST and r8d CONST movsxd rax [rcx+r8*4] add rax rcx jmp rax	xor r8d r8d test dh CONST jz JUMP_ADDR_6	movzx r8d dl jmp JUMP_ADDR_6	mov r8 rdx jmp JUMP_ADDR_6	xor r8d r8d jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov r8d CONST jmp JUMP_ADDR_6	mov eax ecx xor edx edx movzx ecx cl shr eax CONST and eax CONST div ecx mov r8d eax jmp JUMP_ADDR_6	lea eax [rdx+rdx] movzx ecx dl xor edx edx and eax CONST div ecx mov r8d eax jmp JUMP_ADDR_6	shr ecx CONST mov r8d ecx and r8d CONST jmp JUMP_ADDR_6
[ph]libcap-git-setcap_get_common_indices.constprop.0
push rbx test rdi rdi jz JUMP_ADDR_2	mov r8 rdx mov r9 rcx mov eax CONST cpuid mov cs:xxx edx mov edx eax shr edx CONST mov cs:xxx ebx and edx CONST mov cs:xxx ecx mov cs:xxx eax mov [CONST_VAR] edx mov edx eax shr edx CONST and edx CONST mov [CONST_VAR] edx mov edx eax shr edx CONST and edx CONST mov [r8] edx mov edx eax and edx CONST mov [r9] edx cmp [CONST_VAR] CONST jz JUMP_ADDR_9	cmp cs:xxx CONST jle JUMP_ADDR_4	mov esi CONST xor ecx ecx mov eax esi cpuid mov cs:xxx eax mov eax esi mov cs:xxx ecx mov ecx CONST mov cs:xxx ebx mov cs:xxx edx cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx	cmp cs:xxx CONST jle JUMP_ADDR_6	mov eax CONST mov ecx CONST cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx	cmp cs:xxx CONST jle JUMP_ADDR_8	mov eax CONST xor ecx ecx cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx	pop rbx retn	shr eax CONST movzx eax al add eax CONST mov [CONST_VAR] eax mov eax [r8] add [CONST_VAR] eax jmp JUMP_ADDR_2
[ph]libcap-git-setcap_get_extended_indices.constprop.0
push rbx mov eax CONST cpuid cmp eax CONST jbe JUMP_ADDR_4	mov esi eax mov eax CONST cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx cmp esi CONST jbe JUMP_ADDR_4	mov eax CONST cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx cmp esi CONST jz JUMP_ADDR_4	mov eax CONST cpuid mov cs:xxx eax mov cs:xxx ebx mov cs:xxx ecx mov cs:xxx edx	pop rbx retn
[ph]libcap-git-setcap_get_common_cache_info.constprop.0
push r15 mov eax cs:xxx mov r10 rdi mov r15 rsi push r14 mov r11 rdx mov r14d cs:xxx push r13 push r12 push rbp mov ebp cs:xxx push rbx mov r9 [CONST_VAR] mov [rsp+CONST+var_xxx] eax mov eax cs:xxx mov [rsp+CONST+var_xxx] eax test r9 r9 jle JUMP_ADDR_27	mov [rsp+CONST+var_xxx] CONST xor r13d r13d	mov edi cs:xxx and edi CONST jz JUMP_ADDR_13	cmp r14d CONST jg JUMP_ADDR_14	mov [rsp+CONST+var_xxx] CONST xor esi esi	movzx edi cs:xxx	test r9 r9 jle JUMP_ADDR_9	test edi edi jz JUMP_ADDR_9	mov rax r9 mov ecx edi cqo idiv rcx mov r9 rax	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_13	test esi esi jz JUMP_ADDR_12	mov rax r11 movsxd rsi esi cqo idiv rsi mov r11 rax	add r9 r11	pop rbx pop rbp mov [r10] r9 pop r12 pop r13 mov [r15] edi pop r14 pop r15 retn	mov r8d CONST test r13d r13d jnz JUMP_ADDR_52	mov [rsp+CONST+var_xxx] CONST xor ecx ecx xor esi esi mov r12d CONST xchg ax ax	lea edi [rcx+CONST] mov eax r12d cpuid cmp ebp CONST jz JUMP_ADDR_23	mov ecx eax shr ecx CONST and ecx CONST cmp ecx CONST jz JUMP_ADDR_25	cmp ecx CONST jnz JUMP_ADDR_22	test r8b CONST jz JUMP_ADDR_22	shr eax CONST shr edx CONST and r8d CONST and eax CONST mov r13d eax mov eax edx and eax CONST mov [rsp+CONST+var_xxx] al	test r8d r8d jz JUMP_ADDR_28	mov ecx edi jmp JUMP_ADDR_16	test al CONST jz JUMP_ADDR_5	mov ecx eax shr ecx CONST and ecx CONST cmp ecx CONST jnz JUMP_ADDR_18	test r8b CONST jz JUMP_ADDR_22	shr eax CONST and r8d CONST and eax CONST mov esi eax jmp JUMP_ADDR_21	mov [rsp+CONST+var_xxx] CONST mov r9 rdx or r13d CONST jmp JUMP_ADDR_2	cmp [rsp+CONST+var_xxx] CONST setz [rsp+CONST+var_xxx] cmp ebp CONST movzx ebx [rsp+CONST+var_xxx] setz al test bl al jnz JUMP_ADDR_42	cmp r14d CONST jle JUMP_ADDR_42	mov ebx [rsp+CONST+var_xxx] test esi esi setnle dl xor eax eax cmp ebx CONST setz al and eax edx mov edi eax or edi CONST test r13d r13d jle JUMP_ADDR_60	mov eax CONST xor ecx ecx cpuid movzx ebx bl and ecx CONST jz JUMP_ADDR_42	test ebx ebx jz JUMP_ADDR_42	mov edx CONST or r14d CONST mov r12d CONST jmp JUMP_ADDR_38	cmp ecx CONST jz JUMP_ADDR_53	lea r8d [rdx+CONST] mov eax r12d mov ecx edx cpuid and ecx CONST and ebx CONST jz JUMP_ADDR_42	test ecx ecx jz JUMP_ADDR_42	mov edx r8d	cmp ecx CONST jnz JUMP_ADDR_34	test dil CONST jz JUMP_ADDR_35	bsr ecx esi mov esi r14d add ecx CONST sub ebx CONST and edi CONST shl esi cl not esi and esi ebx	test edi edi jnz JUMP_ADDR_35	test esi esi jz JUMP_ADDR_44	add esi CONST	test r13d r13d jle JUMP_ADDR_57	cmp [rsp+CONST+var_xxx] CONST lea edi [r13+CONST] jnz JUMP_ADDR_6	test esi esi jz JUMP_ADDR_63	sub ebp CONST mov edi esi jnz JUMP_ADDR_6	cmp esi CONST jbe JUMP_ADDR_6	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_6	mov ecx [rsp+CONST+var_xxx] sub ecx CONST cmp ecx CONST ja JUMP_ADDR_6	mov rax CONST mov edi CONST shr rax cl test al CONST cmovz edi esi jmp JUMP_ADDR_6	mov r8d CONST or r13d CONST jmp JUMP_ADDR_15	test dil CONST jz JUMP_ADDR_35	sub ebx CONST cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_65	bsr ecx r13d mov r13d r14d add ecx CONST shl r13d cl not r13d and r13d ebx	and edi CONST jmp JUMP_ADDR_41	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_46	xor edi edi test r13d r13d jz JUMP_ADDR_9	or edi CONST jmp JUMP_ADDR_6	xor edi edi cmp ebx CONST setz dil and edi edx add edi edi or edi eax jnz JUMP_ADDR_31	test esi esi jnz JUMP_ADDR_43	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_58	xor edi edi cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_12	jmp JUMP_ADDR_13	bsr ecx esi mov esi r14d add ecx CONST shl esi cl not esi and esi ebx jmp JUMP_ADDR_56
[ph]libcap-git-setcap_intel_check_word.constprop.0
test esi esi js JUMP_ADDR_22	mov r11d edi push r12 mov edi esi push rbp lea eax [r11+CONST] mov rbp rdx mov edx CONST imul rax rdx push rbx shr rax CONST lea r10d [rax+rax*2] test esi esi jz JUMP_ADDR_20	cmp cs:xxx CONST mov rbx rcx lea r9 unk_xxx setz r12b cmp cs:xxx CONST setz al and r12d eax jmp JUMP_ADDR_5	mov [rbx] CONST cmp r10d CONST jz JUMP_ADDR_20	shr edi CONST jz JUMP_ADDR_20	movzx eax dil cmp dil CONST jz JUMP_ADDR_3	cmp eax CONST jz JUMP_ADDR_23	cmp eax CONST jnz JUMP_ADDR_11	cmp r10d CONST jnz JUMP_ADDR_11	test r12b r12b jz JUMP_ADDR_11	sub r11d CONST mov r10d CONST	mov r8d edi mov ecx CONST xor edx edx jmp JUMP_ADDR_14	mov rcx rax	cmp rcx rdx jbe JUMP_ADDR_4	lea rax [rdx+rcx] shr rax CONST lea rsi [r9+rax*8] cmp r8b [CONST_VAR] jz JUMP_ADDR_17	jb JUMP_ADDR_12	lea rdx [rax+CONST] jmp JUMP_ADDR_13	movzx edx [CONST_VAR+CONST] cmp edx r10d jz JUMP_ADDR_36	cmp dl CONST jnz JUMP_ADDR_4	shr edi CONST mov [rbp+CONST] CONST jnz JUMP_ADDR_5	xor eax eax	pop rbx pop rbp pop r12 retn	xor eax eax retn	mov eax CONST xor ecx ecx cpuid mov edx eax and edx CONST jz JUMP_ADDR_20	xor esi esi mov edi CONST jmp JUMP_ADDR_28	test r8b r8b jz JUMP_ADDR_29	cmp r10d CONST jz JUMP_ADDR_32	add esi CONST mov eax edi mov ecx esi cpuid mov edx eax and edx CONST jz JUMP_ADDR_20	shr eax CONST and eax CONST cmp eax CONST setz r8b cmp edx CONST jz JUMP_ADDR_25	cmp edx CONST jnz JUMP_ADDR_43	test r8b r8b jz JUMP_ADDR_43	test r10d r10d jnz JUMP_ADDR_27	lea eax [r11+CONST] sub eax r10d jz JUMP_ADDR_41	cmp eax CONST jz JUMP_ADDR_50	cmp eax CONST jnz JUMP_ADDR_52	and ebx CONST lea rax [rbx+CONST] jmp JUMP_ADDR_21	lea eax [r11+CONST] sub eax r10d jz JUMP_ADDR_42	cmp eax CONST jz JUMP_ADDR_40	cmp eax CONST jnz JUMP_ADDR_51	movzx eax [CONST_VAR+CONST] jmp JUMP_ADDR_21	movzx eax [CONST_VAR+CONST] jmp JUMP_ADDR_21	mov eax ebx mov edx ebx add ecx CONST shr ebx CONST shr eax CONST and edx CONST add edx CONST add eax CONST imul eax edx mov edx ebx and edx CONST add edx CONST imul eax ecx imul eax edx jmp JUMP_ADDR_21	mov eax [CONST_VAR+CONST] jmp JUMP_ADDR_21	cmp eax CONST jnz JUMP_ADDR_45	cmp r10d CONST jz JUMP_ADDR_32	cmp eax CONST jnz JUMP_ADDR_47	cmp r10d CONST jz JUMP_ADDR_32	cmp eax CONST jnz JUMP_ADDR_27	cmp r10d CONST jz JUMP_ADDR_32	jmp JUMP_ADDR_27	mov eax ebx shr eax CONST add eax CONST jmp JUMP_ADDR_21	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_handle_intel.constprop.0
cmp cs:xxx CONST jbe JUMP_ADDR_13	push r15 push r14 mov r14d CONST push r13 push r12 push rbp mov ebp edi push rbx sub rsp CONST mov [rsp+CONST+var_xxx] CONST lea r13 [rsp+CONST+var_xxx] lea r12 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_3	mov r14d edx	mov eax CONST cpuid mov [rsp+CONST+var_xxx] edx mov r15d ecx mov esi eax cmp r14d CONST jnz JUMP_ADDR_5	movzx eax al xor sil sil mov [rsp+CONST+var_xxx] eax	mov rcx r13 mov rdx r12 mov edi ebp call sub_xxx test rax rax jnz JUMP_ADDR_12	mov rcx r13 mov rdx r12 mov esi ebx mov edi ebp call sub_xxx test rax rax jnz JUMP_ADDR_12	mov rcx r13 mov rdx r12 mov esi r15d mov edi ebp call sub_xxx test rax rax jnz JUMP_ADDR_12	mov esi [rsp+CONST+var_xxx] mov rcx r13 mov rdx r12 mov edi ebp call sub_xxx test rax rax jnz JUMP_ADDR_12	lea edx [r14+CONST] cmp [rsp+CONST+var_xxx] r14d ja JUMP_ADDR_2	sub ebp CONST cmp ebp CONST ja JUMP_ADDR_12	movzx eax [rsp+CONST+var_xxx] neg rax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	or rax CONST retn
[ph]libcap-git-setcap_update_usable.constprop.0
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r8d cs:xxx mov edi cs:xxx mov r13d cs:xxx mov r15d cs:xxx mov edx r8d mov eax r8d mov r9d r8d mov r14d cs:xxx and edx CONST and eax CONST mov esi r13d mov ecx edi or eax cs:xxx mov r10d r15d mov ebx edi mov r12d r14d or eax edx and esi CONST and ecx CONST and r9d CONST or r9d eax mov eax cs:xxx mov [rsp+CONST+var_xxx] ecx and r10d CONST or esi cs:xxx or r10d cs:xxx and ebx CONST and r12d CONST mov [rsp+CONST+var_xxx] eax mov r11d eax mov eax cs:xxx or ebx cs:xxx or r12d cs:xxx and r11d CONST mov cs:xxx esi and eax CONST or cs:xxx eax mov eax cs:xxx or r11d cs:xxx mov cs:xxx r10d and eax CONST mov cs:xxx r9d mov cs:xxx ebx mov cs:xxx r12d mov cs:xxx r11d or cs:xxx eax mov eax cs:xxx mov ebp eax mov [rsp+CONST+var_xxx] eax and ebp CONST or ebp cs:xxx mov cs:xxx ebp test edx edx jz JUMP_ADDR_4	xor ecx ecx xgetbv mov edx eax and edx CONST cmp edx CONST jz JUMP_ADDR_25	and eax CONST cmp eax CONST jz JUMP_ADDR_31	mov r8d cs:xxx or cs:xxx CONST mov ebp r8d and ebp CONST or ebp cs:xxx cmp cs:xxx CONST mov cs:xxx ebp jg JUMP_ADDR_10	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_6	or cs:xxx CONST	mov eax cs:xxx test al CONST jz JUMP_ADDR_8	and eax CONST or eax cs:xxx and edi CONST or cs:xxx edi or eax CONST mov cs:xxx eax	mov edx esi xor eax eax and edx CONST cmp edx CONST jz JUMP_ADDR_22	mov cs:xxx eax add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax CONST xor ecx ecx cpuid test ebx ebx jz JUMP_ADDR_4	add ebx CONST and ebx CONST and r8b CONST mov eax ebx mov cs:xxx ebx mov cs:xxx rax jz JUMP_ADDR_4	lea r9 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea r10 [rsp+CONST+var_xxx] mov r11d CONST mov r8d CONST mov r12d CONST mov r14d CONST jmp JUMP_ADDR_19	mov eax r14d mov ecx r8d cpuid mov [r9+CONST] eax cmp r8d CONST jz JUMP_ADDR_18	mov eax [r9] add eax [r10+CONST] and ecx CONST jz JUMP_ADDR_16	add eax CONST and eax CONST	mov [r10] eax	cmp r11d CONST jz JUMP_ADDR_32	add r8d CONST add r11d CONST add r9 CONST add r10 CONST	bt r12d r8d jb JUMP_ADDR_13	mov [r9+CONST] CONST cmp r8d CONST jz JUMP_ADDR_18	mov eax [r9] add eax [r10+CONST] mov [r10] eax jmp JUMP_ADDR_17	mov eax r13d and eax CONST jz JUMP_ADDR_9	and esi CONST cmp esi CONST jz JUMP_ADDR_34	xor eax eax jmp JUMP_ADDR_9	test r8d CONST jz JUMP_ADDR_28	or r9d CONST test r15b CONST jnz JUMP_ADDR_44	mov edx [rsp+CONST+var_xxx] and r8d CONST or r8d r9d and edx CONST mov cs:xxx r8d or edx ebp mov cs:xxx edx mov edx edi and edx CONST or edx ebx mov cs:xxx edx mov edx [rsp+CONST+var_xxx] and edx CONST or edx r11d mov cs:xxx edx	mov edx eax and edx CONST cmp edx CONST jnz JUMP_ADDR_2	test r15d CONST jz JUMP_ADDR_2	mov edx edi and r15d CONST or r15d cs:xxx and edx CONST or cs:xxx edx mov edx [rsp+CONST+var_xxx] or r15d CONST mov cs:xxx r15d and edx CONST or cs:xxx edx mov edx r14d and edx CONST or edx r12d mov cs:xxx edx jmp JUMP_ADDR_2	and r14d CONST or cs:xxx r14d jmp JUMP_ADDR_3	mov eax [rsp+CONST+var_xxx] add eax [rsp+CONST+var_xxx] jz JUMP_ADDR_4	add eax CONST or ebp CONST and eax CONST mov cs:xxx ebp mov cs:xxx rax jmp JUMP_ADDR_4	mov edx cs:xxx test dh CONST jz JUMP_ADDR_9	mov ecx cs:xxx mov esi ecx and esi CONST jz JUMP_ADDR_9	mov edi edx mov eax esi and edi CONST cmp edi CONST jnz JUMP_ADDR_9	test edx CONST jz JUMP_ADDR_45	mov esi cs:xxx test sil CONST jz JUMP_ADDR_45	mov edi edx mov eax CONST and edi CONST cmp edi CONST jnz JUMP_ADDR_9	and cl CONST jz JUMP_ADDR_45	and edx CONST jz JUMP_ADDR_45	mov edx esi mov eax CONST and edx CONST cmp edx CONST jnz JUMP_ADDR_9	mov eax esi sar eax CONST and eax CONST add eax CONST jmp JUMP_ADDR_9	or cs:xxx CONST or r10d CONST mov cs:xxx r10d jmp JUMP_ADDR_27	mov eax CONST jmp JUMP_ADDR_9
[ph]libcap-git-setcap___libc_start_main
endbr64 push r15 movsxd rax esi push r14 push r13 mov r13 r9 push r12 mov r12 r8 push rbp mov rbp rcx push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi lea rdi [rdx+rax*8+CONST] mov rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] esi mov [rsp+CONST+var_xxx] rdx mov cs:xxx rdi mov cs:xxx rax nop [rax+rax+CONST]	add rdi CONST cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_1	call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_41	call sub_xxx mov rdi cs:xxx call sub_xxx xor eax eax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST cpuid mov cs:xxx eax cmp ebx CONST jnz JUMP_ADDR_44	cmp ecx CONST jnz JUMP_ADDR_44	cmp edx CONST jz JUMP_ADDR_113	xor ecx ecx xor edx edx xor esi esi xor edi edi call sub_xxx call sub_xxx mov eax CONST	mov edx cs:xxx test dh CONST jz JUMP_ADDR_9	or cs:xxx CONST	and dh CONST jz JUMP_ADDR_11	or cs:xxx CONST	mov edx [rsp+CONST+var_xxx] mov r9d [rsp+CONST+var_xxx] mov cs:xxx eax mov [rsp+CONST+var_xxx] CONST mov cs:xxx edx mov edx [rsp+CONST+var_xxx] mov cs:xxx r9d mov cs:xxx edx mov [rsp+CONST+var_xxx] CONST cmp eax CONST jz JUMP_ADDR_80	cmp eax CONST jz JUMP_ADDR_81	cmp eax CONST jz JUMP_ADDR_82	mov [rsp+CONST+var_xxx] CONST or rbx CONST or r8 CONST or r14 CONST mov [rsp+CONST+var_xxx] CONST or r15 CONST or r11 CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST	mov rax [rsp+CONST+var_xxx] mov cs:xxx r15 mov cs:xxx r11 mov r15 [rsp+CONST+var_xxx] mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx r14 mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx r8 mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx rbx mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx rax mov eax cs:xxx test cs:xxx CONST jz JUMP_ADDR_51	test ah CONST jnz JUMP_ADDR_51	mov ebx CONST mov r14d CONST	xor edx edx lea rsi [rsp+CONST+var_xxx] mov edi CONST call sub_xxx mov rax [rsp+CONST+var_xxx] mov edi CONST lea rsi [rsp+CONST+var_xxx] test rax rax cmovz rax [rsp+CONST+var_xxx] xor edx edx mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_20	mov [rsp+CONST+var_xxx] rax	lea rsi [rsp+CONST+var_xxx] xor edx edx mov edi CONST call sub_xxx mov rax [rsp+CONST+var_xxx] test rax rax jnz JUMP_ADDR_22	lea rax [r15+r15*2] mov ecx CONST cqo idiv rcx	mov [rsp+CONST+var_xxx] rax xor edx edx lea rsi [rsp+CONST+var_xxx] mov edi CONST call sub_xxx mov rdx [rsp+CONST+var_xxx] mov r8d r14d lea rsi [rsp+CONST+var_xxx] mov edi CONST mov [rsp+CONST+var_xxx] r8 cmp rdx r8 cmovg ebx edx xor edx edx call sub_xxx mov rax [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov edi CONST mov r15 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r14 [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov edi CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 call sub_xxx mov rax [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov edi CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] mov ecx ebx lea rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rcx lea rsi [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] mov edi CONST mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST call sub_xxx lea rcx [rsp+CONST+var_xxx] mov edi CONST lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r15 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx mov rax [rsp+CONST+var_xxx] mov edi CONST lea rsi [rsp+CONST+var_xxx] lea rdx sub_xxx mov cs:xxx r14 mov cs:xxx rax mov rax [rsp+CONST+var_xxx] mov cs:xxx r15 mov cs:xxx rax mov eax ebx mov cs:xxx rax call sub_xxx cmp cs:xxx CONST mov cs:xxx CONST jz JUMP_ADDR_60	lea rsi [rsp+CONST+var_xxx] lea rdx sub_xxx mov edi CONST call sub_xxx lea rsi [rsp+CONST+var_xxx] mov edi CONST lea rdx sub_xxx call sub_xxx mov edi CONST mov eax CONST lea rsi [rsp+CONST+CONST_VAR] syscall xor edx edx test rax rax jz JUMP_ADDR_52	and cs:xxx CONST	test dl CONST jz JUMP_ADDR_54	mov cs:xxx edx and dl CONST jz JUMP_ADDR_36	mov eax cs:xxx and eax CONST test cs:xxx CONST jnz JUMP_ADDR_88	mov edx CONST test eax eax jnz JUMP_ADDR_31	mov eax CONST	or eax CONST mov edx eax	mov esi edx mov edi CONST mov eax CONST syscall test eax eax jnz JUMP_ADDR_33	mov eax edx not eax and cs:xxx eax	movzx eax cs:xxx mov edx eax and edx CONST cmp dl CONST jz JUMP_ADDR_36	and eax CONST cmp al CONST jz JUMP_ADDR_36	xor esi esi mov edi CONST mov eax CONST syscall	mov rcx cs:xxx mov esi CONST mov rax rcx mov cs:xxx rcx xor cl cl cqo mov cs:xxx rcx idiv rsi mov cs:xxx rax mov rax rcx mov rcx cs:xxx cqo idiv rsi mov cs:xxx rcx mov cs:xxx rax mov rax rcx xor cl cl cqo mov cs:xxx rcx idiv rsi mov cs:xxx rax mov rax rcx cqo idiv rsi mov cs:xxx rax mov rax cs:xxx mov cs:xxx rax mov rax cs:xxx mov cs:xxx rax mov rax cs:xxx mov cs:xxx rax call sub_xxx mov rbx off_xxx mov r15 CONST jmp JUMP_ADDR_38	call callfunc_xxx add rbx CONST mov [r14] rax	cmp rbx r15 jnb JUMP_ADDR_90	cmp [rbx+CONST] CONST mov r14 [rbx] jz JUMP_ADDR_37	lea rdi GLOBAL_VAR call sub_xxx	cmp cs:xxx CONST jnz JUMP_ADDR_43	lea rax GLOBAL_VAR add rax cs:xxx mov cs:xxx rax movzx eax cs:xxx mov cs:xxx rax jmp JUMP_ADDR_3	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	cmp ebx CONST jnz JUMP_ADDR_56	cmp ecx CONST jnz JUMP_ADDR_56	cmp edx CONST jnz JUMP_ADDR_6	lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] call sub_xxx call sub_xxx call sub_xxx test cs:xxx CONST jz JUMP_ADDR_49	mov eax cs:xxx and eax CONST or cs:xxx eax	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_117	mov eax CONST jmp JUMP_ADDR_7	and eax CONST cmp eax CONST sbb ebx ebx and ebx CONST add ebx CONST cmp eax CONST sbb r14d r14d and r14d CONST add r14d CONST jmp JUMP_ADDR_18	mov rax [rsp+CONST+CONST_VAR] mov edx eax test al CONST jnz JUMP_ADDR_25	jmp JUMP_ADDR_24	and cs:xxx CONST test edx edx jz JUMP_ADDR_36	jmp JUMP_ADDR_26	cmp ebx CONST jnz JUMP_ADDR_65	cmp ecx CONST jnz JUMP_ADDR_65	cmp edx CONST jnz JUMP_ADDR_6	jmp JUMP_ADDR_47	mov eax cs:xxx test eax CONST jz JUMP_ADDR_74	test eax CONST jz JUMP_ADDR_71	test eax CONST jz JUMP_ADDR_74	lea rax GLOBAL_VAR	mov cs:xxx rax jmp JUMP_ADDR_23	cmp ebx CONST jnz JUMP_ADDR_110	cmp ecx CONST jnz JUMP_ADDR_110	cmp edx CONST jnz JUMP_ADDR_6	lea rdx [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] call sub_xxx call sub_xxx call sub_xxx mov edx [rsp+CONST+var_xxx] mov eax [rsp+CONST+var_xxx] add eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax cmp edx CONST jz JUMP_ADDR_119	cmp edx CONST jz JUMP_ADDR_151	mov eax CONST jmp JUMP_ADDR_7	mov edx eax and edx CONST cmp edx CONST jnz JUMP_ADDR_74	test eax eax jns JUMP_ADDR_74	mov cs:xxx CONST	test al CONST jz JUMP_ADDR_23	mov edx cs:xxx test dh CONST jz JUMP_ADDR_23	and eax CONST cmp eax CONST jnz JUMP_ADDR_23	test cs:xxx CONST jz JUMP_ADDR_23	and edx CONST cmp edx CONST jnz JUMP_ADDR_23	lea rax GLOBAL_VAR jmp JUMP_ADDR_64	mov edi CONST call sub_xxx mov edi CONST mov rbx rax mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov r15 rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax mov r14 rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] mov rdx r15 mov rbx rax call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] jmp JUMP_ADDR_15	mov edi CONST call sub_xxx mov edi CONST mov rbx rax mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov r15 rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax mov r14 rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rbx or rbx CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] mov rdx r15 mov [rsp+CONST+var_xxx] rax call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] jmp JUMP_ADDR_15	mov edi CONST call sub_xxx mov edi CONST mov rbx rax mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax mov r15 rax call sub_xxx mov edi CONST mov r10 rax mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rbx mov r14 r10 mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov r11 rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov r8 rax mov eax CONST cpuid test r10 r10 jle JUMP_ADDR_126	cmp eax CONST jbe JUMP_ADDR_122	mov eax CONST cpuid shr ecx CONST mov eax CONST and ecx CONST shl eax cl mov [rsp+CONST+var_xxx] eax cmp r9d CONST ja JUMP_ADDR_122	mov ecx eax mov rax r10 cqo idiv rcx mov [rsp+CONST+var_xxx] rax	mov rsi [rsp+CONST+var_xxx] cmp r9d CONST jbe JUMP_ADDR_150	mov eax CONST mov ecx CONST cpuid shr eax CONST or rbx CONST and eax CONST add rax CONST imul rax rsi mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_15	test eax eax jnz JUMP_ADDR_33	jmp JUMP_ADDR_30	call sub_xxx mov eax cs:xxx mov fs:xxx eax mov rax cs:xxx mov rax [rax] xor al al mov fs:xxx rax call sub_xxx test eax eax js JUMP_ADDR_159	mov edx cs:xxx test edx edx jnz JUMP_ADDR_160	mov cs:xxx eax	cmp eax CONST jle JUMP_ADDR_154	cmp cs:xxx CONST jz JUMP_ADDR_96	call callfunc_xxx	mov rax cs:xxx mov rax [rax+CONST] mov fs:xxx rax test r13 r13 jz JUMP_ADDR_98	xor edx edx xor esi esi mov rdi r13 call sub_xxx	mov edi CONST call sub_xxx mov rdx cs:xxx mov rsi [rsp+CONST+var_xxx] mov edi [rsp+CONST+var_xxx] call sub_xxx test r12 r12 jz JUMP_ADDR_100	xor edx edx xor esi esi mov rdi r12 call sub_xxx	cmp cs:xxx CONST jnz JUMP_ADDR_158	test rbp rbp jz JUMP_ADDR_103	mov rdx cs:xxx mov rsi [rsp+CONST+var_xxx] mov edi [rsp+CONST+var_xxx] call rbp	xor edi edi xor esi esi call sub_xxx lea rdi [rsp+CONST+CONST_VAR] call sub_xxx endbr64 test eax eax jnz JUMP_ADDR_106	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax fs:xxx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+CONST_VAR] mov fs:xxx rax mov rdx cs:xxx mov edi [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] call rax mov edi eax	call sub_xxx	call callfunc_xxx mov rax CONST lock CONST setz dl test dl dl jz JUMP_ADDR_108	xor edi edi jmp JUMP_ADDR_105	mov edx CONST nop [rax+rax+CONST]	xor edi edi mov eax edx syscall jmp JUMP_ADDR_109	cmp ebx CONST setz sil cmp ecx CONST setz al test sil al jz JUMP_ADDR_6	cmp edx CONST jz JUMP_ADDR_68	jmp JUMP_ADDR_6	lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] call sub_xxx call sub_xxx call sub_xxx cmp [rsp+CONST+var_xxx] CONST mov eax [rsp+CONST+var_xxx] jz JUMP_ADDR_127	mov edx cs:xxx mov eax edx or ah CONST test cs:xxx CONST jz JUMP_ADDR_116	mov eax edx or ah CONST	mov cs:xxx eax mov eax CONST jmp JUMP_ADDR_7	mov eax [rsp+CONST+var_xxx] sub eax CONST cmp eax CONST ja JUMP_ADDR_50	mov eax cs:xxx and ah CONST or eax CONST mov cs:xxx eax jmp JUMP_ADDR_50	cmp eax CONST jz JUMP_ADDR_121	cmp eax CONST jnz JUMP_ADDR_70	mov eax cs:xxx and cs:xxx CONST and cs:xxx CONST and ah CONST or al CONST mov cs:xxx eax jmp JUMP_ADDR_70	mov eax CONST cpuid and edx CONST jz JUMP_ADDR_124	mov eax ebx shr eax CONST and eax CONST mov [rsp+CONST+var_xxx] eax	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_86	jmp JUMP_ADDR_85	mov [rsp+CONST+var_xxx] r15 or rbx CONST jmp JUMP_ADDR_15	add eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax cmp eax CONST ja JUMP_ADDR_144	cmp eax CONST ja JUMP_ADDR_139	cmp eax CONST jz JUMP_ADDR_162	jbe JUMP_ADDR_137	lea edx [rax+CONST] cmp edx CONST jbe JUMP_ADDR_133	test cs:xxx CONST jz JUMP_ADDR_114	or cs:xxx CONST	mov edx [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_155	cmp edx CONST ja JUMP_ADDR_114	and cs:xxx CONST jmp JUMP_ADDR_114	cmp eax CONST jnz JUMP_ADDR_132	jmp JUMP_ADDR_133	lea ecx [rax+CONST] mov edx CONST shl rdx cl mov rcx CONST test rdx rcx jnz JUMP_ADDR_163	test edx CONST jnz JUMP_ADDR_133	cmp eax CONST jz JUMP_ADDR_162	test cs:xxx CONST jz JUMP_ADDR_134	jmp JUMP_ADDR_133	lea ecx [rax+CONST] cmp ecx CONST ja JUMP_ADDR_147	mov edx CONST shl rdx cl mov ecx CONST shl rcx CONST test rdx rcx jnz JUMP_ADDR_164	test edx CONST jnz JUMP_ADDR_163	test cs:xxx CONST jnz JUMP_ADDR_133	sub eax CONST cmp eax CONST jbe JUMP_ADDR_136	jmp JUMP_ADDR_114	mov rax [rsp+CONST+var_xxx] or rbx CONST add rax rsi mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_15	cmp eax CONST jz JUMP_ADDR_121	cmp eax CONST jnz JUMP_ADDR_70	and cs:xxx CONST and cs:xxx CONST and cs:xxx CONST jmp JUMP_ADDR_70	lea rdi GLOBAL_VAR call sub_xxx	ja JUMP_ADDR_148	cmp eax CONST jz JUMP_ADDR_136	jmp JUMP_ADDR_114	call sub_xxx jmp JUMP_ADDR_101	lea rdi GLOBAL_VAR call sub_xxx	cmp edx eax jbe JUMP_ADDR_93	jmp JUMP_ADDR_92	or cs:xxx CONST jmp JUMP_ADDR_114	or cs:xxx CONST jmp JUMP_ADDR_134	or cs:xxx CONST jmp JUMP_ADDR_148
[ph]libcap-git-setcap_check_one_fd
push r12 xor eax eax mov r12d esi mov esi CONST push rbp mov ebp edi push rbx sub rsp CONST call sub_xxx cmp eax CONST jz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp pop r12 retn	mov rax CONST cmp fs:xxx CONST jnz JUMP_ADDR_1	xor ebx ebx lea rax GLOBAL_VAR cmp r12d CONST mov esi r12d lea rdi GLOBAL_VAR setnz bl cmovz rdi rax xor edx edx lea rbx ds:xxx xor eax eax call sub_xxx cmp ebp eax jnz JUMP_ADDR_8	mov rsi rsp mov edi ebp call sub_xxx test eax eax jnz JUMP_ADDR_8	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_8	cmp [rsp+CONST+var_xxx] rbx jz JUMP_ADDR_1	nop [rax+rax+CONST]	hlt
[ph]libcap-git-setcap___libc_check_standard_fds
endbr64 sub rsp CONST mov esi CONST xor edi edi call sub_xxx mov esi CONST mov edi CONST call sub_xxx mov esi CONST mov edi CONST add rsp CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___libc_setup_tls
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rbx cs:xxx mov r14 cs:xxx test rbx rbx jz JUMP_ADDR_10	mov rdx cs:xxx lea rax ds:xxx sub rax rdx lea rax [rbx+rax*8] cmp rbx rax jb JUMP_ADDR_4	jmp JUMP_ADDR_9	add rbx CONST cmp rax rbx jbe JUMP_ADDR_9	cmp [rbx] CONST jnz JUMP_ADDR_3	mov rbp [rbx+CONST] mov r8d CONST mov rax [rbx+CONST] mov r12 [rbx+CONST] cmp rbp r8 mov [rsp+CONST+var_xxx] rax mov rax [rbx+CONST] cmovnb r8 rbp lea rcx [r8+CONST] mov r15 r8 mov [rsp+CONST+var_xxx] rcx lea rcx [r8+CONST] neg r15 test rbp rbp mov [rsp+CONST+var_xxx] rcx mov ecx CONST cmovnz rcx rbp add rax [r14] mov rbx rax mov r13 rcx	xor edi edi mov [rsp+CONST+var_xxx] r8 call sub_xxx mov rax cs:xxx mov r8 [rsp+CONST+var_xxx] xor edx edx mov rcx [rsp+CONST+var_xxx] lea rax [r12+rax+CONST] mov [rsp+CONST+var_xxx] r8 add rax r8 div r8 imul rax r8 add rcx rax mov [rsp+CONST+var_xxx] rax mov rdi rcx call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov cs:xxx CONST mov cs:xxx CONST add rsi rax lea rax [r12+rbp+CONST] and r15 rsi test rbp rbp mov rsi rbx cmovz rax r12 xor edx edx div r13 mov rdx [rsp+CONST+var_xxx] imul r13 rax mov [r14+CONST] r13 sub rdi r13 add rdi r15 mov cs:xxx rdi call sub_xxx mov rdi [rsp+CONST+var_xxx] lea rax unk_xxx lea rsi [r15+CONST_VAR] mov edi CONST mov [CONST_VAR+CONST] rax mov eax CONST mov [CONST_VAR] rsi mov [CONST_VAR+CONST] rsi syscall test eax eax mov r8 [rsp+CONST+var_xxx] jz JUMP_ADDR_8	lea rdi GLOBAL_VAR call sub_xxx	lea rdx GLOBAL_VAR lea rax GLOBAL_VAR mov cs:xxx rax mov cs:xxx rax mov cs:xxx rdx mov rax fs:xxx lea rcx [rax+CONST] mov [rax+CONST] rdx mov [rax+CONST] rdx mov cs:xxx rcx mov rax [rsp+CONST+var_xxx] mov [r14+CONST] rbp mov [r14+CONST] r12 mov [r14+CONST] rax lea rax GLOBAL_VAR mov cs:xxx rax mov rax cs:xxx mov [r14+CONST] rbx lea rax [r13+rax+CONST] mov cs:xxx r14 and rax CONST mov cs:xxx r13 add rax CONST mov [r14+CONST] CONST mov cs:xxx rcx mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx rax mov cs:xxx r8 mov cs:xxx CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST+var_xxx] CONST xor ebp ebp xor ebx ebx xor r12d r12d mov [rsp+CONST+var_xxx] CONST mov r13d CONST mov r15 CONST mov r8d CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_6	mov [rsp+CONST+var_xxx] CONST mov r13d CONST mov r8d CONST xor ebp ebp mov [rsp+CONST+var_xxx] CONST mov r15 CONST xor r12d r12d mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_6
[ph]libcap-git-setcap___libc_csu_init
endbr64 push r15 lea r15 GLOBAL_VAR push r14 lea r14 GLOBAL_VAR push r13 sub r14 r15 mov r13 rdx push r12 mov r12 rsi push rbp mov ebp edi push rbx sub rsp CONST sar r14 CONST jz JUMP_ADDR_3	xor ebx ebx nop [rax+rax+CONST]	mov rdx r13 mov rsi r12 mov edi ebp call ds:xxx add rbx CONST cmp r14 rbx jnz JUMP_ADDR_2	lea r15 GLOBAL_VAR lea r14 off_xxx call callfunc_xxx sub r14 r15 sar r14 CONST jz JUMP_ADDR_6	xor ebx ebx nop [rax+rax+CONST]	mov rdx r13 mov rsi r12 mov edi ebp call ds:xxx add rbx CONST cmp r14 rbx jnz JUMP_ADDR_5	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn
[ph]libcap-git-setcap___libc_csu_fini
endbr64 push rbp lea rax off_xxx push rbx lea rbx unk_xxx sub rbx rax sub rsp CONST sar rbx CONST jz JUMP_ADDR_3	lea rbp [rax+CONST] nop [rax]	call callfunc_xxx sub rbx CONST jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp jmp UNK_ADDR
[ph]libcap-git-setcap___errno_location
endbr64 mov rax CONST add rax fs:xxx retn
[ph]libcap-git-setcap___assert_fail_base
mov rdi [rsp+CONST+var_xxx] call sub_xxx	call sub_xxx	call $+5	endbr64 push r14 mov r14 rsi push r13 mov r13d ecx push r12 mov r12 rdx push rbp mov rbp rdi push rbx mov rbx r8 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_5	xor esi esi mov edi CONST call callfunc_xxx	lea rax GLOBAL_VAR test rbx rbx jz JUMP_ADDR_11	mov rdx cs:xxx lea rdi [rsp+CONST+var_xxx] mov r9d r13d mov r8 r12 lea rsi unk_xxx lea rcx GLOBAL_VAR cmp [rdx] CONST cmovz rcx rsi lea rsi [rsp+CONST+var_xxx] push rsi mov rsi rbp push r14 push rax xor eax eax push rbx call sub_xxx add rsp CONST test eax eax js JUMP_ADDR_10	mov rdx [rsp+CONST+var_xxx] lea rsi GLOBAL_VAR xor edi edi xor eax eax call sub_xxx mov rdi cs:xxx call sub_xxx mov esi [rsp+CONST+var_xxx] xor r9d r9d or r8d CONST mov rax cs:xxx mov ecx CONST mov edx CONST xor edi edi add esi eax neg eax and esi eax mov [rsp+CONST+var_xxx] esi movsxd rsi esi call sub_xxx mov rbx rax cmp rax CONST jz UNK_JUMP_ADDR	mov eax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] lea rdi [rbx+CONST] mov [rbx] eax call sub_xxx mov rdi rbx xchg rdi cs:xxx test rdi rdi jz UNK_JUMP_ADDR	mov esi [CONST_VAR] call sub_xxx jmp UNK_JUMP_ADDR	mov edx CONST lea rsi GLOBAL_VAR mov edi CONST call sub_xxx jmp JUMP_ADDR_1	lea rbx unk_xxx mov rax rbx jmp JUMP_ADDR_6
[ph]libcap-git-setcap___assert_fail
endbr64 push r13 mov r13d edx mov edx CONST push r12 mov r12 rsi lea rsi GLOBAL_VAR push rbp mov rbp rdi lea rdi GLOBAL_VAR push rbx mov rbx rcx sub rsp CONST call sub_xxx mov r8 rbx mov ecx r13d mov rdx r12 mov rdi rax mov rsi rbp call sub_xxx
[ph]libcap-git-setcap_isalnum
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isalpha
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_iscntrl
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isdigit
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_islower
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isgraph
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isprint
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_ispunct
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isspace
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isupper
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_isxdigit
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx movzx eax [rax+rdi*2] and eax CONST retn
[ph]libcap-git-setcap_tolower
endbr64 lea edx [CONST_VAR+CONST] mov eax edi cmp edx CONST ja JUMP_ADDR_2	mov rax CONST movsxd rdx edx mov rax fs:xxx mov rax [rax] mov rax [rax+CONST] mov eax [rax+rdx*4]	retn
[ph]libcap-git-setcap_toupper
endbr64 lea edx [CONST_VAR+CONST] mov eax edi cmp edx CONST ja JUMP_ADDR_2	mov rax CONST movsxd rdx edx mov rax fs:xxx mov rax [rax] mov rax [rax+CONST] mov eax [rax+rdx*4]	retn
[ph]libcap-git-setcap___ctype_b_loc
endbr64 mov rax CONST add rax fs:xxx retn
[ph]libcap-git-setcap___ctype_toupper_loc
endbr64 mov rax CONST add rax fs:xxx retn
[ph]libcap-git-setcap___ctype_tolower_loc
endbr64 mov rax CONST add rax fs:xxx retn
[ph]libcap-git-setcap___ctype_init
endbr64 mov rax CONST mov rcx CONST mov rax fs:xxx mov rax [rax] mov rsi [rax+CONST] lea rdx [CONST_VAR+CONST] mov fs:xxx rdx mov rdi [rax+CONST] mov rcx CONST lea rdx [CONST_VAR+CONST] mov fs:xxx rdx mov rax [rax+CONST] mov rdx CONST add rax CONST mov fs:xxx rax retn
[ph]libcap-git-setcap_dcgettext
endbr64 mov r9d edx xor r8d r8d xor ecx ecx xor edx edx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_plural_eval
push r12 push rbp mov rbp rsi push rbx mov rbx rdi mov eax [rbx] cmp eax CONST jz JUMP_ADDR_8	jg JUMP_ADDR_6	test eax eax jz JUMP_ADDR_12	cmp eax CONST jnz JUMP_ADDR_14	mov rdi [rbx+CONST] mov rsi rbp xor r12d r12d call sub_xxx test rax rax setz r12b	mov rax r12 pop rbx pop rbp pop r12 retn	cmp eax CONST jnz JUMP_ADDR_14	mov rdi [rbx+CONST] mov rsi rbp call sub_xxx cmp rax CONST mov eax CONST adc rax CONST mov rbx [rbx+rax*8+CONST] mov eax [rbx] cmp eax CONST jnz JUMP_ADDR_1	mov rdi [rbx+CONST] mov rsi rbp call sub_xxx mov r12 rax mov eax [rbx+CONST] cmp eax CONST jz JUMP_ADDR_16	cmp eax CONST jz JUMP_ADDR_18	mov rdi [rbx+CONST] mov rsi rbp call sub_xxx mov edx [rbx+CONST] mov rbp rax sub edx CONST cmp edx CONST ja JUMP_ADDR_14	lea rcx unk_xxx movsxd rax [rcx+rdx*4] add rax rcx jmp rax	mov eax [rbx+CONST] mov r12 rbp test eax eax jz JUMP_ADDR_5	cmp eax CONST jz JUMP_ADDR_15	xor r12d r12d pop rbx pop rbp mov rax r12 pop r12 retn	mov r12 [rbx+CONST] jmp JUMP_ADDR_5	test r12 r12 jz JUMP_ADDR_19	mov r12d CONST jmp JUMP_ADDR_5	test r12 r12 jz JUMP_ADDR_5	mov rdi [rbx+CONST] mov rsi rbp xor r12d r12d call sub_xxx test rax rax setnz r12b jmp JUMP_ADDR_5
[ph]libcap-git-setcap_transcmp
endbr64 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_9	lea rsi [CONST_VAR+CONST]	cmp [rbp+CONST] CONST lea rdi [rbp+CONST] jz JUMP_ADDR_8	call sub_xxx test eax eax jnz JUMP_ADDR_7	mov rsi [rbx] mov rdi [rbp+CONST] call sub_xxx test eax eax jnz JUMP_ADDR_7	mov rsi [rbx+CONST] mov rdi [rbp+CONST] call sub_xxx test eax eax jnz JUMP_ADDR_7	mov eax [rbp+CONST] sub eax [rbx+CONST]	add rsp CONST pop rbx pop rbp retn	mov rdi [rbp+CONST] jmp JUMP_ADDR_3	mov rsi [CONST_VAR+CONST] jmp JUMP_ADDR_2
[ph]libcap-git-setcap__nl_find_msg
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 mov r12 rdx push rbx sub rsp CONST mov [rbp+var_xxx] rdi mov r10d [CONST_VAR+CONST] mov [rbp+var_xxx] rsi mov [rbp+var_xxx] ecx mov [rbp+var_xxx] r8 mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax test r10d r10d jle JUMP_ADDR_32	mov rax [rbp+var_xxx] mov r13 [rax+CONST] test r13 r13 jz JUMP_ADDR_21	mov eax [r13+CONST] cmp [r13+CONST] CONST mov [rbp+var_xxx] eax jz JUMP_ADDR_14	mov rdi r12 call sub_xxx mov rdi r12 mov rbx rax mov [rbp+var_xxx] eax call sub_xxx mov esi [r13+CONST] xor edx edx mov [rbp+var_xxx] r12 mov ecx eax div esi lea edi [CONST_VAR+CONST] mov eax ecx mov ecx [r13+CONST] mov r14d edx xor edx edx div edi mov eax ebx mov [rbp+var_xxx] rax mov eax esi lea r15d [rdx+CONST] mov rdx [r13+CONST] sub eax r15d mov r8d r15d mov r12d r15d mov r15d r14d mov [rbp+var_xxx] eax sub r8d esi mov r14d ecx jmp JUMP_ADDR_10	mov rax [r13+CONST] mov r9d [r13+CONST] lea rsi [rax+rbx*8] mov eax [CONST_VAR] test r9d r9d jz JUMP_ADDR_25	bswap eax cmp [rbp+var_xxx] eax ja JUMP_ADDR_9	mov esi [CONST_VAR+CONST] mov rax [r13+CONST] bswap esi mov esi esi	mov [rbp+var_xxx] r8d add rsi rax mov [rbp+var_xxx] rdx	mov rdi [rbp+var_xxx] call sub_xxx mov rdx [rbp+var_xxx] mov r8d [rbp+var_xxx] test eax eax jz JUMP_ADDR_27	lea eax [r15+r8] lea esi [r15+r12] cmp [rbp+var_xxx] r15d cmova eax esi mov r15d eax	mov eax r15d test r14d r14d mov ebx [rdx+rax*4] mov eax ebx bswap eax cmovnz ebx eax test ebx ebx jz JUMP_ADDR_21	sub ebx CONST cmp [rbp+var_xxx] ebx ja JUMP_ADDR_4	mov eax ebx sub eax [rbp+var_xxx] mov rdi [rbp+var_xxx] shl rax CONST add rax [r13+CONST] cmp [rax] rdi jbe JUMP_ADDR_9	mov [rbp+var_xxx] r8d mov rsi [rax+CONST] mov [rbp+var_xxx] rdx jmp JUMP_ADDR_8	mov eax [rbp+var_xxx] xor r14d r14d mov [rbp+var_xxx] rax mov r15 rax nop [rax]	cmp r15 r14 jbe JUMP_ADDR_21	mov rax [r13+CONST] lea rbx [r15+r14] mov edi [r13+CONST] shr rbx CONST mov rsi [r13+CONST] mov edx [rax+rbx*8+CONST] mov rax rdx test edi edi jz JUMP_ADDR_18	bswap eax mov edx eax	add rsi rdx mov rdi r12 call sub_xxx test eax eax js JUMP_ADDR_24	jz JUMP_ADDR_28	lea r14 [rbx+CONST] cmp r15 r14 ja JUMP_ADDR_16	mov [rbp+var_xxx] CONST	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_120	mov rax [rbp+var_xxx] lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov r15 rbx jmp JUMP_ADDR_15	cmp [rbp+var_xxx] eax ja JUMP_ADDR_9	mov rax [r13+CONST] mov esi [CONST_VAR+CONST] jmp JUMP_ADDR_7	mov eax [rbp+var_xxx] mov [rbp+var_xxx] rax	cmp rbx [rbp+var_xxx] jb JUMP_ADDR_33	mov rax rbx sub rax [rbp+var_xxx] shl rax CONST add rax [r13+CONST] mov rcx [rax+CONST] mov rax [rax] mov [rbp+var_xxx] rcx mov [rbp+var_xxx] rax	mov edx [rbp+var_xxx] test edx edx jnz JUMP_ADDR_35	mov rax [rbp+var_xxx] mov rcx [rbp+var_xxx] mov [rax] rcx jmp JUMP_ADDR_22	call sub_xxx jmp JUMP_ADDR_1	mov rax [r13+CONST] mov esi [r13+CONST] mov rcx [r13+CONST] lea rdx [rax+rbx*8] mov eax [rdx+CONST] mov edx [rdx] test esi esi jz JUMP_ADDR_69	bswap eax mov eax eax bswap edx add rax rcx mov [rbp+var_xxx] rax lea eax [rdx+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_30	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_66	mov r14 [rax+CONST] test r14 r14 jz JUMP_ADDR_66	cmp cs:xxx CONST jz JUMP_ADDR_39	lea rdi [r13+CONST] call callfunc_xxx	mov r15 [r13+CONST] jmp JUMP_ADDR_41	sub r15 CONST mov rax [r13+CONST] mov rsi r14 lea rdx [r15+r15*2] lea r12 [rax+rdx*8] mov rdi [r12] call sub_xxx test eax eax jz JUMP_ADDR_58	test r15 r15 jnz JUMP_ADDR_40	cmp cs:xxx CONST jz JUMP_ADDR_44	lea rdi [r13+CONST] call callfunc_xxx	cmp cs:xxx CONST jz JUMP_ADDR_46	lea rdi [r13+CONST] call callfunc_xxx	mov rcx [r13+CONST] mov rdi [r13+CONST] mov [rbp+var_xxx] rbx lea rax [rcx+rcx*2] mov [rbp+var_xxx] rdi mov rbx rcx shl rax CONST mov [rbp+var_xxx] rax lea r15 [CONST_VAR+rax+CONST] jmp JUMP_ADDR_48	mov rdi [r15] mov rsi r14 mov r12 r15 sub rbx CONST sub r15 CONST call sub_xxx test eax eax jz JUMP_ADDR_87	test rbx rbx jnz JUMP_ADDR_47	mov rax [rbp+var_xxx] mov rdi [rbp+var_xxx] mov rbx [rbp+var_xxx] lea rsi [rax+CONST] test rdi rdi jz JUMP_ADDR_102	call sub_xxx mov r12 rax	test r12 r12 jz JUMP_ADDR_91	mov [r13+CONST] r12 mov rdi r14 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_91	add r12 [rbp+var_xxx] mov rdi [rbp+var_xxx] lea r8 [rbp+var_xxx] xor ecx ecx mov [r12] rax mov rsi [rbp+var_xxx] lea rdx unk_xxx mov [r12+CONST] CONST call sub_xxx mov rdi rax cmp rax CONST jz JUMP_ADDR_113	test rax rax jz JUMP_ADDR_57	lea rsi GLOBAL_VAR call sub_xxx test rax rax jz JUMP_ADDR_57	lea r14 [rax+CONST] lea rsi GLOBAL_VAR mov rdi r14 call sub_xxx mov rsi r14 lea r14 [rbp+var_xxx] mov rdx rax lea rax [rax+CONST] and rax CONST sub rsp rax lea r10 [rsp+CONST+var_xxx+CONST] and r10 CONST mov rdi r10 mov [rbp+var_xxx] r10 call sub_xxx mov rsi [rbp+var_xxx] mov rdx r15 mov rdi r14 mov [rax] CONST call sub_xxx lea rsi [r12+CONST] mov rdi r14 mov [rbp+var_xxx] CONST mov edx CONST call sub_xxx mov rdi r14 mov [rbp+var_xxx] eax call sub_xxx mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_109	mov [r12+CONST] CONST add [r13+CONST] CONST nop [rax+CONST]	cmp cs:xxx CONST jz JUMP_ADDR_60	lea rdi [r13+CONST] call callfunc_xxx	cmp [r12+CONST] CONST jz JUMP_ADDR_31	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_94	cmp rax CONST jz JUMP_ADDR_93	mov rax [rax+rbx*8] test rax rax jz JUMP_ADDR_74	mov rdi [rax] mov [rbp+var_xxx] rdi	add rax CONST mov [rbp+var_xxx] rax jmp JUMP_ADDR_31	mov eax cs:xxx mov r14 cs:xxx test eax eax jz JUMP_ADDR_70	test r14 r14 jnz JUMP_ADDR_37	mov rax CONST mov rax fs:xxx mov rax [rax] mov r14 [rax+CONST] jmp JUMP_ADDR_37	add rax rcx mov [rbp+var_xxx] rax lea eax [rdx+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_30	lea rdi GLOBAL_VAR call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_72	cmp [rax] CONST jnz JUMP_ADDR_99	mov r14 cs:xxx	mov cs:xxx CONST jmp JUMP_ADDR_67	mov eax fs:xxx test eax eax jnz JUMP_ADDR_107	mov edx CONST cmpxchg cs:xxx edx	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rbx xor r14d r14d lea r15 [rbp+var_xxx] mov rdx cs:xxx mov [rbp+var_xxx] rax mov rax cs:xxx add rax CONST mov [rbp+var_xxx] rax jmp JUMP_ADDR_80	add r14d CONST mov rbx cs:xxx imul edx r14d r14d mov rdi rbx movsxd r13 edx mov rsi r13 mov cs:xxx r13 call sub_xxx test rax rax jz JUMP_ADDR_88	lea rdx [r13+CONST]	lea rcx [rax+CONST] mov cs:xxx rax add rax CONST mov cs:xxx rcx mov cs:xxx rdx mov [rbp+var_xxx] rax	cmp rdx CONST jbe JUMP_ADDR_84	mov rax [rbp+var_xxx] mov r11 [rbp+var_xxx] lea rcx [rbp+var_xxx] lea rsi [rbp+var_xxx] add r11 [rbp+var_xxx] mov rdi [r12+CONST] mov r9 r15 lea r8 [rax+rdx+CONST] mov rdx r11 call sub_xxx mov edx eax and edx CONST jz JUMP_ADDR_103	cmp eax CONST jnz JUMP_ADDR_105	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax	test r14d r14d jnz JUMP_ADDR_77	mov cs:xxx CONST mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_89	mov rdx cs:xxx mov r14d CONST mov [rax] rdx mov edx CONST jmp JUMP_ADDR_79	mov rbx [rbp+var_xxx] jmp JUMP_ADDR_58	mov rax [rbx] mov rdi rbx mov cs:xxx rax call sub_xxx	mov cs:xxx CONST mov cs:xxx CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_114	sub cs:xxx CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_22	cmp cs:xxx CONST jz JUMP_ADDR_93	lea rdi [r13+CONST] call callfunc_xxx	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_22	mov eax fs:xxx test eax eax jnz JUMP_ADDR_118	mov edx CONST cmpxchg cs:xxx edx	cmp [r12+CONST] CONST jz JUMP_ADDR_116	mov eax fs:xxx test eax eax jnz JUMP_ADDR_121	sub cs:xxx CONST mov rax [r12+CONST] jmp JUMP_ADDR_62	mov rdi rax call sub_xxx lea r15 [rax+CONST] mov rdi r15 call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_101	mov rdx r15 mov rsi r12 mov rdi rax call sub_xxx	mov cs:xxx r14 jmp JUMP_ADDR_73	mov rdi rsi call sub_xxx mov r12 rax jmp JUMP_ADDR_51	mov rsi [rbp+var_xxx] mov rax cs:xxx mov rbx [rbp+var_xxx] mov rdi [r12+CONST] mov r9 rsi sub r9 rax lea r8 ds:xxx lea rcx [r9+CONST] mov [rax] rcx mov [rbp+var_xxx] rcx mov rcx cs:xxx mov [CONST_VAR+rbx*8] rax sub rcx r9 mov r9 rcx and rcx CONST and r9d CONST mov cs:xxx rcx add rsi r9 mov cs:xxx rsi mov ecx fs:xxx test ecx ecx jnz JUMP_ADDR_123	sub cs:xxx CONST jmp JUMP_ADDR_65	mov eax fs:xxx test eax eax jnz JUMP_ADDR_125	sub cs:xxx CONST jmp JUMP_ADDR_21	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_76	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_76	add eax CONST jz JUMP_ADDR_127	cmp cs:xxx CONST jz JUMP_ADDR_112	lea rdi [r13+CONST] call callfunc_xxx	mov rdi r15 call sub_xxx xor edi edi	mov [rbp+var_xxx] rdi jmp JUMP_ADDR_22	xor eax eax xchg eax cs:xxx mov [rbp+var_xxx] CONST cmp eax CONST jle JUMP_ADDR_22	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_22	mov edi [rbp+var_xxx] mov esi CONST add edi [r13+CONST] call sub_xxx mov [r12+CONST] rax test rax rax jnz JUMP_ADDR_76	mov [r12+CONST] CONST jmp JUMP_ADDR_97	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_96	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_96	call sub_xxx	xor eax eax xchg eax cs:xxx sub eax CONST jg JUMP_ADDR_128	mov rax [r12+CONST] jmp JUMP_ADDR_62	xchg edx cs:xxx sub edx CONST jg JUMP_ADDR_129	mov rax [CONST_VAR+r8] mov rcx [rax] mov [rbp+var_xxx] rcx jmp JUMP_ADDR_65	xor eax eax xchg eax cs:xxx sub eax CONST mov [rbp+var_xxx] CONST jle JUMP_ADDR_22	jmp JUMP_ADDR_115	mov [r12+CONST] CONST jmp JUMP_ADDR_57	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_122	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall mov rax [r12+CONST] mov rax [rax+r8] mov rcx [rax] mov [rbp+var_xxx] rcx jmp JUMP_ADDR_65
[ph]libcap-git-setcap___dcigettext
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] ecx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9d mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] CONST test rsi rsi jz JUMP_ADDR_63	cmp r9d CONST ja JUMP_ADDR_40	cmp r9d CONST jz JUMP_ADDR_40	mov rax CONST mov rbx CONST mov r13 rdi mov eax fs:xxx mov [rbp+var_xxx] eax test rbx rbx jz JUMP_ADDR_5	lea rdi unk_xxx call callfunc_xxx lea rdi unk_xxx call callfunc_xxx	mov rax [rbp+var_xxx] test r13 r13 cmovz r13 cs:xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax mov eax [rbp+var_xxx] mov [rbp+var_xxx] r13 mov edi eax mov [rbp+var_xxx] eax call sub_xxx mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax test rbx rbx jz JUMP_ADDR_7	lea rdi unk_xxx call callfunc_xxx	lea rdi [rbp+var_xxx] lea rdx sub_xxx lea rsi GLOBAL_VAR call sub_xxx cmp cs:xxx CONST mov [rbp+var_xxx] rax jz JUMP_ADDR_9	lea rdi unk_xxx call callfunc_xxx	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_11	mov rax [rax] mov ecx cs:xxx cmp [rax+CONST] ecx jz JUMP_ADDR_58	mov r12 cs:xxx test r12 r12 jnz JUMP_ADDR_35	nop [rax+rax+CONST]	lea rax GLOBAL_VAR mov [rbp+var_xxx] rax	movsxd rax [rbp+var_xxx] lea rdx unk_xxx movzx r14d [rdx+rax] mov rdi rax lea rax GLOBAL_VAR add r14 rax call sub_xxx cmp [rax] CONST mov rbx rax jnz JUMP_ADDR_43	cmp [rax+CONST] CONST jnz JUMP_ADDR_43	mov rdi r13 call sub_xxx mov rdi r14 mov r15 rax mov [rbp+var_xxx] rax call sub_xxx mov rsi r14 lea rax [r15+rax+CONST] and rax CONST sub rsp rax lea rax [rsp+CONST+var_xxx] and rax CONST mov rdi rax mov [rbp+var_xxx] rax call sub_xxx mov rdx r15 mov rsi r13 mov [rax] CONST lea rdi [rax+CONST] call sub_xxx mov rdi rbx mov [rax] CONST call sub_xxx add rax CONST and rax CONST sub rsp rax lea r9 [rsp+CONST+var_xxx] and r9 CONST mov r14 r9 nop [rax+CONST]	movzx eax [rbx] cmp al CONST jz JUMP_ADDR_45	test al al jnz JUMP_ADDR_46	mov esi CONST mov [r14] si	cmp [r14] CONST jnz JUMP_ADDR_22	cmp [r14+CONST] CONST jz JUMP_ADDR_26	lea rsi GLOBAL_VAR mov rdi r14 call sub_xxx test eax eax jz JUMP_ADDR_26	mov rdx [rbp+var_xxx] mov rdi [rbp+var_xxx] mov rcx r12 mov rsi r14 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_17	mov rdx [rbp+var_xxx] lea r8 [rbp+var_xxx] mov rsi r12 mov rdi rax mov ecx CONST mov [rbp+var_xxx] r8 call sub_xxx mov r8 [rbp+var_xxx] test rax rax mov rcx rax jz JUMP_ADDR_52	mov r14 r15 cmp rax CONST jnz JUMP_ADDR_65	mov rdi [rbp+var_xxx] call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_28	lea rdi unk_xxx call callfunc_xxx lea rdi unk_xxx call callfunc_xxx	mov rax CONST mov ecx [rbp+var_xxx] mov fs:xxx ecx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_30	mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_42	mov rcx [rbp+var_xxx]	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_90	lea rsp [rbp+CONST] mov rax rcx pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	js JUMP_ADDR_62	mov r12 [r12] test r12 r12 jz JUMP_ADDR_13	lea rsi [r12+CONST] mov rdi r13 call sub_xxx test eax eax jnz JUMP_ADDR_33	mov rax [r12+CONST] cmp [rax] CONST mov [rbp+var_xxx] rax jz JUMP_ADDR_14	xor esi esi xor edi edi call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_26	mov rcx [rbp+var_xxx] lea rdi [rbp+var_xxx] mov rdx rax xor eax eax lea rsi GLOBAL_VAR call sub_xxx mov rdi r14 mov ebx eax call sub_xxx test ebx ebx js JUMP_ADDR_26	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax jmp JUMP_ADDR_14	mov r8d [rbp+var_xxx] test r8d r8d jz JUMP_ADDR_30	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_30	mov rcx [rbp+var_xxx] jmp JUMP_ADDR_31	lea rdi GLOBAL_VAR call sub_xxx test rax rax jz JUMP_ADDR_16	cmp [rax] CONST cmovnz rbx rax jmp JUMP_ADDR_16	add rbx CONST jmp JUMP_ADDR_17	mov rdx r14 nop [rax+rax+CONST]	add rbx CONST mov [rdx] al add rdx CONST movzx eax [rbx] test al al jz JUMP_ADDR_49	cmp al CONST jnz JUMP_ADDR_47	mov ecx cs:xxx mov [rdx] CONST test ecx ecx jz JUMP_ADDR_20	mov esi CONST mov rdi r14 call sub_xxx test rax rax jnz JUMP_ADDR_17	jmp JUMP_ADDR_20	mov rdi [r15+CONST] test rdi rdi jz JUMP_ADDR_17	xor r10d r10d mov [rbp+CONST] rbx mov rbx [rbp+var_xxx] mov [rbp+var_xxx] r13 mov r13 r10 mov [rbp+var_xxx] r14 mov r14 r8 jmp JUMP_ADDR_56	test rax rax jnz JUMP_ADDR_64	add r13 CONST mov rdi [r15+r13*8+CONST] test rdi rdi jz JUMP_ADDR_70	mov r8 r14 mov ecx CONST mov rdx rbx mov rsi r12 mov [rbp+var_xxx] r13d call sub_xxx cmp rax CONST jnz JUMP_ADDR_54	jmp JUMP_ADDR_26	mov edi [rbp+var_xxx] mov rcx [rax+CONST] test edi edi jnz JUMP_ADDR_71	cmp cs:xxx CONST jz JUMP_ADDR_61	lea rdi unk_xxx mov [rbp+var_xxx] rcx call callfunc_xxx lea rdi unk_xxx call callfunc_xxx mov rcx [rbp+var_xxx]	mov rax CONST mov edx [rbp+var_xxx] mov fs:xxx edx jmp JUMP_ADDR_31	xor r12d r12d jmp JUMP_ADDR_13	xor ecx ecx jmp JUMP_ADDR_31	mov rcx rax movsxd rax [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [r15+rax*8+CONST]	mov rdi [rbp+var_xxx] mov [rbp+var_xxx] rcx call sub_xxx cmp [rbp+var_xxx] CONST mov rcx [rbp+var_xxx] jz JUMP_ADDR_81	mov rax [rbp+var_xxx] mov edx cs:xxx mov rax [rax] mov [rax+CONST] edx mov rdx [rbp+var_xxx] mov [rax+CONST] r14 mov [rax+CONST] rcx mov [rax+CONST] rdx	mov edx [rbp+var_xxx] mov rax CONST mov fs:xxx edx mov edx [rbp+var_xxx] test edx edx jnz JUMP_ADDR_76	cmp cs:xxx CONST jz JUMP_ADDR_31	lea rdi unk_xxx mov [rbp+var_xxx] rcx call callfunc_xxx lea rdi unk_xxx call callfunc_xxx jmp JUMP_ADDR_30	mov rbx [rbp+CONST] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] jmp JUMP_ADDR_17	mov rbx [rax+CONST] mov rax [rax+CONST] mov [rbp+var_xxx] rcx mov rsi [rbp+var_xxx] mov r13 [rax+CONST] mov rdi [r13+CONST] call sub_xxx cmp rax [r13+CONST] mov rcx [rbp+var_xxx] mov r12 rax jnb JUMP_ADDR_59	mov rdi rcx add rbx rcx mov r13 rcx nop [rax+rax+CONST]	sub r12 CONST jb JUMP_ADDR_89	xor esi esi call sub_xxx lea rdi [rax+CONST] cmp rdi rbx jb JUMP_ADDR_73	mov rcx r13 jmp JUMP_ADDR_59	mov r13 [r14+CONST] mov rsi [rbp+var_xxx] mov [rbp+var_xxx] rcx mov rbx [rbp+var_xxx] mov rdi [r13+CONST] call sub_xxx cmp rax [r13+CONST] mov rcx [rbp+var_xxx] mov r12 rax jnb JUMP_ADDR_68	mov rdi rcx add rbx rcx mov r13 rcx nop [rax+rax+CONST]	sub r12 CONST jb JUMP_ADDR_91	xor esi esi call sub_xxx lea rdi [rax+CONST] cmp rdi rbx jb JUMP_ADDR_78	mov rcx r13 jmp JUMP_ADDR_68	mov rdi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx] lea r15 [rax+CONST] call sub_xxx mov rbx [rbp+var_xxx] lea rdi [rbx+rax+CONST] add rdi r15 call sub_xxx mov rcx [rbp+var_xxx] test rax rax mov r12 rax jz JUMP_ADDR_67	mov rsi [rbp+var_xxx] mov rdx r15 lea rdi [rax+CONST] add rbx CONST call sub_xxx mov rdx rbx mov rsi r13 mov r15 rax mov rdi rax call sub_xxx add rbx r15 mov rsi [rbp+var_xxx] mov rdi rbx call sub_xxx mov eax [rbp+var_xxx] mov rcx [rbp+var_xxx] mov [r12] r15 cmp cs:xxx CONST mov [r12+CONST] rbx mov [r12+CONST] eax mov eax cs:xxx mov [r12+CONST] r14 mov [r12+CONST] eax mov rax [rbp+var_xxx] mov [r12+CONST] rcx mov [r12+CONST] rax jz JUMP_ADDR_84	lea rdi unk_xxx mov [rbp+var_xxx] rcx call callfunc_xxx mov rcx [rbp+var_xxx]	lea rdx sub_xxx lea rsi GLOBAL_VAR mov rdi r12 mov [rbp+var_xxx] rcx call sub_xxx cmp cs:xxx CONST mov rcx [rbp+var_xxx] mov rbx rax jz JUMP_ADDR_86	lea rdi unk_xxx call callfunc_xxx mov rcx [rbp+var_xxx]	test rbx rbx jz JUMP_ADDR_88	cmp [rbx] r12 jz JUMP_ADDR_67	mov rdi r12 mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] jmp JUMP_ADDR_67	mov rcx rdi jmp JUMP_ADDR_59	call sub_xxx	mov rcx rdi jmp JUMP_ADDR_68
[ph]libcap-git-setcap__nl_find_domain
endbr64 push r15 push r14 push r13 mov r13 rcx push r12 mov r12 rsi push rbp mov rbp rdi push rbx mov rbx rdx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	mov rdi rbp lea r14 GLOBAL_VAR call sub_xxx sub rsp CONST xor r9d r9d xor ecx ecx push CONST lea rdx [rax+CONST] mov r8 r12 mov rsi rbp push rbx mov rdi r14 push CONST push CONST push CONST call sub_xxx add rsp CONST cmp cs:xxx CONST mov r15 rax jz JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx	test r15 r15 jz JUMP_ADDR_16	mov esi [r15+CONST] test esi esi jle JUMP_ADDR_15	cmp [r15+CONST] CONST jz JUMP_ADDR_9	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_38	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [r15+CONST] test rdi rdi jz JUMP_ADDR_7	lea rbx [r15+CONST] jmp JUMP_ADDR_13	mov rax [rbx] cmp [rax+CONST] CONST jnz JUMP_ADDR_7	mov rdi [rbx+CONST] add rbx CONST test rdi rdi jz JUMP_ADDR_7	mov ecx [CONST_VAR+CONST] test ecx ecx jg JUMP_ADDR_11	mov rsi r13 call sub_xxx jmp JUMP_ADDR_11	mov rsi r13 mov rdi r15 call sub_xxx jmp JUMP_ADDR_6	mov rdi r12 call sub_xxx mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_19	mov rdi rax call sub_xxx lea rdx [rax+CONST] mov rdi rdx mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_7	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi rax call sub_xxx	lea rcx [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov rdi r12 lea rsi [rsp+CONST+var_xxx] lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx mov [rsp+CONST+var_xxx] eax cmp eax CONST jz JUMP_ADDR_7	cmp cs:xxx CONST jz JUMP_ADDR_22	lea rdi unk_xxx call callfunc_xxx	mov rdi rbp call sub_xxx sub rsp CONST mov rsi rbp mov rdi r14 push CONST lea rdx [rax+CONST] push rbx push [rsp+CONST+var_xxx] push [rsp+CONST+var_xxx] push [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] call sub_xxx add rsp CONST cmp cs:xxx CONST mov r15 rax jz JUMP_ADDR_24	lea rdi unk_xxx call callfunc_xxx	test r15 r15 jz JUMP_ADDR_29	mov edx [r15+CONST] test edx edx jle JUMP_ADDR_37	cmp [r15+CONST] CONST jz JUMP_ADDR_31	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_29	mov rdi r12 call sub_xxx	test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_7	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_7	mov rdi [r15+CONST] test rdi rdi jz JUMP_ADDR_27	lea rbx [r15+CONST] jmp JUMP_ADDR_35	mov rax [rbx] cmp [rax+CONST] CONST jnz JUMP_ADDR_27	mov rdi [rbx+CONST] add rbx CONST test rdi rdi jz JUMP_ADDR_27	mov eax [CONST_VAR+CONST] test eax eax jg JUMP_ADDR_33	mov rsi r13 call sub_xxx jmp JUMP_ADDR_33	mov rsi r13 mov rdi r15 call sub_xxx jmp JUMP_ADDR_26	call sub_xxx
[ph]libcap-git-setcap__nl_load_domain
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rbp fs:xxx cmp cs:xxx rbp jz JUMP_ADDR_4	mov eax fs:xxx test eax eax jnz JUMP_ADDR_68	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx rbp	mov eax cs:xxx lea edx [rax+CONST] mov cs:xxx edx mov edx [rbx+CONST] test edx edx jnz JUMP_ADDR_49	mov rdi [rbx] mov [rbx+CONST] CONST mov [rbx+CONST] CONST test rdi rdi jz JUMP_ADDR_48	xor esi esi xor eax eax call sub_xxx mov ebp eax cmp eax CONST jz JUMP_ADDR_47	lea rsi [rsp+CONST+var_xxx] mov edi eax call sub_xxx mov [rsp+CONST+var_xxx] eax test eax eax jnz JUMP_ADDR_46	mov r15 [rsp+CONST+var_xxx] cmp r15 CONST jbe JUMP_ADDR_46	xor r9d r9d mov r8d ebp mov ecx CONST mov edx CONST mov rsi r15 xor edi edi call sub_xxx mov r14 rax cmp rax CONST jz JUMP_ADDR_75	mov edi ebp call sub_xxx mov r13d [r14] cmp r13d CONST setnz al mov ebp eax cmp r13d CONST jz JUMP_ADDR_12	test al al jnz JUMP_ADDR_85	mov [rsp+CONST+var_xxx] CONST	mov edi CONST call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_47	mov [rax] r14 mov edx [r14+CONST] mov [rbx+CONST] rax mov eax [rsp+CONST+var_xxx] mov [r12+CONST] r15 mov [r12+CONST] eax movzx eax bpl mov [r12+CONST] eax mov [r12+CONST] CONST cmp r13d CONST jz JUMP_ADDR_56	bswap edx mov esi edx cmp edx CONST ja JUMP_ADDR_64	mov ecx [r14+CONST] bswap ecx mov [r12+CONST] ecx mov ecx [r14+CONST] bswap ecx mov ecx ecx add rcx r14 mov [r12+CONST] rcx mov ecx [r14+CONST] bswap ecx mov ecx ecx add rcx r14 mov [r12+CONST] rcx mov ecx [r14+CONST] bswap ecx mov [r12+CONST] ecx mov r10d ecx cmp ecx CONST jbe JUMP_ADDR_58	mov ecx [r14+CONST] mov [r12+CONST] eax bswap ecx mov ecx ecx add rcx r14 mov [r12+CONST] rcx test dx dx jz JUMP_ADDR_59	mov eax [r14+CONST] bswap eax mov [rsp+CONST+var_xxx] eax test eax eax jz JUMP_ADDR_59	mov eax [r14+CONST] mov ebp [r14+CONST] bswap eax mov [rsp+CONST+var_xxx] eax bswap ebp mov ebp ebp	mov edi [rsp+CONST+var_xxx] mov esi CONST mov [rsp+CONST+var_xxx] r10d add rbp r14 mov [rsp+CONST+var_xxx] rdi call sub_xxx mov r9 rax test rax rax jz JUMP_ADDR_64	mov eax [rsp+CONST+var_xxx] xor edx edx mov rdi [rsp+CONST+var_xxx] lea r11 GLOBAL_VAR mov r10d [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_90	mov [rsp+CONST+var_xxx] r10d jmp JUMP_ADDR_26	cmp cl CONST jnz JUMP_ADDR_84	xor ecx ecx cmp [rax+CONST] CONST cmovz rcx r11	mov [r9+rdx*8] rcx add rdx CONST cmp rdi rdx jz JUMP_ADDR_89	mov eax [rbp+rdx*8+CONST] mov esi [rbp+rdx*8+CONST] mov rcx rax add rax r14 cmp r13d CONST jz JUMP_ADDR_28	bswap ecx mov ecx ecx bswap esi lea rax [r14+rcx]	test esi esi jz JUMP_ADDR_83	lea ecx [CONST_VAR+CONST] cmp [rax+rcx] CONST jnz JUMP_ADDR_83	movzx ecx [rax] cmp cl CONST jnz JUMP_ADDR_23	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	movzx esi [rax+CONST] cmp sil CONST jz JUMP_ADDR_37	cmp sil CONST jz JUMP_ADDR_37	lea r8d [CONST_VAR+CONST] mov r10d r8d cmp r8b CONST ja JUMP_ADDR_25	mov r8 CONST bt r8 r10 jnb JUMP_ADDR_25	movzx ecx [rax+CONST] cmp cl CONST jz JUMP_ADDR_155	cmp cl CONST jz JUMP_ADDR_164	cmp cl CONST jnz JUMP_ADDR_120	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_74	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	cmp rax CONST jnz JUMP_ADDR_46	mov rax CONST cmp fs:xxx CONST jz JUMP_ADDR_77	mov edi ebp call sub_xxx	mov eax cs:xxx sub eax CONST	mov [rbx+CONST] CONST	mov cs:xxx eax test eax eax jnz JUMP_ADDR_52	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_54	sub cs:xxx CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_228	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_52	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_52	mov esi edx cmp edx CONST ja JUMP_ADDR_64	mov ecx [r14+CONST] mov r10d [r14+CONST] mov [r12+CONST] ecx mov ecx [r14+CONST] add rcx r14 mov [r12+CONST] rcx mov ecx [r14+CONST] mov [r12+CONST] r10d add rcx r14 mov [r12+CONST] rcx cmp r10d CONST ja JUMP_ADDR_71	mov [r12+CONST] CONST mov [r12+CONST] eax test si si jnz JUMP_ADDR_64	mov [r12+CONST] CONST mov [r12+CONST] CONST mov [r12+CONST] CONST	cmp cs:xxx CONST mov [r12+CONST] CONST mov [r12+CONST] CONST jz JUMP_ADDR_62	lea rdi [r12+CONST] xor esi esi call callfunc_xxx	mov rsi [rsp+CONST+var_xxx] mov rdi rbx xor ecx ecx lea rdx unk_xxx lea r8 [rsp+CONST+var_xxx] call sub_xxx mov rdi rax cmp rax CONST jz JUMP_ADDR_86	lea rdx [r12+CONST] lea rsi [r12+CONST] call sub_xxx mov eax cs:xxx sub eax CONST jmp JUMP_ADDR_48	xor r13d r13d	mov rdi r13 call sub_xxx mov eax [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_70	mov rdi r14 call sub_xxx	mov rdi r12 call sub_xxx mov eax cs:xxx mov [rbx+CONST] CONST sub eax CONST jmp JUMP_ADDR_48	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	mov rsi r15 mov rdi r14 call sub_xxx jmp JUMP_ADDR_67	mov ecx [r14+CONST] mov [r12+CONST] eax add rcx r14 mov [r12+CONST] rcx test dx dx jz JUMP_ADDR_59	mov eax [r14+CONST] mov [rsp+CONST+var_xxx] eax test eax eax jz JUMP_ADDR_59	mov eax [r14+CONST] mov ebp [r14+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_20	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	mov rdi r15 call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_46	mov r13 rax mov r12 r15	mov rdx r12 mov rsi r13 mov edi ebp call sub_xxx test rax rax jle JUMP_ADDR_44	add r13 rax sub r12 rax jnz JUMP_ADDR_77	mov edi ebp call sub_xxx mov r13d [r14] cmp r13d CONST setnz al mov ebp eax cmp r13d CONST jz JUMP_ADDR_13	test al al jz JUMP_ADDR_13	mov rdi r14 call sub_xxx mov eax cs:xxx sub eax CONST jmp JUMP_ADDR_48	mov r9 r15 mov r14 [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] mov r15 [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx]	mov rdi r9 xor r13d r13d call sub_xxx jmp JUMP_ADDR_65	xor ecx ecx jmp JUMP_ADDR_25	mov rsi r15 mov rdi r14 call sub_xxx mov eax cs:xxx sub eax CONST jmp JUMP_ADDR_48	cmp cs:xxx CONST jz JUMP_ADDR_88	lea rdi [r12+CONST] call callfunc_xxx	mov r13 [r12+CONST] jmp JUMP_ADDR_65	mov r10d [rsp+CONST+var_xxx]	mov edx [r14+CONST] mov eax [r14+CONST] cmp r13d CONST jz JUMP_ADDR_119	bswap edx mov edx edx bswap eax mov eax eax lea rsi [r14+rdx] mov [rsp+CONST+var_xxx] rsi	add rax r14 mov [rsp+CONST+var_xxx] CONST xor ebp ebp mov [rsp+CONST+var_xxx] rax mov eax r10d shl rax CONST mov [rsp+CONST+var_xxx] r14 mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] r12 mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] r15 mov r15 r9	xor ebx ebx	cmp r13d CONST jz JUMP_ADDR_105	test rbx rbx jz JUMP_ADDR_118	mov rax [rsp+CONST+var_xxx] mov edx [rax+rbp*4]	bswap edx mov edx edx add rdx [rsp+CONST+var_xxx] cmp [rdx+CONST] CONST setnz al	xor r12d r12d test al al jnz JUMP_ADDR_109	mov [rsp+rbx*8+CONST+var_xxx] r12 cmp rbx CONST jnz JUMP_ADDR_108	mov rax [rsp+CONST+var_xxx] add [rsp+CONST+var_xxx] CONST add rax [rsp+CONST+var_xxx] add [rsp+CONST+var_xxx] rax	add rbp CONST cmp [rsp+CONST+var_xxx] ebp ja JUMP_ADDR_93	mov ebp [rsp+CONST+var_xxx] mov r9 r15 mov r14 [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] mov r15 [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] test ebp ebp jnz JUMP_ADDR_175	mov [r12+CONST] CONST mov [r12+CONST] CONST mov [r12+CONST] CONST	mov rdi r9 call sub_xxx jmp JUMP_ADDR_60	test rbx rbx jz JUMP_ADDR_117	mov rax [rsp+CONST+var_xxx] mov edx [rax+rbp*4]	add rdx [rsp+CONST+var_xxx] cmp [rdx+CONST] CONST setnz al jmp JUMP_ADDR_98	mov ebx CONST jmp JUMP_ADDR_94	lea r14 [rdx+CONST] mov [rsp+CONST+var_xxx] rbx mov r12d [rsp+CONST+var_xxx] xor esi esi mov rbx r14 jmp JUMP_ADDR_113	cmp edx r12d jnb JUMP_ADDR_82	mov edx edx mov rdi [r15+rdx*8] test rdi rdi jz JUMP_ADDR_101	call sub_xxx add rbx CONST lea rsi [rax+r14]	mov r14d [rbx] mov edx [rbx+CONST] mov rcx r14 add r14 rsi cmp r13d CONST jz JUMP_ADDR_115	bswap ecx mov ecx ecx bswap edx lea r14 [rcx+CONST_VAR]	cmp edx CONST jnz JUMP_ADDR_110	mov rbx [rsp+CONST+var_xxx] mov r12 r14 jmp JUMP_ADDR_99	mov rax [rsp+CONST+var_xxx] mov edx [rax+rbp*4] jmp JUMP_ADDR_107	mov rax [rsp+CONST+var_xxx] mov edx [rax+rbp*4] jmp JUMP_ADDR_97	lea rsi [r14+rdx] mov [rsp+CONST+var_xxx] rsi jmp JUMP_ADDR_92	cmp cl CONST jnz JUMP_ADDR_126	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_125	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	cmp cl CONST jnz JUMP_ADDR_138	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	movzx ecx [rax+CONST] mov r8d ecx cmp cl CONST jz JUMP_ADDR_307	cmp cl CONST jz JUMP_ADDR_303	cmp cl CONST mov ecx CONST jnz JUMP_ADDR_298	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_297	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	cmp cl CONST jnz JUMP_ADDR_149	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	movzx ecx [rax+CONST] mov r8d ecx cmp cl CONST jz JUMP_ADDR_265	cmp cl CONST jz JUMP_ADDR_261	cmp cl CONST mov ecx CONST jnz JUMP_ADDR_256	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_255	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	cmp cl CONST jnz JUMP_ADDR_169	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_229	lea rsi unk_xxx movzx eax al movsxd rax [CONST_VAR+rax*4] add rax rsi jmp rax	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_158	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_168	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	cmp cl CONST mov ecx CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_238	lea rsi unk_xxx movzx eax al movsxd rax [CONST_VAR+rax*4] add rax rsi jmp rax	mov ebp [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 lea edi [rbp+rbp+CONST] shl rdi CONST add rdi [rsp+CONST+var_xxx] call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_65	mov [r12+CONST] rax mov eax ebp mov rbp [rsp+CONST+var_xxx] xor r10d r10d shl rax CONST mov [rsp+CONST+var_xxx] CONST lea rsi [r13+rax+CONST] mov [rsp+CONST+var_xxx] r13 lea r8 [CONST_VAR+rax] mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] r8 add rbp r8 mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] r15 mov r15 r14 mov r14 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r12 mov r12 r10	mov rax [rsp+CONST+var_xxx] xor ecx ecx mov esi [rax+CONST]	test esi esi jz JUMP_ADDR_194	test ecx ecx jz JUMP_ADDR_213	mov rax [rsp+CONST+var_xxx] mov edx [rax+r12*4] bswap edx mov edx edx add rdx r15 mov eax [rdx+CONST] cmp eax CONST jnz JUMP_ADDR_196	cmp ecx CONST jnz JUMP_ADDR_214	mov eax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r12 mov [rsp+CONST+var_xxx] CONST shl rax CONST add rbx rax add rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax test esi esi jz JUMP_ADDR_190	mov ebx [rsp+CONST+var_xxx] test ebx ebx jz JUMP_ADDR_226	mov rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov ecx [rax+rbx*4] mov rax [rsp+CONST+var_xxx] bswap ecx mov ecx ecx mov [rsp+CONST+var_xxx] rax add rcx r15 mov ebx [rcx] bswap ebx mov ebx ebx add rbx r15	cmp [rcx+CONST] CONST jnz JUMP_ADDR_218	mov eax [rcx+CONST] bswap eax mov eax eax	mov rsi [rsp+CONST+var_xxx] mov [CONST_VAR] rax mov [CONST_VAR+CONST] rbx	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_217	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov esi [rax+CONST] test esi esi jnz JUMP_ADDR_183	mov r11d [rsp+CONST+var_xxx] test r11d r11d jz JUMP_ADDR_227	mov rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov ecx [rax+rbx*4] mov rax [rsp+CONST+var_xxx] add rcx r15 mov [rsp+CONST+var_xxx] rax mov ebx [rcx] add rbx r15	cmp [rcx+CONST] CONST jnz JUMP_ADDR_218	mov eax [rcx+CONST] jmp JUMP_ADDR_187	test ecx ecx jz JUMP_ADDR_215	mov rax [rsp+CONST+var_xxx] mov edx [rax+r12*4] add rdx r15 mov eax [rdx+CONST] cmp eax CONST jz JUMP_ADDR_181	add rdx CONST jmp JUMP_ADDR_198	mov eax [rdx+CONST] add rdx CONST	mov edi eax test esi esi bswap edi cmovnz eax edi cmp eax CONST jz JUMP_ADDR_181	mov eax eax cmp [r14+rax*8] CONST jnz JUMP_ADDR_197	add r12 CONST cmp [rsp+CONST+var_xxx] r12d ja JUMP_ADDR_177	mov r9 r14 mov r12 [rsp+CONST+var_xxx] mov r14 r15 mov r13 [rsp+CONST+var_xxx] mov r15 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov esi [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] esi jnz UNK_JUMP_ADDR	cmp [r12+CONST] CONST jz JUMP_ADDR_207	mov rsi [r12+CONST] xor eax eax	mov r10d [r12+CONST] mov edx eax mov ecx [CONST_VAR+rdx*4] test r10d r10d jz JUMP_ADDR_206	bswap ecx	mov [r8+rdx*4] ecx add eax CONST cmp [r12+CONST] eax ja JUMP_ADDR_204	mov [rsp+CONST+var_xxx] r9 lea r10 [r13+CONST] xor ebp ebp mov [rsp+CONST+var_xxx] rbx mov ebx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r14 mov r14 r10 mov [rsp+CONST+var_xxx] r13 mov r13d ebp mov rbp r12 mov r12 r8	mov rdi [r14] call sub_xxx mov edi [rbp+CONST] xor edx edx mov r9d eax div edi lea r11d [CONST_VAR+CONST] mov eax r9d mov ecx edx xor edx edx div r11d mov eax ecx lea rax [r12+rax*4] mov r8d [rax] add edx CONST test r8d r8d jz JUMP_ADDR_211	mov r11d edi mov r9d edx sub r11d edx sub r9d edi xchg ax ax	lea esi [rcx+rdx] lea eax [rcx+r9] cmp ecx r11d cmovb eax esi mov ecx eax mov eax eax lea rax [r12+rax*4] mov esi [rax] test esi esi jnz JUMP_ADDR_210	mov edx [rbp+CONST] add r14 CONST lea edx [r13+rdx+CONST] add r13d CONST mov [rax] edx cmp ebx r13d jnz JUMP_ADDR_208	mov eax [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] mov r8 r12 mov [rbp+CONST] CONST mov [rbp+CONST] r8 mov r14 [rsp+CONST+var_xxx] mov r12 rbp mov r9 [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov [rbp+CONST] eax mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] r13 mov [rbp+CONST] rax jmp JUMP_ADDR_104	mov rax [rsp+CONST+var_xxx] mov edx [rax+r12*4] bswap edx mov edx edx add rdx r15 mov eax [rdx+CONST] cmp eax CONST jnz JUMP_ADDR_196	mov ecx CONST jmp JUMP_ADDR_178	mov rax [rsp+CONST+var_xxx] mov edx [rax+r12*4] add rdx r15 mov eax [rdx+CONST] cmp eax CONST jnz JUMP_ADDR_196	mov ecx CONST jmp JUMP_ADDR_195	add [rsp+CONST+var_xxx] CONST mov r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_200	mov rax [rsp+CONST+var_xxx] lea r13 [rcx+CONST] mov [rsp+CONST+var_xxx] r15 mov r15 rbp mov [rax+CONST] rbp mov rbp r13 jmp JUMP_ADDR_221	cmp r12d CONST jz JUMP_ADDR_225	mov r12d r12d add rbp CONST mov r13 [r14+r12*8] mov rdi r13 call sub_xxx mov rsi r13 mov rdi r15 mov rdx rax mov r12 rax call sub_xxx mov rax [rsp+CONST+var_xxx] add r15 r12 mov esi [rax+CONST]	mov eax [rbp+CONST] mov r12d [rbp+CONST] test esi esi jz JUMP_ADDR_223	bswap eax bswap r12d	test eax eax jz JUMP_ADDR_219	mov r13d eax mov rsi rbx mov rdi r15 mov rdx r13 add r15 r13 add rbx r13 call sub_xxx jmp JUMP_ADDR_219	mov rbx [rsp+CONST+var_xxx] mov rbp r15 mov r15 [rsp+CONST+var_xxx] mov rax rbp sub rax [rbx+CONST] mov [rbx] rax jmp JUMP_ADDR_188	mov rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov ecx [rax+rbx*4] mov rax [rsp+CONST+var_xxx] bswap ecx mov ecx ecx mov [rsp+CONST+var_xxx] rax add rcx r15 mov ebx [rcx] bswap ebx mov ebx ebx add rbx r15 jmp JUMP_ADDR_185	mov rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov ecx [rax+rbx*4] mov rax [rsp+CONST+var_xxx] add rcx r15 mov [rsp+CONST+var_xxx] rax mov ebx [rcx] add rbx r15 jmp JUMP_ADDR_192	call sub_xxx	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	cmp r8b CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_285	lea rsi unk_xxx movzx eax al movsxd rax [CONST_VAR+rax*4] add rax rsi jmp rax	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_279	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_277	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	cmp r8b CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_313	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_327	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	xor ecx ecx cmp [rax+CONST] CONST jnz JUMP_ADDR_25	lea eax [CONST_VAR+CONST] cmp al CONST ja JUMP_ADDR_319	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx unk_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR jmp JUMP_ADDR_25
[ph]libcap-git-setcap_alias_compare
endbr64 mov rsi [CONST_VAR] mov rdi [CONST_VAR] lea rdx off_xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_read_alias_file
push rbp movsxd rdx esi mov rsi rdi mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [rdx+CONST] and rax CONST sub rsp rax lea r12 [rsp+CONST+var_xxx] and r12 CONST mov rdi r12 call sub_xxx mov rdx cs:xxx lea rsi unk_xxx mov rdi r12 mov [rax] rdx mov edx cs:xxx mov [rax+CONST] edx movzx edx cs:xxx mov [rax+CONST] dx call sub_xxx test rax rax jz JUMP_ADDR_45	mov r15 rax mov eax [rax] lea rbx [rbp+var_xxx] mov [rbp+var_xxx] CONST mov edx eax or dh CONST mov [r15] edx test al CONST jnz JUMP_ADDR_50	nop [rax+rax+CONST]	mov rdx r15 mov esi CONST mov rdi rbx call sub_xxx test rax rax jz JUMP_ADDR_11	mov esi CONST mov rdi rbx mov r12 rbx call sub_xxx movzx edx [rbp+var_xxx] mov rcx rax mov rax CONST mov rsi fs:xxx mov rax rdx test [CONST_VAR+rdx*2+CONST] CONST jz JUMP_ADDR_7	nop [rax+CONST]	movzx edx [r12+CONST] add r12 CONST mov rax rdx test [CONST_VAR+rdx*2+CONST] CONST jnz JUMP_ADDR_6	test al al jz JUMP_ADDR_9	cmp al CONST jnz JUMP_ADDR_18	test rcx rcx jz JUMP_ADDR_16	test [r15] CONST jz JUMP_ADDR_3	mov rdi r15 call sub_xxx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_13	mov rsi cs:xxx mov rdi cs:xxx mov edx CONST lea rcx sub_xxx call sub_xxx	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_51	mov rax [rbp+var_xxx] lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov esi CONST mov rdi rbx call sub_xxx test rax rax jnz JUMP_ADDR_10	mov rdx r15 mov esi CONST mov rdi rbx call sub_xxx test rax rax jnz JUMP_ADDR_15	jmp JUMP_ADDR_10	movzx eax [r12+CONST] lea r13 [r12+CONST] test al al jnz JUMP_ADDR_21	jmp JUMP_ADDR_23	test al al jz JUMP_ADDR_23	movzx edx al mov rdi r13 movzx eax [r13+CONST] add r13 CONST test [CONST_VAR+rdx*2+CONST] CONST jz JUMP_ADDR_20	mov [CONST_VAR] CONST	movzx edx al test [CONST_VAR+rdx*2+CONST] CONST jz JUMP_ADDR_26	nop [rax+rax+CONST]	movzx edx [r13+CONST] add r13 CONST mov rax rdx test [CONST_VAR+rdx*2+CONST] CONST jnz JUMP_ADDR_25	test al al jz JUMP_ADDR_9	movzx eax [r13+CONST] lea rdx [r13+CONST] test al al jnz JUMP_ADDR_30	jmp JUMP_ADDR_33	movzx eax [rdx+CONST] add rdx CONST test al al jz JUMP_ADDR_33	movzx edi al test [CONST_VAR+rdi*2+CONST] CONST jz JUMP_ADDR_29	cmp al CONST jnz JUMP_ADDR_43	mov eax CONST mov [rdx] ax	mov rdi cs:xxx mov rax cs:xxx mov [rbp+var_xxx] rdi cmp rdi rax jnb JUMP_ADDR_39	mov rdi r12 mov [rbp+var_xxx] rcx call sub_xxx mov rdi r13 lea rdx [rax+CONST] mov [rbp+var_xxx] rdx call sub_xxx mov rdx [rbp+var_xxx] mov r11 cs:xxx lea r10 [rax+CONST] mov r9 cs:xxx mov r14 cs:xxx lea rax [r11+rdx] mov [rbp+var_xxx] rax add rax r10 mov rcx rax mov [rbp+var_xxx] rax mov rax cs:xxx cmp rcx rax mov rcx [rbp+var_xxx] jbe JUMP_ADDR_38	mov edi CONST lea rsi [rdx+r10] mov [rbp+var_xxx] r11 cmp rsi rdi mov [rbp+CONST] rcx cmovb rsi rdi mov rdi r9 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] rdx add rax rsi mov [rbp+var_xxx] r9 mov rsi rax mov [rbp+var_xxx] rax call sub_xxx test rax rax jz JUMP_ADDR_11	mov r9 [rbp+var_xxx] mov r14 cs:xxx mov rdx [rbp+var_xxx] mov r10 [rbp+var_xxx] cmp rax r9 mov rcx [rbp+CONST] mov r11 [rbp+var_xxx] jnz JUMP_ADDR_46	mov rdi [rbp+var_xxx] mov cs:xxx rax mov r9 rax mov cs:xxx rdi	mov rax [rbp+var_xxx] lea rdi [r9+r11] mov rsi r12 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r10 shl rax CONST mov [rbp+var_xxx] r9 add r14 rax call sub_xxx mov rdi [rbp+var_xxx] mov r9 [rbp+var_xxx] mov rsi r13 mov [r14] rax mov rdx [rbp+var_xxx] add rdi r9 call sub_xxx mov r13 [rbp+var_xxx] mov rcx [rbp+var_xxx] add [rbp+var_xxx] CONST add r13 CONST mov cs:xxx rcx mov rcx [rbp+var_xxx] mov [r14+CONST] rax mov cs:xxx r13 jmp JUMP_ADDR_9	test rax rax jnz JUMP_ADDR_44	mov esi CONST mov r14d CONST	mov rdi cs:xxx mov [rbp+var_xxx] rcx call sub_xxx test rax rax jz JUMP_ADDR_11	mov cs:xxx rax mov rcx [rbp+var_xxx] mov cs:xxx r14 jmp JUMP_ADDR_34	mov [rdx] CONST jmp JUMP_ADDR_33	lea r14 [rax+rax] shl rax CONST mov rsi rax jmp JUMP_ADDR_41	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_13	mov rdi [rbp+var_xxx] test rdi rdi jz JUMP_ADDR_37	mov r8 rax shl rdi CONST mov rsi r14 sub r8 r9 add rdi r14	add [CONST_VAR] r8 add [CONST_VAR+CONST] r8 add rsi CONST cmp rdi rsi jnz JUMP_ADDR_48	jmp JUMP_ADDR_37	mov rdi r15 call sub_xxx jmp JUMP_ADDR_13	call sub_xxx
[ph]libcap-git-setcap__nl_expand_alias
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_32	mov edx CONST cmpxchg cs:xxx edx	cmp cs:xxx CONST jz JUMP_ADDR_30	mov r15 cs:xxx lea rbp off_xxx test r15 r15 jnz JUMP_ADDR_24	mov rsi cs:xxx xor eax eax movzx edx [CONST_VAR] test dl dl jz JUMP_ADDR_15	nop [rax+rax+CONST]	lea rax [CONST_VAR+CONST] mov rdi rsi cmp dl CONST jnz JUMP_ADDR_10	nop [rax+CONST]	mov rdi rax movzx edx [rax] add rax CONST cmp dl CONST jz JUMP_ADDR_8	test dl dl jz JUMP_ADDR_21	lea rax [CONST_VAR+CONST] nop [rax+rax+CONST]	movzx edx [rax] mov rsi rax add rax CONST test dl dl jz JUMP_ADDR_13	cmp dl CONST jnz JUMP_ADDR_11	cmp rsi rdi ja JUMP_ADDR_22	movzx edx [CONST_VAR] mov eax CONST test dl dl jnz JUMP_ADDR_6	test al al jz JUMP_ADDR_17	mov cs:xxx rsi	xor r8d r8d	mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	sub cs:xxx CONST	add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rsi rdi jmp JUMP_ADDR_14	mov cs:xxx rsi sub esi edi call sub_xxx test rax rax jz JUMP_ADDR_4	mov r15 cs:xxx test r15 r15 jz JUMP_ADDR_4	mov rax cs:xxx xor r14d r14d mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_28	jz JUMP_ADDR_31	lea r14 [r12+CONST]	cmp r15 r14 jbe JUMP_ADDR_4	lea r12 [r14+r15] mov rdx rbp mov rdi rbx shr r12 CONST mov r13 r12 shl r13 CONST add r13 [rsp+CONST+var_xxx] mov rsi [r13+CONST] call sub_xxx test eax eax jns JUMP_ADDR_25	mov r15 r12 jmp JUMP_ADDR_27	lea rax GLOBAL_VAR mov cs:xxx rax jmp JUMP_ADDR_3	mov r8 [r13+CONST] jmp JUMP_ADDR_18	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_20	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_20
[ph]libcap-git-setcap__nl_make_l10nflist
endbr64 push r15 mov r15 rdx push r14 mov r14d ecx push r13 lea r13 [r15+CONST] push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov rdi r8 mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 call sub_xxx and r14d CONST mov rbp rax mov r12d r14d jz JUMP_ADDR_44	mov rdi [rsp+CONST+var_xxx] call sub_xxx lea rbx [rax+CONST]	mov eax [rsp+CONST+var_xxx] add rbp r13 xor r13d r13d and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_4	mov rdi [rsp+CONST+arg_xxx] call sub_xxx lea r13 [rax+CONST]	mov eax [rsp+CONST+var_xxx] add rbx rbp xor ebp ebp and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_6	mov rdi [rsp+CONST+arg_xxx] call sub_xxx lea rbp [rax+CONST]	mov eax [rsp+CONST+var_xxx] add rbx r13 xor r14d r14d and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_8	mov rdi [rsp+CONST+arg_xxx] call sub_xxx lea r14 [rax+CONST]	mov rdi [rsp+CONST+arg_xxx] call sub_xxx lea rdi [rbx+rbp] add rdi r14 mov r13 rax add rdi rax call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_63	mov rsi [rsp+CONST+var_xxx] mov rdx r15 mov rdi rax call sub_xxx test r15 r15 jz JUMP_ADDR_13	mov rbx r15 mov r14 rbp nop [rax+rax+CONST]	mov rdi r14 call sub_xxx sub rbx rax sub rbx CONST jz JUMP_ADDR_13	add rax r14 mov [rax] CONST lea r14 [rax+CONST] jmp JUMP_ADDR_11	mov [rbp+r15+CONST] CONST mov rsi [rsp+CONST+var_xxx] lea rdi [rbp+r15+CONST] call sub_xxx test r12d r12d jnz JUMP_ADDR_57	mov esi [rsp+CONST+var_xxx] test esi esi jnz JUMP_ADDR_56	mov ecx [rsp+CONST+var_xxx] test ecx ecx jnz JUMP_ADDR_55	mov edx [rsp+CONST+var_xxx] test edx edx jnz JUMP_ADDR_54	mov [rax] CONST mov rsi [rsp+CONST+arg_xxx] lea rdi [rax+CONST] lea rdx [r13+CONST] call sub_xxx mov rax [rsp+CONST+var_xxx] mov rax [rax] mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_62	mov r12 rax xor r13d r13d nop [rax]	mov rdi [r12] test rdi rdi jz JUMP_ADDR_23	mov rsi rbp call sub_xxx test eax eax jz JUMP_ADDR_53	js JUMP_ADDR_24	mov r13 r12	mov r12 [r12+CONST] test r12 r12 jnz JUMP_ADDR_19	mov eax [rsp+CONST+arg_xxx] test eax eax jz JUMP_ADDR_52	mov ecx [rsp+CONST+var_xxx] mov r14d CONST mov rbx r15 xor r12d r12d mov eax ecx and ecx CONST sar eax CONST and eax CONST add eax ecx mov edx eax and eax CONST sar edx CONST and edx CONST add edx eax mov eax edx sar eax CONST add eax edx and eax CONST mov ecx eax sar ecx CONST add ecx eax shl r14d cl movsxd rax r14d mov r14 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax test r15 r15 jz JUMP_ADDR_60	xchg ax ax	mov rdi r14 add r12 CONST call sub_xxx sub rbx rax lea r14 [r14+rax+CONST] sub rbx CONST jnz JUMP_ADDR_27	imul r12 [rsp+CONST+var_xxx] lea rdi ds:xxx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_64	mov r14 [rsp+CONST+var_xxx] mov [rax] rbp mov rbp r15 nop [rax+CONST]	mov rdi r14 add rbx CONST call sub_xxx sub rbp rax lea r14 [r14+rax+CONST] sub rbp CONST jnz JUMP_ADDR_30	mov eax CONST cmp rbx CONST jz JUMP_ADDR_45	mov [r12+CONST] eax mov [r12+CONST] CONST test r13 r13 jz JUMP_ADDR_58	mov rax [r13+CONST] mov [r12+CONST] rax mov [r13+CONST] r12	test r15 r15 jz JUMP_ADDR_59	mov r13 [rsp+CONST+var_xxx] mov rbx r15 xor ebp ebp nop [rax+rax+CONST]	mov rdi r13 add rbp CONST call sub_xxx sub rbx rax lea r13 [r13+rax+CONST] sub rbx CONST jnz JUMP_ADDR_36	xor eax eax mov r14d [rsp+CONST+var_xxx] cmp rbp CONST setz al sub r14d eax	mov ebx [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] xor ebp ebp not ebx lea r10 [rax+r15] test r14d r14d js JUMP_ADDR_42	mov [rsp+CONST+var_xxx] r15 mov r13d r14d mov r14 r10	test r13d ebx jz JUMP_ADDR_46	sub r13d CONST jnb JUMP_ADDR_40	mov [r12+rbp*8+CONST] CONST	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	xor ebx ebx jmp JUMP_ADDR_2	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST setz al movzx eax al jmp JUMP_ADDR_32	xor r15d r15d test r15 r15 jz JUMP_ADDR_50	cmp r15 r14 jnb JUMP_ADDR_41	mov rdi r15 call sub_xxx lea r15 [r15+rax+CONST] cmp r15 r14 jnb JUMP_ADDR_41	mov rdi r15 add rbp CONST call sub_xxx sub rsp CONST mov ecx r13d mov rsi r15 push CONST lea rdx [rax+CONST] push [rsp+CONST+arg_xxx] push [rsp+CONST+arg_xxx] push [rsp+CONST+arg_xxx] push [rsp+CONST+arg_xxx] mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call sub_xxx add rsp CONST mov [r12+rbp*8+CONST] rax test r15 r15 jnz JUMP_ADDR_47	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_41	mov r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_49	xor r12d r12d nop [rax+rax+CONST]	mov rdi rbp call sub_xxx jmp JUMP_ADDR_43	mov [rax] CONST mov rsi [rsp+CONST+arg_xxx] lea rdi [rax+CONST] call sub_xxx jmp JUMP_ADDR_17	mov [rax] CONST mov rsi [rsp+CONST+arg_xxx] lea rdi [rax+CONST] call sub_xxx jmp JUMP_ADDR_16	mov [rax] CONST mov rsi [rsp+CONST+arg_xxx] lea rdi [rax+CONST] call sub_xxx jmp JUMP_ADDR_15	mov [rax] CONST mov rsi [rsp+CONST+var_xxx] lea rdi [rax+CONST] call sub_xxx jmp JUMP_ADDR_14	mov rax [rsp+CONST+var_xxx] mov [r12+CONST] rax mov rax [rsp+CONST+var_xxx] mov [rax] r12 jmp JUMP_ADDR_34	mov r14d [rsp+CONST+var_xxx] jmp JUMP_ADDR_38	mov edi CONST call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_64	mov [r12] rbp mov eax CONST jmp JUMP_ADDR_32	xor r13d r13d jmp JUMP_ADDR_24	xor r12d r12d jmp JUMP_ADDR_43	mov rdi rbp xor r12d r12d call sub_xxx jmp JUMP_ADDR_43
[ph]libcap-git-setcap__nl_normalize_codeset
endbr64 push r12 push rbp push rbx test rsi rsi jz JUMP_ADDR_17	mov rbx cs:xxx mov rbp rdi mov r12 rsi mov rdx rdi lea r8 [CONST_VAR+CONST_VAR] xor r9d r9d mov esi CONST xor edi edi nop	movzx ecx [rdx] mov rax rcx test [rbx+rcx*2] CONST jz JUMP_ADDR_4	sub eax CONST add rdi CONST cmp eax CONST cmovnb esi r9d	add rdx CONST cmp r8 rdx jnz JUMP_ADDR_2	test esi esi jnz JUMP_ADDR_15	add rdi CONST call sub_xxx mov rsi rax test rax rax jz JUMP_ADDR_18	mov rax rsi	mov r8 cs:xxx xor edx edx jmp JUMP_ADDR_11	mov ecx [r8+rdi*4] add rsi CONST mov [CONST_VAR+CONST] cl	add rdx CONST cmp r12 rdx jbe JUMP_ADDR_14	movzx edi [rbp+rdx+CONST] mov rcx rdi test [rbx+rdi*2+CONST] CONST jnz JUMP_ADDR_9	movzx edi dil sub edi CONST cmp edi CONST ja JUMP_ADDR_10	add rdx CONST mov [CONST_VAR] cl add rsi CONST cmp r12 rdx ja JUMP_ADDR_11	mov [CONST_VAR] CONST pop rbx pop rbp pop r12 retn	add rdi CONST call sub_xxx test rax rax jz JUMP_ADDR_18	mov [rax] CONST lea rsi [rax+CONST] jmp JUMP_ADDR_8	mov edi CONST call sub_xxx test rax rax jnz JUMP_ADDR_19	pop rbx xor eax eax pop rbp pop r12 retn	mov [rax] CONST lea rsi [rax+CONST] jmp JUMP_ADDR_14
[ph]libcap-git-setcap__nl_explode_name
endbr64 push r15 push r14 push r13 mov r13 rcx push r12 push rbp mov rbp r8 push rbx sub rsp CONST mov [rdx] CONST mov [rcx] CONST mov [r8] CONST mov [r9] CONST mov [CONST_VAR] rdi movzx eax [CONST_VAR] cmp al CONST jz JUMP_ADDR_14	test al al jz JUMP_ADDR_14	mov r14 rdx mov rdx rdi jmp JUMP_ADDR_7	cmp al CONST jz JUMP_ADDR_8	movzx eax [rdx+CONST] lea rcx [rdx+CONST] test al al jz JUMP_ADDR_20	cmp al CONST jz JUMP_ADDR_20	mov rdx rcx	cmp al CONST jnz JUMP_ADDR_3	cmp rdi rdx jz JUMP_ADDR_14	movzx eax [rdx] xor r12d r12d	cmp al CONST jz JUMP_ADDR_27	cmp al CONST jnz JUMP_ADDR_15	lea rax [rdx+CONST] mov [rdx] CONST mov [r14] rax cmp [rdx+CONST] CONST jz JUMP_ADDR_15	or r12d CONST jmp JUMP_ADDR_15	xor r12d r12d	mov rax [r13+CONST] test rax rax jz JUMP_ADDR_17	mov edx r12d and edx CONST cmp [rax] CONST cmovz r12d edx	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_19	mov edx r12d and edx CONST cmp [rax] CONST cmovz r12d edx	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp rdi rcx jz JUMP_ADDR_14	cmp al CONST jnz JUMP_ADDR_36	add rdx CONST mov [rcx] CONST mov [r13+CONST] rdx movzx eax [rcx+CONST] test al CONST jnz JUMP_ADDR_25	jmp JUMP_ADDR_26	movzx eax [rdx+CONST] add rdx CONST test al CONST jz JUMP_ADDR_26	cmp al CONST jnz JUMP_ADDR_24	mov r12d CONST cmp al CONST jnz JUMP_ADDR_11	lea rdi [rdx+CONST] mov [rdx] CONST mov ecx r12d mov [rbp+CONST] rdi movzx eax [rdx+CONST] or ecx CONST test al CONST jz JUMP_ADDR_34	mov rbx rdi nop [rax+rax+CONST]	mov r15 rbx add rbx CONST test [rbx] CONST jnz JUMP_ADDR_29	mov [rsp+CONST+var_xxx] r9 cmp rdi rbx jz JUMP_ADDR_34	mov rsi r15 mov [rsp+CONST+var_xxx] ecx sub rsi rdx call sub_xxx mov r9 [rsp+CONST+var_xxx] mov [r9] rax test rax rax jz JUMP_ADDR_37	mov rdi [rbp+CONST] mov rsi rax mov [rsp+CONST+var_xxx] rax call sub_xxx mov r8 [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_35	movzx eax [r15+CONST] or r12d CONST mov rdx rbx jmp JUMP_ADDR_11	mov r12d ecx mov rdx rdi jmp JUMP_ADDR_11	mov rdi r8 mov [rsp+CONST+var_xxx] ecx call sub_xxx movzx eax [r15+CONST] mov r12d [rsp+CONST+var_xxx] mov rdx rbx jmp JUMP_ADDR_11	mov rdx rcx xor r12d r12d jmp JUMP_ADDR_10	or r12d CONST jmp JUMP_ADDR_19
[ph]libcap-git-setcap___gettext_free_exp
endbr64 test rdi rdi jz JUMP_ADDR_8	push rbp mov eax [CONST_VAR] mov rbp rdi cmp eax CONST jz JUMP_ADDR_6	cmp eax CONST jz JUMP_ADDR_5	cmp eax CONST jz JUMP_ADDR_7	mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	mov rdi [CONST_VAR+CONST] call sub_xxx	mov rdi [rbp+CONST] call sub_xxx	mov rdi [rbp+CONST] call sub_xxx mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap___gettextparse
endbr64 push r15 xor r8d r8d lea rcx unk_xxx push r14 mov r14d CONST push r13 mov r13d CONST push r12 lea r12 unk_xxx push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi lea rdx [rsp+CONST+var_xxx] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov rbp rax mov rbx rax mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rax	movsx eax [r12+r8] mov r9d eax cmp eax CONST jz JUMP_ADDR_11	cmp r14d CONST jz JUMP_ADDR_52	test r14d r14d jle JUMP_ADDR_50	cmp r14d CONST jz JUMP_ADDR_83	movsxd rsi r14d lea rdi unk_xxx movsx esi [CONST_VAR+CONST_VAR]	lea r9d [rax+CONST_VAR]	cmp r9d CONST ja JUMP_ADDR_11	movsxd r9 r9d movsx edi [rcx+r9] cmp edi esi jnz JUMP_ADDR_11	lea rax unk_xxx movzx eax [rax+r9] movsx r8 al test r8d r8d jle JUMP_ADDR_28	mov edi [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov r14d CONST cmp edi CONST mov [rdx+CONST] rsi adc edi CONST add rdx CONST mov [rsp+CONST+var_xxx] edi mov rdi rbx jmp JUMP_ADDR_38	lea rsi unk_xxx movsx r8d [CONST_VAR+r8] test r8d r8d jnz JUMP_ADDR_29	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_24	test r14d r14d jg JUMP_ADDR_51	jnz JUMP_ADDR_24	nop [rax+rax+CONST]	mov r12d CONST	cmp rbp [rsp+CONST+var_xxx] jz JUMP_ADDR_19	mov rdi rbp call sub_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_119	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rsi unk_xxx movzx eax [CONST_VAR+rax] movsx r8 al test r8d r8d jg JUMP_ADDR_64	cmp rbx rbp jz JUMP_ADDR_16	movsx rax [rbx+CONST] sub rbx CONST sub rdx CONST movsx eax [r12+rax]	cmp eax CONST jz JUMP_ADDR_22	add eax CONST cmp eax CONST ja JUMP_ADDR_22	cdqe cmp [rcx+rax] CONST jnz JUMP_ADDR_22	jmp JUMP_ADDR_21	neg r8d	lea rax unk_xxx movsxd r15 r8d movsx rdi [rax+r15] mov eax CONST sub eax edi mov rsi rdi cdqe mov rax [rdx+rax*8] cmp r8d CONST ja JUMP_ADDR_35	lea r10 unk_xxx mov r8d r8d movsxd rdi [r10+r8*4] add rdi r10 jmp UNK_ADDR	mov eax [rdx+CONST] mov r10 [rdx] mov r8 [rdx+CONST] mov [rsp+CONST+var_xxx] eax test r10 r10 jz JUMP_ADDR_33	test r8 r8 jnz JUMP_ADDR_62	mov rdi r10 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] sil call sub_xxx mov rdi [rsp+CONST+var_xxx]	call sub_xxx movsx rsi [rsp+CONST+var_xxx] xor eax eax mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx	lea rdi ds:xxx sub rdx rdi mov rdi rbx mov r8 rdx sub rdi rsi lea rsi unk_xxx mov [r8+CONST] rax lea rax unk_xxx movsx r9d [CONST_VAR] lea rdx [rdx+CONST] movsx eax [rax+r15] sub eax CONST cdqe movsx esi [CONST_VAR+rax] add esi r9d cmp esi CONST ja JUMP_ADDR_37	movsxd rsi esi cmp r9b [rcx+CONST_VAR] jz JUMP_ADDR_59	lea rsi unk_xxx movzx eax [CONST_VAR+rax] movsx r8 al	mov [CONST_VAR+CONST] al lea rbx [CONST_VAR+CONST] lea rax [rbp+r13+CONST] cmp rbx rax jb JUMP_ADDR_45	sub rbx rbp mov [rsp+CONST+var_xxx] r8d lea r15 [rbx+CONST] cmp r13 CONST jg JUMP_ADDR_114	add r13 r13 mov eax CONST cmp r13 rax cmovg r13 rax lea rdi [r13+r13*8+CONST] call sub_xxx test rax rax jz JUMP_ADDR_114	mov rdx r15 mov rsi rbp mov rdi rax call sub_xxx lea rdx ds:xxx lea r15 [r13+CONST] mov rsi [rsp+CONST+var_xxx] and r15 CONST mov [rsp+CONST+var_xxx] rdx add r15 rax mov [rsp+CONST+var_xxx] rax mov rdi r15 call sub_xxx cmp rbp [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx mov r9 [rsp+CONST+var_xxx] movsxd r8 [rsp+CONST+var_xxx] jz JUMP_ADDR_43	mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r9 [rsp+CONST+var_xxx] movsxd r8 [rsp+CONST+var_xxx] lea rcx unk_xxx mov rdx [rsp+CONST+var_xxx]	add rbx r9 lea rax [r9+r13+CONST] lea rdx [r15+rdx+CONST] cmp rbx rax jnb JUMP_ADDR_113	mov [rsp+CONST+var_xxx] r15 mov rbp r9	cmp r8d CONST jnz JUMP_ADDR_1	xor r12d r12d jmp JUMP_ADDR_17	cmp dil [r10+CONST] jnz JUMP_ADDR_89	lea rsi [r10+CONST] mov rdi [rsp+CONST+var_xxx] mov [CONST_VAR] rsi test r14d r14d jg JUMP_ADDR_5	nop [rax]	xor esi esi xor r14d r14d jmp JUMP_ADDR_7	mov r14d CONST jmp JUMP_ADDR_24	mov rsi [rsp+CONST+var_xxx] mov rsi [CONST_VAR] nop [rax+rax+CONST]	movzx edi [CONST_VAR] test dil dil jz JUMP_ADDR_58	mov r10 rsi add rsi CONST cmp dil CONST jz JUMP_ADDR_53	cmp dil CONST jz JUMP_ADDR_53	lea r11d [CONST_VAR+CONST] movsx r14d dil cmp r11b CONST ja JUMP_ADDR_89	lea r15 unk_xxx movzx r11d r11b movsxd r11 [r15+r11*4] add r11 r15 jmp r11	mov rdi [rsp+CONST+var_xxx] xor r14d r14d mov [CONST_VAR] rsi xor esi esi jmp JUMP_ADDR_7	lea rax unk_xxx movzx eax [rax+CONST_VAR] movsx r8 al jmp JUMP_ADDR_38	mov eax [rdx+CONST] mov r8 [rdx+CONST] mov r10 [rdx] mov [rsp+CONST+var_xxx] eax test r8 r8 jz JUMP_ADDR_33	test r10 r10 jz JUMP_ADDR_33	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax mov r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_33	mov edi [rsp+CONST+var_xxx] mov [rax] CONST mov [rax+CONST] r10 mov [rax+CONST] edi mov [rax+CONST] r8 jmp JUMP_ADDR_35	mov rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST add rdx CONST mov rdi rbx mov [rdx] rsi jmp JUMP_ADDR_38	mov r9 [rdx+CONST] mov r8 [rdx] test r9 r9 jz JUMP_ADDR_84	test r8 r8 jz JUMP_ADDR_84	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_84	mov rdi CONST mov [rax+CONST] r8 mov [rax] rdi mov [rax+CONST] r9 jmp JUMP_ADDR_35	mov r8 [rdx] mov r9 [rdx+CONST] test r8 r8 jz JUMP_ADDR_84	test r9 r9 jz JUMP_ADDR_84	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_84	mov rdi CONST mov [rax+CONST] r8 mov [rax] rdi mov [rax+CONST] r9 jmp JUMP_ADDR_35	mov rax [rdx+CONST] jmp JUMP_ADDR_35	mov rdi [rdx] test rdi rdi jz JUMP_ADDR_16	mov r11 [rsp+CONST+var_xxx] mov [r11+CONST] rdi jmp JUMP_ADDR_35	mov r8 [rdx+CONST] mov r10 [rdx] mov r9 [rdx+CONST] test r8 r8 setz al test r10 r10 setz dil or al dil jnz JUMP_ADDR_112	test r9 r9 jz JUMP_ADDR_112	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_112	mov rdi CONST mov [rax+CONST] r10 mov [rax] rdi mov [rax+CONST] r8 mov [rax+CONST] r9 jmp JUMP_ADDR_35	mov r8 [rdx] test r8 r8 jz JUMP_ADDR_111	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax mov rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_111	mov rdi CONST mov [rax+CONST] r8 mov [rax] rdi jmp JUMP_ADDR_35	mov r14d CONST jmp JUMP_ADDR_24	mov rdi r8 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] sil call sub_xxx mov rdi [rsp+CONST+var_xxx] jmp JUMP_ADDR_34	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax jz JUMP_ADDR_35	mov rdi CONST mov [rax] rdi mov rdi [rdx] mov [rax+CONST] rdi jmp JUMP_ADDR_35	mov edi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx test rax rax jz JUMP_ADDR_35	mov [rax] CONST jmp JUMP_ADDR_35	mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	movzx r9d [r10+CONST] lea edi [r14+CONST] movsxd rdi edi lea r10d [r9+CONST] cmp r10b CONST ja JUMP_ADDR_92	add rsi CONST lea r10 [CONST_VAR+rdi*4] lea edi [r9+CONST] movzx r9d [CONST_VAR] movsx rdi dil lea rdi [CONST_VAR+r10*2] lea r10d [r9+CONST] cmp r10b CONST jbe JUMP_ADDR_91	mov [rsp+CONST+var_xxx] rdi mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	mov rsi [rsp+CONST+var_xxx] xor r14d r14d mov [CONST_VAR] r10 xor esi esi jmp JUMP_ADDR_7	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST	mov [rsp+CONST+var_xxx] rdi mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST	mov [rsp+CONST+var_xxx] rdi mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST jmp JUMP_ADDR_97	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST jmp JUMP_ADDR_95	cmp [r10+CONST] CONST jz JUMP_ADDR_115	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST	mov [rsp+CONST+var_xxx] rdi mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST jmp JUMP_ADDR_97	cmp [r10+CONST] CONST jz JUMP_ADDR_118	mov rdi CONST and rdi [rsp+CONST+var_xxx] or rdi CONST jmp JUMP_ADDR_102	cmp [r10+CONST] CONST jnz JUMP_ADDR_89	mov rsi CONST and rsi [rsp+CONST+var_xxx] or rsi CONST	mov [rsp+CONST+var_xxx] rsi mov rsi [rsp+CONST+var_xxx] add r10 CONST mov r14d CONST mov [CONST_VAR] r10 mov esi CONST jmp JUMP_ADDR_6	cmp [r10+CONST] CONST jz JUMP_ADDR_117	mov rdi [rsp+CONST+var_xxx] mov r14d CONST mov [CONST_VAR] rsi mov esi CONST jmp JUMP_ADDR_6	mov rdi r8 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] sil call sub_xxx movsx rsi [rsp+CONST+var_xxx] xor eax eax mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx jmp JUMP_ADDR_35	mov rdi r10 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] sil mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rdi [rsp+CONST+var_xxx] call sub_xxx movsx rsi [rsp+CONST+var_xxx] xor eax eax mov rdx [rsp+CONST+var_xxx] lea rcx unk_xxx jmp JUMP_ADDR_35	mov rbp r9 mov r12d CONST jmp JUMP_ADDR_18	mov r12d CONST jmp JUMP_ADDR_17	mov rsi CONST and rsi [rsp+CONST+var_xxx] or rsi CONST	mov [rsp+CONST+var_xxx] rsi mov rsi [rsp+CONST+var_xxx] add r10 CONST mov r14d CONST mov [CONST_VAR] r10 mov esi CONST jmp JUMP_ADDR_6	mov rsi CONST and rsi [rsp+CONST+var_xxx] or rsi CONST jmp JUMP_ADDR_108	mov rsi CONST and rsi [rsp+CONST+var_xxx] or rsi CONST jmp JUMP_ADDR_116	call sub_xxx
[ph]libcap-git-setcap___gettext_extract_plural
endbr64 push r14 push r13 push r12 mov r12 rsi push rbp mov rbp rdx push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rdi rdi jz JUMP_ADDR_11	lea rsi GLOBAL_VAR mov r14 rdi call sub_xxx lea rsi GLOBAL_VAR mov rdi r14 mov r13 rax call sub_xxx test r13 r13 jz JUMP_ADDR_11	test rax rax jz JUMP_ADDR_11	lea rbx [rax+CONST] movzx eax [rax+CONST] test al al jz JUMP_ADDR_11	mov rdx CONST mov rcx fs:xxx jmp JUMP_ADDR_6	movzx eax [rbx+CONST] add rbx CONST test al al jz JUMP_ADDR_11	movzx edx al test [rcx+rdx*2+CONST] CONST jnz JUMP_ADDR_5	sub eax CONST cmp al CONST ja JUMP_ADDR_11	lea rsi [rsp+CONST+var_xxx] mov edx CONST mov rdi rbx call sub_xxx cmp [rsp+CONST+var_xxx] rbx jz JUMP_ADDR_11	mov [rbp+CONST] rax add r13 CONST lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r13 call sub_xxx test eax eax jnz JUMP_ADDR_11	mov rax [rsp+CONST+var_xxx] mov [r12] rax jmp JUMP_ADDR_12	lea rax unk_xxx mov [r12] rax mov [rbp+CONST] CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_14	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 retn	call sub_xxx
[ph]libcap-git-setcap___hash_string
endbr64 movzx eax [CONST_VAR] add rdi CONST mov rcx CONST test al al jz JUMP_ADDR_5	movzx edx [CONST_VAR] test dl dl jz JUMP_ADDR_4	shl rax CONST add rdi CONST add rax rdx mov rdx rax and edx CONST jz JUMP_ADDR_1	shr rdx CONST and rax rcx xor rax rdx movzx edx [CONST_VAR] test dl dl jnz JUMP_ADDR_2	retn	xor eax eax retn
[ph]libcap-git-setcap__setjmp
endbr64 xor esi esi jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_raise
endbr64 sub rsp CONST mov r8d edi mov r10d CONST xor edi edi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov r9 rsp lea rsi [rsp+CONST+CONST_VAR] mov rax CONST mov [rsp+CONST+CONST_VAR] rax mov rdx r9 mov eax CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST mov [rsp+CONST+CONST_VAR+CONST] CONST syscall mov eax CONST syscall mov edi eax mov eax CONST syscall mov esi eax mov edx r8d mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_4	mov r8d eax	mov r10d CONST xor edx edx mov rsi r9 mov edi CONST mov eax CONST syscall mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_5	mov eax r8d add rsp CONST retn	mov rdx CONST neg eax mov r8d CONST mov fs:xxx eax jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap_atoi
endbr64 sub rsp CONST mov edx CONST xor esi esi call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap_msort_with_tmp.part.0
push r15 mov rax rdx push r14 push r13 push r12 push rbp push rbx mov rbx rdx shr rbx CONST sub rax rbx sub rsp CONST mov r9 [CONST_VAR] mov rbp rax mov [rsp+CONST+var_xxx] rdi imul r9 rbx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx lea r12 [CONST_VAR+r9] cmp rbx CONST jz JUMP_ADDR_2	mov rdx rbx call sub_xxx	cmp rbp CONST jbe JUMP_ADDR_19	mov r14 [rsp+CONST+var_xxx] mov rdx rbp mov rsi r12 mov rdi r14 call sub_xxx mov rdx [r14] mov rax r14 mov r15 [r14+CONST] mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rdx mov rdx [r14+CONST] mov r14 [r14+CONST] mov [rsp+CONST+var_xxx] rdx cmp rax CONST jz JUMP_ADDR_45	ja JUMP_ADDR_12	test rax rax jz JUMP_ADDR_30	mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_10	mov rax [r12] sub rbp CONST add r12 CONST	mov [r15] rax add r15 CONST test rbx rbx jz JUMP_ADDR_54	test rbp rbp jz JUMP_ADDR_54	mov rax [rsp+CONST+var_xxx] mov rdx r14 mov rsi r12 mov rdi r13 call rax test eax eax jg JUMP_ADDR_7	mov rax [r13+CONST] sub rbx CONST add r13 CONST jmp JUMP_ADDR_8	cmp rax CONST jnz JUMP_ADDR_37	mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_17	mov rax [r12] sub rbp CONST add r12 CONST	mov [r15] rax add r15 CONST test rbx rbx jz JUMP_ADDR_54	test rbp rbp jz JUMP_ADDR_54	mov rsi [r12] mov rdi [r13+CONST] mov rdx r14 mov rax [rsp+CONST+var_xxx] call rax test eax eax jg JUMP_ADDR_14	mov rax [r13+CONST] sub rbx CONST add r13 CONST jmp JUMP_ADDR_15	mov rax [rsp+CONST+var_xxx] mov rdx [rax] mov r15 [rax+CONST] mov r14 [rax+CONST] mov [rsp+CONST+var_xxx] rdx mov rdx [rax+CONST] mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rdx cmp rax CONST jz JUMP_ADDR_43	ja JUMP_ADDR_25	test rax rax jz JUMP_ADDR_28	test rbp rbp jnz JUMP_ADDR_6	mov r13 [rsp+CONST+var_xxx] mov r14 rbx	imul rbx [rsp+CONST+var_xxx] mov rsi r13 mov rdi r15 mov rdx rbx call sub_xxx jmp JUMP_ADDR_55	cmp rax CONST jnz JUMP_ADDR_36	test rbp rbp jz JUMP_ADDR_23	mov ebp CONST jmp JUMP_ADDR_13	test rbp rbp jz JUMP_ADDR_23	mov ebp CONST nop [rax+rax+CONST]	mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_34	mov eax [r12] sub rbp CONST add r12 CONST	mov [r15] eax add r15 CONST test rbx rbx jz JUMP_ADDR_54	test rbp rbp jz JUMP_ADDR_54	mov rax [rsp+CONST+var_xxx] mov rdx r14 mov rsi r12 mov rdi r13 call rax test eax eax jg JUMP_ADDR_31	mov eax [r13+CONST] sub rbx CONST add r13 CONST jmp JUMP_ADDR_32	test rbp rbp jz JUMP_ADDR_23	mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_41	mov rsi r12 mov rdi r15 sub rbp CONST call sub_xxx add r12 [rsp+CONST+var_xxx] mov r15 rax	test rbx rbx jz JUMP_ADDR_54	test rbp rbp jz JUMP_ADDR_54	mov rdx r14 mov rax [rsp+CONST+var_xxx] mov rsi r12 mov rdi r13 call rax mov rdx [rsp+CONST+var_xxx] test eax eax jg JUMP_ADDR_38	mov rsi r13 mov rdi r15 sub rbx CONST call sub_xxx add r13 [rsp+CONST+var_xxx] mov r15 rax jmp JUMP_ADDR_39	test rbp rbp jz JUMP_ADDR_23	mov ebp CONST	mov r13 [rsp+CONST+var_xxx] nop [rax+rax+CONST]	mov [rsp+CONST+var_xxx] r15 mov rcx [rsp+CONST+var_xxx] mov rdx r14 mov rsi r12 add r15 [rsp+CONST+var_xxx] mov rdi r13 call rcx mov rcx [rsp+CONST+var_xxx] test eax eax jle JUMP_ADDR_56	mov rax [rsp+CONST+var_xxx] mov rsi r12 sub rbp CONST add r12 rax	mov rax r15 sub rax [rsp+CONST+var_xxx] cmp r15 rax jbe JUMP_ADDR_51	nop [rax+CONST]	mov rdi rcx movsq mov rcx rdi cmp r15 rdi ja JUMP_ADDR_50	test rbx rbx jz JUMP_ADDR_54	test rbp rbp jnz JUMP_ADDR_46	nop [rax+rax+CONST]	mov r14 [rsp+CONST+var_xxx] sub r14 rbp test rbx rbx jnz JUMP_ADDR_24	mov rdx [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] imul rdx r14 mov rsi [rax+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	mov rax [rsp+CONST+var_xxx] mov rsi r13 sub rbx CONST add r13 rax jmp JUMP_ADDR_48
[ph]libcap-git-setcap_qsort_r
endbr64 push rbp mov rbp rsp push r15 mov r15 r8 push r14 mov r14 rdx push r13 push r12 push rbx mov rbx rcx sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax cmp rdx CONST ja JUMP_ADDR_10	imul rsi rdx mov r12 rsi cmp r12 CONST ja JUMP_ADDR_11	mov [rbp+var_xxx] CONST add r12 CONST and r12 CONST sub rsp r12 lea r10 [rsp+CONST+var_xxx+CONST] and r10 CONST	mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r14 mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rbx mov [rbp+var_xxx] r15 cmp r14 CONST ja JUMP_ADDR_15	mov rax [rbp+var_xxx] or rax r14 test al CONST jz JUMP_ADDR_34	mov rdx [rbp+var_xxx] cmp rdx CONST jbe JUMP_ADDR_7	mov rsi [rbp+var_xxx] lea rdi [rbp+var_xxx] call sub_xxx	mov rdi [rbp+var_xxx] call sub_xxx	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_42	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov r12 [rbp+var_xxx] shl r12 CONST add r12 rdx cmp r12 CONST jbe JUMP_ADDR_2	mov edx cs:xxx test edx edx jz JUMP_ADDR_29	movsxd rsi edx mov rax r12 xor edx edx div rsi cmp rax cs:xxx ja JUMP_ADDR_28	mov r13 CONST mov rdi r12 mov edx fs:xxx mov [rbp+var_xxx] edx call sub_xxx mov edx [rbp+var_xxx] mov [rbp+var_xxx] rax mov fs:xxx edx test rax rax jz JUMP_ADDR_28	mov r10 rax jmp JUMP_ADDR_3	mov rax [rbp+var_xxx] lea rsi ds:xxx lea r15 [r10+CONST_VAR] lea rax [r15+CONST_VAR] mov [rbp+var_xxx] rax cmp r15 rax jnb JUMP_ADDR_40	mov rdx [rbp+var_xxx] mov rax r15	add rax CONST mov [rax+CONST] rdx add rdx r14 cmp [rbp+var_xxx] rax ja JUMP_ADDR_17	add rsi [rbp+var_xxx]	mov rdx [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST cmp rdx CONST jbe JUMP_ADDR_32	lea rdi [rbp+var_xxx] call sub_xxx	mov [rbp+var_xxx] CONST mov rbx [rbp+var_xxx] jmp JUMP_ADDR_23	add [rbp+var_xxx] CONST add rbx r14 mov rax [rbp+var_xxx] cmp [rbp+var_xxx] rax jbe JUMP_ADDR_7	mov rax [rbp+var_xxx] mov r12 [r15+rax*8] cmp r12 rbx jz JUMP_ADDR_22	mov rdi [rbp+var_xxx] mov rdx r14 mov rsi rbx call sub_xxx mov r13 [rbp+var_xxx] mov rdi rbx jmp JUMP_ADDR_26	mov r12 rax	mov rax r12 xor edx edx sub rax [rbp+var_xxx] mov rsi r13 div r14 mov [r15+rsi*8] rdi mov rdx r14 mov rsi r12 mov r13 rax call sub_xxx lea rdx [r15+r13*8] mov rdi r12 mov rax [rdx] cmp rax rbx jnz JUMP_ADDR_25	mov [rdx] r12 mov rsi [rbp+var_xxx] mov rdx r14 call sub_xxx jmp JUMP_ADDR_22	mov rsi [rbp+var_xxx] mov rdi [rbp+var_xxx] mov r8 r15 mov rcx rbx mov rdx r14 call sub_xxx jmp JUMP_ADDR_8	mov edi CONST call sub_xxx mov rdx CONST cmp rax CONST jz JUMP_ADDR_31	test rax rax lea rdx [rax+CONST] cmovns rdx rax sar rdx CONST	mov cs:xxx rdx mov edi CONST call sub_xxx mov cs:xxx eax mov edx eax jmp JUMP_ADDR_12	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_21	jmp JUMP_ADDR_7	cmp r14 CONST jz JUMP_ADDR_41	cmp r14 CONST jz JUMP_ADDR_38	test al CONST jnz JUMP_ADDR_5	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	test [rbp+var_xxx] CONST jnz JUMP_ADDR_36	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	mov rsi r15 jmp JUMP_ADDR_19	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap_qsort
endbr64 xor r8d r8d jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_getenv
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rbx cs:xxx test rbx rbx jz JUMP_ADDR_16	movzx eax [CONST_VAR] mov r15 rdi test al al jz JUMP_ADDR_16	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_9	mov r12 [rbx] or ah CONST test r12 r12 jnz JUMP_ADDR_6	jmp JUMP_ADDR_8	mov r12 [rbx+CONST] add rbx CONST test r12 r12 jz JUMP_ADDR_8	cmp ax [r12] jnz JUMP_ADDR_5	add r12 CONST	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx mov r12 [rbx] movzx ebp [r15] add r15 CONST mov r13 rax lea r14 [rax+CONST] test r12 r12 jnz JUMP_ADDR_12	jmp JUMP_ADDR_8	mov r12 [rbx+CONST] add rbx CONST test r12 r12 jz JUMP_ADDR_8	cmp bp [r12] jnz JUMP_ADDR_11	lea rdi [r12+CONST] mov rdx r14 mov rsi r15 call sub_xxx test eax eax jnz JUMP_ADDR_11	cmp [r12+r13] CONST jnz JUMP_ADDR_11	lea r12 [r12+r13+CONST] jmp JUMP_ADDR_8	xor r12d r12d jmp JUMP_ADDR_8
[ph]libcap-git-setcap___run_exit_handlers
endbr64 push r15 push r14 push r13 push r12 mov r12d edx push rbp mov ebp edi push rbx mov rbx rsi sub rsp CONST cmp cs:xxx CONST jz JUMP_ADDR_2	test cl cl jnz JUMP_ADDR_38	lea r13 GLOBAL_VAR nop [rax+rax+CONST]	mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	mov edx CONST cmpxchg cs:xxx edx	mov r14 [rbx] test r14 r14 jnz JUMP_ADDR_11	jmp JUMP_ADDR_27	cmp rdx CONST jz JUMP_ADDR_18	mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	mov edx CONST cmpxchg cs:xxx edx	cmp cs:xxx r15 jnz JUMP_ADDR_5	mov rax [r14+CONST] test rax rax jz JUMP_ADDR_23	lea r8 [rax+CONST] mov r15 cs:xxx mov [r14+CONST] r8 mov eax fs:xxx test eax eax jnz JUMP_ADDR_21	sub cs:xxx CONST	mov rax r8 shl rax CONST add rax r14 mov rdx [rax+CONST] cmp rdx CONST jz JUMP_ADDR_17	cmp rdx CONST jnz JUMP_ADDR_7	mov rdx [rax+CONST] mov rdi [rax+CONST] mov [rax+CONST] CONST mov esi ebp ror rdx CONST xor rdx fs:xxx call rdx jmp JUMP_ADDR_8	mov rax [rax+CONST] ror rax CONST xor rax fs:xxx call rax jmp JUMP_ADDR_8	mov rdx [rax+CONST] mov rsi [rax+CONST] mov edi ebp ror rdx CONST xor rdx fs:xxx call rdx jmp JUMP_ADDR_8	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_10	mov rdi r13 call sub_xxx jmp JUMP_ADDR_10	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_14	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_14	mov rax [r14] mov [rbx] rax test rax rax jz JUMP_ADDR_25	mov rdi r14 call sub_xxx	mov eax fs:xxx test eax eax jnz JUMP_ADDR_36	sub cs:xxx CONST jmp JUMP_ADDR_3	mov cs:xxx CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_39	sub cs:xxx CONST	test r12b r12b jz JUMP_ADDR_33	mov rbx off_xxx mov r12 unk_xxx cmp rbx r12 jnb JUMP_ADDR_33	nop [rax+CONST]	call callfunc_xxx add rbx CONST cmp rbx r12 jb JUMP_ADDR_32	mov edi ebp call sub_xxx	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	mov rdi r13 call sub_xxx jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx sub eax CONST jle JUMP_ADDR_3	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_3	call callfunc_xxx jmp JUMP_ADDR_2	xor eax eax xchg eax cs:xxx sub eax CONST jle JUMP_ADDR_29	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_29
[ph]libcap-git-setcap_exit
endbr64 sub rsp CONST mov ecx CONST mov edx CONST lea rsi off_xxx call sub_xxx
[ph]libcap-git-setcap___new_exitfn
endbr64 cmp cs:xxx CONST jnz JUMP_ADDR_17	push rbp push rbx mov rbx rdi sub rsp CONST mov rbp [CONST_VAR] test rbp rbp jz JUMP_ADDR_16	mov rsi rbp xor edi edi nop [rax+rax+CONST]	mov rax [CONST_VAR+CONST] jmp JUMP_ADDR_6	lea rdx [rax+CONST] mov rcx rdx shl rcx CONST cmp [CONST_VAR+rcx+CONST] CONST jnz JUMP_ADDR_9	mov rax rdx	test rax rax jnz JUMP_ADDR_4	mov rax [CONST_VAR] mov [CONST_VAR+CONST] CONST mov rdi rsi test rax rax jz JUMP_ADDR_15	mov rsi rax jmp JUMP_ADDR_3	cmp rax CONST jz JUMP_ADDR_12	mov rdx rax add rax CONST mov [CONST_VAR+CONST] rax shl rdx CONST lea r8 [CONST_VAR+rdx+CONST]	mov [r8] CONST mov rax r8 add cs:xxx CONST add rsp CONST pop rbx pop rbp retn	mov rsi rdi test rdi rdi jnz JUMP_ADDR_15	mov esi CONST mov edi CONST call sub_xxx mov rsi rax test rax rax jz JUMP_ADDR_18	mov [CONST_VAR] rbp mov [rbx] rsi	mov [CONST_VAR+CONST] CONST lea r8 [CONST_VAR+CONST] jmp JUMP_ADDR_11	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor eax eax retn	add rsp CONST xor r8d r8d mov rax r8 pop rbx pop rbp retn
[ph]libcap-git-setcap___cxa_atexit
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST test rdi rdi jz JUMP_ADDR_13	mov rbx rdi mov r12 rsi mov rbp rdx mov r13 rcx mov eax fs:xxx test eax eax jnz JUMP_ADDR_7	mov edx CONST cmpxchg cs:xxx edx	mov rdi r13 call sub_xxx test rax rax jz JUMP_ADDR_11	mov rdx rbx mov [rax+CONST] r12 xor rdx fs:xxx rol rdx CONST mov [rax+CONST] rbp mov [rax+CONST] rdx mov [rax] CONST mov r8d fs:xxx test r8d r8d jnz JUMP_ADDR_9	sub cs:xxx CONST	add rsp CONST mov eax r8d pop rbx pop rbp pop r12 pop r13 retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx xor r8d r8d cmp eax CONST jle JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_14	sub cs:xxx CONST mov r8d CONST jmp JUMP_ADDR_6	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor eax eax xchg eax cs:xxx or r8d CONST sub eax CONST jle JUMP_ADDR_6	jmp JUMP_ADDR_10	endbr64 lea rcx off_xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___strtoll_internal
endbr64 mov rax CONST mov r8 fs:xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___strtol
endbr64 mov rax CONST xor ecx ecx mov r8 fs:xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___strtoul_internal
endbr64 mov rax CONST mov r8 fs:xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___strtoul
endbr64 mov rax CONST xor ecx ecx mov r8 fs:xxx jmp JUMP_ADDR_87	endbr64 push r15 push r14 xor r14d r14d push r13 mov r13 rdi mov edi edx push r12 xor r12d r12d push rbp push rbx sub rsp CONST mov rax [r8+CONST] mov [rsp+CONST+var_xxx] rsi test ecx ecx jnz JUMP_ADDR_51	cmp edi CONST jz JUMP_ADDR_35	cmp edi CONST ja JUMP_ADDR_35	movsx rdx [r13+CONST] mov rcx [r8+CONST] mov rbx r13 mov rax rdx test [rcx+rdx*2+CONST] CONST jz JUMP_ADDR_7	nop [rax+rax+CONST]	movsx rdx [rbx+CONST] add rbx CONST mov rax rdx test [rcx+rdx*2+CONST] CONST jnz JUMP_ADDR_6	test al al jz JUMP_ADDR_64	cmp al CONST jz JUMP_ADDR_47	cmp al CONST mov [rsp+CONST+var_xxx] CONST setz al movzx eax al add rbx rax movzx edx [rbx] cmp dl CONST jz JUMP_ADDR_48	test edi edi jnz JUMP_ADDR_37	test r14 r14 jnz JUMP_ADDR_68	mov [rsp+CONST+var_xxx] CONST mov edi CONST xor ebp ebp mov r8 CONST	test dl dl jz JUMP_ADDR_54	cmp r14 rbx jz JUMP_ADDR_54	mov r10 cs:xxx	lea rax [rbp+CONST] mov r11 cs:xxx mov rcx rbx xor esi esi mov [rsp+CONST+var_xxx] rax xor r9d r9d movsxd r15 edi jmp JUMP_ADDR_22	jnz JUMP_ADDR_19	cmp al [rsp+CONST+var_xxx] ja JUMP_ADDR_28	imul rsi r15 movzx eax al add rsi rax mov rax rcx	movzx edx [rax+CONST] lea rcx [rax+CONST] test dl dl jz JUMP_ADDR_30	cmp rcx r14 jz JUMP_ADDR_30	lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_26	test rbp rbp jnz JUMP_ADDR_39	test [r11+rdx*2+CONST] CONST jz JUMP_ADDR_30	mov eax [r10+rdx*4] sub eax CONST	movzx edx al cmp edx edi jge JUMP_ADDR_30	cmp r8 rsi jnb JUMP_ADDR_17	mov rax rcx mov r9d CONST movzx edx [rax+CONST] lea rcx [rax+CONST] test dl dl jnz JUMP_ADDR_21	nop [rax+rax+CONST]	cmp rbx rcx jz JUMP_ADDR_55	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_33	mov [rax] rcx	test r9d r9d jz JUMP_ADDR_45	mov rax CONST mov rdx CONST mov fs:xxx CONST mov ecx [rsp+CONST+var_xxx] mov rax CONST test ecx ecx cmovz rax rdx jmp JUMP_ADDR_36	mov rax CONST mov fs:xxx CONST xor eax eax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp edi CONST jz JUMP_ADDR_11	lea eax [CONST_VAR+CONST] lea rcx unk_xxx xor ebp ebp xor r14d r14d cdqe movzx esi [rcx+rax] lea rcx unk_xxx mov r8 [rcx+rax*8] mov [rsp+CONST+var_xxx] sil jmp JUMP_ADDR_13	mov [rsp+CONST+var_xxx] dl xor eax eax xchg ax ax	movzx edx [rcx+rax] cmp [r12+rax] dl jnz JUMP_ADDR_43	add rax CONST cmp rax rbp jnz JUMP_ADDR_40	mov rax [rsp+CONST+var_xxx] add rax rcx jmp JUMP_ADDR_20	movzx edx [rsp+CONST+var_xxx] cmp rbp rax jnz JUMP_ADDR_24	jmp JUMP_ADDR_42	mov rdx CONST movsxd rax [rsp+CONST+var_xxx] add rax rdx cmp rsi rax ja JUMP_ADDR_34	mov edx [rsp+CONST+var_xxx] mov rax rsi neg rax test edx edx cmovz rax rsi add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	movzx edx [rbx+CONST] add rbx CONST mov [rsp+CONST+var_xxx] CONST cmp dl CONST jnz JUMP_ADDR_10	test edi CONST jz JUMP_ADDR_59	cmp edi CONST jz JUMP_ADDR_66	lea eax [CONST_VAR+CONST] lea rdx unk_xxx xor r14d r14d xor ebp ebp cdqe mov r10 cs:xxx mov r8 [rdx+rax*8] lea rdx unk_xxx movzx eax [rdx+rax] mov edx CONST mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_16	mov r14 [rax+CONST] movzx ebx [r14] lea edx [rbx+CONST] cmp dl CONST ja JUMP_ADDR_62	mov r12 [rax+CONST] cmp [r12] CONST jnz JUMP_ADDR_2	xor r14d r14d xor r12d r12d jmp JUMP_ADDR_2	mov rcx rbx	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_65	mov rax rcx sub rax r13 cmp rax CONST jle JUMP_ADDR_58	movsx rdx [rcx+CONST] mov rax cs:xxx cmp [rax+rdx*4] CONST jz JUMP_ADDR_84	mov rax [rsp+CONST+var_xxx] mov [rax] r13 xor eax eax jmp JUMP_ADDR_36	mov r10 cs:xxx movsx rax [rbx+CONST] cmp [r10+rax*4] CONST jz JUMP_ADDR_63	test edi edi jnz JUMP_ADDR_49	mov [rsp+CONST+var_xxx] CONST mov edi CONST xor r14d r14d xor ebp ebp mov r8 CONST mov edx CONST jmp JUMP_ADDR_16	xor r14d r14d jmp JUMP_ADDR_2	movzx edx [rbx+CONST] mov [rsp+CONST+var_xxx] CONST add rbx CONST xor ebp ebp mov r8 CONST mov edi CONST xor r14d r14d jmp JUMP_ADDR_13	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_58	xor eax eax jmp JUMP_ADDR_36	test r14 r14 jnz JUMP_ADDR_68	mov [rsp+CONST+var_xxx] CONST xor ebp ebp mov edx CONST mov r8 CONST jmp JUMP_ADDR_15	mov rdi r12 mov [rsp+CONST+var_xxx] dl call sub_xxx mov rcx rax mov rbp rax test rax rax jz JUMP_ADDR_54	movzx edx [rsp+CONST+var_xxx] xor eax eax mov esi edx jmp JUMP_ADDR_72	add rax CONST cmp rax rcx jz JUMP_ADDR_54	movzx esi [rbx+rax]	cmp [r12+rax] sil jz JUMP_ADDR_70	mov rsi rbx test dl dl jz JUMP_ADDR_83	mov r8 cs:xxx mov rdi cs:xxx mov rsi rbx jmp JUMP_ADDR_76	movzx edx [CONST_VAR+CONST] add rsi CONST test dl dl jz JUMP_ADDR_83	lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_75	xor eax eax jmp JUMP_ADDR_79	add rax CONST cmp rax rcx jz JUMP_ADDR_75	movzx r11d [CONST_VAR+rax] cmp [r12+rax] r11b jz JUMP_ADDR_78	cmp rcx rax jbe JUMP_ADDR_75	test [r8+rdx*2+CONST] CONST jz JUMP_ADDR_83	cmp [CONST_VAR+rdx*4] CONST jle JUMP_ADDR_75	mov rcx r14 mov rdx r12 mov rdi rbx call sub_xxx mov [rsp+CONST+var_xxx] CONST movzx edx [rbx] mov r8 CONST mov r14 rax mov edi CONST jmp JUMP_ADDR_13	cmp [rcx+CONST] CONST jnz JUMP_ADDR_58	mov rax [rsp+CONST+var_xxx] sub rcx CONST mov [rax] rcx xor eax eax jmp JUMP_ADDR_36	endbr64 mov r8 rcx xor ecx ecx jmp JUMP_ADDR_1	endbr64 push r15 push r14 xor r14d r14d push r13 mov r13 rdi push r12 xor r12d r12d push rbp push rbx sub rsp CONST mov rax [r8+CONST] mov [rsp+CONST+var_xxx] rsi mov esi edx test ecx ecx jnz JUMP_ADDR_135	cmp esi CONST jz JUMP_ADDR_121	cmp esi CONST ja JUMP_ADDR_121	movsx rdx [r13+CONST] mov rcx [r8+CONST] mov rbx r13 mov rax rdx test [rcx+rdx*2+CONST] CONST jz JUMP_ADDR_93	nop [rax+rax+CONST]	movsx rdx [rbx+CONST] add rbx CONST mov rax rdx test [rcx+rdx*2+CONST] CONST jnz JUMP_ADDR_92	test al al jz JUMP_ADDR_148	cmp al CONST jz JUMP_ADDR_131	cmp al CONST mov [rsp+CONST+var_xxx] CONST setz al movzx eax al add rbx rax movzx edx [rbx] cmp dl CONST jz JUMP_ADDR_132	test esi esi jnz JUMP_ADDR_123	test r14 r14 jnz JUMP_ADDR_152	mov eax CONST mov esi CONST xor ebp ebp	cdqe lea rcx unk_xxx mov rdi [rcx+rax*8] lea rcx unk_xxx movzx eax [rcx+rax] mov [rsp+CONST+var_xxx] al test dl dl jz JUMP_ADDR_138	cmp r14 rbx jz JUMP_ADDR_138	mov r10 cs:xxx	lea rax [rbp+CONST] mov rcx rbx xor r8d r8d xor r9d r9d mov [rsp+CONST+var_xxx] rax mov r11 cs:xxx movsxd r15 esi jmp JUMP_ADDR_108	jnz JUMP_ADDR_105	cmp al [rsp+CONST+var_xxx] ja JUMP_ADDR_114	imul r8 r15 movzx eax al add r8 rax mov rax rcx	movzx edx [rax+CONST] lea rcx [rax+CONST] test dl dl jz JUMP_ADDR_116	cmp rcx r14 jz JUMP_ADDR_116	lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_112	test rbp rbp jnz JUMP_ADDR_125	test [r11+rdx*2+CONST] CONST jz JUMP_ADDR_116	mov eax [r10+rdx*4] sub eax CONST	movzx edx al cmp edx esi jge JUMP_ADDR_116	cmp rdi r8 jnb JUMP_ADDR_103	mov rax rcx mov r9d CONST movzx edx [rax+CONST] lea rcx [rax+CONST] test dl dl jnz JUMP_ADDR_107	xchg ax ax	cmp rbx rcx jz JUMP_ADDR_139	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_119	mov [rax] rcx	test r9d r9d jnz JUMP_ADDR_168	mov edx [rsp+CONST+var_xxx] mov rax r8 neg rax test edx edx cmovnz r8 rax jmp JUMP_ADDR_122	mov rax CONST xor r8d r8d mov fs:xxx CONST	add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp esi CONST jz JUMP_ADDR_97	lea eax [CONST_VAR+CONST] xor ebp ebp xor r14d r14d jmp JUMP_ADDR_99	mov [rsp+CONST+var_xxx] dl xor eax eax nop [rax+rax+CONST]	movzx edx [rcx+rax] cmp [r12+rax] dl jnz JUMP_ADDR_129	add rax CONST cmp rax rbp jnz JUMP_ADDR_126	mov rax [rsp+CONST+var_xxx] add rax rcx jmp JUMP_ADDR_106	movzx edx [rsp+CONST+var_xxx] cmp rbp rax jnz JUMP_ADDR_110	jmp JUMP_ADDR_128	movzx edx [rbx+CONST] add rbx CONST mov [rsp+CONST+var_xxx] CONST cmp dl CONST jnz JUMP_ADDR_96	test esi CONST jz JUMP_ADDR_143	cmp esi CONST jz JUMP_ADDR_150	lea eax [CONST_VAR+CONST] lea rdx unk_xxx xor r14d r14d xor ebp ebp cdqe mov r10 cs:xxx mov rdi [rdx+rax*8] lea rdx unk_xxx movzx eax [rdx+rax] mov edx CONST mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_102	mov r14 [rax+CONST] movzx edi [r14] lea edx [CONST_VAR+CONST] cmp dl CONST ja JUMP_ADDR_146	mov r12 [rax+CONST] cmp [r12] CONST jnz JUMP_ADDR_88	xor r14d r14d xor r12d r12d jmp JUMP_ADDR_88	mov rcx rbx	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_149	mov rax rcx sub rax r13 cmp rax CONST jle JUMP_ADDR_142	movsx rdx [rcx+CONST] mov rax cs:xxx cmp [rax+rdx*4] CONST jz JUMP_ADDR_169	mov rax [rsp+CONST+var_xxx] xor r8d r8d mov [rax] r13 jmp JUMP_ADDR_122	mov r10 cs:xxx movsx rax [rbx+CONST] cmp [r10+rax*4] CONST jz JUMP_ADDR_147	test esi esi jnz JUMP_ADDR_133	mov esi CONST xor r14d r14d xor ebp ebp mov edx CONST movzx eax cs:xxx mov rdi cs:xxx mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_102	xor r14d r14d jmp JUMP_ADDR_88	movzx edx [rbx+CONST] mov eax CONST add rbx CONST xor ebp ebp mov esi CONST xor r14d r14d jmp JUMP_ADDR_99	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_142	xor r8d r8d jmp JUMP_ADDR_122	test r14 r14 jnz JUMP_ADDR_152	movzx eax cs:xxx mov rdi cs:xxx xor ebp ebp mov edx CONST mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_101	mov rdi r12 mov [rsp+CONST+var_xxx] dl call sub_xxx mov rcx rax mov rbp rax test rax rax jz JUMP_ADDR_138	movzx edx [rsp+CONST+var_xxx] xor eax eax mov esi edx jmp JUMP_ADDR_156	add rax CONST cmp rcx rax jz JUMP_ADDR_138	movzx esi [rbx+rax]	cmp sil [r12+rax] jz JUMP_ADDR_154	mov rsi rbx test dl dl jz JUMP_ADDR_167	mov r8 cs:xxx mov rdi cs:xxx mov rsi rbx jmp JUMP_ADDR_160	movzx edx [CONST_VAR+CONST] add rsi CONST test dl dl jz JUMP_ADDR_167	lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_159	xor eax eax jmp JUMP_ADDR_163	add rax CONST cmp rax rcx jz JUMP_ADDR_159	movzx r11d [CONST_VAR+rax] cmp [r12+rax] r11b jz JUMP_ADDR_162	cmp rcx rax jbe JUMP_ADDR_159	test [r8+rdx*2+CONST] CONST jz JUMP_ADDR_167	cmp [CONST_VAR+rdx*4] CONST jle JUMP_ADDR_159	mov rcx r14 mov rdx r12 mov rdi rbx call sub_xxx movzx edx [rbx] mov esi CONST mov r14 rax mov eax CONST jmp JUMP_ADDR_99	mov rax CONST mov r8 CONST mov fs:xxx CONST jmp JUMP_ADDR_122	cmp [rcx+CONST] CONST jnz JUMP_ADDR_142	mov rax [rsp+CONST+var_xxx] sub rcx CONST mov [rax] rcx jmp JUMP_ADDR_149
[ph]libcap-git-setcap___strtoul_l
endbr64 mov r8 rcx xor ecx ecx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___correctly_grouped_prefixmb
endbr64 push r15 mov r15 rsi push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rcx test rcx rcx jz JUMP_ADDR_16	mov r14 rdi mov rdi rdx mov rbx rdx call sub_xxx cmp r15 r14 jbe JUMP_ADDR_15	lea rsi [rax+CONST] mov ebp CONST lea r10 [rax+CONST] mov [rsp+CONST+var_xxx] rsi lea r12 [r14+rax+CONST] sub rbp rax lea r9 [r14+CONST]	lea rax [r15+CONST] cmp [rsp+CONST+var_xxx] rax ja JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] movzx edi [rbx] add rax r15 jmp JUMP_ADDR_6	sub rax CONST cmp rax r12 jz JUMP_ADDR_16	lea rsi [rbp+rax+CONST] cmp [rax+CONST] dil jnz JUMP_ADDR_5	movzx edx [rbx+CONST] test dl dl jz JUMP_ADDR_11	lea r8 [rbx+CONST] mov rcx rax nop [rax+rax+CONST]	cmp [rcx] dl jnz JUMP_ADDR_5	movzx edx [r8] sub rcx CONST add r8 CONST test dl dl jnz JUMP_ADDR_9	cmp [rsp+CONST+var_xxx] rsi ja JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] mov rcx r15 sub rcx rsi movsx rax [rax] mov rdx rax add eax CONST cdqe cmp rcx rax jz JUMP_ADDR_17	lea r15 [CONST_VAR+rdx+CONST] cmovle r15 rsi	cmp r15 [rsp+CONST+var_xxx] ja JUMP_ADDR_3	mov rax [rsp+CONST+var_xxx] cmp r15 rax cmovb r15 rax	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r14 [rsp+CONST+var_xxx] lea r13 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] r12 mov [rsp+CONST+var_xxx] r13 mov r12 [rsp+CONST+var_xxx] movsx r11 [r14+CONST] test r11b r11b jz JUMP_ADDR_31	nop [rax+rax+CONST]	add r14 CONST cmp r11b CONST jbe JUMP_ADDR_32	cmp r12 r13 ja JUMP_ADDR_16	mov rsi r13 test dil dil jz JUMP_ADDR_29	nop	lea rdx [CONST_VAR+r10] lea rcx [rbx+CONST] mov eax edi jmp JUMP_ADDR_25	movzx eax [rcx] sub rdx CONST add rcx CONST test al al jz JUMP_ADDR_29	cmp [rdx] al jz JUMP_ADDR_24	sub rsi CONST cmp r9 rsi jz JUMP_ADDR_16	test dil dil jnz JUMP_ADDR_23	nop [rax+CONST]	cmp r12 rsi ja JUMP_ADDR_16	movsx r11 [r14+CONST] lea r13 [CONST_VAR+CONST] test r11b r11b jnz JUMP_ADDR_19	movsx r11 [r14] cmp r11b CONST ja JUMP_ADDR_20	cmp r12 r13 ja JUMP_ADDR_16	mov r8 r13 test dil dil jz JUMP_ADDR_41	nop [rax+rax+CONST]	lea rdx [r8+r10] lea rcx [rbx+CONST] mov eax edi jmp JUMP_ADDR_37	movzx eax [rcx] sub rdx CONST add rcx CONST test al al jz JUMP_ADDR_41	cmp [rdx] al jz JUMP_ADDR_36	lea rax [r8+CONST] cmp rax r9 jz JUMP_ADDR_44	mov r8 rax test dil dil jnz JUMP_ADDR_35	nop [rax+CONST]	cmp r12 r8 ja JUMP_ADDR_47	sub r13 r8 cmp r13 r11 jnz JUMP_ADDR_48	mov rsi r8 jmp JUMP_ADDR_30	mov r12 [rsp+CONST+var_xxx] sub rsi r8	cmp r11 rsi jge JUMP_ADDR_16	mov r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_14	mov rsi r13 mov r12 [rsp+CONST+var_xxx] sub rsi r8 jmp JUMP_ADDR_45	mov r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_46
[ph]libcap-git-setcap___fprintf
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov rdx rsp xor ecx ecx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap__IO_printf
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi cs:xxx mov rdx rsp xor ecx ecx lea rax [rsp+CONST+arg_xxx] mov rsi r10 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap__IO_sprintf
endbr64 sub rsp CONST mov r10 rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] xor r8d r8d mov rdx r10 mov [rsp+CONST+var_xxx] rax mov rcx rsp lea rax [rsp+CONST+var_xxx] mov rsi CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap____asprintf
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov rdx rsp xor ecx ecx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap_perror_internal
push r13 push r12 push rbp mov rbp rdi mov edi edx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rsi rsi jz JUMP_ADDR_4	cmp [CONST_VAR] CONST mov r12 rsi lea r13 GLOBAL_VAR jz JUMP_ADDR_4	mov rsi rsp mov edx CONST call sub_xxx mov rcx r13 mov rdx r12 mov rdi rbp mov r8 rax lea rsi GLOBAL_VAR xor eax eax call sub_xxx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_5	add rsp CONST pop rbp pop r12 pop r13 retn	lea r13 unk_xxx mov r12 r13 jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap_perror
endbr64 push r13 push r12 push rbp mov rbp rdi sub rsp CONST mov rax CONST mov rdi cs:xxx mov r12d fs:xxx mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_2	add rsp CONST mov edx r12d mov rsi rbp pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	call sub_xxx mov edi eax cmp eax CONST jnz JUMP_ADDR_4	mov rdi cs:xxx jmp JUMP_ADDR_1	call sub_xxx mov edi eax cmp eax CONST jz JUMP_ADDR_3	lea rsi unk_xxx mov [rsp+CONST+var_xxx] eax call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_9	mov edx r12d mov rsi rbp mov rdi rax call sub_xxx test [r13+CONST] CONST jz JUMP_ADDR_8	mov rax cs:xxx or [rax] CONST	add rsp CONST mov rdi r13 pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov edi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_3
[ph]libcap-git-setcap_read_int
mov rdx [CONST_VAR] lea rax [rdx+CONST] movzx r8d [rdx] mov [CONST_VAR] rax movzx eax [rdx+CONST] sub r8d CONST sub eax CONST cmp eax CONST ja JUMP_ADDR_7	add rdx CONST mov r10d CONST mov r9d CONST jmp JUMP_ADDR_4	lea ecx [r8+r8*4] mov esi r9d add ecx ecx sub esi eax add eax ecx cmp esi ecx cmovl eax r10d mov r8d eax	mov [CONST_VAR] rdx movzx eax [rdx] add rdx CONST sub eax CONST cmp eax CONST ja JUMP_ADDR_7	test r8d r8d js JUMP_ADDR_3	cmp r8d CONST jle JUMP_ADDR_2	mov r8d CONST jmp JUMP_ADDR_3	mov eax r8d retn
[ph]libcap-git-setcap_group_number
push r15 push r14 push r13 push r12 mov r12 rsi push rbp push rbx sub rsp CONST movsx ebx [rcx] lea eax [rbx+CONST] cmp al CONST jbe JUMP_ADDR_2	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r15 rdi mov rbp rdx mov r13 rcx mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx lea rcx [r13+CONST] mov r13 rbp mov rsi r12 sub r13 r12 mov rdi r15 mov [rsp+CONST+var_xxx] rcx mov r14 rax mov rdx r13 call sub_xxx lea rax [r15+r13] cmp r15 rax jnb JUMP_ADDR_17	mov r8 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] movsxd r14 r14d xchg ax ax	movzx edx [rax+CONST] lea rsi [rax+CONST] lea r12 [rbp+CONST] mov [rbp+CONST] dl sub ebx CONST jnz JUMP_ADDR_13	cmp r15 rsi jnb JUMP_ADDR_1	sub rbp rax cmp r14 rbp jge JUMP_ADDR_16	mov rax r14 nop [rax+CONST]	movzx edx [r8+rax+CONST] sub rax CONST sub r12 CONST mov [r12] dl test eax eax jg JUMP_ADDR_8	movsx ebx [rcx] cmp bl CONST ja JUMP_ADDR_16	test bl bl jz JUMP_ADDR_15	add rcx CONST xchg ax ax	mov rax rsi mov rbp r12 jmp JUMP_ADDR_4	cmp r15 rsi jb JUMP_ADDR_12	jmp JUMP_ADDR_1	movsx ebx [rcx+CONST] jmp JUMP_ADDR_12	mov rdx r15 mov rdi r12 sub rdx rsi call sub_xxx jmp JUMP_ADDR_1	mov r12 rbp jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_helper_overflow
endbr64 push r13 push r12 push rbp mov rbp rdi push rbx mov ebx esi sub rsp CONST mov rcx [rbp+CONST] mov rsi [rbp+CONST] mov rdi [CONST_VAR+CONST] mov r12 rcx sub r12 rsi cmp ecx esi jz JUMP_ADDR_4	mov r13 [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_7	movsxd r12 r12d mov rdx r12 call callfunc_xxx mov r13 rax lea rax [rax+CONST] cmp rax CONST ja JUMP_ADDR_9	mov rdi [rbp+CONST] mov rdx r12 sub rdx r13 lea rsi [CONST_VAR+r13] call sub_xxx mov rcx [rbp+CONST] sub rcx r13 mov [rbp+CONST] rcx	movzx eax bl cmp [rbp+CONST] rcx jbe JUMP_ADDR_8	lea rdx [rcx+CONST] mov [rbp+CONST] rdx mov [rcx] bl	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov [rsp+CONST] rdi call sub_xxx mov rsi [rbp+CONST] mov rdi [rsp+CONST] jmp JUMP_ADDR_2	add rsp CONST mov rdi rbp mov esi eax pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov eax CONST jmp JUMP_ADDR_6
[ph]libcap-git-setcap__i18n_number_rewrite_0
push r15 push r14 mov r14 rdi lea rdi GLOBAL_VAR push r13 mov r13 rsi push r12 mov r12 rdx push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx mov edi CONST mov rbx rax mov rsi rax call sub_xxx mov rsi rbx mov edi CONST mov ebp eax call sub_xxx lea r8 [rsp+CONST+var_xxx] test rbx rbx jnz JUMP_ADDR_23	sub r13 r14 lea rbp [rsp+CONST+var_xxx] mov edx CONST mov rdi r8 mov rsi r13 mov [rsp+CONST+var_xxx] rbp mov [rsp+CONST+var_xxx] CONST call sub_xxx test al al jz JUMP_ADDR_27	mov rcx [rsp+CONST+var_xxx] mov rdx r13 mov rsi r14 mov rdi rcx mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] lea r15 [rax+CONST] cmp rcx r15 ja JUMP_ADDR_12	lea rax [rsp+CONST+var_xxx] lea r13 [rcx+CONST] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_7	test rbx rbx jnz JUMP_ADDR_16	mov [r12+CONST] al sub r12 CONST	sub r15 CONST cmp r15 r13 jz JUMP_ADDR_12	movzx eax [r15] lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_4	mov rdx CONST sub eax CONST movsx rax al mov rdx fs:xxx mov rdx [rdx] mov r14 [rdx+rax*8+CONST] mov rdi r14 call sub_xxx sub r12 rax lea rdx [rax+CONST] test rax rax jz JUMP_ADDR_6	nop [rax]	movzx eax [r14+rdx] mov [r12+rdx] al sub rdx CONST jnb JUMP_ADDR_10	sub r15 CONST cmp r15 r13 jnz JUMP_ADDR_7	mov rdi [rsp+CONST+var_xxx] cmp rdi rbp jz JUMP_ADDR_14	call sub_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_35	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edx eax and edx CONST cmp dl CONST jnz JUMP_ADDR_5	cmp al CONST mov rdi [rsp+CONST+var_xxx] cmovz rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi call sub_xxx sub r12 rax test rax rax jz JUMP_ADDR_6	cmp eax CONST mov rdi [rsp+CONST+var_xxx] jnb JUMP_ADDR_28	test al CONST jnz JUMP_ADDR_34	test eax eax jz JUMP_ADDR_6	movzx ecx [CONST_VAR] mov [r12] cl test al CONST jz JUMP_ADDR_6	mov eax eax movzx edx [CONST_VAR+rax+CONST] mov [r12+rax+CONST] dx jmp JUMP_ADDR_6	mov rdx r8 lea rdi [rsp+CONST+var_xxx] mov esi ebp mov r15d eax mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp rax CONST jz JUMP_ADDR_33	mov [rsp+rax+CONST+var_xxx] CONST	mov rdx r8 lea rdi [rsp+CONST+var_xxx] mov esi r15d mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp rax CONST jz JUMP_ADDR_32	mov [rsp+rax+CONST+var_xxx] CONST jmp JUMP_ADDR_1	mov r12 r14 jmp JUMP_ADDR_14	mov rcx [CONST_VAR] lea r8 [r12+CONST] and r8 CONST mov [r12] rcx mov ecx eax mov rdx [CONST_VAR+rcx+CONST] mov [r12+rcx+CONST] rdx mov rcx r12 sub rcx r8 add eax ecx sub rdi rcx and eax CONST cmp eax CONST jb JUMP_ADDR_6	and eax CONST xor edx edx	mov ecx edx add edx CONST mov r9 [CONST_VAR+rcx] mov [r8+rcx] r9 cmp edx eax jb JUMP_ADDR_30	jmp JUMP_ADDR_6	mov eax CONST mov [rsp+CONST+var_xxx] ax jmp JUMP_ADDR_1	mov edx CONST mov [rsp+CONST+var_xxx] dx jmp JUMP_ADDR_25	mov ecx [CONST_VAR] mov eax eax mov [r12] ecx mov edx [CONST_VAR+rax+CONST] mov [r12+rax+CONST] edx jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap_outstring_func.part.0
sub rsp CONST lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	push r15 mov rax rsi push r14 push r13 push r12 push rbp mov rbp rdi push rbx mov ebx r9d sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov esi edx mov [rsp+CONST+var_xxx] edx mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx+CONST] r8d mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx test ecx ecx setnle [rsp+CONST+var_xxx] movzx edi [rsp+CONST+var_xxx] cmp r8b CONST jz JUMP_ADDR_12	test dil dil jz JUMP_ADDR_12	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax test esi esi js JUMP_ADDR_45	movsxd r14 [rsp+CONST+var_xxx] mov r12d CONST mov r13d CONST jnz JUMP_ADDR_10	jmp JUMP_ADDR_27	cmp r14 CONST mov rdx r13 lea rcx [rsp+CONST+var_xxx] cmovbe rdx r14 lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp rax CONST jz JUMP_ADDR_32	test rax rax jz JUMP_ADDR_11	add r12 rax sub r14 rax jz JUMP_ADDR_11	mov rax [rsp+CONST+var_xxx]	test rax rax jnz JUMP_ADDR_6	movsxd rax [rsp+CONST+var_xxx] cmp rax r12 ja JUMP_ADDR_46	mov [rsp+CONST+var_xxx] CONST mov eax [rsp+CONST+var_xxx] test eax eax js JUMP_ADDR_44	movsxd r13 eax test r13 r13 setnz al	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_50	test al al jz JUMP_ADDR_50	lea rax [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] mov r15 r13 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_22	mov rdx r13 mov rsi r12 mov rdi rbp call callfunc_xxx cmp r13 rax jnz JUMP_ADDR_32	movsxd rax ebx mov rbx CONST add rax r13 lea rcx [rax+rbx] movsxd rsi eax mov ebx eax cmp rcx r13 setb cl cmp rax rsi mov esi CONST movzx ecx cl cmovnz ecx esi test ecx ecx jnz JUMP_ADDR_31	test eax eax js JUMP_ADDR_49	mov edx [rsp+CONST+var_xxx] mov rax r15 add [rsp+CONST+var_xxx] r13 sub rax r13 test edx edx cmovns r15 rax cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_35	test r15 r15 jz JUMP_ADDR_35	mov edx CONST mov rsi [rsp+CONST+var_xxx] mov rcx r14 mov rdi r12 cmp r15 CONST cmovbe rdx r15 call sub_xxx mov r13 rax cmp rax CONST jz JUMP_ADDR_32	test rax rax jz JUMP_ADDR_35	test ebx ebx js JUMP_ADDR_53	mov rcx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rsi rcx sub rsi unk_xxx cmp rax rsi ja JUMP_ADDR_17	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_17	mov eax [rsp+CONST+var_xxx]	movsxd r12 eax mov esi CONST mov rdi rbp mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_32	test ebx ebx js JUMP_ADDR_48	mov eax ebx add eax r12d mov ebx eax jno JUMP_ADDR_47	mov rax CONST mov fs:xxx CONST nop [rax+CONST]	mov r12d CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_54	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rsp+CONST+var_xxx] CONST mov r12d ebx jz JUMP_ADDR_33	cmp [rsp+CONST+var_xxx+CONST] CONST jz JUMP_ADDR_33	movsxd rax [rsp+CONST+var_xxx] cmp rax [rsp+CONST+var_xxx] jbe JUMP_ADDR_33	mov r13d [rsp+CONST+var_xxx]	mov eax [rsp+CONST+var_xxx] sub eax r13d test eax eax jle JUMP_ADDR_33	movsxd r13 eax mov esi CONST mov rdi rbp mov rdx r13 call sub_xxx cmp r13 rax jnz JUMP_ADDR_32	test ebx ebx js JUMP_ADDR_33	mov eax ebx add eax r13d mov r12d eax jno JUMP_ADDR_33	jmp JUMP_ADDR_31	mov eax CONST mov r13 CONST jmp JUMP_ADDR_14	lea r14 [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] xor edi edi mov rcx r14 call sub_xxx mov r12 rax movsxd rax [rsp+CONST+var_xxx] cmp rax r12 jbe JUMP_ADDR_12	mov eax [rsp+CONST+var_xxx] sub eax r12d test eax eax jg JUMP_ADDR_28	test ebx ebx jns JUMP_ADDR_12	mov r12d ebx jmp JUMP_ADDR_33	mov r12d eax jmp JUMP_ADDR_33	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_48	xor r13d r13d cmp [rsp+CONST+var_xxx+CONST] CONST mov r12d ebx jnz JUMP_ADDR_39	jmp JUMP_ADDR_48	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap_printf_positional
push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rax [rbp+arg_xxx] mov rbx [rbp+arg_xxx] mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rdi mov r8 [rbp+arg_xxx] mov [rbp+var_xxx] rax mov rax [rbp+arg_xxx] mov [rbp+var_xxx] rsi mov [rbp+var_xxx] edx mov [rbp+var_xxx] r9d mov [rbp+var_xxx] rbx mov [rbp+var_xxx] rax mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST cmp rbx CONST jz JUMP_ADDR_118	cmp [r8] CONST jz JUMP_ADDR_358	mov r12 [rbp+var_xxx] mov rbx r8 xor r14d r14d xor r15d r15d mov [rbp+var_xxx] CONST lea r13 [rbp+var_xxx] mov r8 r12 xchg ax ax	lea rax [r15+r15*8] mov rsi r14 mov rdi rbx mov rcx r13 lea r12 [r8+rax*8] mov [rbp+var_xxx] r8 add r15 CONST mov rdx r12 call sub_xxx mov rbx [r12+CONST] mov r8 [rbp+var_xxx] add r14 rax cmp [rbx] CONST jz JUMP_ADDR_29	cmp [rbp+var_xxx] r15 jnz JUMP_ADDR_3	lea rdi [rbp+var_xxx] call sub_xxx test al al jz JUMP_ADDR_22	mov rax CONST mul [rbp+var_xxx] mov r8 [rbp+var_xxx] shr rdx CONST mov [rbp+var_xxx] rdx jmp JUMP_ADDR_3	endbr64 mov [rbp+var_xxx] CONST movsxd rax [r15+CONST] lea r13 [rbp+var_xxx] lea rdx [rbp+var_xxx] mov rbx [rbp+var_xxx] mov rdi r13 shl rax CONST mov esi [rbx+rax] call sub_xxx mov r12 rax cmp rax CONST jz JUMP_ADDR_22	mov eax [rbp+var_xxx] mov edx [rbp+var_xxx] sub eax r12d mov [rbp+var_xxx] eax test edx edx jnz JUMP_ADDR_325	test eax eax jg JUMP_ADDR_368	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	mov rax [r14+CONST] mov rbx unk_xxx mov r8 off_xxx mov rdx rax sub r8 rbx sub rdx rbx cmp r8 rdx jbe JUMP_ADDR_415	mov [rbp+var_xxx] r8 mov rdx r12 mov rsi r13 mov rdi r14 call callfunc_xxx mov r8 [rbp+var_xxx] cmp r12 rax jnz JUMP_ADDR_22	movsxd rax [rbp+var_xxx] xor edx edx add rax r12 js JUMP_ADDR_472	cmp rax r12 jb JUMP_ADDR_472	movsxd rcx eax mov [rbp+var_xxx] eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_21	test eax eax js JUMP_ADDR_23	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_211	mov eax [rbp+var_xxx] test eax eax jle JUMP_ADDR_211	movsxd r12 eax mov esi CONST mov rdi r14 mov [rbp+var_xxx] r8 mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_22	add r12d [rbp+var_xxx] mov [rbp+var_xxx] r12d mov eax r12d jno JUMP_ADDR_197	mov rax CONST mov fs:xxx CONST nop [rax]	mov [rbp+var_xxx] CONST	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_25	call sub_xxx	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_27	call sub_xxx	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_471	mov eax [rbp+var_xxx] lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rax [rbp+var_xxx] mov r12 r8 cmp r14 rax cmovnb rax r14 mov r13 rax	lea rdi [rbp+var_xxx] mov edx CONST mov rsi r13 call sub_xxx test al al jz JUMP_ADDR_22	mov rax [rbp+var_xxx] mov rbx r13 lea rdx ds:xxx shl rbx CONST add rbx rax mov [rbp+var_xxx] rax mov eax [rbp+arg_xxx] mov [rbp+var_xxx] rbx add rbx rdx and eax CONST mov rdi rbx setnz sil mov [rbp+var_xxx] eax movzx esi sil neg esi call sub_xxx test r15 r15 jz JUMP_ADDR_330	mov rdi r12 xor r14d r14d mov [rbp+var_xxx] r12 mov r12 r15 mov [rbp+var_xxx] r13 mov r15 r14 mov r13 rbx mov r14 rdi mov rbx [rbp+var_xxx] jmp JUMP_ADDR_35	mov edx [r14+CONST] movsxd rax [r14+CONST] mov [r13+rax*4+CONST] edx mov edx [r14+CONST] movsxd rax [r14+CONST] mov [rbx+rax*4] edx	add r15 CONST add r14 CONST cmp r15 r12 jz JUMP_ADDR_42	movsxd rax [r14+CONST] cmp eax CONST jz JUMP_ADDR_37	mov [r13+rax*4+CONST] CONST	movsxd rax [r14+CONST] cmp eax CONST jz JUMP_ADDR_39	mov [r13+rax*4+CONST] CONST	mov rsi [r14+CONST] test rsi rsi jz JUMP_ADDR_34	cmp rsi CONST jz JUMP_ADDR_33	movsxd rdx [r14+CONST] movsxd rax [r14+CONST] add r15 CONST mov rdi r14 mov r10 cs:xxx add r14 CONST shl rdx CONST lea rcx [rbx+rdx] add rdx r13 call callfunc_xxx cmp r15 r12 jnz JUMP_ADDR_35	mov rbx r13 mov r13 [rbp+var_xxx] mov r15 r12 mov r12 [rbp+var_xxx] test r13 r13 jz JUMP_ADDR_53	mov rax [rbp+var_xxx] mov rsi [rbp+var_xxx] xor r14d r14d lea rdx unk_xxx nop	mov ecx [rbx+r14*4] cmp ecx CONST jg JUMP_ADDR_99	cmp ecx CONST jl JUMP_ADDR_121	cmp ecx CONST ja JUMP_ADDR_116	movsxd rcx [rdx+rcx*4] add rcx rdx jmp rcx	cmp ecx CONST jnz JUMP_ADDR_123	mov ecx [CONST_VAR] cmp ecx CONST ja JUMP_ADDR_109	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR] ecx	mov rcx [CONST_VAR] mov [rax] rcx	add r14 CONST add rax CONST cmp r14 r13 jb JUMP_ADDR_44	movsxd rax [rbp+arg_xxx] mov [rbp+var_xxx] rax cmp r15 rax jbe JUMP_ADDR_331	mov rax [rbp+var_xxx] mov rsi [rbp+var_xxx] mov [rbp+var_xxx] r15 mov r14 [rbp+var_xxx] lea rax [rax+rax*8] lea rdi [CONST_VAR+CONST] lea r11 [r12+rax*8] mov eax [rbp+var_xxx] mov [rbp+var_xxx] rdi mov r15 r11 mov [rbp+var_xxx] eax lea rax [CONST_VAR+CONST] sub rdi rax mov [rbp+var_xxx] rax mov [rbp+var_xxx] rdi nop [rax+rax+CONST]	movzx eax [r15+CONST] mov r13d [r15+CONST] mov edx eax mov ebx eax mov edi eax mov r8d eax shr dl CONST and ebx CONST shr dil CONST mov r9d eax mov esi edx movzx edx [r15+CONST] mov [rbp+var_xxx] bl and edi CONST and esi CONST mov [rbp+var_xxx] dil mov r12d eax mov edi [r15] mov [rbp+var_xxx] esi mov esi eax mov ebx edx shr dl CONST shr sil CONST and edx CONST mov r11d eax shr r8b CONST mov [rbp+var_xxx] sil mov esi [r15+CONST] shr r12b CONST shr bl CONST shr r9b CONST shr r11b CONST and r8d CONST and r12d CONST mov [rbp+var_xxx] esi mov esi [r15+CONST] and r9d CONST and ebx CONST mov [rbp+var_xxx] dl movsxd rdx [r15+CONST] and r11d CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] esi mov [rbp+var_xxx] r13b cmp edx CONST jz JUMP_ADDR_58	mov rdi [rbp+var_xxx] shl rdx CONST mov edi [CONST_VAR+rdx] mov [rbp+var_xxx] edi test edi edi js JUMP_ADDR_279	mov [r15+CONST] edi	movsxd rax [r15+CONST] cmp eax CONST jz JUMP_ADDR_60	mov rsi [rbp+var_xxx] shl rax CONST mov edx CONST mov eax [CONST_VAR+rax] test eax eax cmovns edx eax mov [rbp+var_xxx] edx mov [r15] edx	mov rax cs:xxx test rax rax jz JUMP_ADDR_62	movsx rsi r13b mov rax [rax+rsi*8] mov [rbp+var_xxx] rsi test rax rax jnz JUMP_ADDR_270	lea eax [r13+CONST] cmp al CONST jbe JUMP_ADDR_128	endbr64 mov rsi [r15+CONST] lea rax ds:xxx and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST test rsi rsi jz JUMP_ADDR_66	mov r8d [r15+CONST] mov r9 [rbp+var_xxx] xor edx edx xor ecx ecx nop	lea eax [r8+rdx] shl rax CONST add rax r9 mov [CONST_VAR+rcx*8] rax lea ecx [rdx+CONST] mov rdx rcx cmp rsi rcx ja JUMP_ADDR_65	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_428	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	movzx eax [r15+CONST] test al CONST jz JUMP_ADDR_357	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_457	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	movzx eax [r15+CONST] mov ebx CONST	test al al js JUMP_ADDR_382	test al CONST jz JUMP_ADDR_354	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_453	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	movzx eax [r15+CONST] add ebx CONST	test al CONST jz JUMP_ADDR_81	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_451	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	add ebx CONST	cmp [r15+CONST] CONST jz JUMP_ADDR_387	test [r15+CONST] CONST jz JUMP_ADDR_86	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_449	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	add ebx CONST	mov eax [r15+CONST] test eax eax jnz JUMP_ADDR_393	cmp [r15] CONST jz JUMP_ADDR_332	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_455	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	cmp ebx CONST jz JUMP_ADDR_22	movsxd rdi [r15] lea r12 [rbp+var_xxx] xor ecx ecx mov edx CONST mov rsi r12 add ebx CONST call sub_xxx mov r13 rax cmp rax r12 jb JUMP_ADDR_96	jmp JUMP_ADDR_332	lea rcx [rax+CONST] mov [r14+CONST] rcx mov [rax] dl	cmp ebx CONST jz JUMP_ADDR_22	add ebx CONST cmp r13 r12 jz JUMP_ADDR_332	add r13 CONST mov rax [r14+CONST] movzx edx [r13+CONST] cmp rax [r14+CONST] jb JUMP_ADDR_93	movzx esi dl mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_94	jmp JUMP_ADDR_22	cmp ecx CONST jz JUMP_ADDR_111	jle JUMP_ADDR_48	cmp ecx CONST jz JUMP_ADDR_49	cmp ecx CONST jnz JUMP_ADDR_121	mov ecx [CONST_VAR] cmp ecx CONST ja JUMP_ADDR_110	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR] ecx	mov ecx [CONST_VAR] mov [rax] ecx jmp JUMP_ADDR_52	mov ecx [CONST_VAR+CONST] cmp ecx CONST ja JUMP_ADDR_126	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR+CONST] ecx	movsd xmm0 [CONST_VAR] movsd [rax] xmm0 jmp JUMP_ADDR_52	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_51	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_105	test [rbp+arg_xxx] CONST jnz JUMP_ADDR_390	test [rbp+arg_xxx] CONST jz JUMP_ADDR_127	mov edi [CONST_VAR+CONST] cmp edi CONST ja JUMP_ADDR_317	mov ecx edi add edi CONST add rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edi	movdqa xmm1 [rcx] movaps [rax] xmm1 jmp JUMP_ADDR_52	mov r11d [rbp+var_xxx] test r11d r11d jz JUMP_ADDR_125	lea rdi GLOBAL_VAR call sub_xxx	mov rax CONST mov rax fs:xxx mov rax [rax] mov rsi [rax+CONST] mov rax [rax+CONST] mov [rbp+var_xxx] rax movzx eax [rax] mov [rbp+var_xxx] rsi test al al jz JUMP_ADDR_120	cmp al CONST jnz JUMP_ADDR_1	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_1	test ch CONST jnz JUMP_ADDR_49	nop [rax+CONST]	mov rdi cs:xxx test rdi rdi jnz JUMP_ADDR_412	pxor xmm0 xmm0 movups [rax] xmm0 jmp JUMP_ADDR_52	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_108	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] and rcx CONST lea rdi [rcx+CONST] mov [CONST_VAR+CONST] rdi fld CONST fstp CONST jmp JUMP_ADDR_52	movzx eax r8b movzx r12d r12b movzx ebx bl movzx r11d r11b mov [rbp+var_xxx] eax movzx eax r9b lea rdi unk_xxx lea rsi GLOBAL_VAR mov [rbp+var_xxx] eax movsx eax r13b movzx r9d [rbp+var_xxx] sub eax CONST cdqe movzx eax [CONST_VAR+rax] jmp ds:xxx	endbr64 test r11d r11d jnz JUMP_ADDR_7	mov ebx [rbp+var_xxx] mov r8d [rbp+var_xxx] sub ebx CONST test r8d r8d jz JUMP_ADDR_405	movsxd rax [r15+CONST] mov rsi [rbp+var_xxx] shl rax CONST mov edx [CONST_VAR+rax] mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_439	lea rcx [rax+CONST] mov [r14+CONST] rcx mov [rax] dl	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	mov esi [rbp+var_xxx] add eax CONST mov [rbp+var_xxx] eax test esi esi jz JUMP_ADDR_267	test ebx ebx jle JUMP_ADDR_209	movsxd rbx ebx mov esi CONST mov rdi r14 mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add ebx eax mov [rbp+var_xxx] ebx jno JUMP_ADDR_209	jmp JUMP_ADDR_21	endbr64 mov rsi [rbp+var_xxx] mov edi [rbp+arg_xxx] mov edx CONST call sub_xxx xor r11d r11d mov r12 rax	test r12 r12 jz JUMP_ADDR_320	and r11d CONST jnz JUMP_ADDR_346	cmp r13b CONST jz JUMP_ADDR_346	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_386	movsxd rsi [rbp+var_xxx] mov rdi r12 call sub_xxx mov r13 rax	sub [rbp+var_xxx] eax js JUMP_ADDR_359	mov ebx [rbp+var_xxx] test ebx ebx jnz JUMP_ADDR_323	mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_364	mov r11d [rbp+var_xxx] test r11d r11d js JUMP_ADDR_23	mov rax [r14+CONST] mov rbx unk_xxx mov r8 off_xxx mov rdx rax sub r8 rbx sub rdx rbx cmp r8 rdx jbe JUMP_ADDR_416	mov [rbp+var_xxx] r8 mov rdx r13 mov rsi r12 mov rdi r14 call callfunc_xxx mov r8 [rbp+var_xxx] cmp r13 rax jnz JUMP_ADDR_22	movsxd rax [rbp+var_xxx] xor edx edx add rax r13 js JUMP_ADDR_473	cmp rax r13 jb JUMP_ADDR_473	movsxd rcx eax mov [rbp+var_xxx] eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_21	test eax eax js JUMP_ADDR_23	mov r9d [rbp+var_xxx] test r9d r9d jz JUMP_ADDR_211	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_211	jmp JUMP_ADDR_19	endbr64 movsxd rax [r15+CONST] mov rdi [rbp+var_xxx] shl rax CONST mov rax [CONST_VAR+rax] test rax rax jz JUMP_ADDR_345	mov [rbp+var_xxx] rax mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_410	mov r11d CONST jz JUMP_ADDR_315	mov [rbp+var_xxx] CONST xor eax eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST nop [rax+CONST]	and eax CONST movsxd rbx [rbp+var_xxx] mov r9d CONST mov [rbp+var_xxx] al	mov r13d [rbp+var_xxx] xor ecx ecx mov rsi [rbp+var_xxx] mov [rbp+var_xxx] r11d cmp [rbp+var_xxx] CONST mov rdi [rbp+var_xxx] mov [rbp+var_xxx] r9b setz cl mov edx r13d call sub_xxx mov rcx [rbp+var_xxx] cmp r13d CONST movzx r9d [rbp+var_xxx] setz r12b and r12b [rbp+var_xxx] mov r11d [rbp+var_xxx] mov r10 rax test rcx rcx jz JUMP_ADDR_167	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_167	mov r8 [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rsi rax mov [rbp+var_xxx] r11d mov rdi [rbp+var_xxx] call sub_xxx mov r11d [rbp+var_xxx] movzx r9d [rbp+var_xxx] mov r10 rax	test r12b r12b jz JUMP_ADDR_169	mov rsi [rbp+var_xxx] mov rdi r10 mov [rbp+var_xxx] r11d mov [rbp+var_xxx] r9b mov rdx rsi call sub_xxx mov r11d [rbp+var_xxx] movzx r9d [rbp+var_xxx] mov r10 rax	mov r13 [rbp+var_xxx] sub r13 r10 cmp r13 rbx jge JUMP_ADDR_281	sub rbx r13 mov eax CONST mov r8d [rbp+var_xxx] cmovs rbx rax mov [rbp+var_xxx] ebx test r8d r8d jnz JUMP_ADDR_231	mov r12d [rbp+var_xxx] sub r12d r13d sub r12d ebx cmp [rbp+var_xxx] CONST jz JUMP_ADDR_175	movzx eax [rbp+var_xxx] and eax CONST	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_175	lea edx [r12+CONST] test al al cmovnz r12d edx	mov ebx [rbp+var_xxx] or ebx r11d or ebx [rbp+var_xxx] jz JUMP_ADDR_292	sub r12d CONST cmp r9b CONST jz JUMP_ADDR_474	test r11d r11d jz JUMP_ADDR_312	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_420	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	add eax CONST mov [rbp+var_xxx] eax	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_192	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_192	test [rbp+var_xxx] CONST jz JUMP_ADDR_192	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_437	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_22	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_441	movzx ebx [rbp+var_xxx] lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] bl	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	add eax CONST mov [rbp+var_xxx] eax	add r12d [rbp+var_xxx] test r12d r12d jg JUMP_ADDR_308	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	mov r12 [r14+CONST] mov rbx unk_xxx mov r8 off_xxx mov rax r12 sub r8 rbx sub rax rbx cmp r8 rax jbe JUMP_ADDR_408	mov [rbp+var_xxx] r8 mov rdx r13 mov rsi r10 mov rdi r14 call callfunc_xxx cmp r13 rax jnz JUMP_ADDR_22	movsxd rax [rbp+var_xxx] mov rdx CONST add rax r13 add rdx rax movsxd rcx eax mov [rbp+var_xxx] eax cmp rdx r13 setb dl cmp rax rcx mov ecx CONST movzx edx dl cmovnz edx ecx test edx edx jnz JUMP_ADDR_21	test eax eax mov r8 [rbp+var_xxx] jns JUMP_ADDR_211	jmp JUMP_ADDR_23	endbr64 mov r13d [rbp+var_xxx] test r13d r13d jz JUMP_ADDR_202	mov r10d [rbp+var_xxx] test r10d r10d jz JUMP_ADDR_380	mov r9d [rbp+var_xxx] test r9d r9d js JUMP_ADDR_475	movsxd rax [r15+CONST] mov rsi [rbp+var_xxx] shl rax CONST mov rax [CONST_VAR+rax] test r11d r11d jz JUMP_ADDR_351	movsxd rdx [rbp+var_xxx] mov [rax] rdx jmp JUMP_ADDR_267	endbr64 movsxd rax [r15+CONST] shl rax CONST add rax [rbp+var_xxx] mov [rbp+var_xxx] rax test [rbp+arg_xxx] CONST jnz JUMP_ADDR_427	movzx ebx [rbp+var_xxx] xor eax eax test [rbp+arg_xxx] CONST mov rsi r15 mov rdi r14 cmovz ebx eax movzx eax [r15+CONST] mov edx ebx and eax CONST and edx CONST shl edx CONST or eax edx lea rdx [rbp+var_xxx] mov [r15+CONST] al call sub_xxx test eax eax js JUMP_ADDR_22	mov ebx [rbp+var_xxx] test ebx ebx js JUMP_ADDR_23	cdqe add eax ebx mov [rbp+var_xxx] eax jo JUMP_ADDR_21	nop [rax]	mov ecx [rbp+var_xxx] test ecx ecx js JUMP_ADDR_23	mov rbx unk_xxx mov r8 off_xxx sub r8 rbx	mov rsi [r15+CONST] mov r12 [r15+CONST] sub r12 rsi	mov r13 [r14+CONST] mov rax r13 sub rax rbx cmp rax r8 jnb JUMP_ADDR_280	mov rdx r12 mov rdi r14 call callfunc_xxx cmp rax r12 jnz JUMP_ADDR_22	movsxd rax [rbp+var_xxx] xor edx edx add rax r12 js JUMP_ADDR_467	cmp rax r12 jb JUMP_ADDR_467	movsxd rcx eax mov [rbp+var_xxx] eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_21	test eax eax js JUMP_ADDR_23	add [rbp+var_xxx] CONST add r15 CONST mov rax [rbp+var_xxx] cmp [rbp+var_xxx] rax ja JUMP_ADDR_55	jmp JUMP_ADDR_23	endbr64 mov [rbp+var_xxx] CONST	movsxd rax [r15+CONST] shl rax CONST add rax [rbp+var_xxx] test r11d r11d jz JUMP_ADDR_287	mov [rbp+var_xxx] CONST mov rax [rax] xor r11d r11d mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax	movzx eax [rbp+var_xxx] mov r10d [rbp+var_xxx] mov [rbp+var_xxx] eax movzx eax [rbp+var_xxx] test r10d r10d js JUMP_ADDR_296	jnz JUMP_ADDR_163	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_316	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_374	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_374	mov rax [rbp+var_xxx] mov r10 [rbp+var_xxx] mov [rax+CONST] CONST mov rax [rbp+var_xxx] mov r13 rax test rax rax jns JUMP_ADDR_409	mov eax CONST mov rbx [rbp+var_xxx] sub rbx [rbp+var_xxx] cmovs rbx rax mov eax [rbp+var_xxx] mov [rbp+var_xxx] ebx test eax eax jz JUMP_ADDR_417	mov [rbp+var_xxx] CONST nop [rax]	test r11d r11d jz JUMP_ADDR_289	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_424	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	add eax CONST sub [rbp+var_xxx] CONST mov [rbp+var_xxx] eax	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_246	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_246	test [rbp+var_xxx] CONST jz JUMP_ADDR_246	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_446	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_22	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_444	movzx edi [rbp+var_xxx] lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] dil	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	add eax CONST sub [rbp+var_xxx] CONST mov [rbp+var_xxx] eax	mov r12d [rbp+var_xxx] mov eax [rbp+var_xxx] add ebx r13d sub r12d ebx test eax eax jle JUMP_ADDR_297	movsxd rbx eax mov esi CONST mov rdi r14 mov [rbp+var_xxx] r10 mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add ebx eax mov [rbp+var_xxx] ebx jo JUMP_ADDR_21	test ebx ebx mov r10 [rbp+var_xxx] jns JUMP_ADDR_298	jmp JUMP_ADDR_23	endbr64 movsxd rax [r15+CONST] shl rax CONST add rax [rbp+var_xxx] mov [rbp+var_xxx] rax test [rbp+arg_xxx] CONST jnz JUMP_ADDR_432	movzx edi [rbp+var_xxx] xor eax eax test [rbp+arg_xxx] CONST mov rsi r15 movzx edx [r15+CONST] cmovz edi eax and edx CONST mov eax edi mov rdi r14 and eax CONST shl eax CONST or eax edx lea rdx [rbp+var_xxx] mov [r15+CONST] al call sub_xxx test eax eax js JUMP_ADDR_22	mov edi [rbp+var_xxx] test edi edi js JUMP_ADDR_23	cdqe add eax edi mov [rbp+var_xxx] eax jno JUMP_ADDR_209	jmp JUMP_ADDR_21	endbr64 mov [rbp+var_xxx] CONST jmp JUMP_ADDR_221	endbr64 mov [rbp+var_xxx] CONST jmp JUMP_ADDR_221	endbr64 movsxd rax [r15+CONST] shl rax CONST test r11d r11d jz JUMP_ADDR_349	mov rbx [rbp+var_xxx] mov rax [rbx+rax]	test rax rax js JUMP_ADDR_385	mov [rbp+var_xxx] rax xor r11d r11d mov [rbp+var_xxx] CONST jmp JUMP_ADDR_223	endbr64 mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_430	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_22	add eax CONST mov [rbp+var_xxx] eax	mov rsi [r15+CONST] mov r12 [r15+CONST] mov edi [rbp+var_xxx] sub r12 rsi test edi edi js JUMP_ADDR_324	mov rbx unk_xxx mov r8 off_xxx sub r8 rbx jmp JUMP_ADDR_212	endbr64 movsxd rax [r15+CONST] mov rdi [rbp+var_xxx] shl rax CONST mov r12 [CONST_VAR+rax] jmp JUMP_ADDR_141	mov rsi [r15+CONST] lea rdx ds:xxx and rdx CONST sub rsp rdx lea r10 [rsp+CONST+var_xxx+CONST] and r10 CONST test rsi rsi jz JUMP_ADDR_274	mov [rbp+var_xxx] r8b mov edi [r15+CONST] xor edx edx xor ecx ecx mov r8 [rbp+var_xxx] nop [rax+rax+CONST]	lea eax [CONST_VAR+rdx] shl rax CONST add rax r8 mov [r10+rcx*8] rax lea ecx [rdx+CONST] mov rdx rcx cmp rsi rcx ja JUMP_ADDR_272	mov rax cs:xxx mov rsi [rbp+var_xxx] movzx r8d [rbp+var_xxx] mov rax [rax+rsi*8]	mov [rbp+var_xxx] r11b mov rdx r10 mov rsi r15 mov rdi r14 mov [rbp+var_xxx] r9b mov [rbp+var_xxx] r8b call rax movzx r8d [rbp+var_xxx] movzx r9d [rbp+var_xxx] cmp eax CONST movzx r11d [rbp+var_xxx] jz JUMP_ADDR_62	test eax eax js JUMP_ADDR_22	mov esi [rbp+var_xxx] test esi esi js JUMP_ADDR_23	cdqe add eax esi mov [rbp+var_xxx] eax jno JUMP_ADDR_209	jmp JUMP_ADDR_21	neg [rbp+var_xxx] mov edi [rbp+var_xxx] or eax CONST mov [r15+CONST] al mov [r15+CONST] edi mov [rbp+var_xxx] CONST jmp JUMP_ADDR_58	mov [rbp+var_xxx] rsi call sub_xxx mov rsi [rbp+var_xxx] jmp JUMP_ADDR_213	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_341	movzx eax [rbp+var_xxx] and eax CONST cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_285	test al al jz JUMP_ADDR_285	mov r13 [rbp+var_xxx] lea rdx [r10+CONST] mov [r10+CONST] CONST mov r10 rdx sub r13 rdx	sub rbx r13 mov edx CONST mov ecx [rbp+var_xxx] cmovs rbx rdx mov [rbp+var_xxx] ebx test ecx ecx jnz JUMP_ADDR_231	mov r12d [rbp+var_xxx] sub r12d r13d sub r12d ebx jmp JUMP_ADDR_173	mov eax [rax] test ebx ebx jz JUMP_ADDR_318	mov [rbp+var_xxx] CONST movzx eax al mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST jmp JUMP_ADDR_223	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_327	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_443	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_234	cmp r9b CONST jnz JUMP_ADDR_182	test r12d r12d jg JUMP_ADDR_375	mov esi [rbp+var_xxx] test esi esi js JUMP_ADDR_23	mov [rbp+var_xxx] ebx xor r12d r12d jmp JUMP_ADDR_177	mov ebx CONST jmp JUMP_ADDR_164	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_324	mov rcx [r14+CONST] mov rbx unk_xxx mov r8 off_xxx mov rax rcx sub r8 rbx sub rax rbx cmp r8 rax jbe JUMP_ADDR_404	mov [rbp+var_xxx] r8 mov rdx r13 mov rsi r10 mov rdi r14 call callfunc_xxx cmp rax r13 jnz JUMP_ADDR_22	movsxd rax [rbp+var_xxx] xor edx edx mov r8 [rbp+var_xxx] add rax r13 js JUMP_ADDR_470	cmp rax r13 jb JUMP_ADDR_470	movsxd rcx eax mov [rbp+var_xxx] eax mov r13d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_21	test eax eax js JUMP_ADDR_23	test r12d r12d jle JUMP_ADDR_211	movsxd r12 r12d mov esi CONST mov rdi r14 mov [rbp+var_xxx] r8 mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_22	add r12d r13d mov [rbp+var_xxx] r12d mov eax r12d jno JUMP_ADDR_197	jmp JUMP_ADDR_21	movsxd r12 r12d mov esi CONST mov rdi r14 mov [rbp+var_xxx] r10 mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add r12d eax mov r10 [rbp+var_xxx] mov [rbp+var_xxx] r12d jno JUMP_ADDR_193	jmp JUMP_ADDR_21	mov ecx [rbp+var_xxx] test ecx ecx jz JUMP_ADDR_401	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_448	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_180	mov [rbp+var_xxx] CONST xor eax eax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST	and eax CONST xor ebx ebx mov r9d CONST mov [rbp+var_xxx] al jmp JUMP_ADDR_164	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] and rcx CONST lea rdi [rcx+CONST] mov [CONST_VAR+CONST] rdi jmp JUMP_ADDR_115	test r12d r12d jnz JUMP_ADDR_363	mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_223	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_379	cmp eax CONST jg JUMP_ADDR_379	xor eax eax xor r13d r13d lea r12 unk_xxx jmp JUMP_ADDR_146	mov r10d [rbp+var_xxx] test r10d r10d jns JUMP_ADDR_150	call sub_xxx	mov eax [rbp+var_xxx] test eax eax jns JUMP_ADDR_11	jmp JUMP_ADDR_324	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_236	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_466	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_234	test r13 r13 jnz JUMP_ADDR_43	mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_23	mov eax [r15+CONST] test eax eax jz JUMP_ADDR_337	mov rdx [r14+CONST] cmp rdx [r14+CONST] jnb JUMP_ADDR_464	lea rcx [rdx+CONST] mov [r14+CONST] rcx mov [rdx] al	cmp ebx CONST jz JUMP_ADDR_22	add ebx CONST	mov edx [rbp+var_xxx] test edx edx js JUMP_ADDR_23	movsxd rbx ebx add ebx [rbp+var_xxx] mov [rbp+var_xxx] ebx jo JUMP_ADDR_21	test ebx ebx jns JUMP_ADDR_210	jmp JUMP_ADDR_23	sub rbx r13 mov eax CONST cmovs rbx rax mov [rbp+var_xxx] ebx	mov edi [rbp+var_xxx] test edi edi jz JUMP_ADDR_344	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_231	mov r12d [rbp+var_xxx] add ebx r13d mov [rbp+var_xxx] CONST sub r12d ebx jmp JUMP_ADDR_175	mov esi [rbp+var_xxx] mov eax CONST lea r12 GLOBAL_VAR cmp esi eax cmovge eax esi mov [rbp+var_xxx] eax cmp r13b CONST jnz JUMP_ADDR_145	mov r9d [rbp+var_xxx] mov r8d [rbp+var_xxx] mov rsi r12 mov rdi r14 mov ecx [rbp+var_xxx] mov edx [rbp+var_xxx] call loc_xxx	mov [rbp+var_xxx] eax test eax eax jns JUMP_ADDR_210	jmp JUMP_ADDR_23	mov rsi [rbp+var_xxx] mov eax [CONST_VAR+rax] test ebx ebx jz JUMP_ADDR_373	movsx rax al jmp JUMP_ADDR_261	test ebx ebx jnz JUMP_ADDR_372	test r12d r12d jnz JUMP_ADDR_423	mov edi [rbp+var_xxx] mov [rax] edi jmp JUMP_ADDR_267	test al CONST jz JUMP_ADDR_77	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_468	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_76	mov ebx CONST jmp JUMP_ADDR_72	mov r12 [rbp+var_xxx] xor r13d r13d xor r15d r15d jmp JUMP_ADDR_30	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_324	mov rcx [r14+CONST] mov rbx unk_xxx mov r8 off_xxx mov rax rcx sub r8 rbx sub rax rbx cmp r8 rax jbe JUMP_ADDR_381	mov [rbp+var_xxx] r8 mov rdx r13 mov rsi r12 mov rdi r14 call callfunc_xxx cmp r13 rax jz JUMP_ADDR_196	jmp JUMP_ADDR_22	movzx eax ax jmp JUMP_ADDR_319	movsxd rbx eax mov esi CONST mov rdi r14 mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add ebx eax mov [rbp+var_xxx] ebx jno JUMP_ADDR_149	jmp JUMP_ADDR_21	movsxd rbx eax mov esi CONST mov rdi r14 mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add ebx eax mov [rbp+var_xxx] ebx jno JUMP_ADDR_10	jmp JUMP_ADDR_21	movzx edi [rbp+var_xxx] mov [rax] dil jmp JUMP_ADDR_267	movsxd rdx eax test r12d r12d movsx rax ax cmovz rax rdx jmp JUMP_ADDR_261	mov r10 [rbp+var_xxx] xor ebx ebx xor r13d r13d mov r9d CONST jmp JUMP_ADDR_342	movsxd r12 r12d mov esi CONST mov rdi r14 mov [rbp+var_xxx] r10 mov rdx r12 mov [rbp+var_xxx] r11d call sub_xxx cmp r12 rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add r12d eax mov r11d [rbp+var_xxx] mov r10 [rbp+var_xxx] mov [rbp+var_xxx] r12d jno JUMP_ADDR_294	jmp JUMP_ADDR_21	mov eax CONST mov r13d CONST lea r12 GLOBAL_VAR jmp JUMP_ADDR_146	mov r13 [rbp+var_xxx] mov [rbp+var_xxx] r11d mov rdi r13 call sub_xxx mov rdi r13 lea rsi [rax+CONST] call sub_xxx mov r11d [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_201	mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rcx call sub_xxx mov r8 [rbp+var_xxx] mov rcx [rbp+var_xxx] jmp JUMP_ADDR_361	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_459	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	movzx eax [r15+CONST] add ebx CONST jmp JUMP_ADDR_73	neg rax mov r11d CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax jmp JUMP_ADDR_223	mov rdi r12 call sub_xxx mov r13 rax jmp JUMP_ADDR_146	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_461	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST	add ebx CONST jmp JUMP_ADDR_82	mov ecx [CONST_VAR+CONST] cmp ecx CONST ja JUMP_ADDR_414	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR+CONST] ecx	movsd xmm0 [CONST_VAR] movsd [rax] xmm0 and [rbx+r14*4] CONST jmp JUMP_ADDR_52	lea r12 [rbp+var_xxx] movsxd rdi eax xor ecx ecx mov edx CONST mov rsi r12 call sub_xxx mov r13 rax cmp rax r12 jb JUMP_ADDR_398	jmp JUMP_ADDR_87	lea rcx [rax+CONST] mov [r14+CONST] rcx mov [rax] dl	cmp ebx CONST jz JUMP_ADDR_22	add ebx CONST cmp r13 r12 jz JUMP_ADDR_87	add r13 CONST mov rax [r14+CONST] movzx edx [r13+CONST] cmp rax [r14+CONST] jb JUMP_ADDR_395	movzx esi dl mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_396	jmp JUMP_ADDR_22	mov edx [rbp+var_xxx] test edx edx jz JUMP_ADDR_182	mov rax [r14+CONST] cmp rax [r14+CONST] jnb JUMP_ADDR_463	lea rdx [rax+CONST] mov [r14+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_180	mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r10 call sub_xxx mov r8 [rbp+var_xxx] mov rcx [rbp+var_xxx] mov r10 [rbp+var_xxx] jmp JUMP_ADDR_299	test ebx ebx jg JUMP_ADDR_433	mov edi [rbp+var_xxx] test edi edi jns JUMP_ADDR_131	jmp JUMP_ADDR_23	mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r10 call sub_xxx mov r8 [rbp+var_xxx] mov r10 [rbp+var_xxx] jmp JUMP_ADDR_195	mov [rbp+var_xxx] CONST xor ebx ebx mov r9d CONST jmp JUMP_ADDR_342	mov rbx [rbp+var_xxx] mov rdi [rbp+var_xxx] xor ecx ecx mov edx CONST mov [rbp+var_xxx] r9b mov rsi rbx call sub_xxx mov [rbp+var_xxx] CONST movzx r9d [rbp+var_xxx] mov r11d CONST mov [rbp+var_xxx] CONST sub rbx rax mov r10 rax mov [rbp+var_xxx] CONST test rbx rbx mov r13 rbx mov ebx CONST jle JUMP_ADDR_170	jmp JUMP_ADDR_282	movsxd rcx ecx cmp [CONST_VAR+rcx*8+CONST] CONST jz JUMP_ADDR_124	mov rdi [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rsi movsxd rcx [CONST_VAR+r14*4] add rcx CONST and rcx CONST sub rsp rcx lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST mov [rax] rdi movsxd r8 [rbx+r14*4] mov rcx cs:xxx call callfunc_xxx mov rsi [rbp+var_xxx] mov rax [rbp+var_xxx] lea rdx unk_xxx jmp JUMP_ADDR_52	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_392	mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rax call sub_xxx mov rax [rbp+var_xxx] mov r8 [rbp+var_xxx] jmp JUMP_ADDR_12	mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rax call sub_xxx mov rax [rbp+var_xxx] mov r8 [rbp+var_xxx] jmp JUMP_ADDR_151	mov r12d [rbp+var_xxx] add ebx [rbp+var_xxx] sub r12d ebx mov ebx [rbp+var_xxx] or ebx r11d or ebx [rbp+var_xxx] jz JUMP_ADDR_419	mov ebx [rbp+var_xxx] sub r12d CONST	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_293	mov [rbp+var_xxx] r10 mov esi CONST	mov rdi r14 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_180	jmp JUMP_ADDR_22	movzx edi [rbp+var_xxx] mov [rax] di jmp JUMP_ADDR_267	mov [rbp+var_xxx] r10 mov esi CONST	mov rdi r14 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_234	jmp JUMP_ADDR_22	and [r15+CONST] CONST mov [r15+CONST] CONST jmp JUMP_ADDR_205	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_68	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_265	jmp JUMP_ADDR_22	and [r15+CONST] CONST jmp JUMP_ADDR_253	movsxd r12 ebx mov esi CONST mov rdi r14 mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_22	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_23	add r12d eax mov [rbp+var_xxx] r12d jno JUMP_ADDR_406	jmp JUMP_ADDR_21	mov esi CONST mov rdi r14 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_187	jmp JUMP_ADDR_22	movzx esi dl mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_133	jmp JUMP_ADDR_22	movzx esi [rbp+var_xxx] mov rdi r14 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_190	jmp JUMP_ADDR_22	mov [rbp+var_xxx] r10 mov esi CONST jmp JUMP_ADDR_425	movzx esi [rbp+var_xxx] mov rdi r14 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_244	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_241	jmp JUMP_ADDR_22	mov [rbp+var_xxx] r10 mov esi CONST jmp JUMP_ADDR_421	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_85	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_80	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_76	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_90	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_71	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_384	jmp JUMP_ADDR_22	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_389	jmp JUMP_ADDR_22	mov [rbp+var_xxx] r10 mov esi CONST jmp JUMP_ADDR_421	movzx esi al mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_335	jmp JUMP_ADDR_22	mov [rbp+var_xxx] r10 mov esi CONST jmp JUMP_ADDR_425	mov edx CONST jmp JUMP_ADDR_216	mov esi CONST mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_76	jmp JUMP_ADDR_22	mov edx CONST jmp JUMP_ADDR_302	call sub_xxx	mov edx CONST jmp JUMP_ADDR_15	mov edx CONST jmp JUMP_ADDR_154	mov ebx [rbp+var_xxx] jmp JUMP_ADDR_293	lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___vfprintf_internal
endbr64 push r15 mov r15 rdx push r14 push r13 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] ecx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax CONST mov eax fs:xxx mov [rsp+CONST+var_xxx] eax mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_38	mov [CONST_VAR+CONST] CONST	mov ebx [rbp+CONST] test bl CONST jnz JUMP_ADDR_439	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_456	mov eax ebx and eax CONST mov [rsp+CONST+var_xxx] eax jnz JUMP_ADDR_258	movdqu xmm1 [r15] mov rax [r15+CONST] mov esi CONST mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax movups [rsp+CONST+var_xxx] xmm1 call sub_xxx mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax and bh CONST jnz JUMP_ADDR_13	cmp cs:xxx CONST jz JUMP_ADDR_260	mov rsi sub_xxx lea rdi [rsp+CONST+var_xxx] mov rdx rbp call callfunc_xxx test [rbp+CONST] CONST mov [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_13	mov rbx fs:xxx mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] rbx jz JUMP_ADDR_12	mov eax fs:xxx test eax eax jnz JUMP_ADDR_395	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbp+CONST] mov [CONST_VAR+CONST] rbx	add [CONST_VAR+CONST] CONST	mov r12 [rbp+CONST] mov rsi off_xxx sub rsi unk_xxx mov rbx [rsp+CONST+var_xxx] mov rax r12 sub rax unk_xxx sub rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rsi cmp rsi rax jbe JUMP_ADDR_303	mov rsi [rsp+CONST+var_xxx] mov rdx rbx mov rdi rbp call callfunc_xxx cmp rbx rax jnz JUMP_ADDR_282	movsxd rdx ebx mov rax rbx mov r12d ebx shr rax CONST cmp rbx rdx mov edx CONST cmovnz eax edx mov edx eax test eax eax jnz JUMP_ADDR_128	test ebx ebx js JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jz JUMP_ADDR_26	mov rdi cs:xxx mov [rsp+CONST+var_xxx] rdi test rdi rdi jnz JUMP_ADDR_385	cmp cs:xxx CONST jnz JUMP_ADDR_393	cmp cs:xxx CONST mov [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_394	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST nop [rax+rax+CONST]	lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST jbe JUMP_ADDR_34	endbr64 test bl bl jz JUMP_ADDR_40	mov edx [rsp+CONST+var_xxx]	sub rsp CONST mov r9d r12d mov rcx r15 mov rdi rbp mov eax [rsp+CONST+var_xxx] push rax push [rsp+CONST+var_xxx] push [rsp+CONST+var_xxx] mov eax [rsp+CONST+var_xxx] push rax lea rax [rsp+CONST+var_xxx] push rax push [rsp+CONST+var_xxx] push rdx mov edx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx add rsp CONST mov r12d eax	test [rbp+CONST] CONST jz JUMP_ADDR_30	mov edi [rsp+CONST+var_xxx] test edi edi jnz JUMP_ADDR_33	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_460	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [rbp+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_27	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_410	sub [CONST_VAR] CONST mov edi [rsp+CONST+var_xxx] test edi edi jz JUMP_ADDR_28	lea rdi [rsp+CONST+var_xxx] xor esi esi call callfunc_xxx jmp JUMP_ADDR_28	movsx eax bl lea rdi unk_xxx xor ecx ecx xor r14d r14d sub eax CONST lea rsi GLOBAL_VAR xor r13d r13d xor r11d r11d cdqe mov [rsp+CONST+var_xxx] CONST xor r8d r8d lea r9 GLOBAL_VAR movzx eax [CONST_VAR+rax] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov rax ds:xxx mov [rsp+CONST+var_xxx] CONST lea rsi GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp rax	endbr64	endbr64 mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx xor r11d r11d mov r14d CONST sub eax CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	cmp eax CONST jz JUMP_ADDR_2	mov r12d CONST jmp JUMP_ADDR_28	mov rax CONST mov r12d CONST mov fs:xxx CONST jmp JUMP_ADDR_26	endbr64 mov eax [r15] lea rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST cmp eax CONST ja JUMP_ADDR_302	mov ecx eax add eax CONST add rcx [r15+CONST] mov [r15] eax	mov esi [rcx] lea r14 [rsp+CONST+var_xxx] mov rdi r14 call sub_xxx mov r13 rax cmp rax CONST jz JUMP_ADDR_282	mov ebx [rsp+CONST+var_xxx] mov r11d [rsp+CONST+var_xxx] sub ebx eax test r11d r11d jnz JUMP_ADDR_46	test ebx ebx jg JUMP_ADDR_350	mov rcx [rbp+CONST] mov rax rcx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_414	mov rdx r13 mov rsi r14 mov rdi rbp call callfunc_xxx cmp r13 rax jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax r13 js JUMP_ADDR_467	cmp rax r13 jb JUMP_ADDR_467	movsxd rcx eax mov r12d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_128	test eax eax js JUMP_ADDR_26	mov r10d [rsp+CONST+var_xxx] test r10d r10d jnz JUMP_ADDR_246	xchg ax ax	mov rax [rsp+CONST+var_xxx] mov esi CONST add [rsp+CONST+var_xxx] CONST lea r13 [rax+CONST] mov rdi r13 mov [rsp+CONST+var_xxx] r13 call sub_xxx mov r14 [rbp+CONST] mov rbx rax mov [rsp+CONST+var_xxx] rax sub rbx r13 mov rax r14 sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_267	mov rdx rbx mov rsi r13 mov rdi rbp call callfunc_xxx cmp rax rbx jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax rbx js JUMP_ADDR_459	cmp rax rbx jb JUMP_ADDR_459	movsxd rcx eax mov r12d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_128	test eax eax js JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_22	jmp JUMP_ADDR_26	endbr64 mov eax [r15] cmp eax CONST ja JUMP_ADDR_312	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov r13 [rdx]	test r13 r13 jz JUMP_ADDR_299	test r14d r14d jnz JUMP_ADDR_309	cmp bl CONST jz JUMP_ADDR_309	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_376	movsxd rsi [rsp+CONST+var_xxx] mov rdi r13 call sub_xxx mov r14 rax	mov ebx [rsp+CONST+var_xxx] sub ebx eax js JUMP_ADDR_334	mov r9d [rsp+CONST+var_xxx] test r9d r9d jnz JUMP_ADDR_73	test ebx ebx jnz JUMP_ADDR_345	mov rcx [rbp+CONST] mov rax rcx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_413	mov rdx r14 mov rsi r13 mov rdi rbp call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax r14 js JUMP_ADDR_468	cmp rax r14 jb JUMP_ADDR_468	movsxd rcx eax mov r12d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_128	test eax eax js JUMP_ADDR_26	mov r8d [rsp+CONST+var_xxx] test r8d r8d jz JUMP_ADDR_54	test ebx ebx jz JUMP_ADDR_54	jmp JUMP_ADDR_247	endbr64 mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx mov [rsp+CONST+var_xxx] CONST sub eax CONST mov [rsp+CONST+var_xxx] CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx sub eax CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR jmp ds:xxx	endbr64 mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx mov [rsp+CONST+var_xxx] CONST sub eax CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov r13d CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx sub eax CONST cdqe movzx eax [CONST_VAR+rax] jmp ds:xxx	endbr64 mov rdx [rsp+CONST+var_xxx] lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rax movzx ebx [rdx+CONST] cmp bl CONST jz JUMP_ADDR_377	movzx eax bl mov [rsp+CONST+var_xxx] CONST sub eax CONST cmp eax CONST jbe JUMP_ADDR_405	lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx sub eax CONST cdqe movzx edx [CONST_VAR+rax] lea rax GLOBAL_VAR jmp ds:xxx	endbr64 lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] ecx call sub_xxx mov ecx [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] lea r9 GLOBAL_VAR cmp eax CONST mov [rsp+CONST+var_xxx] eax lea rsi GLOBAL_VAR jz JUMP_ADDR_128	mov rax [rsp+CONST+var_xxx] movzx ebx [rax] cmp bl CONST jz JUMP_ADDR_24	lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx sub eax CONST cdqe movzx edx [CONST_VAR+rax] lea rax GLOBAL_VAR jmp ds:xxx	endbr64 mov rbx [rsp+CONST+var_xxx] lea rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax movzx eax [rbx+CONST] sub eax CONST cmp eax CONST jbe JUMP_ADDR_381	mov eax [r15] cmp eax CONST ja JUMP_ADDR_333	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov eax [rdx] mov [rsp+CONST+var_xxx] eax test eax eax jns JUMP_ADDR_103	neg eax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] CONST	movzx ebx [rbx+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	jmp JUMP_ADDR_97	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	jmp JUMP_ADDR_85	endbr64 cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_386	mov rax [rsp+CONST+var_xxx] mov r8d CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	jmp JUMP_ADDR_85	endbr64 mov r10d [rsp+CONST+var_xxx] movzx edi [rsp+CONST+var_xxx] mov eax CONST test r10d r10d cmovz edi eax mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] dil mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	jmp JUMP_ADDR_85	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	jmp JUMP_ADDR_85	endbr64 test r14d r14d jnz JUMP_ADDR_41	mov ebx [rsp+CONST+var_xxx] mov r14d [rsp+CONST+var_xxx] sub ebx CONST test r14d r14d jz JUMP_ADDR_399	mov eax [r15] cmp eax CONST ja JUMP_ADDR_344	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov edx [rdx] mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_444	lea rcx [rax+CONST] mov [rbp+CONST] rcx mov [rax] dl	cmp r12d CONST jz JUMP_ADDR_282	mov r13d [rsp+CONST+var_xxx] add r12d CONST test r13d r13d jz JUMP_ADDR_54	test ebx ebx jle JUMP_ADDR_54	movsxd r13 ebx mov esi CONST mov rdi rbp mov rdx r13 call sub_xxx cmp r13 rax jnz JUMP_ADDR_282	xor eax eax add r12d ebx js JUMP_ADDR_463	cmp r12d ebx jb JUMP_ADDR_463	test eax eax jz JUMP_ADDR_249	nop [rax+rax+CONST]	mov rax CONST mov r12d CONST mov fs:xxx CONST jmp JUMP_ADDR_26	endbr64 mov edi [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov edx CONST xor r14d r14d call sub_xxx mov r13 rax jmp JUMP_ADDR_65	endbr64 test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_132	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_372	mov eax [r15] test r14d r14d jz JUMP_ADDR_321	cmp eax CONST ja JUMP_ADDR_368	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] movsxd rdx r12d mov [rax] rdx jmp JUMP_ADDR_54	endbr64 mov eax [r15] cmp eax CONST ja JUMP_ADDR_320	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov r10 [rdx] test r10 r10 jz JUMP_ADDR_307	mov [rsp+CONST+var_xxx] CONST xor r8d r8d xor r14d r14d mov ebx CONST mov [rsp+CONST+var_xxx] CONST	movsxd rax [rsp+CONST+var_xxx] test eax eax js JUMP_ADDR_191	jz JUMP_ADDR_251	mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST	xor ecx ecx mov edx [rsp+CONST+var_xxx] cmp bl CONST mov rdi r10 lea r13 [rsp+CONST+var_xxx] setz cl lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10 mov rsi r13 mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rax call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov r9 rax test rcx rcx jz JUMP_ADDR_146	mov r8d [rsp+CONST+var_xxx] test r8d r8d jz JUMP_ADDR_146	mov r8 [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rdx r13 mov rsi rax call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r9 rax	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_149	mov r8d [rsp+CONST+var_xxx] test r8d r8d jz JUMP_ADDR_149	mov rdi r9 mov rdx r13 mov rsi r13 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r9 rax	mov rcx r13 sub rcx r9 cmp rcx [rsp+CONST+var_xxx] jge JUMP_ADDR_261	mov r13 [rsp+CONST+var_xxx] mov eax CONST mov edi [rsp+CONST+var_xxx] sub r13 rcx cmovs r13 rax mov [rsp+CONST+var_xxx] r13d test edi edi jnz JUMP_ADDR_219	mov r8d [rsp+CONST+var_xxx] sub r8d ecx sub r8d r13d test r10 r10 jz JUMP_ADDR_155	movzx eax [rsp+CONST+var_xxx] and eax CONST	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_155	lea edx [r8+CONST] test al al cmovnz r8d edx	mov eax [rsp+CONST+var_xxx] or eax [rsp+CONST+var_xxx] or eax r14d jz JUMP_ADDR_271	sub r8d CONST cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_469	test r14d r14d jz JUMP_ADDR_290	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_425	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST	cmp r12d CONST jz JUMP_ADDR_282	add r12d CONST	test r10 r10 jz JUMP_ADDR_172	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_172	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_172	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_440	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST	cmp r12d CONST jz JUMP_ADDR_282	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_442	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] bl	cmp r12d CONST jz JUMP_ADDR_282	add r12d CONST	mov ebx [rsp+CONST+var_xxx] add ebx r8d test ebx ebx jg JUMP_ADDR_284	mov rbx [rbp+CONST] mov rax rbx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_398	mov [rsp+CONST+var_xxx] rcx mov rdx rcx mov rsi r9 mov rdi rbp call callfunc_xxx mov rcx [rsp+CONST+var_xxx] cmp rcx rax jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax rcx js JUMP_ADDR_338	cmp rax rcx jb JUMP_ADDR_338	movsxd rcx eax mov r12d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_128	test eax eax jns JUMP_ADDR_54	jmp JUMP_ADDR_26	endbr64 test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_436	mov edx r11d and edx CONST	mov eax [rsp+CONST+var_xxx] shl r14d CONST shl r8d CONST movsx ebx bl mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ebx mov [rsp+CONST+var_xxx+CONST] eax lea eax [r13+r13+CONST] or eax edx movzx edx [rsp+CONST+var_xxx] or eax r14d shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx or r8d eax movzx eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8b mov [rsp+CONST+var_xxx] eax test r11d r11d jnz JUMP_ADDR_279	mov eax [r15+CONST] cmp eax CONST jbe JUMP_ADDR_370	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax	movsd xmm0 [rdx] movsd [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_281	endbr64 mov [rsp+CONST+var_xxx] CONST	mov eax [r15] test r14d r14d jz JUMP_ADDR_193	cmp eax CONST ja JUMP_ADDR_294	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsxd rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST xor r14d r14d mov [rsp+CONST+var_xxx] CONST mov r10 [rdx] test eax eax jns JUMP_ADDR_141	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_143	endbr64 mov [rsp+CONST+var_xxx] CONST mov eax [r15] test r14d r14d jnz JUMP_ADDR_188	test ecx ecx jz JUMP_ADDR_295	cmp eax CONST ja JUMP_ADDR_343	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov [rsp+CONST+var_xxx] CONST movzx r10d [rdx] mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_140	endbr64 mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_187	endbr64 jmp JUMP_ADDR_36	endbr64 mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx mov r14d CONST mov r11d CONST sub eax CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d CONST lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx sub eax CONST cdqe movzx eax [CONST_VAR+rax] jmp ds:xxx	endbr64 mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx movzx ebx [rax+CONST] lea eax [rbx+CONST] cmp al CONST ja JUMP_ADDR_23	movsx eax bl lea rdi unk_xxx xor r13d r13d mov ecx CONST sub eax CONST cdqe movzx eax [CONST_VAR+rax] lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_437	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST	cmp r12d CONST jz JUMP_ADDR_282	add r12d CONST jmp JUMP_ADDR_54	endbr64 mov eax [r15] test r14d r14d jz JUMP_ADDR_326	cmp eax CONST ja JUMP_ADDR_358	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov r10 [rdx] jmp JUMP_ADDR_331	endbr64 test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_435	mov edx r11d and edx CONST	mov eax [rsp+CONST+var_xxx] movzx edx dl shl r14d CONST movsx ebx bl shl r8d CONST mov [rsp+CONST+var_xxx] ebx mov [rsp+CONST+var_xxx] eax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx+CONST] eax lea eax [r13+r13+CONST] or eax edx movzx edx [rsp+CONST+var_xxx] or eax r14d shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx or r8d eax movzx eax [rsp+CONST+var_xxx] shl eax CONST or r8d eax movzx eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8w mov [rsp+CONST+var_xxx] eax test r11d r11d jnz JUMP_ADDR_313	mov eax [r15+CONST] cmp eax CONST ja JUMP_ADDR_369	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15+CONST] eax	movsd xmm0 [rdx] movsd [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_315	test r14d r14d jz JUMP_ADDR_268	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_428	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST	cmp r12d CONST jz JUMP_ADDR_282	sub [rsp+CONST+var_xxx] CONST add r12d CONST	test r10 r10 jz JUMP_ADDR_234	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_234	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_234	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_452	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST	cmp r12d CONST jz JUMP_ADDR_282	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_454	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] bl	cmp r12d CONST jz JUMP_ADDR_282	sub [rsp+CONST+var_xxx] CONST add r12d CONST	mov ebx [rsp+CONST+var_xxx] mov r14d [rsp+CONST+var_xxx] add r13d ecx sub ebx r13d test r14d r14d jle JUMP_ADDR_240	movsxd r13 r14d mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov rdx r13 mov [rsp+CONST+var_xxx] rcx call sub_xxx cmp r13 rax jnz JUMP_ADDR_282	xor eax eax add r12d r14d mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] js JUMP_ADDR_471	cmp r12d r13d jb JUMP_ADDR_471	test eax eax jnz JUMP_ADDR_128	test r12d r12d js JUMP_ADDR_26	mov r13 [rbp+CONST] mov rax r13 sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_397	mov [rsp+CONST+var_xxx] rcx mov rdx rcx mov rsi r9 mov rdi rbp call callfunc_xxx mov rcx [rsp+CONST+var_xxx] cmp rax rcx jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax rcx js JUMP_ADDR_462	cmp rax rcx jb JUMP_ADDR_462	movsxd rcx eax mov r12d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_128	test eax eax js JUMP_ADDR_26	test ebx ebx jle JUMP_ADDR_54	movsxd rbx ebx mov esi CONST mov rdi rbp mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_282	add ebx r12d mov r12d ebx jo JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_54	jmp JUMP_ADDR_26	test r10 r10 jnz JUMP_ADDR_293	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_339	mov r9d [rsp+CONST+var_xxx] test r9d r9d jz JUMP_ADDR_339	mov [rsp+CONST+var_xxx] CONST mov ecx CONST lea r9 [rsp+CONST+var_xxx]	mov [rsp+CONST+var_xxx] CONST xor r13d r13d	mov esi [rsp+CONST+var_xxx] test esi esi jnz JUMP_ADDR_219	mov r8d [rsp+CONST+var_xxx] add r13d ecx sub r8d r13d jmp JUMP_ADDR_155	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_460	mov ecx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdx r15 mov rdi rbp add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	mov rax sub_xxx mov [rsp+CONST+var_xxx] rbp mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_8	test r10 r10 jz JUMP_ADDR_389	movzx eax [rsp+CONST+var_xxx] and eax CONST cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_265	test al al jz JUMP_ADDR_265	lea rdx [r9+CONST] mov rcx r13 mov [r9+CONST] CONST sub rcx rdx mov r9 rdx	mov r13 [rsp+CONST+var_xxx] mov edx CONST sub r13 rcx cmovs r13 rdx mov edx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r13d test edx edx jnz JUMP_ADDR_219	mov r8d [rsp+CONST+var_xxx] sub r8d ecx sub r8d r13d jmp JUMP_ADDR_153	call sub_xxx jmp JUMP_ADDR_55	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_304	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_451	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_222	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_162	test r8d r8d jle JUMP_ADDR_466	movsxd r13 r8d mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov rdx r13 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r8d call sub_xxx cmp r13 rax jnz JUMP_ADDR_282	mov r8d [rsp+CONST+var_xxx] xor eax eax mov r10 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] add r12d r8d js JUMP_ADDR_464	cmp r12d r13d jb JUMP_ADDR_464	mov r8d eax test eax eax jnz JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_157	jmp JUMP_ADDR_26	test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_365	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx fld CONST fstp CONST	lea rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov rdi rbp lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax call sub_xxx test eax eax jns JUMP_ADDR_316	mov r12d CONST test [rbp+CONST] CONST jnz JUMP_ADDR_27	jmp JUMP_ADDR_30	movsxd r13 ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov rdx r13 mov [rsp+CONST+var_xxx] rcx call sub_xxx cmp r13 rax jnz JUMP_ADDR_282	xor eax eax add r12d ebx mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] js JUMP_ADDR_465	cmp r12d ebx jb JUMP_ADDR_465	test eax eax jnz JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_173	jmp JUMP_ADDR_26	mov esi [rsp+CONST+var_xxx] test esi esi jz JUMP_ADDR_390	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_450	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_160	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_143	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_190	test r13d r13d jnz JUMP_ADDR_340	cmp eax CONST ja JUMP_ADDR_408	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov [rsp+CONST+var_xxx] CONST mov r10d [rdx] xor r14d r14d mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_140	mov eax [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_371	cmp eax CONST jg JUMP_ADDR_371	xor eax eax xor r14d r14d lea r13 unk_xxx jmp JUMP_ADDR_70	mov rcx [r15+CONST] lea rax [rcx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_43	call sub_xxx jmp JUMP_ADDR_14	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_224	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_457	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_222	mov esi [rsp+CONST+var_xxx] mov eax CONST lea r13 GLOBAL_VAR cmp esi eax cmovge eax esi mov [rsp+CONST+var_xxx] eax cmp bl CONST jnz JUMP_ADDR_69	nop [rax+CONST]	mov r8d [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] mov r9d r12d mov rsi r13 mov edx [rsp+CONST+var_xxx] mov rdi rbp call loc_xxx	mov r12d eax test eax eax jns JUMP_ADDR_54	jmp JUMP_ADDR_26	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_64	test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_362	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx fld CONST fstp CONST	lea rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov rdi rbp lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax call sub_xxx test eax eax js JUMP_ADDR_282	xor edx edx add r12d eax js JUMP_ADDR_461	cmp r12d eax jb JUMP_ADDR_461	test edx edx jz JUMP_ADDR_249	jmp JUMP_ADDR_128	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_138	test ecx ecx jnz JUMP_ADDR_359	test r13d r13d jnz JUMP_ADDR_418	cmp eax CONST ja JUMP_ADDR_446	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r12d jmp JUMP_ADDR_54	test ecx ecx jnz JUMP_ADDR_355	test r13d r13d jnz JUMP_ADDR_421	cmp eax CONST ja JUMP_ADDR_447	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsxd r10 [rdx] nop [rax+CONST]	test r10 r10 js JUMP_ADDR_375	mov [rsp+CONST+var_xxx] CONST xor r14d r14d jmp JUMP_ADDR_140	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_101	mov rbx [rbp+CONST] mov rax rbx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_374	mov rdx r14 mov rsi r13 mov rdi rbp call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_282	movsxd rax r12d xor edx edx add rax r14 js JUMP_ADDR_338	cmp rax r14 jnb JUMP_ADDR_177	mov edx CONST jmp JUMP_ADDR_177	xor ecx ecx lea r9 [rsp+CONST+var_xxx] jmp JUMP_ADDR_255	cmp eax CONST ja JUMP_ADDR_407	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov [rsp+CONST+var_xxx] CONST movzx r10d [rdx] xor r14d r14d mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_140	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_196	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_118	movsxd rdx ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx rax jnz JUMP_ADDR_282	add r12d ebx js JUMP_ADDR_128	cmp r12d ebx jb JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_73	jmp JUMP_ADDR_26	movsxd rdx ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx rax jnz JUMP_ADDR_282	add r12d ebx js JUMP_ADDR_128	cmp r12d ebx jb JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_46	jmp JUMP_ADDR_26	cmp eax CONST ja JUMP_ADDR_417	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsx r10 [rdx] jmp JUMP_ADDR_331	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_212	cmp eax CONST ja JUMP_ADDR_416	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r12b jmp JUMP_ADDR_54	mov edx [r15+CONST] or [rsp+CONST+var_xxx+CONST] CONST cmp edx CONST ja JUMP_ADDR_424	mov eax edx add edx CONST add rax [r15+CONST] mov [r15+CONST] edx	movdqa xmm2 [rax] movaps [rsp+CONST+var_xxx] xmm2 jmp JUMP_ADDR_315	mov edx [r15+CONST] or [rsp+CONST+var_xxx+CONST] CONST cmp edx CONST ja JUMP_ADDR_415	mov eax edx add edx CONST add rax [r15+CONST] mov [r15+CONST] edx	movdqa xmm3 [rax] movaps [rsp+CONST+var_xxx] xmm3 jmp JUMP_ADDR_281	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_135	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_218	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15+CONST] eax jmp JUMP_ADDR_185	mov eax CONST mov r14d CONST lea r13 GLOBAL_VAR jmp JUMP_ADDR_70	mov rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx mov rdi rbx call sub_xxx mov rdi rbx lea rsi [rax+CONST] call sub_xxx mov ecx [rsp+CONST+var_xxx] test eax eax mov [rsp+CONST+var_xxx] eax jns JUMP_ADDR_132	lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx jmp JUMP_ADDR_335	mov [rsp+CONST+var_xxx] CONST neg r10 mov r14d CONST jmp JUMP_ADDR_140	mov rdi r13 call sub_xxx mov r14 rax jmp JUMP_ADDR_70	lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax movzx eax [rdx+CONST] sub eax CONST cmp eax CONST jbe JUMP_ADDR_431	mov eax [r15] cmp eax CONST ja JUMP_ADDR_409	mov edi eax add eax CONST add rdi [r15+CONST] mov [r15] eax	mov eax [CONST_VAR] mov edi CONST movzx ebx [rdx+CONST] test eax eax cmovns edi eax mov [rsp+CONST+var_xxx] edi jmp JUMP_ADDR_92	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] ecx call sub_xxx mov ecx [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] lea r9 GLOBAL_VAR cmp eax CONST lea rsi GLOBAL_VAR jz JUMP_ADDR_128	test eax eax jz JUMP_ADDR_99	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_99	jmp JUMP_ADDR_24	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	mov rax CONST mov rax fs:xxx mov rax [rax] mov rdx [rax+CONST] mov rdi [rax+CONST] movzx eax [rdx] mov [rsp+CONST+var_xxx] rdi test al al jz JUMP_ADDR_412	cmp al CONST jz JUMP_ADDR_412	xor eax eax cmp [CONST_VAR] CONST cmovnz rax rdx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_108	mov r13 [rsp+CONST+var_xxx] mov eax CONST sub r13 rcx cmovs r13 rax mov [rsp+CONST+var_xxx] r13d jmp JUMP_ADDR_256	mov edx [rsp+CONST+var_xxx] test edx edx jz JUMP_ADDR_162	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_458	lea rdx [rax+CONST] mov [rbp+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_160	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_11	mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] jmp JUMP_ADDR_241	mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov r9 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_174	test ebx ebx jle JUMP_ADDR_116	movsxd r13 ebx mov esi CONST mov rdi rbp mov rdx r13 call sub_xxx cmp r13 rax jnz JUMP_ADDR_282	add r12d ebx js JUMP_ADDR_128	cmp r12d ebx jb JUMP_ADDR_128	test r12d r12d jns JUMP_ADDR_116	jmp JUMP_ADDR_26	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] ecx call sub_xxx mov [rsp+CONST+var_xxx] eax cmp eax CONST jz JUMP_ADDR_128	mov r8d [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] lea rsi GLOBAL_VAR lea r9 GLOBAL_VAR mov ecx [rsp+CONST+var_xxx] movzx ebx [rax] jmp JUMP_ADDR_92	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_342	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_298	mov rdi [r15+CONST] lea rax [CONST_VAR+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_380	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_27	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_27	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_108	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_74	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_47	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx jmp JUMP_ADDR_367	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_361	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_357	cmp eax CONST ja JUMP_ADDR_448	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r12w jmp JUMP_ADDR_54	cmp eax CONST ja JUMP_ADDR_449	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsx r10 [rdx] jmp JUMP_ADDR_331	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx jmp JUMP_ADDR_364	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10	mov rdi rbp call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp eax CONST mov r8d [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] jnz JUMP_ADDR_160	jmp JUMP_ADDR_282	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10	mov rdi rbp call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp eax CONST mov r9 [rsp+CONST+var_xxx] jnz JUMP_ADDR_222	jmp JUMP_ADDR_282	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] lea r9 GLOBAL_VAR cmp eax CONST mov r8d [rsp+CONST+var_xxx] lea rsi GLOBAL_VAR jz JUMP_ADDR_128	test eax eax jz JUMP_ADDR_378	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_378	jmp JUMP_ADDR_24	xor r11d r11d xor edx edx jmp JUMP_ADDR_215	xor r11d r11d xor edx edx jmp JUMP_ADDR_182	mov esi CONST mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_207	jmp JUMP_ADDR_282	mov rax CONST or ebx CONST mov r12d CONST mov [rbp+CONST] ebx mov fs:xxx CONST jmp JUMP_ADDR_28	mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] cmp eax CONST mov r9 [rsp+CONST+var_xxx] jnz JUMP_ADDR_167	jmp JUMP_ADDR_282	movzx esi bl mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] cmp eax CONST mov r9 [rsp+CONST+var_xxx] jnz JUMP_ADDR_170	jmp JUMP_ADDR_282	movzx esi dl mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_120	jmp JUMP_ADDR_282	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_325	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_330	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_420	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_423	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 jmp JUMP_ADDR_426	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 jmp JUMP_ADDR_429	mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_229	jmp JUMP_ADDR_282	movzx esi bl mov rdi rbp mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_232	jmp JUMP_ADDR_282	mov rax CONST mov r12d CONST mov fs:xxx CONST jmp JUMP_ADDR_28	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 jmp JUMP_ADDR_429	mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 jmp JUMP_ADDR_426	mov edx CONST jmp JUMP_ADDR_58	call sub_xxx	mov edx CONST jmp JUMP_ADDR_318	mov edx CONST jmp JUMP_ADDR_244	mov eax CONST jmp JUMP_ADDR_126	mov eax CONST jmp JUMP_ADDR_276	mov eax CONST jmp JUMP_ADDR_287	xor r8d r8d jmp JUMP_ADDR_162	mov edx CONST jmp JUMP_ADDR_50	mov edx CONST jmp JUMP_ADDR_77	test r8d r8d jg JUMP_ADDR_273	xor r8d r8d jmp JUMP_ADDR_157	mov eax CONST jmp JUMP_ADDR_238
[ph]libcap-git-setcap_buffered_vfprintf
push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_16	mov [CONST_VAR+CONST] CONST	lea rax [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov eax [rbx+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax lea rax unk_xxx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rbp CONST mov r12d eax test rbp rbp jz JUMP_ADDR_24	mov rsi sub_xxx mov rdi rsp mov rdx rbx call callfunc_xxx	mov edx [rbx] and edx CONST jz JUMP_ADDR_18	mov rax [rsp+CONST+var_xxx] sub rax [rsp+CONST+var_xxx] mov r13d eax test eax eax jle JUMP_ADDR_12	mov r14 [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r14 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_25	mov rsi [rsp+CONST+var_xxx] movsxd rdx r13d mov rdi rbx call callfunc_xxx cmp r13d eax mov eax CONST cmovnz r12d eax	test [rbx] CONST jnz JUMP_ADDR_12	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_12	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_28	sub [CONST_VAR] CONST	test rbp rbp jz JUMP_ADDR_14	mov rdi rsp xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_30	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 retn	cmp eax CONST jz JUMP_ADDR_2	mov r12d CONST jmp JUMP_ADDR_14	mov r13 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r13 jz JUMP_ADDR_22	mov eax fs:xxx test eax eax jnz JUMP_ADDR_26	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] r13	mov rax [rsp+CONST+var_xxx] sub rax [rsp+CONST+var_xxx] add [CONST_VAR+CONST] CONST mov r13d eax test eax eax jg JUMP_ADDR_6	jmp JUMP_ADDR_8	mov rax sub_xxx mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_7	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_21	call sub_xxx jmp JUMP_ADDR_21	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_12	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_12	call sub_xxx
[ph]libcap-git-setcap_read_int_0
mov rdx [CONST_VAR] lea rax [rdx+CONST] movzx r8d [rdx] mov [CONST_VAR] rax movzx eax [rdx+CONST] sub r8d CONST sub eax CONST cmp eax CONST ja JUMP_ADDR_7	add rdx CONST mov r10d CONST mov r9d CONST jmp JUMP_ADDR_4	lea ecx [r8+r8*4] mov esi r9d add ecx ecx sub esi eax add eax ecx cmp esi ecx cmovl eax r10d mov r8d eax	mov [CONST_VAR] rdx movzx eax [rdx] add rdx CONST sub eax CONST cmp eax CONST ja JUMP_ADDR_7	test r8d r8d js JUMP_ADDR_3	cmp r8d CONST jle JUMP_ADDR_2	mov r8d CONST jmp JUMP_ADDR_3	mov eax r8d retn
[ph]libcap-git-setcap___parse_one_specmb
endbr64 push r14 lea r11 [CONST_VAR+CONST] push r13 mov r13 rcx push r12 push rbp mov rbp rsi push rbx mov rbx rdx sub rsp CONST mov [rdx+CONST] CONST and [rdx+CONST] CONST mov [rsp+CONST+var_xxx] r11 mov [rdx+CONST] CONST movzx edx [CONST_VAR+CONST] mov eax edx sub edx CONST cmp edx CONST jbe JUMP_ADDR_34	lea rdx unk_xxx nop	sub eax CONST cmp al CONST ja JUMP_ADDR_7	movzx eax al movsxd rax [rdx+rax*4] add rax rdx jmp rax	or [rbx+CONST] CONST nop [rax+CONST]	add r11 CONST mov [rsp+CONST+var_xxx] r11 movzx eax [r11] test al al jnz JUMP_ADDR_2	nop [rax+CONST]	test [rbx+CONST] CONST jz JUMP_ADDR_9	mov [rbx+CONST] CONST	mov [rbx+CONST] CONST mov [rbx+CONST] CONST movzx eax [r11] cmp al CONST jz JUMP_ADDR_32	sub eax CONST xor r14d r14d cmp eax CONST jbe JUMP_ADDR_26	mov [rbx+CONST] CONST mov [rbx] CONST cmp [r11] CONST jz JUMP_ADDR_29	mov rax cs:xxx and [rbx+CONST] CONST test rax rax jnz JUMP_ADDR_78	lea rdx [r11+CONST] mov [rsp+CONST+var_xxx] rdx movzx eax [r11] sub eax CONST cmp al CONST ja JUMP_ADDR_17	lea rcx unk_xxx movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	or [rbx+CONST] CONST	lea rax [r11+CONST] mov r11 rdx mov rdx rax	mov [rsp+CONST+var_xxx] rdx movzx edx [r11] cmp cs:xxx CONST mov [rbx+CONST] CONST mov [rbx+CONST] edx jnz JUMP_ADDR_73	lea eax [rdx+CONST] mov [rbx+CONST] CONST mov esi [rbx+CONST] cmp eax CONST ja JUMP_ADDR_40	lea rcx unk_xxx movsxd rax [rcx+rax*4] add rax rcx jmp rax	mov [rbx+CONST] CONST jmp JUMP_ADDR_5	or [rbx+CONST] CONST jmp JUMP_ADDR_5	or [rbx+CONST] CONST jmp JUMP_ADDR_5	or [rbx+CONST] CONST jmp JUMP_ADDR_5	or [rbx+CONST] CONST jmp JUMP_ADDR_5	or [rbx+CONST] CONST jmp JUMP_ADDR_5	lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp eax CONST jz JUMP_ADDR_28	mov [rbx+CONST] eax	mov r11 [rsp+CONST+var_xxx] jmp JUMP_ADDR_11	lea rdx [r11+CONST] mov [rsp+CONST+var_xxx] rdx movzx eax [r11+CONST] cmp al CONST jz JUMP_ADDR_66	sub eax CONST cmp eax CONST jbe JUMP_ADDR_50	mov [rbx] CONST mov r11 rdx jmp JUMP_ADDR_12	lea r12 [r11+CONST] mov [rsp+CONST+var_xxx] r12 movzx eax [r11+CONST] sub eax CONST cmp eax CONST jbe JUMP_ADDR_68	mov [rbx+CONST] ebp mov r11 r12 add rbp CONST mov r14d CONST mov [rsp+CONST+var_xxx] r12 jmp JUMP_ADDR_11	mov r12 rdi lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_39	mov rdx [rsp+CONST+var_xxx] cmp [rdx] CONST jnz JUMP_ADDR_39	lea r11 [rdx+CONST] mov [rsp+CONST+var_xxx] r11 cmp eax CONST jz JUMP_ADDR_38	lea ecx [rax+CONST] mov eax eax mov [rbx+CONST] ecx mov rcx [r13+CONST] cmp rax rcx cmovb rax rcx mov [r13+CONST] rax	movzx eax [rdx+CONST] jmp JUMP_ADDR_1	mov [rsp+CONST+var_xxx] r11 movzx eax [r12+CONST] jmp JUMP_ADDR_1	mov [rbx+CONST] CONST nop [rax+rax+CONST]	mov r12 [rsp+CONST+var_xxx] test edx edx jnz JUMP_ADDR_63	sub r12 CONST mov rax r14 mov [rbx+CONST] r12 mov [rbx+CONST] r12 add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 retn	movzx eax [rbx+CONST] and eax CONST cmp al CONST sbb eax eax xor al al add eax CONST	mov [rbx+CONST] eax cmp esi CONST jnz JUMP_ADDR_41	mov ecx CONST	mov [rbx+CONST] ebp add r14 rcx jmp JUMP_ADDR_41	movzx ecx [rbx+CONST] mov eax CONST test cl CONST jnz JUMP_ADDR_44	and ecx CONST mov eax CONST jnz JUMP_ADDR_44	movzx eax [rbx+CONST] shr al CONST and eax CONST jmp JUMP_ADDR_44	lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp eax CONST jz JUMP_ADDR_52	mov [rbx] eax	mov r11 [rsp+CONST+var_xxx] jmp JUMP_ADDR_12	mov r11 rdx	or [rbx+CONST] CONST	lea rdx [r11+CONST] jmp JUMP_ADDR_17	cmp [r11+CONST] CONST jz JUMP_ADDR_85	lea rax [r11+CONST] or [rbx+CONST] CONST mov r11 rdx mov rdx rax jmp JUMP_ADDR_17	or [rbx+CONST] CONST cmp [r11+CONST] CONST jnz JUMP_ADDR_16	add r11 CONST jmp JUMP_ADDR_54	mov eax CONST	mov [rbx+CONST] eax cmp esi CONST jz JUMP_ADDR_45	mov r12 [rsp+CONST+var_xxx]	mov [rbx+CONST] r12 mov rdi r12 mov esi CONST call sub_xxx mov [rbx+CONST] rax add rsp CONST mov rax r14 pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov [rbx+CONST] CONST cmp esi CONST jnz JUMP_ADDR_62	mov edx [rbx+CONST] mov ecx CONST jmp JUMP_ADDR_46	lea r12 [r11+CONST] mov [rsp+CONST+var_xxx] r12 movzx eax [r11+CONST] sub eax CONST cmp eax CONST jbe JUMP_ADDR_86	mov [rbx+CONST] ebp add r14 CONST mov r11 r12 add rbp CONST mov [rsp+CONST+var_xxx] r12 jmp JUMP_ADDR_12	lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_33	mov r11 [rsp+CONST+var_xxx] cmp [r11] CONST jnz JUMP_ADDR_33	cmp eax CONST jz JUMP_ADDR_33	mov rcx [r13+CONST] lea edx [rax+CONST] mov eax eax mov [rbx+CONST] edx cmp rax rcx cmovb rax rcx add r11 CONST mov [rsp+CONST+var_xxx] r11 mov [r13+CONST] rax test edx edx js JUMP_ADDR_33	xor r14d r14d jmp JUMP_ADDR_11	mov rcx cs:xxx mov rax [rcx+rdx*8] test rax rax jz JUMP_ADDR_18	lea rcx [rbx+CONST] lea rdx [rbx+CONST] mov esi CONST mov rdi rbx call rax mov edx [rbx+CONST] movsxd rcx eax mov [rbx+CONST] rcx test eax eax js JUMP_ADDR_18	cmp [rbx+CONST] CONST jnz JUMP_ADDR_41	test rcx rcx jz JUMP_ADDR_41	jmp JUMP_ADDR_46	movzx edx [r11] cmp [rax+rdx*8] CONST jz JUMP_ADDR_13	lea rdi [rsp+CONST+var_xxx] mov rsi rbx call sub_xxx mov r11 [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_13	jmp JUMP_ADDR_55	mov eax CONST jmp JUMP_ADDR_61	mov eax CONST jmp JUMP_ADDR_44	mov eax CONST jmp JUMP_ADDR_61	mov eax CONST jmp JUMP_ADDR_61	lea rdx [r11+CONST] or [rbx+CONST] CONST add r11 CONST jmp JUMP_ADDR_17	lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_67	mov r11 [rsp+CONST+var_xxx] cmp [r11] CONST jnz JUMP_ADDR_67	cmp eax CONST jz JUMP_ADDR_67	mov rcx [r13+CONST] lea edx [rax+CONST] mov eax eax mov [rbx+CONST] edx cmp rax rcx cmovb rax rcx add r11 CONST mov [rsp+CONST+var_xxx] r11 mov [r13+CONST] rax test edx edx jns JUMP_ADDR_12	jmp JUMP_ADDR_67
[ph]libcap-git-setcap_locked_vfxprintf
push rbp mov rbp rsp push r15 mov r15d ecx push r14 mov r14 rdx push r13 mov r13 rdi mov rdi rsi push r12 push rbx sub rsp CONST mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov eax [r13+CONST] test eax eax jle JUMP_ADDR_9	call sub_xxx lea rbx [rax+CONST] mov rax rbx shr rax CONST jnz JUMP_ADDR_10	lea r12 ds:xxx mov rdi r12 call sub_xxx cmp r12 CONST jbe JUMP_ADDR_4	test eax eax jz JUMP_ADDR_11	add r12 CONST lea rcx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rdx rbx and r12 CONST mov [rbp+var_xxx] CONST sub rsp r12 lea r12 [rsp+CONST+var_xxx+CONST] and r12 CONST mov rdi r12 call sub_xxx cmp eax CONST jnz JUMP_ADDR_8	mov eax CONST	mov rdx [rbp+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_15	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov ecx r15d mov rdx r14 mov rsi r12 mov rdi r13 call sub_xxx jmp JUMP_ADDR_6	mov rdi r13 call sub_xxx jmp JUMP_ADDR_6	mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_6	mov rdi r12 call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_5	lea rcx [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rdx rbx mov rdi rax mov [rbp+var_xxx] CONST call sub_xxx cmp eax CONST jz JUMP_ADDR_14	mov ecx r15d mov rdx r14 mov rsi r12 mov rdi r13 call sub_xxx	mov rdi r12 mov [rbp+var_xxx] eax call sub_xxx mov eax [rbp+var_xxx] jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap___vfxprintf
endbr64 push r12 mov r12 rdx push rbp push rbx mov rbx rdi sub rsp CONST test rdi rdi cmovz rbx cs:xxx mov edx [rbx] and edx CONST jnz JUMP_ADDR_6	mov rbp fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] rbp jz JUMP_ADDR_5	mov eax fs:xxx test eax eax jnz JUMP_ADDR_11	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] rbp	add [CONST_VAR+CONST] CONST	mov rdx r12 mov rdi rbx call sub_xxx mov r8d eax test [rbx] CONST jnz JUMP_ADDR_10	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_10	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_13	sub [CONST_VAR] CONST	add rsp CONST mov eax r8d pop rbx pop rbp pop r12 retn	mov r8d CONST mov eax edx lock CONST r8d jz JUMP_ADDR_4	mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] rsi call sub_xxx mov ecx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] jmp JUMP_ADDR_4	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_10	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_10
[ph]libcap-git-setcap___fxprintf
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov rdx rsp xor ecx ecx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap___fxprintf_nocancel
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov [rsp+CONST] rdx mov [rsp+CONST] rcx mov [rsp+CONST] r8 mov [rsp+CONST] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST] xmm0 movaps [rsp+CONST] xmm1 movaps [rsp+CONST] xmm2 movaps [rsp+CONST] xmm3 movaps [rsp+CONST] xmm4 movaps [rsp+CONST] xmm5 movaps [rsp+CONST] xmm6 movaps [rsp+CONST] xmm7	mov rax fs:xxx mov [rsp+CONST] rax xor eax eax test rbx rbx cmovz rbx cs:xxx lea rax [rsp+CONST] mov [rsp+CONST] rax lea rax [rsp+CONST] mov edx [rbx] mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] rax and edx CONST jnz JUMP_ADDR_8	mov rbp fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] rbp jz JUMP_ADDR_7	mov eax fs:xxx test eax eax jnz JUMP_ADDR_14	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] rbp	add [CONST_VAR+CONST] CONST	mov ebp [rbx+CONST] lea rdx [rsp+CONST] xor ecx ecx mov rdi rbx mov eax ebp or eax CONST mov [rbx+CONST] eax call sub_xxx mov [rbx+CONST] ebp mov r8d eax test [rbx] CONST jnz JUMP_ADDR_12	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_12	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_16	sub [CONST_VAR] CONST	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_18	add rsp CONST mov eax r8d pop rbx pop rbp retn	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_6	mov [rsp+CONST] rsi call sub_xxx mov rsi [rsp+CONST] jmp JUMP_ADDR_6	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_12	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_12	call sub_xxx
[ph]libcap-git-setcap___new_fclose
endbr64 push r12 push rbp mov rbp rdi push rbx mov eax [CONST_VAR] test ah CONST jnz JUMP_ADDR_15	mov edx eax and edx CONST jz JUMP_ADDR_16	shl eax CONST sar eax CONST mov r12d eax	test edx edx jnz JUMP_ADDR_5	mov rdi [rbp+CONST] sub [CONST_VAR+CONST] CONST jz JUMP_ADDR_23	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_27	xor esi esi mov rdi rbp call callfunc_xxx mov eax [rbp+CONST] test eax eax jle JUMP_ADDR_25	mov rbx [rbp+CONST] mov eax fs:xxx test eax eax jnz JUMP_ADDR_28	mov edx CONST cmpxchg cs:xxx edx	mov rdi [rbx] call sub_xxx mov rdi [rbx+CONST] call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_30	sub cs:xxx CONST	lea rax unk_xxx lea rdx unk_xxx cmp rbp rax setz al cmp rbp rdx setz dl or al dl jnz JUMP_ADDR_14	lea rax unk_xxx cmp rbp rax jz JUMP_ADDR_14	mov rdi rbp call sub_xxx	mov eax r12d pop rbx pop rbp pop r12 retn	call sub_xxx mov eax [rbp+CONST] test ah CONST jnz JUMP_ADDR_21	mov rbx fs:xxx mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] rbx jz JUMP_ADDR_20	mov eax fs:xxx test eax eax jnz JUMP_ADDR_32	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbp+CONST] mov eax [rbp+CONST] mov [CONST_VAR+CONST] rbx	add [CONST_VAR+CONST] CONST	mov edx eax and edx CONST test ah CONST jz JUMP_ADDR_2	mov rdi rbp call sub_xxx mov edx [rbp+CONST] mov r12d eax and edx CONST jmp JUMP_ADDR_3	mov [CONST_VAR+CONST] CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	sub [CONST_VAR] CONST jmp JUMP_ADDR_5	cmp [rbp+CONST] CONST jz JUMP_ADDR_11	mov rdi rbp call sub_xxx jmp JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_6	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_9	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_9	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_11	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_11	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_19	call sub_xxx jmp JUMP_ADDR_19	xchg edx [CONST_VAR] cmp edx CONST jle JUMP_ADDR_5	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_5
[ph]libcap-git-setcap_fdopen
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx mov ebx edi sub rsp CONST movzx eax [CONST_VAR] cmp al CONST jz JUMP_ADDR_33	cmp al CONST jz JUMP_ADDR_31	cmp al CONST jz JUMP_ADDR_6	mov rax CONST mov fs:xxx CONST	xor r15d r15d	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r12d CONST	lea rdx [CONST_VAR+CONST] xor r13d r13d	movzx eax [CONST_VAR+CONST] add rsi CONST cmp al CONST jz JUMP_ADDR_32	cmp al CONST jz JUMP_ADDR_30	test al al jz JUMP_ADDR_12	cmp rdx rsi jnz JUMP_ADDR_8	xor eax eax mov esi CONST mov edi ebx call sub_xxx cmp eax CONST jz JUMP_ADDR_4	mov edx eax and edx CONST jnz JUMP_ADDR_27	test r12b CONST jz JUMP_ADDR_3	xor r14d r14d test r12d CONST jz JUMP_ADDR_17	test ah CONST jz JUMP_ADDR_35	mov edi CONST call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_4	lea rax [rax+CONST] lea rcx [rbp+CONST] mov r15 rbp mov [rbp+CONST] rax test r13d r13d jz JUMP_ADDR_20	test r12b CONST jnz JUMP_ADDR_34	lea r8 unk_xxx xor edx edx xor esi esi mov rdi rbp call sub_xxx lea rax unk_xxx	mov rdi rbp mov [rbp+CONST] rax call sub_xxx mov eax [rbp+CONST] mov [rbp+CONST] ebx and eax CONST or eax r12d mov [rbp+CONST] eax test r14b r14b jz JUMP_ADDR_5	and r12d CONST cmp r12d CONST jnz JUMP_ADDR_5	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_37	xor esi esi mov edx CONST mov rdi rbp call callfunc_xxx cmp rax CONST jnz JUMP_ADDR_5	mov rax CONST cmp fs:xxx CONST jz JUMP_ADDR_5	jmp JUMP_ADDR_4	cmp edx CONST jnz JUMP_ADDR_15	test r12b CONST jnz JUMP_ADDR_15	jmp JUMP_ADDR_3	mov r13d CONST jmp JUMP_ADDR_11	mov r12d CONST jmp JUMP_ADDR_7	and r12d CONST jmp JUMP_ADDR_12	mov r12d CONST jmp JUMP_ADDR_7	lea r8 unk_xxx xor edx edx xor esi esi mov rdi rbp call sub_xxx lea rax unk_xxx jmp JUMP_ADDR_21	or ah CONST mov esi CONST mov edi ebx mov edx eax xor eax eax call sub_xxx cmp eax CONST jz JUMP_ADDR_4	mov r14d CONST jmp JUMP_ADDR_17	call sub_xxx jmp JUMP_ADDR_24
[ph]libcap-git-setcap_fflush
endbr64 test rdi rdi jz JUMP_ADDR_13	push rbp push rbx mov rbx rdi sub rsp CONST mov edx [CONST_VAR] and edx CONST jnz JUMP_ADDR_7	mov rbp fs:xxx mov rdi [CONST_VAR+CONST] cmp [CONST_VAR+CONST] rbp jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_15	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] rbp	add [CONST_VAR+CONST] CONST	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_14	mov rdi rbx call callfunc_xxx neg eax sbb r8d r8d test [rbx] CONST jnz JUMP_ADDR_12	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_12	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_17	sub [CONST_VAR] CONST	add rsp CONST mov eax r8d pop rbx pop rbp retn	jmp JUMP_ADDR_19	call sub_xxx jmp JUMP_ADDR_8	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_5	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_12	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_12	endbr64 mov edi CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___fopen_maybe_mmap
endbr64 mov rax rdi test [CONST_VAR+CONST] CONST jz JUMP_ADDR_3	test [CONST_VAR] CONST jz JUMP_ADDR_3	mov esi [CONST_VAR+CONST] lea rcx unk_xxx lea rdx unk_xxx test esi esi cmovg rdx rcx mov [CONST_VAR+CONST] rdx mov rdx [CONST_VAR+CONST] mov [rdx+CONST] rcx	retn
[ph]libcap-git-setcap_fopen64
endbr64 push r14 mov r14d edx push r13 push r12 mov r12 rsi push rbp mov rbp rdi mov edi CONST push rbx call sub_xxx test rax rax jz JUMP_ADDR_7	mov rbx rax lea rax [rax+CONST] xor edx edx xor esi esi mov [rbx+CONST] rax lea rcx [rbx+CONST] mov rdi rbx mov r13 rbx lea r8 unk_xxx call sub_xxx lea rax unk_xxx mov rdi rbx mov [rbx+CONST] rax call sub_xxx mov ecx r14d mov rdx r12 mov rsi rbp mov rdi rbx call sub_xxx test rax rax jz JUMP_ADDR_6	test [rbx+CONST] CONST jz JUMP_ADDR_5	test [rbx] CONST jz JUMP_ADDR_5	mov ecx [rbx+CONST] lea rdx unk_xxx lea rax unk_xxx test ecx ecx cmovg rax rdx mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rax+CONST] rdx	pop rbx mov rax r13 pop rbp pop r12 pop r13 pop r14 retn	mov rdi rbx xor r13d r13d call sub_xxx mov rdi rbx call sub_xxx pop rbx mov rax r13 pop rbp pop r12 pop r13 pop r14 retn	xor r13d r13d jmp JUMP_ADDR_5	endbr64 mov edx CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_fwrite
endbr64 push r15 push r14 push r13 push r12 mov r12 rsi push rbp imul r12 rdx push rbx sub rsp CONST test r12 r12 jz JUMP_ADDR_17	mov rbp rdx mov edx [rcx] mov r14 rdi mov r13 rsi mov rbx rcx and edx CONST jnz JUMP_ADDR_7	mov r15 fs:xxx mov rdi [rcx+CONST] cmp [CONST_VAR+CONST] r15 jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_24	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] r15	add [CONST_VAR+CONST] CONST	mov eax [rbx+CONST] test eax eax jnz JUMP_ADDR_18	mov [rbx+CONST] CONST	mov r15 [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r15 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_26	mov rdx r12 mov rsi r14 mov rdi rbx call callfunc_xxx cmp rax CONST mov r8 rax setz r9b test [rbx] CONST jnz JUMP_ADDR_14	mov rdi [rbx+CONST] sub [CONST_VAR+CONST] CONST jnz JUMP_ADDR_14	mov [CONST_VAR+CONST] CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_27	sub [CONST_VAR] CONST	cmp r12 r8 jz JUMP_ADDR_16	test r9b r9b jz JUMP_ADDR_23	mov r12 rbp	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp eax CONST jz JUMP_ADDR_9	test [rbx] CONST jnz JUMP_ADDR_22	mov rdi [rbx+CONST] sub [CONST_VAR+CONST] CONST jnz JUMP_ADDR_22	xor r9d r9d xor r8d r8d jmp JUMP_ADDR_12	xor r12d r12d jmp JUMP_ADDR_17	mov rax r8 xor edx edx div r13 mov r12 rax jmp JUMP_ADDR_17	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_10	xor eax eax xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_14	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_14
[ph]libcap-git-setcap__IO_padn
endbr64 push r15 mov rcx rdx mov r15 rdi push r14 push r13 lea r13 GLOBAL_VAR push r12 push rbp push rbx sub rsp CONST mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx cmp esi CONST jz JUMP_ADDR_3	lea r13 GLOBAL_VAR cmp esi CONST jz JUMP_ADDR_3	movzx eax sil lea r13 [rsp+CONST+var_xxx] mov rdx CONST mov rsi rax imul rsi rdx mul rdx add rdx rsi mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rdx	mov ebx ecx cmp ecx CONST jle JUMP_ADDR_9	mov rbp unk_xxx mov rax off_xxx xor r12d r12d sub rax rbp mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_7	mov edx CONST mov rsi r13 mov rdi r15 call callfunc_xxx add r12 rax cmp rax CONST jnz JUMP_ADDR_13	sub ebx CONST cmp ebx CONST jle JUMP_ADDR_10	mov r14 [r15+CONST] mov rax r14 sub rax rbp cmp [rsp+CONST+var_xxx] rax ja JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_5	xor r12d r12d xchg ax ax	test ebx ebx jle JUMP_ADDR_13	mov rbp [r15+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_15	movsxd rdx ebx mov rsi r13 mov rdi r15 call callfunc_xxx add r12 rax	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_16	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx jmp JUMP_ADDR_12	call sub_xxx
[ph]libcap-git-setcap__IO_str_chk_overflow
endbr64 sub rsp CONST call sub_xxx
[ph]libcap-git-setcap___vsprintf_internal
endbr64 push r15 mov r15 rdx mov edx CONST push r14 push r13 mov r13d r8d xor r8d r8d push r12 mov r12 rsi mov esi CONST push rbp mov rbp rdi push rbx mov rbx rcx xor ecx ecx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov r14 rsp mov [rsp+CONST+var_xxx] CONST mov rdi r14 call sub_xxx test r13b CONST jz JUMP_ADDR_4	lea rax unk_xxx mov [rbp+CONST] CONST mov [rsp+CONST+var_xxx] rax	xor eax eax cmp r12 CONST mov rcx rbp mov rsi rbp setnz al mov rdi r14 sub r12 rax mov rdx r12 call sub_xxx mov rdx rbx mov ecx r13d mov rsi r15 mov rdi r14 call sub_xxx mov rdx [rsp+CONST+var_xxx] mov [rdx] CONST mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_5	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rax unk_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	call sub_xxx	endbr64 push r14 xor r8d r8d mov r14 rdx xor ecx ecx push r13 mov edx CONST mov r13 rsi mov esi CONST push r12 push rbp mov rbp rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov r12 rsp mov [rsp+CONST+var_xxx] CONST mov rdi r12 call sub_xxx mov rcx rbp mov rsi rbp mov rdi r12 lea rax unk_xxx mov rdx CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx r14 xor ecx ecx mov rsi r13 mov rdi r12 call sub_xxx mov rdx [rsp+CONST+var_xxx] mov [rdx] CONST mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST pop rbp pop r12 pop r13 pop r14 retn	call sub_xxx	endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_32	mov rbx rdi test al CONST jnz JUMP_ADDR_76	mov rax [CONST_VAR+CONST] mov rdx [rax] cmp rdx [rax+CONST] jb JUMP_ADDR_28	mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov r14 [CONST_VAR+CONST] cmp rdx rcx jb JUMP_ADDR_66	mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rax	test rax rax jz JUMP_ADDR_72	mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov rax [rbx+CONST] cmp [rax+CONST] CONST jz JUMP_ADDR_69	test [rbx] CONST jz JUMP_ADDR_34	mov rbp cs:xxx mov edx [rbp+CONST] mov [rsp+CONST+var_xxx] rbp mov ecx edx and ecx CONST jnz JUMP_ADDR_33	mov r12 fs:xxx mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] r12 jz JUMP_ADDR_22	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_78	cmpxchg [CONST_VAR] edx	mov rdi [rbp+CONST] mov rbp cs:xxx mov [CONST_VAR+CONST] r12 mov edx [rbp+CONST]	and edx CONST add [CONST_VAR+CONST] CONST cmp edx CONST jz JUMP_ADDR_64	mov r15 off_xxx mov r12 unk_xxx mov r13 r15 sub r13 r12	mov rax [rsp+CONST+var_xxx] mov ecx [rax] mov [rsp+CONST+var_xxx] ecx and ch CONST jnz JUMP_ADDR_35	mov rdi [rax+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_35	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_81	sub [CONST_VAR] CONST jmp JUMP_ADDR_36	mov eax [rdx] nop [rax+rax+CONST]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_84	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax CONST mov fs:xxx CONST or [rbx] CONST	mov eax CONST jmp JUMP_ADDR_29	and edx CONST cmp edx CONST jz JUMP_ADDR_64	mov r15 off_xxx mov r12 unk_xxx	sub r15 r12 mov r13 r15	mov rdi rbx xor ebp ebp lea r15 [rsp+CONST+var_xxx] call sub_xxx mov rax [rbx+CONST] mov rdx [rax+CONST] mov [rax] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx jmp JUMP_ADDR_41	mov rdx [rbx+CONST] mov r8 [rbx+CONST] sub rdx rsi cmp rsi r8 ja JUMP_ADDR_63	mov [rsp+CONST+var_xxx] r8 cmp rdx CONST ja JUMP_ADDR_31	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rbp [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx]	mov [rbx+CONST] r8 mov [rbx+CONST] r8	mov rax [rbx+CONST] mov rdx rax sub rdx r12 cmp rdx r13 jnb JUMP_ADDR_60	mov rsi [rbx+CONST] mov rdx [rbx+CONST] mov rdi rbx sub rdx rsi call callfunc_xxx test rax rax jle JUMP_ADDR_55	mov r11 [rbx+CONST] mov rdx [rbx+CONST] add r11 rax mov [rbx+CONST] r11 cmp rdx CONST jz JUMP_ADDR_45	add rdx rax mov [rbx+CONST] rdx	mov r8 [rbx+CONST] mov rsi [rbx+CONST] mov rdx [r8+CONST] lea rcx [r8+CONST] lea r10 [r8+CONST] mov [r8+CONST] rdx mov [rbx+CONST] rsi test rbp rbp jnz JUMP_ADDR_61	mov r9 [r8+CONST] push rcx mov rdx rsi mov rcx r11 push [r8+CONST] mov rsi r10 mov r8 r15 mov rdi r14 call sub_xxx pop rdx pop rcx	mov r8 [rsp+CONST+var_xxx] xor ebp ebp mov rsi r8	mov rdx [rbx+CONST] mov [rbx+CONST] rsi mov rcx [rdx+CONST] cmp [rdx+CONST] rcx jnz JUMP_ADDR_75	cmp eax CONST jz JUMP_ADDR_31	cmp eax CONST jnz JUMP_ADDR_83	test rbp rbp jz JUMP_ADDR_37	lea rdi [rsp+CONST+var_xxx] mov rax r8 sub rax rdi jnz JUMP_ADDR_59	cmp rbp CONST jz JUMP_ADDR_31	mov r8 [rbx+CONST] jmp JUMP_ADDR_40	or rax rbp mov edx [rbx] jnz JUMP_ADDR_57	or edx CONST mov eax CONST mov [rbx+CONST] CONST mov [rbx] edx jmp JUMP_ADDR_29	or edx CONST mov [rbx] edx test rbp rbp jz JUMP_ADDR_32	mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_29	sub rbp rax mov rsi r8 mov rdx rbp call sub_xxx jmp JUMP_ADDR_53	mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_42	mov edx CONST lea r11 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10 sub rdx rbp mov [rsp+CONST+var_xxx] rcx cmp rdx rax mov [rsp+CONST+var_xxx] r8 cmova rdx rax lea rax [r11+rbp] mov [rsp+CONST+var_xxx] r11 mov rdi rax mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rdi r14 mov rdx [rsp+CONST+var_xxx] mov r9 [r8+CONST] push rcx mov rcx rax push [r8+CONST] add rbp rdx mov rsi [rsp+CONST+var_xxx] mov r8 r15 mov rdx [rsp+CONST+var_xxx] call sub_xxx pop rsi pop rdi test rbp rbp jz JUMP_ADDR_47	mov r8 [rsp+CONST+var_xxx] mov edx CONST mov rsi r8 sub rsi [rsp+CONST+var_xxx] cmovs rsi rdx add rsi [rbx+CONST] jmp JUMP_ADDR_48	mov rdi r8 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rax [rbx+CONST] mov rdx [rsp+CONST+var_xxx] sub [rbx+CONST] rdx mov [rbx+CONST] rax jmp JUMP_ADDR_41	mov r15 off_xxx mov rax [rbp+CONST] mov r12 unk_xxx mov r13 r15 mov [rsp+CONST+var_xxx] rax sub r13 r12 sub rax r12 cmp r13 rax jbe JUMP_ADDR_80	mov rax [rsp+CONST+var_xxx] mov esi CONST mov rdi rbp call callfunc_xxx jmp JUMP_ADDR_24	mov r9 [rax+CONST] mov rsi [rax+CONST] lea rdi [rax+CONST] mov [rsp+CONST+var_xxx] rdx mov [rax+CONST] rsi lea rsi [rax+CONST] mov [rax] r9 mov [rax+CONST] r9 push rdi mov rdi r14 push [rax+CONST] lea r8 [rsp+CONST+var_xxx] call sub_xxx mov rdx [rbx+CONST] mov rsi [rsp+CONST+var_xxx] mov [rbx+CONST] rdx mov rdx [rbx+CONST] mov [rbx+CONST] rsi pop r8 mov rcx [rdx] pop r9 cmp rcx [rdx+CONST] jb JUMP_ADDR_77	cmp eax CONST jz JUMP_ADDR_31	mov rdx [rbx+CONST] mov rdi [rbx+CONST] sub rdx rsi call sub_xxx mov rax [rbx+CONST] mov rdx [rbx+CONST] add rdx rax sub rdx [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rdx mov [rbx+CONST] rax jmp JUMP_ADDR_14	mov rdi [rax+CONST] test rdi rdi jz JUMP_ADDR_71	call sub_xxx and [rbx] CONST	mov rdi rbx call sub_xxx jmp JUMP_ADDR_16	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_74	call sub_xxx and [rbx] CONST	mov rdi rbx call sub_xxx mov rax [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax jmp JUMP_ADDR_15	mov rax [rdx] mov eax [rax] jmp JUMP_ADDR_29	or eax CONST mov [CONST_VAR] eax mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_29	mov eax [rcx] jmp JUMP_ADDR_29	mov eax ecx lock CONST edx jz JUMP_ADDR_21	call sub_xxx jmp JUMP_ADDR_21	call sub_xxx mov rbp cs:xxx jmp JUMP_ADDR_65	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_35	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_36	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap_adjust_wide_data
push r12 push rbp mov ebp esi push rbx mov rbx rdi sub rsp CONST mov r12 [CONST_VAR+CONST] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi r12 call sub_xxx cmp bpl CONST jz JUMP_ADDR_3	mov edx eax test eax eax jle JUMP_ADDR_3	mov rax [rbx+CONST] sub rax [rbx+CONST] movsxd rcx edx cqo mov rsi [rbx+CONST] idiv rcx mov rdx [CONST_VAR+CONST] lea rax [rdx+rax*4] mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_7	mov rdx [rbx+CONST] mov rbp rsp mov [rsp+CONST+var_xxx] rdx	mov rax [rbx+CONST] mov r8 rbp mov rcx [rax+CONST] lea rdi [rax+CONST] mov r9 [rax+CONST] lea rsi [rax+CONST] mov [rax+CONST] rcx mov rcx [rbx+CONST] push rdi mov rdi r12 push [rax+CONST] call sub_xxx pop rdx pop rcx cmp eax CONST jz JUMP_ADDR_10	cmp eax CONST jz JUMP_ADDR_11	mov rsi [rbx+CONST] mov rax [CONST_VAR+CONST]	mov [CONST_VAR] rax xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_12	add rsp CONST pop rbx pop rbp pop r12 retn	or [rbx] CONST mov eax CONST jmp JUMP_ADDR_8	mov rdx [rbx+CONST] jmp JUMP_ADDR_4	call sub_xxx
[ph]libcap-git-setcap__IO_wfile_seekoff
endbr64 push r15 mov r15 rdi push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax mov rax [CONST_VAR+CONST] test ecx ecx jz JUMP_ADDR_44	mov r12d edx mov rcx [rax+CONST] mov rdx [rax+CONST] mov rbp rsi mov rbx [rax+CONST] cmp [rax+CONST] rbx jz JUMP_ADDR_27	mov [rsp+CONST] CONST cmp rcx rdx jnb JUMP_ADDR_29	mov rdi r15 call sub_xxx mov r8d eax mov eax CONST test r8d r8d jnz JUMP_ADDR_42	mov rax [r15+CONST] cmp [rax+CONST] CONST jz JUMP_ADDR_31	cmp r12d CONST jz JUMP_ADDR_34	cmp r12d CONST jnz JUMP_ADDR_11	mov r14 [r15+CONST] mov r13 unk_xxx mov rbx off_xxx mov rax r14 sub rbx r13 sub rax r13 cmp rax rbx jnb JUMP_ADDR_84	lea rsi [rsp+CONST] mov rdi r15 call callfunc_xxx test eax eax jnz JUMP_ADDR_39	mov eax [rsp+CONST] and eax CONST cmp eax CONST jnz JUMP_ADDR_39	add rbp [rsp+CONST] xor r12d r12d nop [rax+rax+CONST]	mov rdi r15 call sub_xxx mov rax [r15+CONST] mov edx [r15] cmp rax CONST jz JUMP_ADDR_16	cmp [r15+CONST] CONST jz JUMP_ADDR_16	test dh CONST jnz JUMP_ADDR_16	mov rcx [r15+CONST] mov rsi rcx sub rsi [r15+CONST] add rsi rax cmp rax rbp jle JUMP_ADDR_16	cmp rbp rsi jge JUMP_ADDR_78	mov r13 unk_xxx mov rbx off_xxx sub rbx r13 and edx CONST jnz JUMP_ADDR_39	mov rdx [r15+CONST] mov rax [r15+CONST] mov rcx rbp mov rsi rdx sub rsi rax sub rax rdx and rsi rbp sub rcx rsi cmp rax rcx jl JUMP_ADDR_60	mov r14 [r15+CONST] mov rax r14 sub rax r13 cmp rax rbx jnb JUMP_ADDR_83	mov [rsp+CONST] rcx xor edx edx mov rdi r15 call callfunc_xxx mov r14 rax test rax rax js JUMP_ADDR_59	mov rcx [rsp+CONST] test rcx rcx jz JUMP_ADDR_65	mov rax [r15+CONST] mov rdx rax sub rdx r13 cmp rdx rbx jnb JUMP_ADDR_77	mov edi [rsp+CONST] mov rax [rax+CONST] mov rdx rcx mov rsi [r15+CONST] test edi edi jnz JUMP_ADDR_24	mov rdx [r15+CONST] sub rdx rsi	mov [rsp+CONST] rcx mov rdi r15 call rax mov rcx [rsp+CONST] mov r8 rax mov rdx rax cmp rcx rax jg JUMP_ADDR_61	mov rax [r15+CONST] mov esi CONST mov rdi r15 mov [rsp+CONST] r8 mov [r15+CONST] rax add rdx rax add rcx rax mov [r15+CONST] rax mov [r15+CONST] rax mov [r15+CONST] rax mov rax [r15+CONST] mov [r15+CONST] rdx mov rdx [rax+CONST] mov [r15+CONST] rcx mov [rax+CONST] rdx mov [rax] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx call sub_xxx test eax eax jnz JUMP_ADDR_39	mov r8 [rsp+CONST] and [r15] CONST lea rax [r8+r14] mov [r15+CONST] rax mov rax rbp jmp JUMP_ADDR_42	cmp rcx rdx jnz JUMP_ADDR_2	mov [rsp+CONST] CONST nop [rax+CONST]	test [r15] CONST jnz JUMP_ADDR_3	cmp [rax+CONST] CONST jnz JUMP_ADDR_5	mov rdi [rax+CONST] test rdi rdi jz JUMP_ADDR_33	call sub_xxx and [r15] CONST	mov rdi r15 call sub_xxx mov rax [r15+CONST] mov [r15+CONST] rax mov [r15+CONST] rax mov [r15+CONST] rax mov [r15+CONST] rax mov [r15+CONST] rax mov [r15+CONST] rax mov rax [r15+CONST] mov rdx [rax+CONST] mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax] rdx mov [rax+CONST] rdx cmp r12d CONST jnz JUMP_ADDR_6	mov r13 [r15+CONST] mov rdi r13 call sub_xxx test eax eax jle JUMP_ADDR_63	mov rcx [r15+CONST] cdqe mov rdx [rcx+CONST] sub rdx [rcx] sar rdx CONST imul rax rdx sub rbp rax mov rax [r15+CONST] sub rax [r15+CONST] sub rbp rax	mov rax [r15+CONST] cmp rax CONST jz JUMP_ADDR_38	add rbp rax xor r12d r12d jmp JUMP_ADDR_11	mov r13 unk_xxx mov rbx off_xxx sub rbx r13 nop [rax+CONST]	mov rdi r15 call sub_xxx mov r14 [r15+CONST] mov rax r14 sub rax r13 cmp rax rbx jnb JUMP_ADDR_74	mov edx r12d mov rsi rbp mov rdi r15 call callfunc_xxx cmp rax CONST jz JUMP_ADDR_42	mov rdx [r15+CONST] and [r15] CONST mov [r15+CONST] rax mov [r15+CONST] rdx mov [r15+CONST] rdx mov [r15+CONST] rdx mov [r15+CONST] rdx mov [r15+CONST] rdx mov [r15+CONST] rdx mov rdx [r15+CONST] mov rcx [rdx+CONST] mov [rdx+CONST] rcx mov [rdx] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_92	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rax+CONST] CONST jz JUMP_ADDR_64	mov edx [CONST_VAR] mov rbp [rax+CONST] mov rbx [rax+CONST] mov edi edx and edi CONST mov [rsp+CONST] edi cmp rbp rbx jbe JUMP_ADDR_50	test edi edi jz JUMP_ADDR_50	mov r13 [r15+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_88	xor esi esi mov edx CONST mov rdi r15 call callfunc_xxx cmp rax CONST jz JUMP_ADDR_59	mov [r15+CONST] rax mov edx [r15] mov rax [r15+CONST]	mov r13 [rax] mov r14 [rax+CONST] and dh CONST jz JUMP_ADDR_66	cmp r13 r14 jb JUMP_ADDR_58	mov r13 [rax+CONST] mov r14 [rax+CONST] mov [rsp+CONST] r13	mov r12 [r15+CONST] mov rdi r12 call sub_xxx movsxd rdx eax cmp rbp rbx ja JUMP_ADDR_67	mov rcx [r15+CONST] test edx edx jle JUMP_ADDR_87	mov rax r14 sub rcx [r15+CONST] sub rax r13 sar rax CONST imul rax rdx neg rax sub rax rcx mov rbx rax	mov rax [r15+CONST] cmp rax CONST jz JUMP_ADDR_71	add rax rbx jns JUMP_ADDR_42	mov rax CONST mov fs:xxx CONST	mov rax CONST jmp JUMP_ADDR_42	mov rsi rbp xor ecx ecx jmp JUMP_ADDR_18	cmp rax CONST jz JUMP_ADDR_76	sub rcx rax mov r12d CONST mov rbp rcx jmp JUMP_ADDR_39	mov rsi [r15+CONST] mov rcx [r15+CONST] mov rdi r13 mov rdx [r15+CONST] mov rax [CONST_VAR+CONST] mov r8 [CONST_VAR] add rsi CONST sub r8 [CONST_VAR+CONST] mov [CONST_VAR] rax sar r8 CONST call sub_xxx mov rcx [r15+CONST] cdqe lea rdx [rcx+rax] mov [r15+CONST] rdx mov rdx [r15+CONST] mov rsi [rdx] mov [rdx+CONST] rsi mov rdx [r15+CONST] sub rdx rcx sub rdx rax sub rbp rdx jmp JUMP_ADDR_36	xor ebx ebx jmp JUMP_ADDR_56	xor r8d r8d xor edx edx jmp JUMP_ADDR_25	mov rax [rax+CONST] mov [rsp+CONST] rax jmp JUMP_ADDR_53	mov rbp [r15+CONST] mov rcx [rbp+CONST] mov r13 [rbp+CONST] mov rbx rcx sub rbx r13 test edx edx jle JUMP_ADDR_85	sar rbx CONST imul rbx rdx	mov r8d [rsp+CONST] mov rax [r15+CONST] test r8d r8d jz JUMP_ADDR_75	sub rax [r15+CONST] add rbx rax jmp JUMP_ADDR_56	mov rbp [r15+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_89	xor esi esi mov edx CONST mov rdi r15 call callfunc_xxx cmp rax CONST jnz JUMP_ADDR_57	jmp JUMP_ADDR_59	call sub_xxx jmp JUMP_ADDR_40	sub rax [r15+CONST] add rbx rax jmp JUMP_ADDR_56	mov rbp rcx mov r12d CONST jmp JUMP_ADDR_39	mov [rsp+CONST] rcx mov [rsp+CONST] rax call sub_xxx mov rcx [rsp+CONST] mov rax [rsp+CONST] jmp JUMP_ADDR_22	mov rax rbp mov [r15+CONST] rcx mov rdi r15 sub rax rsi mov [r15+CONST] rcx xor esi esi add rax rcx mov [r15+CONST] rcx mov [r15+CONST] rax mov rax [r15+CONST] mov [r15+CONST] rcx mov rdx [rax+CONST] mov [rax+CONST] rdx mov [rax] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx call sub_xxx test eax eax jnz JUMP_ADDR_38	mov rsi [r15+CONST] and [r15] CONST test rsi rsi js JUMP_ADDR_82	mov rbx [r15+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_91	xor edx edx mov rdi r15 call callfunc_xxx	mov rax rbp jmp JUMP_ADDR_42	mov [rsp+CONST] rsi mov [rsp+CONST] rcx call sub_xxx mov rsi [rsp+CONST] mov rcx [rsp+CONST] jmp JUMP_ADDR_19	call sub_xxx jmp JUMP_ADDR_8	mov rdi rbx mov [rsp+CONST] rcx call sub_xxx mov [rsp+CONST] r13 mov rdx r13 mov rdi r12 mov [rsp+CONST] rax mov r14 rax mov rax [rbp+CONST] lea rsi [rsp+CONST] add rbx r14 mov r9 r14 mov [rsp+CONST] rax lea rax [rsp+CONST] push rax push rbx mov rcx [rsp+CONST] lea r8 [rsp+CONST] call sub_xxx pop r9 pop r10 test eax eax jnz JUMP_ADDR_90	mov rbx [rsp+CONST] mov rdi r14 sub rbx r14 call sub_xxx jmp JUMP_ADDR_69	mov rdx [r15+CONST] mov r8 r13 sub r8 [rsp+CONST] mov rdi r12 mov rax [r15+CONST] lea rsi [rsp+CONST] sar r8 CONST mov rax [rax+CONST] mov [rsp+CONST] rax call sub_xxx mov rdx [r15+CONST] sub rdx [r15+CONST] cdqe sub rax rdx mov rbx rax jmp JUMP_ADDR_56	call sub_xxx jmp JUMP_ADDR_48	call sub_xxx jmp JUMP_ADDR_72	mov rdi r14 call sub_xxx mov eax CONST jmp JUMP_ADDR_42	call sub_xxx mov rsi [r15+CONST] jmp JUMP_ADDR_81	call sub_xxx
[ph]libcap-git-setcap__IO_wfile_underflow_maybe_mmap
endbr64 push rbp mov rbp rdi call sub_xxx cmp eax CONST jz JUMP_ADDR_2	mov rax [rbp+CONST] mov rdi rbp pop rbp mov rax [rax+CONST] mov rax [rax+CONST] jmp rax	mov eax CONST pop rbp retn
[ph]libcap-git-setcap__IO_wfile_underflow_mmap
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_14	mov rax [CONST_VAR+CONST] mov rdx [rax] cmp rdx [rax+CONST] jb JUMP_ADDR_6	mov rbp [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] cmp rdx [CONST_VAR+CONST] jnb JUMP_ADDR_9	mov r9 [rax+CONST] mov [rsp] rdx test r9 r9 jz JUMP_ADDR_11	mov rcx [rax+CONST] lea rdi [rax+CONST] mov [rax] r9 lea rsi [rax+CONST] mov [rax+CONST] r9 mov [rax+CONST] rcx mov rcx [rbx+CONST] push rdi mov rdi rbp push [rax+CONST] lea r8 [rsp+CONST] call sub_xxx mov rax [rsp+CONST] pop rcx pop rsi mov [rbx+CONST] rax mov rax [rbx+CONST] mov rdx [rax] cmp rdx [rax+CONST] jb JUMP_ADDR_6	mov rax CONST mov fs:xxx CONST mov eax CONST or [rbx] CONST jmp JUMP_ADDR_7	mov eax [rdx]	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_16	add rsp CONST pop rbx pop rbp retn	call sub_xxx cmp eax CONST jz JUMP_ADDR_15	mov rax [rbx+CONST] mov rdx [rbx+CONST] mov r9 [rax+CONST] mov [rsp] rdx test r9 r9 jnz JUMP_ADDR_4	mov rdi [rax+CONST] test rdi rdi jz JUMP_ADDR_13	call sub_xxx and [rbx] CONST	mov rdi rbx call sub_xxx mov rax [rbx+CONST] mov rdx [rbx+CONST] mov r9 [rax+CONST] jmp JUMP_ADDR_4	or eax CONST mov [CONST_VAR] eax mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	call sub_xxx
[ph]libcap-git-setcap__IO_wdo_write
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov r13 [CONST_VAR+CONST] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rdx rdx jz JUMP_ADDR_12	mov r9 [CONST_VAR+CONST] mov r12 [CONST_VAR+CONST] mov rbp rsi mov r14 rdx cmp [CONST_VAR+CONST] r9 jz JUMP_ADDR_18	lea rax [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_10	mov r12 [rsp+CONST+var_xxx] lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r12 mov r9 r12	push [rsp+CONST+var_xxx] mov rdi [rbx+CONST] mov rdx rbp lea rcx [rbp+r14*4+CONST] push rax lea rsi [CONST_VAR+CONST] mov rdi r13 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov rsi r12 mov rdi rbx mov r15d eax pop rax pop rdx mov rdx [rsp+CONST+var_xxx] sub rdx r12 call sub_xxx cmp eax CONST jz JUMP_ADDR_15	mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov rax rdx sub rax rbp sar rax CONST sub r14 rax test r15d r15d jz JUMP_ADDR_8	cmp rdx rbp jz JUMP_ADDR_21	cmp r15d CONST jnz JUMP_ADDR_21	test r14 r14 jz JUMP_ADDR_12	mov r9 [rbx+CONST] mov r12 [rbx+CONST] mov rbp rdx	mov rax r9 sub rax r12 cmp rax CONST jbe JUMP_ADDR_3	mov [rsp+CONST+var_xxx] r9 mov rax [rbx+CONST] jmp JUMP_ADDR_4	mov rdx [rbx+CONST] mov eax [rbx] mov rcx [rdx+CONST] mov [rdx+CONST] rcx mov [rdx] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx and eax CONST jnz JUMP_ADDR_17	mov rcx [rdx+CONST]	mov [rdx+CONST] rcx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_23	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rdx+CONST] rcx xor eax eax jmp JUMP_ADDR_15	cmp r9 r12 jz JUMP_ADDR_2	mov rdx r9 mov rsi r12 sub rdx r12 call sub_xxx cmp eax CONST jz JUMP_ADDR_15	mov r9 [rbx+CONST] mov r12 [rbx+CONST] jmp JUMP_ADDR_2	mov rdx [rbx+CONST] neg r14 sbb eax eax mov rcx [rdx+CONST] mov [rdx+CONST] rcx mov [rdx] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx mov [rdx+CONST] rcx test [rbx] CONST jnz JUMP_ADDR_14	jmp JUMP_ADDR_13	call sub_xxx
[ph]libcap-git-setcap__IO_wfile_overflow
endbr64 push r12 push rbp mov rbp rdi sub rsp CONST mov edx [CONST_VAR] test dl CONST jnz JUMP_ADDR_17	mov r12d esi test dh CONST jnz JUMP_ADDR_6	mov rax [CONST_VAR+CONST] cmp [rax+CONST] CONST jz JUMP_ADDR_28	mov rcx [rax] mov r9 [rax+CONST] cmp rcx r9 jz JUMP_ADDR_26	mov rsi [CONST_VAR+CONST] mov r8 [rax+CONST] mov rdi [CONST_VAR+CONST]	mov [rax+CONST] rcx mov [rax+CONST] rcx mov [rax+CONST] r9 mov [rax] r8 mov [rax+CONST] r8 mov [rbp+CONST] rsi mov [rbp+CONST] rsi mov rsi [rbp+CONST] mov [rbp+CONST] rdi mov [rbp+CONST] rsi mov esi edx or esi CONST and edx CONST mov [rbp+CONST] rdi mov [rbp+CONST] esi jnz JUMP_ADDR_18	cmp r12d CONST jz JUMP_ADDR_19	mov rax [rbp+CONST] mov rcx [rax+CONST] cmp rcx [rax+CONST] jz JUMP_ADDR_21	lea rdx [rcx+CONST] mov [rax+CONST] rdx mov [rcx] r12d mov ecx [rbp+CONST] test cl CONST jz JUMP_ADDR_14	mov ecx [rbp+CONST] test ecx ecx jle JUMP_ADDR_25	mov rsi [rax+CONST] mov rdi rbp sub rdx rsi sar rdx CONST call sub_xxx cmp eax CONST setz al	test al al jz JUMP_ADDR_13	mov r12d CONST	add rsp CONST mov eax r12d pop rbp pop r12 retn	and ch CONST jz JUMP_ADDR_13	cmp r12d CONST jz JUMP_ADDR_9	add rsp CONST mov eax r12d pop rbp pop r12 retn	mov rax CONST or edx CONST mov r12d CONST mov [CONST_VAR] edx mov fs:xxx CONST add rsp CONST mov eax r12d pop rbp pop r12 retn	mov [rax+CONST] rcx cmp r12d CONST jnz JUMP_ADDR_7	mov edi [rbp+CONST] test edi edi jle JUMP_ADDR_30	mov rax [rbp+CONST] mov rdi rbp mov rsi [rax+CONST] mov rdx [rax+CONST] add rsp CONST pop rbp pop r12 sub rdx rsi sar rdx CONST jmp UNK_JUMP_ADDR	mov esi [rbp+CONST] test esi esi jle JUMP_ADDR_27	mov rsi [rax+CONST] mov rdi rbp sub rcx rsi mov rdx rcx sar rdx CONST call sub_xxx cmp eax CONST setz al	test al al jnz JUMP_ADDR_12	mov rax [rbp+CONST] mov rcx [rax+CONST] jmp JUMP_ADDR_8	mov rsi [rbp+CONST] mov rdx [rbp+CONST] mov rdi rbp sub rdx rsi call sub_xxx cmp eax CONST setz al jmp JUMP_ADDR_11	mov rsi [CONST_VAR+CONST] mov rcx [rax+CONST] mov [CONST_VAR+CONST] rsi mov r8 rcx mov rdi rsi mov [rax] rcx mov [rax+CONST] rcx jmp JUMP_ADDR_5	mov rsi [rbp+CONST] mov rdx [rbp+CONST] mov rdi rbp sub rdx rsi call sub_xxx cmp eax CONST setz al jmp JUMP_ADDR_23	call sub_xxx mov rdi rbp call sub_xxx mov rax [rbp+CONST] cmp [rbp+CONST] CONST mov rcx [rax+CONST] mov [rax+CONST] rcx mov [rax] rcx mov [rax+CONST] rcx jz JUMP_ADDR_31	mov r9 [rax+CONST] mov rsi [rbp+CONST] mov r8 rcx mov rdi [rbp+CONST] mov edx [rbp+CONST] jmp JUMP_ADDR_5	mov rsi [rbp+CONST] mov rdx [rbp+CONST] add rsp CONST mov rdi rbp pop rbp pop r12 sub rdx rsi jmp UNK_JUMP_ADDR	mov rdi rbp call sub_xxx mov rax [rbp+CONST] mov rsi [rbp+CONST] mov edx [rbp+CONST] mov rcx [rax] mov r9 [rax+CONST] mov [rbp+CONST] rsi mov rdi rsi mov r8 [rax+CONST] jmp JUMP_ADDR_5
[ph]libcap-git-setcap__IO_wfile_sync
endbr64 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] mov rdx [rax+CONST] mov rsi [rax+CONST] cmp rdx rsi jbe JUMP_ADDR_4	mov eax [CONST_VAR+CONST] test eax eax jle JUMP_ADDR_11	sub rdx rsi sar rdx CONST call sub_xxx test eax eax jnz JUMP_ADDR_12	mov rax [rbx+CONST]	mov rbp [rax] mov r12 [rax+CONST] cmp rbp r12 jz JUMP_ADDR_10	mov r13 [rbx+CONST] mov rdi r13 call sub_xxx test eax eax jle JUMP_ADDR_15	sub rbp r12 movsxd rsi eax sar rbp CONST imul rsi rbp	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_16	mov edx CONST mov rdi rbx call callfunc_xxx cmp rax CONST jz JUMP_ADDR_13	mov rax [rbx+CONST] mov rdx [rax] mov [rax+CONST] rdx mov rax [rbx+CONST] mov [rbx+CONST] rax	mov [rbx+CONST] CONST add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 retn	mov rsi [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rdx rsi call sub_xxx test eax eax jz JUMP_ADDR_3	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 retn	mov rax CONST cmp fs:xxx CONST jnz JUMP_ADDR_12	jmp JUMP_ADDR_10	mov rsi [rbx+CONST] mov rcx [rbx+CONST] mov rdi r13 mov rdx [rbx+CONST] mov rax [CONST_VAR+CONST] mov r8 [CONST_VAR] add rsi CONST sub r8 [CONST_VAR+CONST] mov [CONST_VAR] rax sar r8 CONST call sub_xxx mov rdx [rbx+CONST] cdqe lea rcx [rdx+rax] sub rdx [rbx+CONST] mov [rbx+CONST] rcx lea rsi [rdx+rax] jmp JUMP_ADDR_7	mov [rsp+CONST] rsi call sub_xxx mov rsi [rsp+CONST] jmp JUMP_ADDR_8
[ph]libcap-git-setcap__IO_wfile_xsputn
endbr64 test rdx rdx jz JUMP_ADDR_20	push r15 push r14 push r13 mov r13 rdi push rbp mov rbp rdx push rbx sub rsp CONST mov eax [r13+CONST] mov r14 [CONST_VAR+CONST] and eax CONST mov rbx [r14+CONST] mov rdi [r14+CONST] cmp eax CONST jz JUMP_ADDR_9	sub rbx rdi xor r15d r15d sar rbx CONST	mov rdx rbp test rbx rbx jnz JUMP_ADDR_14	mov rdi r13 mov [rsp+CONST] rdx call sub_xxx mov rdx [rsp+CONST] sub rax rdx add rbp rax	test r15d r15d jz JUMP_ADDR_8	mov rax [r13+CONST] mov rdx [rax+CONST] mov rsi [rax+CONST] cmp rdx rsi jz JUMP_ADDR_8	sub rdx rsi mov rdi r13 sar rdx CONST call sub_xxx	add rsp CONST mov rax rbp pop rbx pop rbp pop r13 pop r14 pop r15 retn	mov rbx [r14+CONST] sub rbx rdi sar rbx CONST cmp rdx rbx ja JUMP_ADDR_21	lea rdx [CONST_VAR+rdx*4] jmp JUMP_ADDR_12	sub rdx CONST cmp [rdx] CONST jz JUMP_ADDR_23	cmp rsi rdx jb JUMP_ADDR_11	xor r15d r15d nop [rax]	cmp rbp rbx cmovbe rbx rbp xor edx edx cmp rbx CONST ja JUMP_ADDR_22	nop [rax+rax+CONST]	mov eax [CONST_VAR+rdx*4] mov [CONST_VAR+rdx*4] eax add rdx CONST cmp rbx rdx jnz JUMP_ADDR_16	lea rax ds:xxx add rsi rax add rax rdi	mov rdx rbp mov [r14+CONST] rax sub rdx rbx jz JUMP_ADDR_5	jmp JUMP_ADDR_4	xor eax eax retn	xor r15d r15d jmp JUMP_ADDR_3	mov rdx rbx mov [rsp+CONST] rsi call sub_xxx mov rsi [rsp+CONST] lea rsi [CONST_VAR+rbx*4] jmp JUMP_ADDR_18	sub rdx rsi mov r15d CONST sar rdx CONST lea rbx [rdx+CONST] jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_fwide
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR+CONST] test esi esi js JUMP_ADDR_5	test eax eax jnz JUMP_ADDR_3	test esi esi jnz JUMP_ADDR_8	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_11	add rsp CONST pop rbx pop rbp retn	test eax eax jnz JUMP_ADDR_3	mov eax CONST	mov [rbx+CONST] eax jmp JUMP_ADDR_3	mov rbp [CONST_VAR+CONST] lea rax [rbp+CONST] mov [CONST_VAR+CONST] rax mov rax [rbp+CONST] mov [rbp+CONST] CONST mov [rbp+CONST] rax mov rax [rbp+CONST] mov [rbp+CONST] rax mov rax [CONST_VAR+CONST] mov rdi rsp mov [rax+CONST] CONST call sub_xxx cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_13	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] rax mov rax [rbx+CONST] mov [rbp+CONST] rcx mov [rbp+CONST] CONST lea rdx [rax+CONST] mov rax [rax+CONST] mov [rbp+CONST] rdx mov [rbp+CONST] CONST mov [rbp+CONST] rdx mov [rbx+CONST] rax mov eax CONST jmp JUMP_ADDR_7	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___libio_codecvt_out
endbr64 push r15 mov r15 rcx push r14 push r13 push r12 mov r12 r8 push rbp push rbx mov rbx rdi sub rsp CONST mov r13 [CONST_VAR+CONST] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax [rsp+CONST+arg_xxx] mov r14 [rsp+CONST+arg_xxx] mov [CONST_VAR+CONST] r9 cmp [r13+CONST] CONST mov rbp [r13+CONST] mov [rsp+CONST+var_xxx] rdx mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rsi jz JUMP_ADDR_2	ror rbp CONST xor rbp fs:xxx	mov rdi rbp call sub_xxx lea rdx [rsp+CONST+var_xxx] push CONST mov rcx r15 push CONST lea rsi [rbx+CONST] xor r8d r8d mov rdi r13 lea r9 [rsp+CONST+var_xxx] call rbp mov rdx [rsp+CONST+var_xxx] mov [r12] rdx mov rdx [rbx+CONST] mov [r14] rdx pop rdx pop rcx cmp eax CONST jz JUMP_ADDR_8	jg JUMP_ADDR_7	and eax CONST setnz al movzx eax al add eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp eax CONST setnz al movzx eax al add eax CONST jmp JUMP_ADDR_5	mov eax CONST jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___libio_codecvt_in
endbr64 push r15 mov r15 rcx push r14 push r13 push r12 mov r12 r8 push rbp push rbx mov rbx rdi sub rsp CONST mov r13 [CONST_VAR] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax [rsp+CONST+arg_xxx] mov r14 [rsp+CONST+arg_xxx] mov [CONST_VAR+CONST] r9 cmp [r13+CONST] CONST mov rbp [r13+CONST] mov [rsp+CONST+var_xxx] rdx mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rsi jz JUMP_ADDR_2	ror rbp CONST xor rbp fs:xxx	mov rdi rbp call sub_xxx lea rdx [rsp+CONST+var_xxx] push CONST mov rcx r15 push CONST lea rsi [rbx+CONST] xor r8d r8d mov rdi r13 lea r9 [rsp+CONST+var_xxx] call rbp mov rdx [rsp+CONST+var_xxx] mov [r12] rdx mov rdx [rbx+CONST] mov [r14] rdx pop rdx pop rcx cmp eax CONST jz JUMP_ADDR_8	jg JUMP_ADDR_7	and eax CONST setnz al movzx eax al add eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp eax CONST setnz al movzx eax al add eax CONST jmp JUMP_ADDR_5	mov eax CONST jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___libio_codecvt_encoding
endbr64 mov rdx [CONST_VAR] mov ecx [rdx+CONST] test ecx ecx jnz JUMP_ADDR_2	mov eax [rdx+CONST] cmp [rdx+CONST] eax cmovnz eax ecx retn	mov eax CONST retn
[ph]libcap-git-setcap___libio_codecvt_length
endbr64 push rbp shl r8 CONST mov rbp rsp push r15 mov r15 rcx push r14 push r13 mov r13 rdx push r12 push rbx mov rbx rdi sub rsp CONST mov r14 [CONST_VAR] mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [r8+CONST] mov [rbp+var_xxx] rdx and rax CONST mov [CONST_VAR+CONST] rsi mov r12 [r14+CONST] sub rsp rax mov rax rsp mov [CONST_VAR+CONST] rax add rax r8 cmp [r14] CONST mov [CONST_VAR+CONST] rax jz JUMP_ADDR_2	ror r12 CONST xor r12 fs:xxx	mov rdi r12 call sub_xxx push CONST lea rdx [rbp+var_xxx] lea rsi [rbx+CONST] push CONST lea r9 [rbp+var_xxx] xor r8d r8d mov rcx r15 mov rdi r14 call r12 mov eax [rbp+var_xxx] sub eax r13d mov rdx [rbp+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	call sub_xxx
[ph]libcap-git-setcap_fileno
endbr64 test [CONST_VAR] CONST jz JUMP_ADDR_3	mov eax [CONST_VAR+CONST] test eax eax js JUMP_ADDR_3	retn	mov rax CONST mov fs:xxx CONST mov eax CONST retn
[ph]libcap-git-setcap___vasprintf_internal
endbr64 push r15 push r14 mov r14d ecx push r13 mov r13 rdx push r12 mov r12 rsi push rbp push rbx mov rbx rdi mov edi CONST sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx test rax rax jz JUMP_ADDR_12	mov r15 rsp mov rbp rax xor r8d r8d xor ecx ecx mov edx CONST mov rdi r15 mov esi CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx mov rcx rbp mov edx CONST mov rsi rbp lea rax unk_xxx mov rdi r15 mov [rsp+CONST+var_xxx] rax call sub_xxx mov rsi r12 mov ecx r14d mov rdx r13 mov rax sub_xxx mov rdi r15 and [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov rax sub_xxx mov [rsp+CONST+var_xxx] rax call sub_xxx mov r12d eax test eax eax js JUMP_ADDR_10	mov rbp [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] sub rbp [rsp+CONST+var_xxx] sub rax [rsp+CONST+var_xxx] lea r13 [rbp+CONST] shr rax CONST mov r14 [rsp+CONST+var_xxx] cmp rax r13 ja JUMP_ADDR_7	mov rsi r13 mov rdi r14 call sub_xxx mov [rbx] rax test rax rax jz JUMP_ADDR_9	mov [rax+rbp] CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_11	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi r13 call sub_xxx mov [rbx] rax mov rdi rax test rax rax jz JUMP_ADDR_3	mov rdx rbp mov rsi r14 call sub_xxx mov rdi r14 call sub_xxx mov rax [rbx] test rax rax jnz JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx] mov [rbx] rax jmp JUMP_ADDR_4	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_5	call sub_xxx	or r12d CONST jmp JUMP_ADDR_5
[ph]libcap-git-setcap_vasprintf
endbr64 xor ecx ecx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___libc_message
endbr64 push rbp and edi CONST mov rbp rsp push r15 mov r15d edi push r14 xor r14d r14d push r13 xor r13d r13d push r12 push rbx mov rbx rsi sub rsp CONST mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 movzx r12d [CONST_VAR] mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [rbp+arg_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax test r12b r12b jz JUMP_ADDR_22	nop [rax+rax+CONST]	mov edx r12d mov rax rbx jmp JUMP_ADDR_4	lea rdi [rax+CONST] mov esi CONST call sub_xxx movzx edx [rax] test dl dl jz JUMP_ADDR_6	cmp dl CONST jnz JUMP_ADDR_3	cmp [rax+CONST] CONST jnz JUMP_ADDR_3	cmp r12b CONST jz JUMP_ADDR_10	mov rdx rax mov rcx rbx sub rdx rbx mov rbx rax	sub rsp CONST lea r8d [r14+CONST] lea rax [rsp+CONST+var_xxx] and rax CONST mov [rax] rcx mov [rax+CONST] rdx mov [rax+CONST] r13 movzx r12d [rbx] test r12b r12b jz JUMP_ADDR_14	movsxd r14 r8d mov r13 rax jmp JUMP_ADDR_2	cmp [rbx+CONST] CONST jnz JUMP_ADDR_7	mov eax [rbp+var_xxx] cmp eax CONST ja JUMP_ADDR_24	mov edx eax add eax CONST add rdx [rbp+var_xxx] mov [rbp+var_xxx] eax	mov rcx [rdx] add rbx CONST mov rdi rcx mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] mov rdx rax jmp JUMP_ADDR_8	movsxd r8 r8d shl r14 CONST xor edi edi mov rsi r8 shl rsi CONST lea rax [CONST_VAR+CONST] sub rsi CONST sub rsp rax lea rbx [rsp+CONST+var_xxx] and rbx CONST lea rax [rbx+CONST_VAR] sub rsi r14 mov r12 rbx add rsi rbx jmp JUMP_ADDR_16	mov rcx [r13+CONST] mov rdx [r13+CONST] sub rax CONST mov r13 [r13+CONST]	lea r9 [CONST_VAR+rdx] mov [rax] rcx mov [rax+CONST] rdx mov rdi r9 cmp rax rsi jnz JUMP_ADDR_15	mov r10d CONST nop [rax+CONST]	mov rdx r8 mov rsi rbx mov edi CONST mov eax r10d syscall cmp rax CONST jz JUMP_ADDR_18	test r15d r15d jnz JUMP_ADDR_25	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_31	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	test edi edi jz JUMP_ADDR_20	jmp JUMP_ADDR_30	mov rdx [rbp+var_xxx] lea rax [rdx+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_13	mov rax cs:xxx mov r8d CONST mov ecx CONST xor edi edi lea rdx [r9+rax] neg rax xor r9d r9d and rdx rax mov r13 rdx mov edx CONST mov rsi r13 call sub_xxx mov r15 rax cmp rax CONST jz JUMP_ADDR_30	mov [rax] r13d lea rdi [rax+CONST] lea rbx [rbx+r14+CONST] nop [rax+rax+CONST]	mov rdx [r12+CONST] mov rsi [r12] add r12 CONST call sub_xxx mov rdi rax cmp rbx r12 jnz JUMP_ADDR_27	mov [rax] CONST mov rdi r15 xchg rdi cs:xxx test rdi rdi jz JUMP_ADDR_30	mov esi [CONST_VAR] call sub_xxx	call sub_xxx	call sub_xxx
[ph]libcap-git-setcap___libc_fatal
endbr64 push rbp lea rbp GLOBAL_VAR push rbx mov rbx rdi sub rsp CONST nop [rax+CONST]	mov rdx rbx mov rsi rbp mov edi CONST xor eax eax call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_vtable_check
endbr64 cmp cs:xxx CONST jz JUMP_ADDR_2	retn	push rax lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_fgets_unlocked
endbr64 test esi esi jle JUMP_ADDR_8	push r12 push rbp mov rbp rdi push rbx cmp esi CONST jz JUMP_ADDR_9	mov eax [rdx] mov rbx rdx sub esi CONST mov r8d CONST mov ecx CONST mov r12d eax and eax CONST mov [rdx] eax movsxd rdx esi mov rsi rdi mov rdi rbx and r12d CONST call sub_xxx mov edx [rbx] xor r8d r8d test rax rax jnz JUMP_ADDR_5	or r12d edx mov [rbx] r12d	pop rbx mov rax r8 pop rbp pop r12 retn	test dl CONST jz JUMP_ADDR_7	mov rcx CONST xor r8d r8d cmp fs:xxx CONST jnz JUMP_ADDR_3	mov [rbp+rax+CONST] CONST mov r8 rbp mov edx [rbx] jmp JUMP_ADDR_3	xor eax eax retn	mov [CONST_VAR] CONST mov r8 rdi jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_file_seekoff_maybe_mmap
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rcx rbp sub rcx unk_xxx cmp rax rcx jbe JUMP_ADDR_4	mov rdi rbx call callfunc_xxx test rax rax js JUMP_ADDR_5	mov [rbx+CONST] rax	add rsp CONST pop rbx pop rbp retn	mov [rsp+CONST] edx mov [rsp] rsi call sub_xxx mov edx [rsp+CONST] mov rsi [rsp] jmp JUMP_ADDR_1	mov rax CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_file_close
endbr64 mov edi [CONST_VAR+CONST] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__IO_new_file_setbuf
endbr64 push rbx mov rbx rdi call sub_xxx test rax rax jz JUMP_ADDR_2	mov rax [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov rax rbx	pop rbx retn
[ph]libcap-git-setcap_new_do_write
push r14 mov r14 rdx push r13 mov r13 off_xxx push r12 sub r13 unk_xxx push rbp mov rbp rsi push rbx mov rbx rdi mov r12 [CONST_VAR+CONST] test [CONST_VAR] CONST jz JUMP_ADDR_9	mov [CONST_VAR+CONST] CONST	mov rax r12 sub rax unk_xxx cmp rax r13 jnb JUMP_ADDR_16	mov rdi rbx mov rdx r14 mov rsi rbp call callfunc_xxx movzx edi [rbx+CONST] mov r12 rax test rax rax jz JUMP_ADDR_5	test di di jnz JUMP_ADDR_15	mov rax [rbx+CONST] mov edx [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax test edx edx jle JUMP_ADDR_13	mov rax [rbx+CONST]	mov [rbx+CONST] rax	pop rbx mov rax r12 pop rbp pop r12 pop r13 pop r14 retn	mov rax [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] cmp rax rsi jz JUMP_ADDR_2	mov rdx r12 sub rdx unk_xxx cmp rdx r13 jnb JUMP_ADDR_17	sub rsi rax mov edx CONST mov rdi rbx call callfunc_xxx xor r12d r12d cmp rax CONST jz JUMP_ADDR_8	mov [rbx+CONST] rax mov r12 [rbx+CONST] jmp JUMP_ADDR_2	test [rbx] CONST jnz JUMP_ADDR_7	jmp JUMP_ADDR_6	sub edi CONST mov edx eax mov rsi rbp call sub_xxx add eax CONST mov [rbx+CONST] ax jmp JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_3	call sub_xxx mov rsi [rbx+CONST] mov rax [rbx+CONST] jmp JUMP_ADDR_11
[ph]libcap-git-setcap__IO_new_file_underflow
endbr64 mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_39	push r15 push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST test al CONST jnz JUMP_ADDR_40	mov rdx [CONST_VAR+CONST] cmp rdx [CONST_VAR+CONST] jb JUMP_ADDR_25	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_27	test eax CONST jz JUMP_ADDR_17	mov rbp cs:xxx mov edx [rbp+CONST] mov r15 rbp mov ecx edx and ecx CONST jnz JUMP_ADDR_16	mov r12 fs:xxx mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] r12 jz JUMP_ADDR_10	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_34	cmpxchg [CONST_VAR] edx	mov rdi [rbp+CONST] mov rbp cs:xxx mov [CONST_VAR+CONST] r12 mov edx [rbp+CONST]	and edx CONST add [CONST_VAR+CONST] CONST cmp edx CONST jz JUMP_ADDR_31	mov r14 off_xxx mov r12 unk_xxx mov r13 r14 sub r13 r12	test [r15] CONST jnz JUMP_ADDR_18	mov rdi [r15+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_18	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_37	sub [CONST_VAR] CONST jmp JUMP_ADDR_19	and edx CONST cmp edx CONST jz JUMP_ADDR_31	mov r14 off_xxx mov r12 unk_xxx	sub r14 r12 mov r13 r14	mov rdi rbx call sub_xxx mov rbp [rbx+CONST] mov rsi [rbx+CONST] mov rax rbp mov [rbx+CONST] rsi sub rax r12 mov [rbx+CONST] rsi mov [rbx+CONST] rsi mov [rbx+CONST] rsi mov [rbx+CONST] rsi mov [rbx+CONST] rsi cmp rax r13 jnb JUMP_ADDR_33	mov rdx [rbx+CONST] mov rdi rbx sub rdx rsi call callfunc_xxx test rax rax jle JUMP_ADDR_26	mov rdx [rbx+CONST] add [rbx+CONST] rax cmp rdx CONST jz JUMP_ADDR_23	add rdx rax mov [rbx+CONST] rdx	mov rax [rbx+CONST] movzx eax [rax]	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	movzx eax [rdx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rbx+CONST] CONST mov edx [rbx] mov ecx edx or edx CONST or ecx CONST test rax rax mov eax CONST cmovz edx ecx mov [rbx] edx add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_29	call sub_xxx and [rbx] CONST	mov rdi rbx call sub_xxx mov eax [rbx] test eax CONST jnz JUMP_ADDR_5	jmp JUMP_ADDR_17	mov r14 off_xxx mov rax [rbp+CONST] mov r12 unk_xxx mov r13 r14 mov [rsp+CONST] rax sub r13 r12 sub rax r12 cmp r13 rax jbe JUMP_ADDR_36	mov rax [rsp+CONST] mov esi CONST mov rdi rbp call callfunc_xxx jmp JUMP_ADDR_12	call sub_xxx mov rsi [rbx+CONST] jmp JUMP_ADDR_20	mov eax ecx lock CONST edx jz JUMP_ADDR_9	call sub_xxx jmp JUMP_ADDR_9	call sub_xxx mov rbp cs:xxx jmp JUMP_ADDR_32	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_18	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_19	mov eax CONST retn	or eax CONST mov [CONST_VAR] eax mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_24
[ph]libcap-git-setcap__IO_file_close_mmap
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR+CONST] mov rsi [rbx+CONST] sub rsi rdi call sub_xxx mov [rbx+CONST] CONST mov edi [rbx+CONST] mov [rbx+CONST] CONST pop rbx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_mmap_remap_check
push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov r12 [CONST_VAR+CONST] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax off_xxx sub rax unk_xxx mov rdx r12 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_15	mov rsi rsp mov rdi rbx call callfunc_xxx mov r12d eax test eax eax jnz JUMP_ADDR_9	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_9	mov r13 [rsp+CONST+var_xxx] test r13 r13 jz JUMP_ADDR_9	call sub_xxx mov rbp [rbx+CONST] cdqe mov rsi rbp mov rcx rax lea rdx [r13+rax+CONST] not rsi add rsi [rbx+CONST] neg rcx add rsi rax and rdx rcx and rsi rcx cmp rdx rsi jb JUMP_ADDR_16	lea rcx [rbp+r13+CONST] ja JUMP_ADDR_13	mov rax [rbx+CONST] mov rdx [rbx+CONST] mov [rbx+CONST] rcx sub rdx [rbx+CONST] mov [rbx+CONST] rbp sub rax rdx mov [rbx+CONST] rax cmp rax r13 jge JUMP_ADDR_12	add rbp rax mov [rbx+CONST] rcx mov edi [rbx+CONST] xor edx edx mov [rbx+CONST] rbp mov rsi r13 call sub_xxx mov r8 rax mov rax [rbx+CONST] sub rax [rbx+CONST] cmp rax r8 jz JUMP_ADDR_17	or [rbx] CONST jmp JUMP_ADDR_10	mov rdi [rbx+CONST] mov rsi [rbx+CONST] mov r12d CONST sub rsi rdi call sub_xxx mov ecx [rbx+CONST] lea rdx unk_xxx lea rax unk_xxx mov [rbx+CONST] CONST test ecx ecx mov [rbx+CONST] CONST cmovg rax rdx mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] CONST mov [rax+CONST] rdx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_18	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 retn	mov [rbx+CONST] rcx mov [rbx+CONST] rcx jmp JUMP_ADDR_10	mov rdi rbp mov ecx CONST xor eax eax call sub_xxx mov rbp rax cmp rax CONST jz JUMP_ADDR_9	mov r13 [rsp+CONST+var_xxx] mov [rbx+CONST] rax lea rcx [rax+r13] jmp JUMP_ADDR_6	call sub_xxx jmp JUMP_ADDR_1	lea rdi [rbp+rdx+CONST] sub rsi rdx call sub_xxx mov rbp [rbx+CONST] mov r13 [rsp+CONST+var_xxx] lea rcx [rbp+r13+CONST] jmp JUMP_ADDR_6	mov [rbx+CONST] rax jmp JUMP_ADDR_10	call sub_xxx
[ph]libcap-git-setcap__IO_file_seek
endbr64 mov edi [CONST_VAR+CONST] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__IO_file_sync_mmap
endbr64 push rbx mov rax [CONST_VAR+CONST] mov rbx rdi mov rsi rax sub rsi [CONST_VAR+CONST] cmp rax [CONST_VAR+CONST] jz JUMP_ADDR_2	mov edi [CONST_VAR+CONST] xor edx edx call sub_xxx mov rsi rax mov rax [rbx+CONST] sub rax [rbx+CONST] cmp rax rsi jnz JUMP_ADDR_3	mov rax [rbx+CONST] mov [rbx+CONST] rsi mov [rbx+CONST] rax mov [rbx+CONST] rax xor eax eax pop rbx retn	or [rbx] CONST mov eax CONST pop rbx retn
[ph]libcap-git-setcap_decide_maybe_mmap
push rbp push rbx mov rbx rdi sub rsp CONST mov rbp [CONST_VAR+CONST] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rdx rax jnb JUMP_ADDR_12	mov rsi rsp mov rdi rbx call callfunc_xxx test eax eax jnz JUMP_ADDR_3	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_6	lea rax unk_xxx lea rdx unk_xxx	mov ecx [rbx+CONST] test ecx ecx cmovg rax rdx mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rax+CONST] rdx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_14	add rsp CONST pop rbx pop rbp retn	mov rsi [rsp+CONST+var_xxx] test rsi rsi jz JUMP_ADDR_3	mov rax [rbx+CONST] cmp rsi rax jge JUMP_ADDR_9	cmp rax CONST jnz JUMP_ADDR_3	mov r8d [rbx+CONST] xor r9d r9d mov ecx CONST xor edi edi mov edx CONST call sub_xxx mov rbp rax cmp rax CONST jz JUMP_ADDR_3	mov rsi [rsp+CONST+var_xxx] mov edi [rbx+CONST] xor edx edx call sub_xxx mov rsi [rsp+CONST+var_xxx] cmp rsi rax jz JUMP_ADDR_13	mov rdi rbp call sub_xxx mov [rbx+CONST] CONST jmp JUMP_ADDR_3	call sub_xxx jmp JUMP_ADDR_1	lea rdx [rbp+CONST_VAR+CONST] xor ecx ecx mov rsi rbp mov rdi rbx call sub_xxx mov rdx [rbx+CONST] mov [rbx+CONST] rbp lea rax [rbp+rdx+CONST] cmp rdx CONST lea rdx unk_xxx cmovz rax rbp mov [rbx+CONST] rax mov rax [rsp+CONST+var_xxx] add rbp rax mov [rbx+CONST] rax lea rax unk_xxx mov [rbx+CONST] rbp jmp JUMP_ADDR_4	call sub_xxx
[ph]libcap-git-setcap__IO_file_underflow_maybe_mmap
endbr64 push rbp mov rbp rdi push rbx sub rsp CONST call sub_xxx mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_2	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	call sub_xxx mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax
[ph]libcap-git-setcap__IO_file_xsgetn_maybe_mmap
endbr64 push r13 mov r13 rdx push r12 mov r12 rsi push rbp mov rbp rdi push rbx sub rsp CONST call sub_xxx mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_2	mov rax [rbx+CONST] add rsp CONST mov rdx r13 mov rsi r12 pop rbx mov rdi rbp pop rbp pop r12 pop r13 jmp rax	call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_new_file_seekoff
endbr64 push r15 push r14 push r13 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax test ecx ecx jz JUMP_ADDR_45	mov r13d edx mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov r12 rsi mov rbx [CONST_VAR+CONST] cmp [CONST_VAR+CONST] rbx jz JUMP_ADDR_11	xor r15d r15d cmp rdx rax jbe JUMP_ADDR_13	mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_58	cmp [rbp+CONST] CONST jz JUMP_ADDR_15	cmp r13d CONST jz JUMP_ADDR_18	cmp r13d CONST jnz JUMP_ADDR_21	mov rax [rbp+CONST] mov r14 unk_xxx mov rbx off_xxx mov rdx rax sub rbx r14 sub rdx r14 cmp rdx rbx jnb JUMP_ADDR_73	lea rsi [rsp+CONST] mov rdi rbp call callfunc_xxx test eax eax jnz JUMP_ADDR_40	mov eax [rsp+CONST] and eax CONST cmp eax CONST jnz JUMP_ADDR_40	add r12 [rsp+CONST] jmp JUMP_ADDR_20	cmp rdx rax jnz JUMP_ADDR_2	mov r15d CONST nop [rax+rax+CONST]	test [rbp+CONST] CONST jnz JUMP_ADDR_3	cmp [rbp+CONST] CONST jnz JUMP_ADDR_5	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_17	call sub_xxx and [rbp+CONST] CONST	mov rdi rbp call sub_xxx mov rax [rbp+CONST] mov [rbp+CONST] rax mov [rbp+CONST] rax mov [rbp+CONST] rax mov [rbp+CONST] rax mov [rbp+CONST] rax mov [rbp+CONST] rax cmp r13d CONST jnz JUMP_ADDR_6	mov rax [rbp+CONST] sub rax [rbp+CONST] sub r12 rax mov rax [rbp+CONST] cmp rax CONST jz JUMP_ADDR_39	add r12 rax js JUMP_ADDR_57	xor r13d r13d	mov rdi rbp call sub_xxx mov rsi [rbp+CONST] mov eax [rbp+CONST] cmp rsi CONST jz JUMP_ADDR_27	cmp [rbp+CONST] CONST jz JUMP_ADDR_27	test ah CONST jnz JUMP_ADDR_27	mov rdx [rbp+CONST] mov rcx rdx sub rcx [rbp+CONST] add rcx rsi cmp rsi r12 jle JUMP_ADDR_27	cmp r12 rcx jge JUMP_ADDR_66	nop [rax+rax+CONST]	mov r14 unk_xxx mov rbx off_xxx sub rbx r14 test al CONST jnz JUMP_ADDR_40	mov rdx [rbp+CONST] mov rax [rbp+CONST] mov r13 r12 mov rsi rdx sub rsi rax sub rax rdx and rsi r12 sub r13 rsi cmp rax r13 jl JUMP_ADDR_52	mov rax [rbp+CONST] mov rdx rax sub rdx r14 cmp rbx rdx jbe JUMP_ADDR_70	xor edx edx mov rdi rbp call callfunc_xxx mov rcx rax test rax rax js JUMP_ADDR_58	test r13 r13 jz JUMP_ADDR_53	mov rax [rbp+CONST] mov rdx rax sub rdx r14 cmp rbx rdx jbe JUMP_ADDR_74	mov rax [rax+CONST] mov rsi [rbp+CONST] mov rdx r13 test r15d r15d jnz JUMP_ADDR_35	mov rdx [rbp+CONST] sub rdx rsi	mov [rsp] rcx mov rdi rbp call rax cmp r13 rax jg JUMP_ADDR_64	mov rcx [rsp] add rcx rax	mov rdx [rbp+CONST] and [rbp+CONST] CONST mov [rbp+CONST] rcx add r13 rdx add rax rdx mov [rbp+CONST] rdx mov [rbp+CONST] r13 mov [rbp+CONST] rax mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx	mov rax r12 jmp JUMP_ADDR_43	mov r14 unk_xxx mov rbx off_xxx sub rbx r14 nop [rax+CONST]	mov rdi rbp call sub_xxx mov r15 [rbp+CONST] mov rax r15 sub rax r14 cmp rax rbx jnb JUMP_ADDR_69	mov edx r13d mov rsi r12 mov rdi rbp call callfunc_xxx cmp rax CONST jz JUMP_ADDR_43	mov rdx [rbp+CONST] and [rbp+CONST] CONST mov [rbp+CONST] rax mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_78	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_54	mov edx [CONST_VAR] mov r12 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] and edx CONST cmp r12 rcx jbe JUMP_ADDR_59	test edx edx jz JUMP_ADDR_59	mov rbx [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_75	xor esi esi mov edx CONST mov rdi rbp call callfunc_xxx cmp rax CONST jz JUMP_ADDR_58	mov [rbp+CONST] rax mov r12 [rbp+CONST]	sub r12 [rbp+CONST] jmp JUMP_ADDR_55	mov rsi r12 xor r13d r13d jmp JUMP_ADDR_29	xor eax eax jmp JUMP_ADDR_37	mov rax [CONST_VAR+CONST] xor r12d r12d	cmp rax CONST jz JUMP_ADDR_61	add rax r12 jns JUMP_ADDR_43	mov rax CONST mov fs:xxx CONST	mov rax CONST jmp JUMP_ADDR_43	mov rax [rbp+CONST] cmp r12 rcx ja JUMP_ADDR_71	mov r12 [rbp+CONST] sub r12 [rbp+CONST] jmp JUMP_ADDR_55	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_76	xor esi esi mov edx CONST mov rdi rbp call callfunc_xxx cmp rax CONST jnz JUMP_ADDR_56	jmp JUMP_ADDR_58	mov r12 r13 mov r13d CONST cmp rax CONST jz JUMP_ADDR_40	sub r12 rax mov r13d CONST jmp JUMP_ADDR_40	mov rdi r12 and eax CONST mov [rbp+CONST] rdx sub rdi rcx mov [rbp+CONST] rdx lea rcx [rdx+CONST_VAR] mov [rbp+CONST] rdx mov [rbp+CONST] rcx mov [rbp+CONST] rdx mov [rbp+CONST] eax test rsi rsi js JUMP_ADDR_38	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_77	xor edx edx mov rdi rbp call callfunc_xxx mov rax r12 jmp JUMP_ADDR_43	call sub_xxx jmp JUMP_ADDR_41	mov [rsp+CONST] rsi mov [rsp] rax call sub_xxx mov rsi [rsp+CONST] mov rax [rsp] jmp JUMP_ADDR_30	test edx edx jnz JUMP_ADDR_51	sub r12 [rbp+CONST] jmp JUMP_ADDR_55	mov [rsp] rax call sub_xxx mov rax [rsp] jmp JUMP_ADDR_8	mov [rsp+CONST] rcx mov [rsp] rax call sub_xxx mov rcx [rsp+CONST] mov rax [rsp] jmp JUMP_ADDR_33	call sub_xxx jmp JUMP_ADDR_49	call sub_xxx jmp JUMP_ADDR_62	call sub_xxx mov rsi [rbp+CONST] jmp JUMP_ADDR_68	call sub_xxx
[ph]libcap-git-setcap__IO_file_stat
endbr64 mov edi [CONST_VAR+CONST] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__IO_new_file_write
endbr64 push r13 mov r13 rdi push r12 push rbp push rbx sub rsp CONST test rdx rdx jle JUMP_ADDR_12	mov rbp rsi mov r12 rdx mov rbx rdx jmp JUMP_ADDR_4	call sub_xxx test rax rax js JUMP_ADDR_7	sub rbx rax add rbp rax test rbx rbx jle JUMP_ADDR_11	mov edi [r13+CONST] mov rdx rbx mov rsi rbp test [r13+CONST] CONST jz JUMP_ADDR_2	call sub_xxx test rax rax jns JUMP_ADDR_3	nop [rax+rax+CONST]	or [r13+CONST] CONST mov rax r12 sub rax rbx	mov rdx [r13+CONST] test rdx rdx js JUMP_ADDR_10	add rdx rax mov [r13+CONST] rdx	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rax r12 sub rax rbx jmp JUMP_ADDR_8	xor eax eax jmp JUMP_ADDR_8
[ph]libcap-git-setcap__IO_file_xsgetn_mmap
endbr64 push r15 mov r15 rsi push r14 push r13 mov r13 rsi push r12 mov r12 rdx push rbp mov rbp rdi push rbx sub rsp CONST mov r14 [CONST_VAR+CONST] mov rbx [CONST_VAR+CONST] sub rbx r14 cmp rbx rdx jnb JUMP_ADDR_5	test [CONST_VAR] CONST jnz JUMP_ADDR_8	mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_11	mov r14 [rbp+CONST] mov rbx [rbp+CONST] sub rbx r14 cmp rbx r12 jnb JUMP_ADDR_5	or [rbp+CONST] CONST	test rbx rbx jnz JUMP_ADDR_10	mov rax r13 sub rax r15	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx rbx mov rsi r14 mov rdi r15 sub r12 rbx call sub_xxx mov rdi rbp mov r13 rax call sub_xxx mov r14 [rbp+CONST] mov rbx [rbp+CONST] sub rbx r14 cmp r12 rbx ja JUMP_ADDR_2	test rbx rbx jz JUMP_ADDR_6	cmp r12 rbx mov rsi r14 mov rdi r13 cmova r12 rbx mov rdx r12 add r14 r12 call sub_xxx mov [rbp+CONST] r14 mov r13 rax jmp JUMP_ADDR_6	mov rbx [rbp+CONST] mov rax off_xxx sub r13 r15 sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_13	mov rdx r12 mov rsi r15 mov rdi rbp call callfunc_xxx add rax r13 jmp JUMP_ADDR_7	call sub_xxx jmp JUMP_ADDR_12
[ph]libcap-git-setcap__IO_file_xsgetn
endbr64 push r15 push r14 mov r14 rsi push r13 mov r13 rdx push r12 push rbp push rbx mov rbx rdi sub rsp CONST cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_24	mov r12 r13 test r13 r13 jz JUMP_ADDR_15	nop [rax+rax+CONST]	mov rsi [rbx+CONST] mov rbp [rbx+CONST] sub rbp rsi cmp rbp r12 jnb JUMP_ADDR_20	test rbp rbp jnz JUMP_ADDR_17	test [rbx] CONST jnz JUMP_ADDR_18	mov rcx [rbx+CONST] test rcx rcx jz JUMP_ADDR_16	mov rsi [rbx+CONST] sub rsi rcx cmp rsi r12 ja JUMP_ADDR_21	cmp rsi CONST jbe JUMP_ADDR_16	mov rax r12 xor edx edx mov r15 r12 div rsi sub r15 rdx	mov rbp [rbx+CONST] mov rax off_xxx mov [rbx+CONST] rcx sub rax unk_xxx mov [rbx+CONST] rcx mov rdx rbp sub rdx unk_xxx mov [rbx+CONST] rcx mov [rbx+CONST] rcx mov [rbx+CONST] rcx mov [rbx+CONST] rcx cmp rax rdx jbe JUMP_ADDR_23	mov rdx r15 mov rsi r14 mov rdi rbx call callfunc_xxx test rax rax jle JUMP_ADDR_27	mov rdx [rbx+CONST] add r14 rax sub r12 rax cmp rdx CONST jz JUMP_ADDR_14	add rdx rax mov [rbx+CONST] rdx	test r12 r12 jnz JUMP_ADDR_3	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r15 r12 jmp JUMP_ADDR_10	mov rdi r14 mov rdx rbp sub r12 rbp call sub_xxx add [rbx+CONST] rbp mov r14 rax test [rbx] CONST jz JUMP_ADDR_6	mov rdi rbx call sub_xxx mov rsi [rbx+CONST] mov rbp [rbx+CONST] sub rbp rsi cmp rbp r12 jb JUMP_ADDR_4	nop [rax]	mov rdx r12 mov rdi r14 call sub_xxx add [rbx+CONST] r12 jmp JUMP_ADDR_15	mov rdi rbx call sub_xxx cmp eax CONST jnz JUMP_ADDR_3	sub r13 r12 jmp JUMP_ADDR_15	call sub_xxx jmp JUMP_ADDR_11	mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_26	call sub_xxx and [rbx] CONST	mov rdi rbx call sub_xxx jmp JUMP_ADDR_1	mov edx [rbx] sub r13 r12 mov ecx edx or edx CONST or ecx CONST test rax rax cmovnz edx ecx mov [rbx] edx jmp JUMP_ADDR_15
[ph]libcap-git-setcap__IO_file_seekoff_mmap
endbr64 push r12 push rbp push rbx mov rbx rdi test ecx ecx jz JUMP_ADDR_10	mov rbp rsi cmp edx CONST jz JUMP_ADDR_9	cmp edx CONST jz JUMP_ADDR_8	test rbp rbp js JUMP_ADDR_12	mov r12 [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r12 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_11	xor edx edx mov rsi rbp mov rdi rbx call callfunc_xxx test rax rax js JUMP_ADDR_13	mov rdx [rbx+CONST] mov rcx [rbx+CONST] mov [rbx+CONST] rax mov rax rbp mov rdi rdx lea rsi [rcx+rbp] mov [rbx+CONST] rcx sub rdi rcx cmp rbp rdi cmovle rdx rsi and [rbx] CONST mov [rbx+CONST] rdx mov [rbx+CONST] rdx	pop rbx pop rbp pop r12 retn	mov rax [CONST_VAR+CONST] sub rax [CONST_VAR+CONST] add rbp rax jmp JUMP_ADDR_3	mov rax [CONST_VAR+CONST] sub rax [CONST_VAR+CONST] add rbp rax jmp JUMP_ADDR_3	mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rdx [CONST_VAR+CONST] pop rbx sub rax rdx pop rbp pop r12 retn	call sub_xxx jmp JUMP_ADDR_5	mov rax CONST mov fs:xxx CONST mov rax CONST jmp JUMP_ADDR_7	mov rax CONST jmp JUMP_ADDR_7
[ph]libcap-git-setcap__IO_file_underflow_mmap
endbr64 mov rax [CONST_VAR+CONST] cmp rax [CONST_VAR+CONST] jnb JUMP_ADDR_2	movzx eax [rax] retn	push rbp mov rbp rdi push rbx sub rsp CONST call sub_xxx test eax eax jnz JUMP_ADDR_6	mov rax [rbp+CONST] cmp rax [rbp+CONST] jnb JUMP_ADDR_8	movzx eax [rax]	add rsp CONST pop rbx pop rbp retn	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_9	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	or [rbp+CONST] CONST mov eax CONST jmp JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_7
[ph]libcap-git-setcap__IO_file_xsputn
endbr64 push r15 push r14 push r13 xor r13d r13d push r12 push rbp push rbx sub rsp CONST test rdx rdx jz JUMP_ADDR_7	mov rbp rdi mov r12 rsi mov rdi [CONST_VAR+CONST] mov rbx rdx mov eax [rbp+CONST] and eax CONST cmp eax CONST jz JUMP_ADDR_8	mov rdx [rbp+CONST] cmp rdx rdi jbe JUMP_ADDR_11	sub rdx rdi xor r15d r15d test rdx rdx jz JUMP_ADDR_11	cmp rbx rdx mov rsi r12 mov r14 rbx cmovbe rdx rbx mov r13 rdx call sub_xxx add r12 r13 sub r14 r13 mov [rbp+CONST] rax	add r15 r14 jnz JUMP_ADDR_12	sub rbx r14 mov r13 rbx	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx [rbp+CONST] lea rax [CONST_VAR+rbx] sub rdx rdi cmp rbx rdx jbe JUMP_ADDR_20	xor r15d r15d test rdx rdx jnz JUMP_ADDR_4	nop [rax+CONST]	mov r14 rbx	mov r13 [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_27	mov esi CONST mov rdi rbp call callfunc_xxx cmp eax CONST jz JUMP_ADDR_24	mov rcx [rbp+CONST] sub rcx [rbp+CONST] mov r15 r14 cmp rcx CONST jbe JUMP_ADDR_16	mov rax r14 xor edx edx div rcx sub r15 rdx	test r15 r15 jnz JUMP_ADDR_22	mov r13 rbx test r14 r14 jz JUMP_ADDR_7	lea rsi [r12+r15] mov rdx r14 mov rdi rbp call sub_xxx sub rax r14 add r13 rax jmp JUMP_ADDR_7	sub rax CONST cmp [rax] CONST jz JUMP_ADDR_25	cmp r12 rax jb JUMP_ADDR_19	xor r15d r15d jmp JUMP_ADDR_4	mov rdx r15 mov rsi r12 mov rdi rbp call sub_xxx cmp r15 rax ja JUMP_ADDR_28	sub r14 rax jmp JUMP_ADDR_17	sub rbx r14 mov rax CONST test r14 r14 mov r13 rbx cmovz r13 rax jmp JUMP_ADDR_7	sub rax r12 add rax CONST mov rdx rax jnz JUMP_ADDR_29	mov r14 rbx mov r15d CONST jmp JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_13	sub rbx r14 mov r13 rbx add r13 rax jmp JUMP_ADDR_7	mov r15d CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_file_read
endbr64 mov r8d [CONST_VAR+CONST] test [CONST_VAR+CONST] CONST mov edi r8d jnz JUMP_ADDR_2	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__IO_file_setbuf_mmap
endbr64 lea rax unk_xxx lea rcx unk_xxx push rbx mov rbx rdi mov [CONST_VAR+CONST] rax mov rax [CONST_VAR+CONST] mov [rax+CONST] rcx call sub_xxx test rax rax jz JUMP_ADDR_2	mov rax [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov [rbx+CONST] rax mov rax rbx pop rbx retn	mov rdx [rbx+CONST] lea rcx unk_xxx mov [rbx+CONST] rcx lea rcx unk_xxx mov [rdx+CONST] rcx pop rbx retn
[ph]libcap-git-setcap__IO_new_file_init_internal
endbr64 or [CONST_VAR] CONST push rbx mov rbx rdi mov [CONST_VAR+CONST] CONST call sub_xxx mov [rbx+CONST] CONST pop rbx retn
[ph]libcap-git-setcap__IO_file_init
endbr64 or [CONST_VAR] CONST push rbx mov rbx rdi mov [CONST_VAR+CONST] CONST call sub_xxx mov [rbx+CONST] CONST pop rbx retn
[ph]libcap-git-setcap__IO_file_open
endbr64 push r12 xor eax eax push rbp mov ebp r8d push rbx mov rbx rdi mov rdi rsi mov esi edx mov edx ecx test [rbx+CONST] CONST jnz JUMP_ADDR_11	call sub_xxx mov r12d eax	test r12d r12d js JUMP_ADDR_10	mov eax [rbx] mov edx ebp and ebp CONST mov [rbx+CONST] r12d and edx CONST and eax CONST or eax edx mov [rbx] eax cmp ebp CONST jnz JUMP_ADDR_6	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_12	xor esi esi mov edx CONST mov rdi rbx call callfunc_xxx cmp rax CONST jz JUMP_ADDR_8	mov rdi rbx call sub_xxx mov rax rbx	pop rbx pop rbp pop r12 retn	mov rax CONST cmp fs:xxx CONST jz JUMP_ADDR_6	mov edi r12d call sub_xxx xor eax eax jmp JUMP_ADDR_7	pop rbx xor eax eax pop rbp pop r12 retn	call sub_xxx mov r12d eax jmp JUMP_ADDR_2	call sub_xxx jmp JUMP_ADDR_5
[ph]libcap-git-setcap__IO_file_attach
endbr64 cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_7	push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov eax [CONST_VAR] mov r12 [CONST_VAR+CONST] mov [CONST_VAR+CONST] esi mov rbp CONST mov [CONST_VAR+CONST] CONST and eax CONST mov rdx r12 sub rdx unk_xxx or eax CONST mov [CONST_VAR] eax mov rax off_xxx sub rax unk_xxx mov r13d fs:xxx cmp rax rdx jbe JUMP_ADDR_8	xor esi esi mov ecx CONST mov edx CONST mov rdi rbx call callfunc_xxx cmp rax CONST jz JUMP_ADDR_5	mov fs:xxx r13d mov rax rbx	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	xor eax eax cmp fs:xxx CONST jz JUMP_ADDR_3	jmp JUMP_ADDR_4	xor eax eax retn	call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_do_write
endbr64 test rdx rdx jnz JUMP_ADDR_2	xor eax eax retn	push rbx mov rbx rdx call sub_xxx cmp rbx rax pop rbx setnz al movzx eax al neg eax retn
[ph]libcap-git-setcap__IO_file_close_it
endbr64 push r12 push rbp push rbx mov r12d [CONST_VAR+CONST] cmp r12d CONST jz JUMP_ADDR_10	mov eax [CONST_VAR] mov rbx rdi xor ebp ebp and eax CONST cmp eax CONST jz JUMP_ADDR_11	mov rdi rbx xor r12d r12d call sub_xxx test [rbx+CONST] CONST jnz JUMP_ADDR_5	mov r12 [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r12 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_14	mov rdi rbx call callfunc_xxx mov r12d eax	mov eax [rbx+CONST] test eax eax jle JUMP_ADDR_9	mov rax [rbx+CONST] cmp [rax+CONST] CONST jz JUMP_ADDR_8	mov rdi rbx call sub_xxx	xor ecx ecx xor edx edx xor esi esi mov rdi rbx call sub_xxx mov rax [rbx+CONST] mov [rax+CONST] CONST mov [rax] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST	xor ecx ecx xor edx edx xor esi esi mov rdi rbx call sub_xxx mov [rbx+CONST] CONST mov rdi rbx mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST call sub_xxx test r12d r12d mov [rbx] CONST mov [rbx+CONST] CONST cmovz r12d ebp mov [rbx+CONST] CONST	mov eax r12d pop rbx pop rbp pop r12 retn	mov edx [CONST_VAR+CONST] test edx edx jle JUMP_ADDR_13	mov rax [CONST_VAR+CONST] mov rsi [rax+CONST] mov rdx [rax+CONST] sub rdx rsi sar rdx CONST call sub_xxx mov ebp eax jmp JUMP_ADDR_2	mov rsi [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rdx rsi call sub_xxx mov ebp eax jmp JUMP_ADDR_2	call sub_xxx jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_file_fopen
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_42	movzx eax [rdx] mov r10 rsi mov rbp rdi mov rsi rdx mov r9d ecx cmp al CONST jz JUMP_ADDR_54	cmp al CONST jz JUMP_ADDR_7	cmp al CONST jz JUMP_ADDR_31	mov rax CONST xor r12d r12d mov fs:xxx CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_56	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r8d CONST mov r11d CONST mov edx CONST	lea rdi [CONST_VAR+CONST] mov rbx rsi lea rcx unk_xxx	movzx eax [CONST_VAR+CONST] add rsi CONST cmp al CONST jg JUMP_ADDR_16	cmp al CONST jle JUMP_ADDR_13	sub eax CONST cmp al CONST ja JUMP_ADDR_16	movzx eax al movsxd rax [rcx+rax*4] add rax rcx jmp rax	test al al jz JUMP_ADDR_18	cmp al CONST jnz JUMP_ADDR_16	and r8d CONST mov rbx rsi mov r11d CONST	cmp rsi rdi jnz JUMP_ADDR_9	nop [rax]	or edx r11d mov ecx CONST mov rsi r10 mov rdi rbp call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_42	lea rdi [rbx+CONST] lea rsi GLOBAL_VAR call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_5	lea r15 [rax+CONST] mov esi CONST mov rdi r15 call sub_xxx sub rax r15 lea rdi [rax+CONST] mov r14 rax call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_57	mov rdx r14 mov rsi r15 mov rdi rax call sub_xxx mov [rax] CONST movzx edx [r13+CONST] test dl dl jz JUMP_ADDR_55	mov r9 cs:xxx mov rsi r13 mov rdi r13 xor r14d r14d mov r10 cs:xxx mov r11 CONST jmp JUMP_ADDR_25	mov eax [r10+r8*4] add rdi CONST mov [CONST_VAR+CONST] al	movzx edx [CONST_VAR+CONST] add rsi CONST test dl dl jz JUMP_ADDR_45	movsx r8 dl lea ecx [rdx+CONST] movzx eax [r9+r8*2] shr ax CONST and eax CONST cmp cl CONST ja JUMP_ADDR_27	mov r15 r11 sar r15 cl mov rcx r15 and ecx CONST xor ecx CONST or eax ecx	test al al jnz JUMP_ADDR_23	cmp dl CONST jnz JUMP_ADDR_24	add r14d CONST cmp r14d CONST jz JUMP_ADDR_47	mov [CONST_VAR] CONST add rdi CONST jmp JUMP_ADDR_24	mov r8d CONST mov r11d CONST mov edx CONST jmp JUMP_ADDR_8	or dl CONST mov rbx rsi cmp rsi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	or [rbp+CONST] CONST cmp rsi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	or [rbp+CONST] CONST or edx CONST cmp rsi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	or [rbp+CONST] CONST cmp rsi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	mov rdi rbp mov r12d CONST call sub_xxx mov rdi r13 call sub_xxx mov rbx CONST	mov fs:xxx r12d nop [rax+rax+CONST]	xor r12d r12d jmp JUMP_ADDR_5	mov rbx rsi cmp rsi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	lea eax [r14+CONST] cmp r14d CONST jg JUMP_ADDR_47	mov r14d CONST mov esi CONST sub r14d eax add r14 CONST cmp eax CONST mov eax CONST cmovg r14 rax mov rdx r14 call sub_xxx mov rdi rax add rdi r14	mov [CONST_VAR] CONST cmp [r13+CONST] CONST jnz JUMP_ADDR_50	mov rcx cs:xxx xor eax eax nop [rax+CONST]	movsx rdx [rbx+rax+CONST] mov edx [rcx+rdx*4] mov [r13+rax+CONST] dl add rax CONST test dl dl jnz JUMP_ADDR_49	mov rdi rsp mov rsi r13 call sub_xxx test eax eax jnz JUMP_ADDR_40	mov rdi r13 call sub_xxx cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_59	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_58	mov rax [rbp+CONST] mov rcx [rsp+CONST+var_xxx] mov rdx [rax+CONST] mov [rax+CONST] CONST mov [rax] rdx mov rdx [rax+CONST] mov [rax+CONST] rdx mov rax [rbp+CONST] mov [rax+CONST] CONST mov rax [rbp+CONST] mov rbx [r12+CONST] lea rdx [rax+CONST] mov [rbp+CONST] rdx mov rdx [rsp+CONST+var_xxx] mov [rax+CONST] CONST mov [rax+CONST] rdx lea rdx [rbx+CONST] mov [rax+CONST] CONST mov [rax+CONST] rdx mov [rax+CONST] rcx mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] rdx mov rax [rax+CONST] mov [rbp+CONST] rax mov [r12+CONST] CONST jmp JUMP_ADDR_5	mov r8d CONST xor r11d r11d xor edx edx jmp JUMP_ADDR_8	mov rdi r13 mov eax CONST jmp JUMP_ADDR_46	call sub_xxx	mov rbx CONST mov rdi rbp mov r12d fs:xxx call sub_xxx jmp JUMP_ADDR_41	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__IO_new_file_finish
endbr64 push rbp mov rbp rdi push rbx sub rsp CONST cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_6	mov eax [CONST_VAR+CONST] test eax eax jle JUMP_ADDR_7	mov rax [CONST_VAR+CONST] mov rsi [rax+CONST] mov rdx [rax+CONST] sub rdx rsi sar rdx CONST call sub_xxx	test [rbp+CONST] CONST jnz JUMP_ADDR_6	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_8	mov rdi rbp call callfunc_xxx	add rsp CONST mov rdi rbp xor esi esi pop rbx pop rbp jmp UNK_JUMP_ADDR	mov rsi [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rdx rsi call sub_xxx jmp JUMP_ADDR_3	call sub_xxx jmp JUMP_ADDR_5
[ph]libcap-git-setcap__IO_new_file_overflow
endbr64 push r12 push rbp mov rbp rdi push rbx mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_30	mov rdx [CONST_VAR+CONST] mov ebx esi test ah CONST jz JUMP_ADDR_11	test rdx rdx jz JUMP_ADDR_28	mov rdx [CONST_VAR+CONST]	cmp ebx CONST jz JUMP_ADDR_19	cmp [rbp+CONST] rdx jz JUMP_ADDR_22	lea rax [rdx+CONST] mov [rbp+CONST] rax mov [rdx] bl mov eax [rbp+CONST] test al CONST jnz JUMP_ADDR_20	test ah CONST jz JUMP_ADDR_9	cmp ebx CONST jz JUMP_ADDR_20	movzx eax bl	pop rbx pop rbp pop r12 retn	test rdx rdx jz JUMP_ADDR_28	mov rdx [CONST_VAR+CONST]	test ah CONST jnz JUMP_ADDR_29	mov rsi [rbp+CONST] cmp rsi rdx jz JUMP_ADDR_25	mov rcx [rbp+CONST]	mov [rbp+CONST] rcx mov [rbp+CONST] rcx mov ecx eax or ch CONST mov [rbp+CONST] rdx mov [rbp+CONST] ecx mov ecx [rbp+CONST] mov [rbp+CONST] rdx mov [rbp+CONST] rsi test ecx ecx jg JUMP_ADDR_4	test eax CONST jz JUMP_ADDR_4	mov [rbp+CONST] rdx cmp ebx CONST jnz JUMP_ADDR_5	mov rsi [rbp+CONST] pop rbx mov rdi rbp pop rbp pop r12 sub rdx rsi jmp UNK_JUMP_ADDR	mov rsi [rbp+CONST] mov rdx [rbp+CONST] mov rdi rbp sub rdx rsi call sub_xxx cmp eax CONST jnz JUMP_ADDR_9	mov eax CONST jmp JUMP_ADDR_10	mov eax [rbp+CONST] test eax eax jle JUMP_ADDR_26	mov rax [rbp+CONST] mov rdi rbp mov rsi [rax+CONST] mov rdx [rax+CONST] sub rdx rsi sar rdx CONST call sub_xxx cmp eax CONST jz JUMP_ADDR_21	mov rdx [rbp+CONST] jmp JUMP_ADDR_6	mov rdx [rbp+CONST] mov [rbp+CONST] rdx mov rcx rdx jmp JUMP_ADDR_16	mov rsi [rbp+CONST] mov rdi rbp sub rdx rsi call sub_xxx cmp eax CONST jnz JUMP_ADDR_24	jmp JUMP_ADDR_21	mov rdi rbp call sub_xxx mov rdx [rbp+CONST] mov eax [rbp+CONST] mov [rbp+CONST] rdx mov [rbp+CONST] rdx mov [rbp+CONST] rdx jmp JUMP_ADDR_13	mov r12 [rbp+CONST] mov rdi rbp sub r12 rdx call sub_xxx mov rdx [rbp+CONST] mov rsi r12 neg rsi mov rcx rdx sub rcx [rbp+CONST] mov rax rcx neg rax cmp rcx r12 cmova rax rsi add rdx rax mov eax [rbp+CONST] mov [rbp+CONST] rdx jmp JUMP_ADDR_14	or eax CONST mov [CONST_VAR] eax mov rax CONST mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_10
[ph]libcap-git-setcap__IO_new_file_sync
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rdx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] cmp rdx rsi jbe JUMP_ADDR_3	mov eax [CONST_VAR+CONST] test eax eax jle JUMP_ADDR_9	mov rax [CONST_VAR+CONST] mov rsi [rax+CONST] mov rdx [rax+CONST] sub rdx rsi sar rdx CONST call sub_xxx test eax eax jnz JUMP_ADDR_11	mov rsi [rbx+CONST] sub rsi [rbx+CONST] jz JUMP_ADDR_7	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_14	mov edx CONST mov rdi rbx call callfunc_xxx cmp rax CONST jz JUMP_ADDR_12	mov rax [rbx+CONST] mov [rbx+CONST] rax	mov [rbx+CONST] CONST xor eax eax	add rsp CONST pop rbx pop rbp retn	sub rdx rsi call sub_xxx test eax eax jz JUMP_ADDR_3	nop [rax+CONST]	mov eax CONST jmp JUMP_ADDR_8	mov rax CONST cmp fs:xxx CONST jz JUMP_ADDR_7	jmp JUMP_ADDR_11	mov [rsp+CONST] rsi call sub_xxx mov rsi [rsp+CONST] jmp JUMP_ADDR_5
[ph]libcap-git-setcap_flush_cleanup
endbr64 mov rax cs:xxx test rax rax jz JUMP_ADDR_2	test [rax] CONST jz JUMP_ADDR_7	mov eax cs:xxx sub eax CONST mov cs:xxx eax jnz JUMP_ADDR_6	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_5	sub cs:xxx CONST retn	xchg eax cs:xxx cmp eax CONST jg JUMP_ADDR_10	retn	mov rdi [rax+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_2	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_11	sub [CONST_VAR] CONST jmp JUMP_ADDR_2	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall retn	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_2	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_2
[ph]libcap-git-setcap_save_for_backup
push r15 push r14 push r13 mov r13 rsi push r12 mov r12 rsi push rbp mov rbp rdi push rbx sub rsp CONST mov r8 [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rax [CONST_VAR+CONST] mov r15 [CONST_VAR+CONST] sub r13 r8 mov r14 rsi sub r14 r15 mov rbx r13 mov rdx rax test rax rax jz JUMP_ADDR_22	nop	movsxd rcx [rdx+CONST] mov rdx [rdx] cmp rbx rcx cmovg rbx rcx test rdx rdx jnz JUMP_ADDR_2	mov rdx r13 sub rdx rbx cmp rdx r14 ja JUMP_ADDR_11	sub r14 rdx lea rdi [r15+r14] test rbx rbx js JUMP_ADDR_18	test rdx rdx jnz JUMP_ADDR_21	mov [rbp+CONST] rdi	mov edx r13d xchg ax ax	sub [rax+CONST] edx mov rax [rax] test rax rax jnz JUMP_ADDR_8	xor eax eax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rsi mov rdi rax mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rax call sub_xxx test rax rax jz JUMP_ADDR_24	test rbx rbx mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] lea r14 [rax+CONST] js JUMP_ADDR_20	lea rsi [r8+rbx] mov rdi r14 mov [rsp+CONST+var_xxx] rax call sub_xxx mov r9 [rsp+CONST+var_xxx]	mov rdi r15 mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r9 [rsp+CONST+var_xxx] sub r12 [rbp+CONST] mov rax [rbp+CONST] mov r13 r12 mov [rbp+CONST] r9 add r9 [rsp+CONST+var_xxx] mov [rbp+CONST] r9	mov [rbp+CONST] r14 test rax rax jnz JUMP_ADDR_7	jmp JUMP_ADDR_9	mov rdi rsi nop [rax+rax+CONST]	mov rdx rbx add rsi rbx neg rdx call sub_xxx mov rsi [rbp+CONST] mov rdi r14 mov rdx r12 sub rdi rbx add rdi [rbp+CONST] sub rdx rsi	call sub_xxx sub r12 [rbp+CONST] mov rax [rbp+CONST] add r14 [rbp+CONST] mov r13 r12 jmp JUMP_ADDR_15	mov rsi [rsp+CONST+var_xxx] mov rdx rbx mov rdi r14 mov [rsp+CONST+var_xxx] r8 neg rdx mov [rsp+CONST+var_xxx] rax add rsi rbx call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rdx r13 mov rdi rax call sub_xxx mov r9 [rsp+CONST+var_xxx] jmp JUMP_ADDR_14	lea rsi [r8+rbx] jmp JUMP_ADDR_19	test r13 r13 js JUMP_ADDR_17	mov [CONST_VAR+CONST] rsi jmp JUMP_ADDR_9	or eax CONST jmp JUMP_ADDR_10
[ph]libcap-git-setcap__IO_un_link
push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov rbp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rbp rbp jz JUMP_ADDR_34	mov rdi rsp xor edx edx lea rsi sub_xxx call callfunc_xxx	mov r13 fs:xxx cmp r13 cs:xxx lea r12 GLOBAL_VAR jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_41	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx r13	mov edx cs:xxx mov esi [rbx] mov cs:xxx rbx lea eax [rdx+CONST] mov r8d esi mov cs:xxx eax and r8d CONST jnz JUMP_ADDR_18	mov r13 fs:xxx mov rdi [rbx+CONST] cmp r13 [CONST_VAR+CONST] jz JUMP_ADDR_37	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_43	cmpxchg [CONST_VAR] edx	mov esi [rbx] mov rdi [rbx+CONST] mov rcx cs:xxx mov r8d esi add [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] r13 and r8d CONST test rcx rcx jz JUMP_ADDR_13	mov rdx [rcx+CONST] cmp rbx rcx jnz JUMP_ADDR_22	mov cs:xxx rdx	and sil CONST mov [rbx] esi test r8d r8d jnz JUMP_ADDR_26	mov rdi [rbx+CONST]	mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_26	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_24	mov eax cs:xxx sub [CONST_VAR] CONST lea edx [rax+CONST] jmp JUMP_ADDR_27	mov rcx cs:xxx test rcx rcx jnz JUMP_ADDR_11	and sil CONST mov [rbx] esi jmp JUMP_ADDR_27	cmp rbx rdx jz JUMP_ADDR_35	mov rcx rdx mov rdx [rdx+CONST]	test rdx rdx jnz JUMP_ADDR_20	jmp JUMP_ADDR_13	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_26	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall nop [rax+rax+CONST]	mov eax cs:xxx lea edx [rax+CONST]	mov cs:xxx CONST mov cs:xxx edx test edx edx jnz JUMP_ADDR_30	mov cs:xxx CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_39	sub cs:xxx CONST	test rbp rbp jz JUMP_ADDR_32	mov rdi rsp xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_45	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov [rsp+CONST+var_xxx] CONST lea rax sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov rax [rbx+CONST] and sil CONST add rcx CONST mov [rcx] rax mov [rbx] esi test r8d r8d jz JUMP_ADDR_14	jmp JUMP_ADDR_26	mov rcx cs:xxx add [CONST_VAR+CONST] CONST test rcx rcx jnz JUMP_ADDR_11	and sil CONST mov [rbx] esi jmp JUMP_ADDR_15	xchg edx cs:xxx cmp edx CONST jle JUMP_ADDR_30	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_30	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	mov rdi r12 call sub_xxx jmp JUMP_ADDR_5	mov eax r8d lock CONST edx jz JUMP_ADDR_10	call sub_xxx jmp JUMP_ADDR_10	call sub_xxx	endbr64 test [CONST_VAR] CONST jz JUMP_ADDR_48	jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap__IO_link_in
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_21	mov rbp CONST or al CONST mov rbx rdi mov [CONST_VAR] eax test rbp rbp jz JUMP_ADDR_23	mov rdi rsp xor edx edx lea rsi sub_xxx call callfunc_xxx	mov r13 fs:xxx cmp cs:xxx r13 lea r12 GLOBAL_VAR jz JUMP_ADDR_7	mov eax fs:xxx test eax eax jnz JUMP_ADDR_25	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx r13	mov edx cs:xxx mov ecx [rbx] mov cs:xxx rbx add edx CONST mov cs:xxx edx and ecx CONST jnz JUMP_ADDR_15	mov r13 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r13 jz JUMP_ADDR_24	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_29	cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov eax [rbx] mov rdx cs:xxx add [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] r13 mov cs:xxx rbx mov [rbx+CONST] rdx test ah CONST jnz JUMP_ADDR_33	mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax mov edx cs:xxx jnz JUMP_ADDR_16	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_31	sub [CONST_VAR] CONST mov edx cs:xxx jmp JUMP_ADDR_16	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax	mov cs:xxx CONST sub edx CONST mov cs:xxx edx jnz JUMP_ADDR_19	mov cs:xxx CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_27	sub cs:xxx CONST	test rbp rbp jz JUMP_ADDR_21	mov rdi rsp xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_34	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov [rsp+CONST+var_xxx] CONST lea rax sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_3	mov rax cs:xxx add [CONST_VAR+CONST] CONST mov cs:xxx rbx mov [rbx+CONST] rax jmp JUMP_ADDR_12	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_6	mov rdi r12 call sub_xxx jmp JUMP_ADDR_6	xchg edx cs:xxx cmp edx CONST jle JUMP_ADDR_19	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_19	mov eax ecx lock CONST edx jz JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_11	xchg eax [CONST_VAR] mov edx cs:xxx cmp eax CONST jle JUMP_ADDR_16	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall	mov edx cs:xxx jmp JUMP_ADDR_16	call sub_xxx	endbr64 mov rdx [CONST_VAR+CONST] mov rax rsi sub rax [CONST_VAR+CONST] test rdx rdx jz JUMP_ADDR_38	nop [rax+CONST]	movsxd rcx [rdx+CONST] mov rdx [rdx] cmp rax rcx cmovg rax rcx test rdx rdx jnz JUMP_ADDR_37	retn
[ph]libcap-git-setcap__IO_switch_to_main_get_area
endbr64 mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] and [CONST_VAR] CONST mov [CONST_VAR+CONST] rdx mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rax mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rax retn
[ph]libcap-git-setcap__IO_switch_to_backup_area
endbr64 mov rdx [CONST_VAR+CONST] mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] or [CONST_VAR] CONST mov [CONST_VAR+CONST] rdx mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rax retn
[ph]libcap-git-setcap__IO_switch_to_get_mode
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] cmp rax [CONST_VAR+CONST] jbe JUMP_ADDR_4	mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_10	mov esi CONST mov rdi rbx call callfunc_xxx cmp eax CONST jz JUMP_ADDR_8	mov rax [rbx+CONST]	mov edx [rbx] test dh CONST jnz JUMP_ADDR_9	mov rcx [rbx+CONST] mov [rbx+CONST] rcx cmp [rbx+CONST] rax jnb JUMP_ADDR_7	mov [rbx+CONST] rax	and dh CONST mov [rbx+CONST] rax mov [rbx] edx mov [rbx+CONST] rax mov [rbx+CONST] rax xor eax eax	add rsp CONST pop rbx pop rbp retn	mov rcx [rbx+CONST] mov [rbx+CONST] rcx jmp JUMP_ADDR_7	call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_free_backup_area
endbr64 push rbx mov eax [CONST_VAR] mov rbx rdi mov rdi [CONST_VAR+CONST] test ah CONST jz JUMP_ADDR_2	and ah CONST mov [rbx+CONST] rdi mov [rbx] eax mov rax [rbx+CONST] mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rdi mov rdi rax	call sub_xxx mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST pop rbx retn
[ph]libcap-git-setcap___overflow
endbr64 push rbx sub rsp CONST mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_2	mov [CONST_VAR+CONST] CONST	mov rbx [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_4	mov rax [rbx+CONST] add rsp CONST pop rbx jmp rax	mov [rsp+CONST+var_xxx] esi mov [rsp+CONST+var_xxx] rdi call sub_xxx mov rax [rbx+CONST] mov esi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] add rsp CONST pop rbx jmp rax
[ph]libcap-git-setcap___underflow
endbr64 push rbp mov rbp rdi push rbx sub rsp CONST mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_10	mov [CONST_VAR+CONST] CONST	test [rbp+CONST] CONST jnz JUMP_ADDR_18	mov rax [rbp+CONST] mov rdx [rbp+CONST] cmp rax rdx jb JUMP_ADDR_16	mov eax [rbp+CONST] test ah CONST jz JUMP_ADDR_6	and ah CONST mov rcx [rbp+CONST] mov [rbp+CONST] rdx mov [rbp+CONST] eax mov rdx [rbp+CONST] mov rax [rbp+CONST] mov [rbp+CONST] rcx mov [rbp+CONST] rdx mov [rbp+CONST] rax mov [rbp+CONST] rax cmp rcx rax ja JUMP_ADDR_16	cmp [rbp+CONST] CONST jz JUMP_ADDR_12	mov rsi [rbp+CONST] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_11	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_20	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	cmp eax CONST jz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_17	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_8	mov eax [rbp+CONST] test ah CONST jz JUMP_ADDR_15	and ah CONST mov [rbp+CONST] rdi mov [rbp+CONST] eax mov rax [rbp+CONST] mov [rbp+CONST] rax mov rax [rbp+CONST] mov [rbp+CONST] rdi mov rdi rax	call sub_xxx mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_8	movzx eax [rax]	add rsp CONST pop rbx pop rbp retn	mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_3	jmp JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_9
[ph]libcap-git-setcap___uflow
endbr64 push rbp mov rbp rdi push rbx sub rsp CONST mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_11	mov [CONST_VAR+CONST] CONST	test [rbp+CONST] CONST jnz JUMP_ADDR_19	mov rax [rbp+CONST] mov rdx [rbp+CONST] cmp rax rdx jb JUMP_ADDR_17	mov eax [rbp+CONST] test ah CONST jz JUMP_ADDR_7	and ah CONST mov rcx [rbp+CONST] mov [rbp+CONST] rdx mov [rbp+CONST] eax mov rdx [rbp+CONST] mov rax [rbp+CONST] mov [rbp+CONST] rcx mov [rbp+CONST] rdx mov [rbp+CONST] rax cmp rcx rax ja JUMP_ADDR_17	mov [rbp+CONST] rax	cmp [rbp+CONST] CONST jz JUMP_ADDR_13	mov rsi [rbp+CONST] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_12	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_21	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	cmp eax CONST jz JUMP_ADDR_2	mov eax CONST jmp JUMP_ADDR_18	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_9	mov eax [rbp+CONST] test ah CONST jz JUMP_ADDR_16	and ah CONST mov [rbp+CONST] rdi mov [rbp+CONST] eax mov rax [rbp+CONST] mov [rbp+CONST] rax mov rax [rbp+CONST] mov [rbp+CONST] rdi mov rdi rax	call sub_xxx mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_9	lea rdx [rax+CONST] mov [rbp+CONST] rdx movzx eax [rax]	add rsp CONST pop rbx pop rbp retn	mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_3	jmp JUMP_ADDR_12	call sub_xxx jmp JUMP_ADDR_10
[ph]libcap-git-setcap__IO_setb
endbr64 push r13 mov r13 rsi push r12 mov r12 rdx push rbp mov ebp ecx push rbx mov rbx rdi sub rsp CONST mov rdi [CONST_VAR+CONST] mov eax [rbx] test rdi rdi jz JUMP_ADDR_2	test al CONST jz JUMP_ADDR_3	mov edx eax or eax CONST mov [rbx+CONST] r13 and edx CONST test ebp ebp mov [rbx+CONST] r12 cmovnz eax edx mov [rbx] eax add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	call sub_xxx mov eax [rbx] jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_doallocbuf
endbr64 cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_2	retn	push r12 push rbp push rbx mov eax [CONST_VAR] mov rbx rdi test al CONST jz JUMP_ADDR_4	mov edx [CONST_VAR+CONST] test edx edx jle JUMP_ADDR_10	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_12	mov rdi rbx call callfunc_xxx cmp eax CONST jnz JUMP_ADDR_9	mov rdi [rbx+CONST] mov eax [rbx] lea r12 [rbx+CONST] lea rbp [rbx+CONST] test rdi rdi jz JUMP_ADDR_8	test al CONST jz JUMP_ADDR_11	or eax CONST mov [rbx+CONST] rbp mov [rbx+CONST] r12 mov [rbx] eax	pop rbx pop rbp pop r12 retn	lea r12 [CONST_VAR+CONST] lea rbp [CONST_VAR+CONST] jmp JUMP_ADDR_8	call sub_xxx mov eax [rbx] jmp JUMP_ADDR_8	call sub_xxx jmp JUMP_ADDR_5
[ph]libcap-git-setcap__IO_default_underflow
endbr64 mov eax CONST retn
[ph]libcap-git-setcap__IO_default_uflow
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_4	mov rdi rbx call callfunc_xxx cmp eax CONST jz JUMP_ADDR_3	mov rax [rbx+CONST] lea rdx [rax+CONST] mov [rbx+CONST] rdx movzx eax [rax]	add rsp CONST pop rbx pop rbp retn	call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_default_xsputn
endbr64 test rdx rdx jz JUMP_ADDR_17	push r15 push r14 mov r14 rdi push r13 mov r13 rdx push r12 mov r12 rsi push rbp mov rbp rdx push rbx sub rsp CONST jmp JUMP_ADDR_8	test rbx rbx jnz JUMP_ADDR_14	sub rbp rbx	test rbp rbp jz JUMP_ADDR_12	mov rbx [r14+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_13	movzx esi [r12] lea r15 [r12+CONST] mov rdi r14 call callfunc_xxx cmp eax CONST jz JUMP_ADDR_11	sub rbp CONST mov r12 r15	mov rdi [r14+CONST] mov rbx [r14+CONST] cmp rdi rbx jnb JUMP_ADDR_4	sub rbx rdi cmp rbx rbp cmova rbx rbp cmp rbx CONST jbe JUMP_ADDR_2	mov rsi r12 mov rdx rbx add r12 rbx call sub_xxx mov [r14+CONST] rax jmp JUMP_ADDR_3	sub r13 rbp	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx jmp JUMP_ADDR_6	xor eax eax nop [rax+rax+CONST]	movzx edx [r12+rax] mov [CONST_VAR+rax] dl add rax CONST cmp rbx rax jnz JUMP_ADDR_15	add rdi rbx add r12 rbx mov [r14+CONST] rdi jmp JUMP_ADDR_3	xor eax eax retn
[ph]libcap-git-setcap__IO_sgetn
endbr64 push rbx sub rsp CONST mov rbx [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rcx rbx sub rcx unk_xxx cmp rax rcx jbe JUMP_ADDR_2	mov rax [rbx+CONST] add rsp CONST pop rbx jmp rax	mov [rsp+CONST] rdx mov [rsp+CONST] rsi mov [rsp+CONST] rdi call sub_xxx mov rax [rbx+CONST] mov rdx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] add rsp CONST pop rbx jmp rax
[ph]libcap-git-setcap__IO_default_xsgetn
endbr64 push r14 mov r14 rdx push r13 mov r13 rdi push r12 mov r12 rdx push rbp mov rbp rsi push rbx jmp JUMP_ADDR_5	test rbx rbx jnz JUMP_ADDR_10	sub r14 rbx	test r14 r14 jz JUMP_ADDR_9	mov rdi r13 call sub_xxx cmp eax CONST jz JUMP_ADDR_8	mov rsi [r13+CONST] mov rbx [r13+CONST] cmp rsi rbx jnb JUMP_ADDR_3	sub rbx rsi cmp rbx r14 cmova rbx r14 cmp rbx CONST jbe JUMP_ADDR_1	mov rdi rbp mov rdx rbx call sub_xxx add [r13+CONST] rbx mov rbp rax jmp JUMP_ADDR_2	sub r12 r14	pop rbx mov rax r12 pop rbp pop r12 pop r13 pop r14 retn	xor eax eax nop [rax+rax+CONST]	movzx edx [CONST_VAR+rax] mov [rbp+rax+CONST] dl add rax CONST cmp rbx rax jnz JUMP_ADDR_11	add rsi rbx add rbp rbx mov [r13+CONST] rsi jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_default_setbuf
endbr64 push r13 push r12 mov r12 rsi push rbp mov rbp rdx push rbx mov rbx rdi sub rsp CONST mov r13 [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_11	mov rdi rbx call callfunc_xxx cmp eax CONST jz JUMP_ADDR_12	mov edx [rbx] mov rdi [rbx+CONST] mov eax edx test r12 r12 jz JUMP_ADDR_8	test rbp rbp jz JUMP_ADDR_8	and eax CONST add rbp r12 mov [rbx] eax test rdi rdi jz JUMP_ADDR_6	and edx CONST jz JUMP_ADDR_10	mov [rbx+CONST] r12 or eax CONST mov [rbx+CONST] rbp mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx] eax mov rax rbx	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	or eax CONST lea rbp [rbx+CONST] lea r12 [rbx+CONST] mov [rbx] eax test rdi rdi jz JUMP_ADDR_6	and edx CONST jnz JUMP_ADDR_6	call sub_xxx mov eax [rbx] jmp JUMP_ADDR_6	call sub_xxx jmp JUMP_ADDR_1	xor eax eax jmp JUMP_ADDR_7
[ph]libcap-git-setcap__IO_default_seekpos
endbr64 push rbx mov ecx edx sub rsp CONST mov rbx [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_2	mov rax [rbx+CONST] add rsp CONST xor edx edx pop rbx jmp rax	mov [rsp+CONST] ecx mov [rsp+CONST] rsi mov [rsp+CONST] rdi call sub_xxx mov rax [rbx+CONST] mov ecx [rsp+CONST] xor edx edx mov rsi [rsp+CONST] mov rdi [rsp+CONST] add rsp CONST pop rbx jmp rax
[ph]libcap-git-setcap__IO_default_doallocate
endbr64 push r12 push rbp push rbx mov rbx rdi mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_5	mov rdi [rbx+CONST] mov rbp rax lea r12 [rax+CONST] mov eax [rbx] test rdi rdi jz JUMP_ADDR_3	test al CONST jz JUMP_ADDR_4	and eax CONST mov [rbx+CONST] rbp mov [rbx+CONST] r12 mov [rbx] eax pop rbx mov eax CONST pop rbp pop r12 retn	call sub_xxx mov eax [rbx] jmp JUMP_ADDR_3	pop rbx mov eax CONST pop rbp pop r12 retn
[ph]libcap-git-setcap__IO_init_internal
endbr64 mov edx cs:xxx or esi CONST xor eax eax mov [CONST_VAR+CONST] CONST mov [CONST_VAR] esi test edx edx mov [CONST_VAR+CONST] CONST setnz al xor ecx ecx mov [CONST_VAR+CONST] CONST shl eax CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] eax mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] cx test rax rax jz JUMP_ADDR_2	mov [rax] CONST mov [rax+CONST] CONST	mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST retn
[ph]libcap-git-setcap__IO_init
endbr64 mov edx cs:xxx or esi CONST xor eax eax mov [CONST_VAR+CONST] CONST mov [CONST_VAR] esi test edx edx mov [CONST_VAR+CONST] CONST setnz al xor ecx ecx mov [CONST_VAR+CONST] CONST shl eax CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] eax mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] cx test rax rax jz JUMP_ADDR_2	mov [rax] CONST mov [rax+CONST] CONST	mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST retn
[ph]libcap-git-setcap__IO_enable_locks
endbr64 mov eax cs:xxx test eax eax jnz JUMP_ADDR_4	mov rax cs:xxx mov cs:xxx CONST test rax rax jz JUMP_ADDR_4	nop [rax+CONST]	or [rax+CONST] CONST mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_3	retn
[ph]libcap-git-setcap__IO_old_init
endbr64 mov edx cs:xxx or esi CONST xor eax eax mov [CONST_VAR+CONST] CONST mov [CONST_VAR] esi test edx edx mov [CONST_VAR+CONST] CONST setnz al xor ecx ecx mov [CONST_VAR+CONST] CONST shl eax CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] eax mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] cx test rax rax jz JUMP_ADDR_2	mov [rax] CONST mov [rax+CONST] CONST	retn
[ph]libcap-git-setcap__IO_no_init
endbr64 or esi CONST mov rax rdi mov [CONST_VAR] esi mov edi cs:xxx xor esi esi mov [rax+CONST] CONST test edi edi mov [rax+CONST] CONST setnz sil xor r9d r9d mov [rax+CONST] CONST shl esi CONST mov [rax+CONST] CONST mov [rax+CONST] esi mov rsi [rax+CONST] mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] r9w test rsi rsi jz JUMP_ADDR_2	mov [CONST_VAR] CONST mov [CONST_VAR+CONST] CONST	mov [rax+CONST] edx test edx edx js JUMP_ADDR_4	mov [rax+CONST] rcx mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] CONST mov [rcx+CONST] r8 mov [rax+CONST] CONST retn	mov [rax+CONST] CONST mov [rax+CONST] CONST retn
[ph]libcap-git-setcap__IO_default_sync
endbr64 xor eax eax retn
[ph]libcap-git-setcap__IO_default_finish
push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov rbp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rbp rbp jz UNK_JUMP_ADDR	mov rdi rsp xor edx edx lea rsi sub_xxx call callfunc_xxx	mov r13 fs:xxx cmp r13 cs:xxx lea r12 GLOBAL_VAR jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz UNK_JUMP_ADDR	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx r13	mov edx cs:xxx mov esi [rbx] mov cs:xxx rbx lea eax [rdx+CONST] mov r8d esi mov cs:xxx eax and r8d CONST jnz UNK_JUMP_ADDR	mov r13 fs:xxx mov rdi [rbx+CONST] cmp r13 [CONST_VAR+CONST] jz UNK_JUMP_ADDR	mov eax fs:xxx mov edx CONST test eax eax jnz UNK_JUMP_ADDR	cmpxchg [CONST_VAR] edx	mov esi [rbx] mov rdi [rbx+CONST] mov rcx cs:xxx mov r8d esi add [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] r13 and r8d CONST test rcx rcx jz JUMP_ADDR_13	mov rdx [rcx+CONST] cmp rbx rcx jnz UNK_JUMP_ADDR	mov cs:xxx rdx	and sil CONST mov [rbx] esi test r8d r8d jnz UNK_JUMP_ADDR	mov rdi [rbx+CONST]	mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz UNK_JUMP_ADDR	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz UNK_JUMP_ADDR	mov eax cs:xxx sub [CONST_VAR] CONST lea edx [rax+CONST] jmp UNK_JUMP_ADDR	endbr64 push rbp mov rbp rdi mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_20	test [rbp+CONST] CONST jz JUMP_ADDR_27	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_22	mov [rax+CONST] CONST mov rax [rax] test rax rax jnz JUMP_ADDR_21	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_24	call sub_xxx mov [rbp+CONST] CONST	test [rbp+CONST] CONST jz JUMP_ADDR_26	mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	pop rbp retn	call sub_xxx mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_20
[ph]libcap-git-setcap__IO_default_seekoff
endbr64 mov rax CONST retn
[ph]libcap-git-setcap__IO_sputbackc
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] cmp rax [CONST_VAR+CONST] jbe JUMP_ADDR_2	cmp [rax+CONST] sil jz JUMP_ADDR_6	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_7	mov rdi rbx call callfunc_xxx cmp eax CONST jz JUMP_ADDR_5	and [rbx] CONST	add rsp CONST pop rbx pop rbp retn	sub rax CONST mov [CONST_VAR+CONST] rax movzx eax sil jmp JUMP_ADDR_4	mov [rsp+CONST+var_xxx] esi call sub_xxx mov esi [rsp+CONST+var_xxx] jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_sungetc
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] cmp rax [CONST_VAR+CONST] jbe JUMP_ADDR_3	lea rdx [rax+CONST] mov [CONST_VAR+CONST] rdx movzx eax [rax+CONST]	and [rbx] CONST add rsp CONST pop rbx pop rbp retn	mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_6	mov esi CONST mov rdi rbx call callfunc_xxx cmp eax CONST jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp retn	call sub_xxx jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_adjust_column
endbr64 movsxd rax edx add rax rsi mov rcx rax jmp JUMP_ADDR_2	sub rcx CONST cmp [rcx] CONST jz JUMP_ADDR_4	cmp rcx rsi ja JUMP_ADDR_1	lea eax [rdx+CONST_VAR] retn	sub rax rcx sub eax CONST retn
[ph]libcap-git-setcap__IO_flush_all_lockp
endbr64 push r15 push r14 push r13 push r12 push rbp mov ebp edi push rbx sub rsp CONST mov r13 CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test r13 r13 jz JUMP_ADDR_35	lea rdi [rsp+CONST+var_xxx] xor edx edx lea rsi sub_xxx call callfunc_xxx	mov rbx fs:xxx cmp cs:xxx rbx lea r14 GLOBAL_VAR jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_43	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx rbx	mov eax cs:xxx mov rbx cs:xxx xor r15d r15d lea edx [rax+CONST] mov cs:xxx edx test rbx rbx jz JUMP_ADDR_28	mov r12d CONST jmp JUMP_ADDR_17	mov rax [rbx+CONST] mov rsi [rax+CONST] cmp [rax+CONST] rsi jbe JUMP_ADDR_11	mov rdx [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rcx rdx sub rcx unk_xxx cmp rax rcx jbe JUMP_ADDR_36	mov esi CONST mov rdi rbx call callfunc_xxx cmp eax CONST mov eax CONST cmovz r15d eax	test ebp ebp jz JUMP_ADDR_16	test [rbx] CONST jnz JUMP_ADDR_16	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_16	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_41	sub [CONST_VAR] CONST nop [rax+CONST]	mov cs:xxx CONST mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_27	mov cs:xxx rbx test ebp ebp jz JUMP_ADDR_24	mov edx [rbx] and edx CONST jnz JUMP_ADDR_24	mov rcx fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] rcx jz JUMP_ADDR_23	mov eax fs:xxx test eax eax jnz JUMP_ADDR_39	cmpxchg [CONST_VAR] r12d	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] rcx	add [CONST_VAR+CONST] CONST	mov eax [rbx+CONST] test eax eax jg JUMP_ADDR_8	mov rax [rbx+CONST] cmp [rbx+CONST] rax ja JUMP_ADDR_9	jmp JUMP_ADDR_11	mov eax cs:xxx sub eax CONST	mov cs:xxx eax test eax eax jnz JUMP_ADDR_31	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_37	sub cs:xxx CONST	test r13 r13 jz JUMP_ADDR_33	lea rdi [rsp+CONST+var_xxx] xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_45	add rsp CONST mov eax r15d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST+var_xxx] CONST lea rax sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] jmp JUMP_ADDR_10	xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_31	xor r10d r10d mov edx CONST mov esi CONST mov rdi r14 mov eax CONST syscall jmp JUMP_ADDR_31	mov eax edx lock CONST r12d jz JUMP_ADDR_22	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_22	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_16	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_16	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	mov rdi r14 call sub_xxx jmp JUMP_ADDR_5	call sub_xxx	endbr64	mov rbx fs:xxx cmp rbx cs:xxx lea r15 GLOBAL_VAR jz JUMP_ADDR_51	mov eax fs:xxx test eax eax jnz JUMP_ADDR_88	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx rbx	mov eax cs:xxx mov rbx cs:xxx lea edx [rax+CONST] mov cs:xxx edx test rbx rbx jz JUMP_ADDR_74	xor r14d r14d jmp JUMP_ADDR_54	mov [rbx+CONST] CONST mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_73	mov ebp [rbx] and ebp CONST jnz JUMP_ADDR_53	mov edx [rbx+CONST] test edx edx jz JUMP_ADDR_53	mov rdx [rbx+CONST] test rdx rdx jz JUMP_ADDR_63	mov rsi fs:xxx cmp rsi [rdx+CONST] jz JUMP_ADDR_90	mov eax fs:xxx mov ecx CONST test eax eax jnz JUMP_ADDR_86	cmpxchg [rdx] ecx	test eax eax jz JUMP_ADDR_91	call sub_xxx cmp ebp CONST jnz JUMP_ADDR_81	mov ebp CONST	cmp cs:xxx CONST jnz JUMP_ADDR_65	mov eax [rbx] test al CONST jz JUMP_ADDR_82	mov rcx [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rcx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_87	xor edx edx xor esi esi mov rdi rbx call callfunc_xxx mov eax [rbx+CONST] test eax eax jle JUMP_ADDR_68	xor ecx ecx xor edx edx xor esi esi mov rdi rbx call sub_xxx	cmp ebp CONST jz JUMP_ADDR_53	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_53	mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_53	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_92	sub [CONST_VAR] CONST jmp JUMP_ADDR_53	mov eax cs:xxx sub eax CONST	mov cs:xxx eax test eax eax jnz JUMP_ADDR_77	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_84	sub cs:xxx CONST	test r13 r13 jz JUMP_ADDR_79	lea rdi [rsp+CONST+var_xxx] xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_94	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov ebp CONST jmp JUMP_ADDR_56	or eax CONST mov [rbx] eax mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rax jmp JUMP_ADDR_65	mov [rsp+CONST+var_xxx] CONST lea rax sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_47	xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_77	xor r10d r10d mov edx CONST mov esi CONST mov rdi r15 mov eax CONST syscall jmp JUMP_ADDR_77	mov eax r14d lock CONST ecx setnz al movzx eax al jmp JUMP_ADDR_60	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_66	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_50	mov rdi r15 call sub_xxx jmp JUMP_ADDR_50	add [rdx+CONST] CONST jmp JUMP_ADDR_63	mov rax [rbx+CONST] mov [rax+CONST] rsi mov [rax+CONST] CONST jmp JUMP_ADDR_63	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_53	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_53	call sub_xxx
[ph]libcap-git-setcap__flushlbf
endbr64 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rbp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax test rbp rbp jz JUMP_ADDR_30	mov rdi rsp xor edx edx lea rsi sub_xxx call callfunc_xxx	mov rbx fs:xxx cmp cs:xxx rbx lea r12 GLOBAL_VAR jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_38	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx rbx	mov eax cs:xxx mov rbx cs:xxx lea edx [rax+CONST] mov cs:xxx edx test rbx rbx jz JUMP_ADDR_23	mov r13d CONST jmp JUMP_ADDR_18	mov r14 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r14 jz JUMP_ADDR_12	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_31	cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] r14	mov eax [rbx] add [CONST_VAR+CONST] CONST and eax CONST cmp eax CONST jz JUMP_ADDR_20	test [rbx] CONST jnz JUMP_ADDR_17	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_17	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_34	sub [CONST_VAR] CONST	mov cs:xxx CONST mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_22	mov edx [rbx] mov cs:xxx rbx mov ecx edx and ecx CONST jz JUMP_ADDR_8	and edx CONST cmp edx CONST jnz JUMP_ADDR_17	mov r14 [rbx+CONST] mov rax CONST sub rax CONST mov rdx r14 sub rdx CONST cmp rax rdx jbe JUMP_ADDR_33	mov esi CONST mov rdi rbx call callfunc_xxx jmp JUMP_ADDR_13	mov eax cs:xxx sub eax CONST	mov cs:xxx eax test eax eax jnz JUMP_ADDR_26	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_36	sub cs:xxx CONST	test rbp rbp jz JUMP_ADDR_28	mov rdi rsp xor esi esi call callfunc_xxx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_40	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov [rsp+CONST] CONST lea rax sub_xxx mov [rsp] rax jmp JUMP_ADDR_2	mov eax ecx lock CONST edx jz JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_21	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_17	xor r10d r10d mov edx CONST mov esi CONST mov eax r13d syscall jmp JUMP_ADDR_17	xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_26	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_26	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	mov rdi r12 call sub_xxx jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap__IO_init_marker
endbr64 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov edx [CONST_VAR] mov [CONST_VAR+CONST] rsi test dh CONST jnz JUMP_ADDR_5	mov rax [rbx+CONST] and dh CONST jz JUMP_ADDR_4	sub eax [rbx+CONST]	mov [rbp+CONST] eax mov rax [rbx+CONST] mov [rbp+CONST] rax mov [rbx+CONST] rbp add rsp CONST pop rbx pop rbp retn	sub eax [rbx+CONST] jmp JUMP_ADDR_3	mov rdi rsi call sub_xxx mov edx [rbx] jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_remove_marker
endbr64 mov rdx [CONST_VAR+CONST] mov rax [rdx+CONST] test rax rax jz JUMP_ADDR_5	cmp rdi rax jnz JUMP_ADDR_4	jmp JUMP_ADDR_6	cmp rdi rax jz JUMP_ADDR_7	mov rdx rax mov rax [rax] test rax rax jnz JUMP_ADDR_3	retn	add rdx CONST	mov rax [CONST_VAR] mov [rdx] rax retn
[ph]libcap-git-setcap__IO_marker_difference
endbr64 mov eax [CONST_VAR+CONST] sub eax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__IO_marker_delta
endbr64 mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_4	mov rdx [rax+CONST] test [rax] CONST jnz JUMP_ADDR_3	sub edx [rax+CONST] mov eax [CONST_VAR+CONST] sub eax edx retn	sub edx [rax+CONST] mov eax [CONST_VAR+CONST] sub eax edx retn	mov eax CONST retn
[ph]libcap-git-setcap__IO_seekmark
endbr64 mov rax rdi cmp [CONST_VAR+CONST] rdi jnz JUMP_ADDR_7	mov ecx [CONST_VAR] movsxd rdx [CONST_VAR+CONST] mov edi ecx and edi CONST test edx edx js JUMP_ADDR_5	mov rsi [rax+CONST] test edi edi jz JUMP_ADDR_4	and ch CONST mov rdi [rax+CONST] mov [rax] ecx mov rcx [rax+CONST] mov [rax+CONST] rdi mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax+CONST] rsi mov [rax+CONST] rcx mov rsi rcx	add rsi rdx mov [rax+CONST] rsi xor eax eax retn	mov rsi [rax+CONST] test edi edi jnz JUMP_ADDR_4	or ch CONST mov rdi [rax+CONST] mov [rax] ecx mov rcx [rax+CONST] mov [rax+CONST] rsi mov rsi [rax+CONST] mov [rax+CONST] rcx mov [rax+CONST] rsi mov rsi rcx add rsi rdx mov [rax+CONST] rdi mov [rax+CONST] rsi xor eax eax retn	mov eax CONST retn
[ph]libcap-git-setcap__IO_unsave_markers
endbr64 push rbx cmp [CONST_VAR+CONST] CONST mov rbx rdi jz JUMP_ADDR_2	mov [CONST_VAR+CONST] CONST	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_6	mov eax [rbx] test ah CONST jz JUMP_ADDR_5	and ah CONST mov [rbx+CONST] rdi mov [rbx] eax mov rax [rbx+CONST] mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rdi mov rdi rax	call sub_xxx mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST	pop rbx retn
[ph]libcap-git-setcap__IO_default_pbackfail
endbr64 push r15 push r14 push r13 push r12 push rbp mov ebp esi push rbx mov rbx rdi sub rsp CONST mov r13d [CONST_VAR] mov r12 [CONST_VAR+CONST] mov r14 [CONST_VAR+CONST] mov eax r13d and eax CONST cmp r12 r14 jbe JUMP_ADDR_5	test eax eax jz JUMP_ADDR_8	lea rax [r12+CONST] mov [rbx+CONST] rax mov [r12+CONST] bpl	movzx eax bpl	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test eax eax jz JUMP_ADDR_12	mov r15 [rbx+CONST] sub r15 r14 lea rcx [r15+r15] mov rdi rcx mov [rsp+CONST] rcx call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_18	mov r12 [rsp+CONST] mov rdx r15 mov rsi r14 sub r12 r15 add r12 rax mov rdi r12 call sub_xxx mov rdi r14 call sub_xxx mov rcx [rsp+CONST] mov [rbx+CONST] r13 mov [rbx+CONST] r12 add r13 rcx mov [rbx+CONST] r13 jmp JUMP_ADDR_2	movzx eax [r12+CONST] cmp eax esi jz JUMP_ADDR_17	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_15	mov rsi r12 mov rdi rbx call sub_xxx test eax eax jnz JUMP_ADDR_18	mov rcx [rbx+CONST] mov r13d [rbx] mov r12 [rbx+CONST] mov rax [rbx+CONST] jmp JUMP_ADDR_14	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_15	mov rcx r12 mov r12 [rbx+CONST]	mov rdx [rbx+CONST] or r13d CONST mov [rbx+CONST] r12 mov [rbx] r13d mov [rbx+CONST] rdx mov [rbx+CONST] rax mov [rbx+CONST] rcx jmp JUMP_ADDR_2	mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_18	lea rdx [rax+CONST] mov rcx r12 mov [rbx+CONST] rdx mov r12 rdx jmp JUMP_ADDR_14	sub r12 CONST mov [CONST_VAR+CONST] r12 jmp JUMP_ADDR_3	mov eax CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_default_seek
endbr64 mov rax CONST retn
[ph]libcap-git-setcap__IO_default_stat
endbr64 mov eax CONST retn
[ph]libcap-git-setcap__IO_default_read
endbr64 mov rax CONST retn
[ph]libcap-git-setcap__IO_default_write
endbr64 xor eax eax retn
[ph]libcap-git-setcap__IO_default_showmanyc
endbr64 mov eax CONST retn
[ph]libcap-git-setcap__IO_default_imbue
endbr64 retn
[ph]libcap-git-setcap__IO_iter_begin
endbr64 mov rax cs:xxx retn
[ph]libcap-git-setcap__IO_iter_end
endbr64 xor eax eax retn
[ph]libcap-git-setcap__IO_iter_next
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__IO_iter_file
endbr64 mov rax rdi retn
[ph]libcap-git-setcap__IO_list_lock
endbr64 push rbx mov rbx fs:xxx cmp cs:xxx rbx jz JUMP_ADDR_4	mov eax fs:xxx test eax eax jnz JUMP_ADDR_5	mov edx CONST cmpxchg cs:xxx edx	mov cs:xxx rbx	add cs:xxx CONST pop rbx retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_list_unlock
endbr64 mov eax cs:xxx sub eax CONST mov cs:xxx eax jnz JUMP_ADDR_4	mov cs:xxx CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_3	sub cs:xxx CONST retn	xchg eax cs:xxx cmp eax CONST jg JUMP_ADDR_5	retn	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall retn
[ph]libcap-git-setcap__IO_list_resetlock
endbr64 mov cs:xxx CONST mov cs:xxx CONST retn
[ph]libcap-git-setcap__IO_str_underflow
endbr64 mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] cmp rax rdx jbe JUMP_ADDR_2	mov [CONST_VAR+CONST] rax mov rdx rax	mov ecx [CONST_VAR] mov esi ecx and esi CONST cmp esi CONST jz JUMP_ADDR_6	mov rax [CONST_VAR+CONST]	cmp rax rdx jnb JUMP_ADDR_7	movzx eax [rax] retn	and ch CONST mov [CONST_VAR+CONST] rax mov [CONST_VAR] ecx mov rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_4	mov eax CONST retn
[ph]libcap-git-setcap__IO_str_overflow
endbr64 push r15 push r14 push r13 push r12 push rbp mov ebp esi push rbx sub rsp CONST mov eax [CONST_VAR] test al CONST jnz JUMP_ADDR_16	mov edx eax mov rbx rdi and edx CONST cmp edx CONST jz JUMP_ADDR_15	mov rdx [CONST_VAR+CONST]	mov r14 [rbx+CONST] mov r12 [rbx+CONST] xor eax eax mov rcx rdx sub r12 r14 cmp ebp CONST setz al sub rcx [rbx+CONST] add rax r12 cmp rax rcx ja JUMP_ADDR_10	test [rbx] CONST jnz JUMP_ADDR_17	lea r15 [r12+r12+CONST] cmp r12 r15 ja JUMP_ADDR_17	mov rdi r15 call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_17	test r14 r14 jz JUMP_ADDR_9	mov rdx r12 mov rsi r14 mov rdi rax call sub_xxx mov rdi r14 call sub_xxx mov [rbx+CONST] CONST	mov rdx r15 lea rdi [r13+r12+CONST] xor esi esi sub rdx r12 call sub_xxx lea rdx [r13+r15+CONST] mov rsi r13 mov rdi rbx mov ecx CONST call sub_xxx mov rax [rbx+CONST] mov rdx [rbx+CONST] mov [rbx+CONST] r13 sub rax r14 sub rdx r14 add rax r13 add rdx r13 mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rdx sub rax r14 add rax r13 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r14 add rax r13 mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rax	cmp ebp CONST jz JUMP_ADDR_12	lea rax [rdx+CONST] mov [rbx+CONST] rax mov [rdx] bpl mov rdx [rbx+CONST]	mov eax ebp cmp [rbx+CONST] rdx jnb JUMP_ADDR_14	mov [rbx+CONST] rdx	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	or ah CONST mov rdx [CONST_VAR+CONST] mov [CONST_VAR] eax mov rax [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_3	xor eax eax cmp esi CONST setnz al add rsp CONST pop rbx neg eax pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax CONST jmp JUMP_ADDR_14
[ph]libcap-git-setcap_enlarge_userbuf
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r13 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] edx mov rdx [CONST_VAR+CONST] sub rdx r13 cmp rdx rsi jge JUMP_ADDR_10	mov rax [CONST_VAR+CONST] mov r12d [CONST_VAR] mov rbx rdi mov r14 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax and r12d CONST jz JUMP_ADDR_4	mov r12d CONST	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rcx [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rdx mov rbp rsi mov rdi rcx mov [rsp+CONST+var_xxx] rcx call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_2	test r13 r13 mov rcx [rsp+CONST+var_xxx] jz JUMP_ADDR_7	mov rdx [rsp+CONST+var_xxx] mov rsi r13 mov rdi rax call sub_xxx mov rdi r13 call sub_xxx mov [rbx+CONST] CONST mov rcx [rsp+CONST+var_xxx]	lea rdx [r15+rcx] mov rsi r15 mov ecx CONST mov rdi rbx sub r14 [rsp+CONST+var_xxx] call sub_xxx mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_11	mov rax [rbx+CONST] mov [rbx+CONST] r15 sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rax cmp rbp r14 jl JUMP_ADDR_13	mov rdx rbp lea rdi [r15+r14] xor esi esi sub rdx r14 call sub_xxx jmp JUMP_ADDR_3	xor r12d r12d jmp JUMP_ADDR_3	mov rax [rbx+CONST] mov [rbx+CONST] r15 sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] sub rax r13 add rax r15 mov [rbx+CONST] rax mov rax [rbx+CONST] mov [rbx+CONST] rax cmp rbp r14 jl JUMP_ADDR_13	mov rdx rbp lea rdi [r15+r14] xor esi esi xor r12d r12d sub rdx r14 call sub_xxx jmp JUMP_ADDR_3	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__IO_str_seekoff
endbr64 push r15 push r14 mov r14d edx push r13 mov r13 rsi push r12 push rbp mov ebp ecx sub rsp CONST mov edx [CONST_VAR] mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] test ebp ebp jnz JUMP_ADDR_30	mov ebp edx and ebp CONST jz JUMP_ADDR_21	test dh CONST jnz JUMP_ADDR_24	cmp rax rcx ja JUMP_ADDR_44	mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov ebp CONST cmp rax rdx cmovb rax rdx mov r15 rax sub r15 rcx	test r14d r14d jz JUMP_ADDR_36	mov r12 r15 cmp r14d CONST jnz JUMP_ADDR_8	mov r12 [CONST_VAR+CONST] sub r12 rcx	mov rdx r12 neg rdx cmp rdx r13 jg JUMP_ADDR_45	mov rdx CONST sub rdx r12 cmp rdx r13 jl JUMP_ADDR_45	add r12 r13	cmp r12 r15 jg JUMP_ADDR_40	add rcx r12 mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rcx	and ebp CONST jz JUMP_ADDR_29	test r14d r14d jz JUMP_ADDR_39	cmp r14d CONST jnz JUMP_ADDR_38	mov rdx [CONST_VAR+CONST] mov rax [CONST_VAR+CONST] mov r12 rdx sub r12 rax sub rax rdx mov rdx CONST sub rdx r12 cmp r13 rdx setnle dl	cmp r13 rax jl JUMP_ADDR_45	test dl dl jnz JUMP_ADDR_45	add r12 r13 cmp r12 r15 jg JUMP_ADDR_42	mov rax [CONST_VAR+CONST] add rax r12 mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_29	cmp rax rcx ja JUMP_ADDR_25	test dh CONST jnz JUMP_ADDR_25	mov rcx [CONST_VAR+CONST] jmp JUMP_ADDR_28	mov ebp CONST nop [rax]	test dh CONST jnz JUMP_ADDR_35	mov rcx [CONST_VAR+CONST]	and dh CONST mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rax mov [CONST_VAR] edx test ebp ebp jnz JUMP_ADDR_33	mov r12 [CONST_VAR+CONST] sub r12 rcx	add rsp CONST mov rax r12 pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp rax rcx ja JUMP_ADDR_25	test dh CONST jnz JUMP_ADDR_25	mov rcx [CONST_VAR+CONST]	mov rdx [CONST_VAR+CONST] mov r12 CONST cmp rax rdx cmovb rax rdx mov r15 rax sub r15 rcx test bpl CONST jz JUMP_ADDR_13	jmp JUMP_ADDR_5	mov rcx [CONST_VAR+CONST] jmp JUMP_ADDR_27	test r13 r13 js JUMP_ADDR_45	mov r12 r13 jmp JUMP_ADDR_11	mov rdx CONST mov rax r15 mov r12 r15 sub rdx r15 neg rax cmp r13 rdx setnle dl jmp JUMP_ADDR_17	xor edx edx xor eax eax xor r12d r12d jmp JUMP_ADDR_17	mov edx CONST mov rsi r12 mov [rsp+CONST] rdi call sub_xxx mov rdi [rsp+CONST] test eax eax jnz JUMP_ADDR_43	mov rcx [CONST_VAR+CONST] lea rax [rcx+r15] jmp JUMP_ADDR_12	xor edx edx mov rsi r12 mov [rsp+CONST] rdi call sub_xxx mov rdi [rsp+CONST] test eax eax jz JUMP_ADDR_20	mov r12 CONST jmp JUMP_ADDR_29	mov ebp CONST jmp JUMP_ADDR_25	mov rax CONST mov r12 CONST mov fs:xxx CONST jmp JUMP_ADDR_29
[ph]libcap-git-setcap__IO_str_pbackfail
endbr64 test [CONST_VAR] CONST jz JUMP_ADDR_2	cmp esi CONST jnz JUMP_ADDR_3	jmp UNK_JUMP_ADDR	mov eax CONST retn
[ph]libcap-git-setcap__IO_str_finish
endbr64 push rbp mov rbp rdi mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_2	test [rbp+CONST] CONST jz JUMP_ADDR_3	mov [rbp+CONST] CONST mov rdi rbp xor esi esi pop rbp jmp UNK_JUMP_ADDR	call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_str_init_static_internal
endbr64 push r13 mov r13 rcx push r12 mov r12 rsi push rbp push rbx mov rbx rdi sub rsp CONST test rdx rdx jnz JUMP_ADDR_4	xor esi esi mov rdi r12 call sub_xxx mov rbp rax	xor ecx ecx mov rdx rbp mov rsi r12 mov rdi rbx call sub_xxx mov rax r13 test r13 r13 jz JUMP_ADDR_5	mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] rbp mov [rbx+CONST] r13 mov [rbx+CONST] rax mov [rbx+CONST] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	add rdx rsi mov rax CONST cmp rsi rdx cmovb rax rdx mov rbp rax jmp JUMP_ADDR_2	mov r13 rbp mov rax r12 mov rbp r12 jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_str_init_static
endbr64 push r13 mov eax CONST mov r13 rcx push r12 mov r12 rsi push rbp mov rbp rdi push rbx sub rsp CONST test edx edx cmovs edx eax movsxd rdx edx test rdx rdx jnz JUMP_ADDR_4	xor esi esi mov rdi r12 call sub_xxx mov rbx rax	xor ecx ecx mov rdx rbx mov rsi r12 mov rdi rbp call sub_xxx mov rax r13 test r13 r13 jz JUMP_ADDR_5	mov [rbp+CONST] r12 mov [rbp+CONST] r12 mov [rbp+CONST] r12 mov [rbp+CONST] rbx mov [rbp+CONST] r13 mov [rbp+CONST] rax mov [rbp+CONST] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	add rdx rsi mov rax CONST cmp rsi rdx cmovb rax rdx mov rbx rax jmp JUMP_ADDR_2	mov r13 rbx mov rax r12 mov rbx r12 jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_str_init_readonly
endbr64 test edx edx mov eax CONST push r12 mov r12 rsi cmovs edx eax push rbp push rbx mov rbx rdi movsxd rdx edx test rdx rdx jnz JUMP_ADDR_3	xor esi esi mov rdi r12 call sub_xxx mov rbp rax	mov rdx rbp mov rsi r12 mov rdi rbx xor ecx ecx call sub_xxx mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] r12 mov [rbx+CONST] rbp or [rbx] CONST mov [rbx+CONST] CONST pop rbx pop rbp pop r12 retn	add rdx rsi mov rax CONST cmp rsi rdx cmovb rax rdx mov rbp rax jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_str_count
endbr64 mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] cmp rax rdx cmovb rax rdx sub rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap___libc_alloca_cutoff
endbr64 mov rax fs:xxx shr rax CONST mov edx CONST sub rax CONST cmp rax CONST ja JUMP_ADDR_2	mov rax fs:xxx mov rdx rax shr rdx CONST cmp rax CONST mov eax CONST cmovbe rdx rax	xor eax eax cmp rdx rdi setnb al retn
[ph]libcap-git-setcap___lll_lock_wait_private
endbr64 mov eax [CONST_VAR] cmp eax CONST jz JUMP_ADDR_2	mov eax CONST xchg eax [CONST_VAR] test eax eax jz JUMP_ADDR_6	nop xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall cmp rax CONST jbe JUMP_ADDR_1	add eax CONST cmp eax CONST ja JUMP_ADDR_5	mov edx CONST bt rdx rax jb JUMP_ADDR_1	push rax lea rdi GLOBAL_VAR call sub_xxx	retn
[ph]libcap-git-setcap__dl_tunable_set_arena_max
endbr64 mov rax [CONST_VAR] nop mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_arena_test
endbr64 mov rax [CONST_VAR] nop mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_tcache_max
endbr64 mov rax [CONST_VAR] cmp rax CONST jbe JUMP_ADDR_2	retn	nop mov cs:xxx rax add rax CONST mov edx CONST cmp rax CONST jbe JUMP_ADDR_4	and rax CONST sub rax CONST shr rax CONST lea rdx [rax+CONST]	mov cs:xxx rdx retn
[ph]libcap-git-setcap__dl_tunable_set_tcache_count
endbr64 mov rax [CONST_VAR] cmp rax CONST jbe JUMP_ADDR_2	retn	nop mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_tcache_unsorted_limit
endbr64 mov rax [CONST_VAR] nop mov cs:xxx rax retn
[ph]libcap-git-setcap_mem2mem_check
mov r8 rdi test rdi rdi jz JUMP_ADDR_5	lea rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov r10 rax shr rax CONST shr r10 CONST xor r10d eax mov eax CONST cmp r10b CONST cmovz r10d eax mov rax rdx and rdx CONST shr rax CONST xor rax CONST movzx edi r10b and eax CONST lea r9 [CONST_VAR+CONST] lea rdx [rdx+rax*8+CONST] cmp rdx rsi jbe JUMP_ADDR_4	xchg ax ax	mov rax rdx mov ecx CONST sub rax rsi cmp rax rcx cmova rax rcx cmp rax rdi cmovz rax r9 mov [r8+rdx] al sub rdx rax cmp rsi rdx jb JUMP_ADDR_3	mov [r8+CONST_VAR] r10b	mov rax r8 retn
[ph]libcap-git-setcap_mem2chunk_check
mov rdx rdi mov r9 rsi test dil CONST jnz JUMP_ADDR_16	lea r8 [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] mov rax r8 mov r10 r8 shr rax CONST shr r10 CONST mov rcx rdi mov esi eax and rcx CONST mov eax CONST xor esi r10d cmp sil CONST cmovz esi eax test dil CONST jz JUMP_ADDR_18	mov rax cs:xxx mov r10 rdx sub rax CONST and r10 rax lea r11 [r10+CONST] test r11 CONST jz JUMP_ADDR_8	lea r11 [r10+CONST] cmp r11 CONST ja JUMP_ADDR_8	lea r11 [r10+CONST] test r11 CONST jz JUMP_ADDR_8	lea r11 [r10+CONST] test r11 CONST jz JUMP_ADDR_8	lea r11 [r10+CONST] test r11 CONST jnz JUMP_ADDR_38	nop [rax+CONST]	and edi CONST cmp rdi CONST jnz JUMP_ADDR_16	mov rdx [rdx+CONST] mov rdi r8 sub rdi rdx add rdx rcx or rdx rdi test rdx rax jnz JUMP_ADDR_16	lea rax [rcx+CONST] lea rcx [r8+rax] movzx edx [rcx] cmp sil dl jnz JUMP_ADDR_14	jmp JUMP_ADDR_34	lea rcx [rdx+CONST] cmp rcx rax ja JUMP_ADDR_16	sub rax rdx lea rcx [r8+rax] movzx edx [rcx] cmp dl sil jz JUMP_ADDR_34	test rdx rdx jnz JUMP_ADDR_12	nop [rax+CONST]	xor r8d r8d	mov rax r8 retn	mov eax cs:xxx and eax CONST jnz JUMP_ADDR_21	mov r10 cs:xxx cmp r10 r8 ja JUMP_ADDR_16	lea r11 [r8+rcx] add r10 cs:xxx cmp r11 r10 jnb JUMP_ADDR_16	cmp rcx CONST jbe JUMP_ADDR_16	test dil CONST jnz JUMP_ADDR_16	test [r8+rcx+CONST] CONST jz JUMP_ADDR_16	and edi CONST jnz JUMP_ADDR_28	mov rdx [rdx+CONST] test dl CONST jnz JUMP_ADDR_16	mov rdi r8 sub rdi rdx test eax eax jz JUMP_ADDR_36	mov rax [CONST_VAR+CONST] and rax CONST cmp rdx rax jnz JUMP_ADDR_16	lea rdx [rcx+CONST] lea rcx [r8+rdx] movzx eax [rcx] cmp sil al jnz JUMP_ADDR_32	jmp JUMP_ADDR_34	lea rcx [rax+CONST] cmp rcx rdx ja JUMP_ADDR_16	sub rdx rax lea rcx [r8+rdx] movzx eax [rcx] cmp al sil jz JUMP_ADDR_34	test rax rax jnz JUMP_ADDR_30	jmp JUMP_ADDR_16	mov eax esi not eax mov [rcx] al test r9 r9 jz JUMP_ADDR_17	mov [r9] rcx jmp JUMP_ADDR_17	cmp cs:xxx rdi jbe JUMP_ADDR_27	jmp JUMP_ADDR_16	cmp r10 CONST jz JUMP_ADDR_8	jmp JUMP_ADDR_16
[ph]libcap-git-setcap__dl_tunable_set_trim_threshold
endbr64 mov rax [CONST_VAR] nop mov cs:xxx CONST mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_top_pad
endbr64 mov rax [CONST_VAR] nop mov cs:xxx CONST mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_mmap_threshold
endbr64 mov rax [CONST_VAR] cmp rax CONST jbe JUMP_ADDR_2	retn	nop mov cs:xxx CONST mov cs:xxx rax retn
[ph]libcap-git-setcap__dl_tunable_set_mmaps_max
endbr64 mov rax [CONST_VAR] nop mov cs:xxx CONST mov cs:xxx eax retn
[ph]libcap-git-setcap__dl_tunable_set_perturb_byte
endbr64 mov rax [CONST_VAR] nop mov cs:xxx eax retn
[ph]libcap-git-setcap__dl_tunable_set_mxfast
endbr64 mov rax [CONST_VAR] cmp rax CONST jbe JUMP_ADDR_2	retn	nop lea rdx [rax+CONST] and rdx CONST cmp rax CONST mov eax CONST cmova rax rdx mov cs:xxx rax retn
[ph]libcap-git-setcap_malloc_printerr
mov rdx rdi sub rsp CONST lea rsi GLOBAL_VAR xor eax eax mov edi CONST call sub_xxx nop [rax+rax+CONST]
[ph]libcap-git-setcap_top_check
mov rax cs:xxx lea rdx GLOBAL_VAR cmp rax rdx jz JUMP_ADDR_6	mov rdx [rax+CONST] test dl CONST jnz JUMP_ADDR_7	mov rcx rdx and rcx CONST cmp rcx CONST jbe JUMP_ADDR_7	and edx CONST jz JUMP_ADDR_7	test cs:xxx CONST jnz JUMP_ADDR_6	mov rdx cs:xxx add rax rcx add rdx cs:xxx cmp rax rdx jnz JUMP_ADDR_7	retn	sub rsp CONST lea rdi GLOBAL_VAR call sub_xxx xchg ax ax
[ph]libcap-git-setcap_int_mallinfo
push rbp mov r9 rdi mov r10 rsi xor r11d r11d push rbx lea rsi [CONST_VAR+CONST] xor r8d r8d lea rdi [CONST_VAR+CONST] sub rsp CONST	mov rax [CONST_VAR] test rax rax jnz JUMP_ADDR_4	jmp JUMP_ADDR_6	mov rdx [rax+CONST] mov rcx [rax+CONST] add r11d CONST and rdx CONST add r8 rdx lea rdx [rax+CONST] mov rax rcx shr rdx CONST xor rax rdx cmp rcx rdx jz JUMP_ADDR_6	test al CONST jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx	add rsi CONST cmp rdi rsi jnz JUMP_ADDR_1	mov rax [r9+CONST] lea rbx [r9+CONST] mov ecx CONST mov rbp [rax+CONST] and rbp CONST lea rsi [rbp+r8+CONST] nop [rax+CONST]	mov rax [CONST_VAR+CONST] cmp rax rdi jz JUMP_ADDR_11	nop [rax+CONST]	mov rdx [rax+CONST] mov rax [rax+CONST] add ecx CONST and rdx CONST add rsi rdx cmp rax rdi jnz JUMP_ADDR_10	add rdi CONST cmp rbx rdi jnz JUMP_ADDR_8	mov rax [r9+CONST] add [r10] rax movsxd r11 r11d movsxd rcx ecx add [r10+CONST] r11 mov rdx rax lea rax GLOBAL_VAR add [r10+CONST] rcx sub rdx rsi add [r10+CONST] rsi add [r10+CONST] rdx add [r10+CONST] r8 cmp r9 rax jz JUMP_ADDR_14	add rsp CONST pop rbx pop rbp retn	movsxd rax cs:xxx mov [r10+CONST] rbp mov [r10+CONST] rax mov rax cs:xxx mov [r10+CONST] CONST mov [r10+CONST] rax jmp JUMP_ADDR_13
[ph]libcap-git-setcap___malloc_assert
sub rsp CONST mov r9d edx mov r10 rcx mov r8 rsi mov rdx cs:xxx lea rax GLOBAL_VAR lea rcx unk_xxx lea rsi GLOBAL_VAR cmp [rdx] CONST push rdi push rax cmovnz rcx rax xor edi edi xor eax eax push r10 call sub_xxx mov rdi cs:xxx add rsp CONST call sub_xxx call sub_xxx
[ph]libcap-git-setcap_new_heap
push r13 add rsi rdi push r12 push rbp push rbx sub rsp CONST mov rbx cs:xxx cmp rsi CONST jbe JUMP_ADDR_12	cmp rsi CONST ja JUMP_ADDR_13	mov rdi cs:xxx lea rax [CONST_VAR+rbx+CONST] neg rbx and rbx rax test rdi rdi jz JUMP_ADDR_6	xor r9d r9d mov r8d CONST mov ecx CONST xor edx edx mov esi CONST call sub_xxx mov cs:xxx CONST mov r12 rax cmp rax CONST jz JUMP_ADDR_6	test eax CONST jz JUMP_ADDR_10	mov esi CONST mov rdi rax call sub_xxx	xor r9d r9d xor edx edx xor edi edi mov r8d CONST mov ecx CONST mov esi CONST call sub_xxx cmp rax CONST jz JUMP_ADDR_15	lea r12 [rax+CONST] and r12 CONST mov r13 r12 lea rbp [r12+CONST] sub r13 rax jnz JUMP_ADDR_19	mov cs:xxx rbp	mov esi CONST mov rdi rbp sub rsi r13 call sub_xxx	mov edx CONST mov rsi rbx mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_18	mov [r12+CONST] rbx mov [r12+CONST] rbx nop add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	mov esi CONST jmp JUMP_ADDR_2	mov esi CONST cmp rdi CONST jbe JUMP_ADDR_2	add rsp CONST xor r12d r12d pop rbx mov rax r12 pop rbp pop r12 pop r13 retn	xor r9d r9d mov r8d CONST mov ecx CONST xor edx edx mov esi CONST xor edi edi call sub_xxx mov r12 rax cmp rax CONST jz JUMP_ADDR_14	test eax CONST jz JUMP_ADDR_10	nop [rax+rax+CONST]	mov esi CONST mov rdi r12 call sub_xxx jmp JUMP_ADDR_14	mov rsi r13 mov rdi rax call sub_xxx jmp JUMP_ADDR_9
[ph]libcap-git-setcap_munmap_chunk
sub rsp CONST mov rdx [CONST_VAR+CONST] mov rax cs:xxx mov rcx rdx and rcx CONST and edx CONST jz JUMP_ADDR_4	mov rsi [CONST_VAR] mov r8 rdi sub r8 [CONST_VAR] sub rax CONST add rdi CONST mov rdx r8 add rsi rcx and rdi rax or rdx rsi and rax rdx lea rdx [CONST_VAR+CONST] and rdx rdi or rax rdx jnz JUMP_ADDR_3	lock CONST mov rax rsi neg rax lock CONST rax mov rdi r8 add rsp CONST jmp UNK_JUMP_ADDR	lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_alloc_perturb
mov eax cs:xxx test eax eax jnz JUMP_ADDR_2	retn	xor al CONST mov rdx rsi mov esi eax jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_mremap_chunk
push r12 mov rdx cs:xxx push rbp push rbx mov rcx [CONST_VAR+CONST] mov r12 [CONST_VAR] mov rbp rcx and rbp CONST and ecx CONST jz JUMP_ADDR_13	mov rax rdi sub rdi r12 lea r8 [rdx+CONST] add rbp r12 mov r9 rsi mov rcx rdi lea rsi [rax+CONST] and rsi r8 or rcx rbp and rcx r8 lea r8 [CONST_VAR+CONST] and rsi r8 or rcx rsi jnz JUMP_ADDR_11	lea rcx [rdx+r9+CONST] neg rdx add rcx r12 and rdx rcx mov rbx rdx cmp rbp rdx jz JUMP_ADDR_10	xor eax eax mov ecx CONST mov rsi rbp call sub_xxx cmp rax CONST jz JUMP_ADDR_12	lea r8 [rax+r12] test r8b CONST jnz JUMP_ADDR_14	cmp [r8] r12 jnz JUMP_ADDR_15	mov rax rbx sub rbx rbp sub rax r12 or rax CONST mov [r8+CONST] rax mov rax rbx lock CONST rax add rbx rax	mov rax cs:xxx cmp rbx rax jbe JUMP_ADDR_9	lock CONST rbx jnz JUMP_ADDR_7	pop rbx mov rax r8 pop rbp pop r12 retn	mov r8 rax pop rbx pop rbp mov rax r8 pop r12 retn	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	xor r8d r8d jmp JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_detach_arena.part.0
sub rsp CONST lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_get_free_list
push r12 cmp cs:xxx CONST push rbp push rbx mov rbx CONST mov rbp fs:xxx jz JUMP_ADDR_14	mov eax fs:xxx test eax eax jnz JUMP_ADDR_15	mov edx CONST cmpxchg cs:xxx edx	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_8	mov rax [r12+CONST] cmp [r12+CONST] CONST mov cs:xxx rax jnz JUMP_ADDR_21	mov [r12+CONST] CONST test rbp rbp jz JUMP_ADDR_8	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_22	sub rax CONST mov [rbp+CONST] rax	mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	sub cs:xxx CONST	test r12 r12 jz JUMP_ADDR_14	nop mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	mov edx CONST cmpxchg [r12] edx	mov fs:xxx r12 mov rax r12 pop rbx pop rbp pop r12 retn	xor r12d r12d pop rbx pop rbp mov rax r12 pop r12 retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_10	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_10	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_13	mov rdi r12 call sub_xxx jmp JUMP_ADDR_13	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap__dl_tunable_set_mallopt_check
endbr64 mov eax [CONST_VAR] test eax eax jz JUMP_ADDR_2	lea rax sub_xxx mov cs:xxx CONST mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax	retn
[ph]libcap-git-setcap___malloc_info.part.0
push r15 xor edx edx mov r15 rdi push r14 lea r14 GLOBAL_VAR push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax lea rax GLOBAL_VAR mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] rax lea rax [rsp+CONST] mov [rsp+CONST] rax lea rax [rsp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] rax	lea eax [rdx+CONST] lea rsi GLOBAL_VAR mov rdi r15 mov [rsp+CONST] eax xor eax eax call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_38	mov edx CONST mov rbx [rsp+CONST] cmpxchg [rbx] edx	mov rax [rsp+CONST] mov rdi [rsp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov r11 [rsp+CONST] mov r13 [rax+CONST] lea r8 [rax+CONST] mov rbx rdi mov r10 [r13+CONST]	mov r9 [r8] test r9 r9 jnz JUMP_ADDR_16	mov [CONST_VAR+CONST] CONST xor ecx ecx mov [CONST_VAR+CONST] CONST mov [CONST_VAR] CONST	imul rcx [CONST_VAR+CONST] add rdi CONST add r8 CONST mov [CONST_VAR+CONST] rcx cmp r11 rdi jnz JUMP_ADDR_4	mov rax [rsp+CONST] mov r8 [rsp+CONST] and r10 CONST mov r12d CONST lea r9 [rax+CONST] mov rax [rsp+CONST] lea r11 [rax+CONST] jmp JUMP_ADDR_10	mov [r8] CONST	add r10 [r8+CONST] add r8 CONST add r9 CONST mov rbp r10 cmp r8 r11 jz JUMP_ADDR_21	mov rdx [r9+CONST] mov [r8] CONST mov [r8+CONST] CONST mov [r8+CONST] CONST mov [r8+CONST] CONST test rdx rdx jz JUMP_ADDR_8	cmp rdx r9 jz JUMP_ADDR_8	mov edi CONST xor ecx ecx mov rsi CONST xor ebp ebp nop [rax+CONST]	mov rax [rdx+CONST] mov rdx [rdx+CONST] add rbp rax cmp rsi rax cmova rsi rax cmp rcx rax cmovb rcx rax mov rax rdi add rdi CONST cmp rdx r9 jnz JUMP_ADDR_13	mov [r8+CONST] rax add r12 rax mov [r8+CONST] rbp mov [r8] rsi mov [r8+CONST] rcx test rax rax jnz JUMP_ADDR_9	jmp JUMP_ADDR_8	mov rax r9 xor ecx ecx jmp JUMP_ADDR_18	mov rsi [rax+CONST] lea rdx [rax+CONST] add rcx CONST shr rdx CONST mov rax rsi xor rax rdx cmp rsi rdx jz JUMP_ADDR_20	test al CONST jz JUMP_ADDR_17	lea rdi GLOBAL_VAR call sub_xxx	mov rax [r9+CONST] add [rsp+CONST] rcx mov [CONST_VAR+CONST] rcx and rax CONST mov rdx rax mov [CONST_VAR+CONST] rax imul rdx rcx add [rsp+CONST] rdx lea rdx [rax+CONST] mov [CONST_VAR] rdx jmp JUMP_ADDR_6	lea rdi GLOBAL_VAR cmp [rsp+CONST] rdi jnz JUMP_ADDR_35	mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] CONST	mov eax fs:xxx test eax eax jnz JUMP_ADDR_42	mov rax [rsp+CONST] sub [rax] CONST	mov rdi [rsp+CONST] add [rsp+CONST] r12 xor r13d r13d add [rsp+CONST] rdi mov rdi [rsp+CONST] add [rsp+CONST] rbp add [rsp+CONST] rdi nop [rax+CONST]	mov r9 [rbx+CONST] cmp r13 CONST jz JUMP_ADDR_29	test r9 r9 jz JUMP_ADDR_29	mov rcx [rbx+CONST] mov r8 [rbx+CONST] mov rsi r14 mov rdi r15 mov rdx [rbx] xor eax eax call sub_xxx	add r13 CONST add rbx CONST cmp r13 CONST jnz JUMP_ADDR_26	mov r9 [rsp+CONST] test r9 r9 jnz JUMP_ADDR_40	mov rbx [rsp+CONST] mov r9 rbp mov r8 r12 mov rdi r15 lea rsi GLOBAL_VAR mov rax [rbx+CONST] mov rdx [rbx+CONST] add [rsp+CONST] rax add [rsp+CONST] rdx push rdx push rax mov rcx [rsp+CONST] xor eax eax mov rdx [rsp+CONST] call sub_xxx pop rax lea rax GLOBAL_VAR pop rdx cmp rbx rax jz JUMP_ADDR_41	mov rbp [rsp+CONST] mov rbx [rsp+CONST] mov rdi r15 xor eax eax mov r8 [rsp+CONST] lea rsi GLOBAL_VAR mov rcx rbp mov rdx rbx call sub_xxx add [rsp+CONST] rbx add [rsp+CONST] rbp	mov rsi r15 lea rdi GLOBAL_VAR lea rbx GLOBAL_VAR call sub_xxx mov rax [rsp+CONST] mov rax [rax+CONST] mov [rsp+CONST] rax cmp rax rbx jz JUMP_ADDR_44	mov edx [rsp+CONST] jmp JUMP_ADDR_1	mov rax r13 xor esi esi xor ecx ecx xor edx edx and rax CONST nop [rax+CONST]	add rdx [rax+CONST] add rcx [rax+CONST] add rsi CONST mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_36	mov [rsp+CONST] rdx mov [rsp+CONST] rcx mov [rsp+CONST] rsi jmp JUMP_ADDR_23	mov rbx [rsp+CONST] xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	mov rdi [rsp+CONST] call sub_xxx jmp JUMP_ADDR_3	mov r8 [rsp+CONST] lea rsi GLOBAL_VAR mov rdi r15 xor eax eax mov rcx [rsp+CONST] mov rdx [rsp+CONST] call sub_xxx jmp JUMP_ADDR_31	mov rbx [rsp+CONST] lea rsi GLOBAL_VAR mov rdi r15 xor eax eax mov rdx [rbx+CONST] mov rcx rdx call sub_xxx mov rax [rbx+CONST] add [rsp+CONST] rax add [rsp+CONST] rax mov [rsp+CONST] rax jmp JUMP_ADDR_33	mov rdi [rsp+CONST] xor eax eax xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_25	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_25	mov eax cs:xxx push [rsp+CONST] lea rsi GLOBAL_VAR mov rdi r15 push [rsp+CONST] push [rsp+CONST] push [rsp+CONST] push cs:xxx push rax xor eax eax mov r9 [rsp+CONST] mov r8 [rsp+CONST] mov rcx [rsp+CONST] mov rdx [rsp+CONST] call sub_xxx add rsp CONST mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_46	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx
[ph]libcap-git-setcap_systrim.constprop.0
mov rax cs:xxx mov rdx cs:xxx push r12 push rbp push rbx mov rbp [rax+CONST] and rbp CONST lea rax [rbp+CONST] cmp rax rdi jbe JUMP_ADDR_3	sub rax rdi neg rdx and rax rdx mov rbx rax jz JUMP_ADDR_3	xor edi edi call cs:xxx mov r12 rax mov rax cs:xxx add rax rbp cmp r12 rax jz JUMP_ADDR_5	xor eax eax	pop rbx pop rbp pop r12 retn	mov rdi rbx neg rdi call cs:xxx mov rax cs:xxx test rax rax jnz JUMP_ADDR_9	xor edi edi call cs:xxx nop test rax rax jz JUMP_ADDR_3	sub r12 rax jz JUMP_ADDR_3	mov rax cs:xxx sub rbp r12 sub cs:xxx r12 or rbp CONST mov [rax+CONST] rbp mov eax CONST jmp JUMP_ADDR_4	call rax jmp JUMP_ADDR_6
[ph]libcap-git-setcap_unlink_chunk.constprop.0
sub rsp CONST mov rcx [CONST_VAR+CONST] mov rax rcx and rax CONST cmp rax [CONST_VAR+rax] jnz JUMP_ADDR_14	mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] cmp rdi [rax+CONST] jnz JUMP_ADDR_12	cmp rdi [rdx+CONST] jnz JUMP_ADDR_12	mov [rax+CONST] rdx mov [rdx+CONST] rax cmp rcx CONST jbe JUMP_ADDR_9	mov rdx [CONST_VAR+CONST] test rdx rdx jz JUMP_ADDR_9	cmp rdi [rdx+CONST] jnz JUMP_ADDR_15	mov rcx [CONST_VAR+CONST] cmp rdi [rcx+CONST] jnz JUMP_ADDR_15	cmp [rax+CONST] CONST jz JUMP_ADDR_10	mov [rdx+CONST] rcx mov rax [CONST_VAR+CONST] mov [rax+CONST] rdx	add rsp CONST retn	cmp rdi rdx jz JUMP_ADDR_13	mov [rax+CONST] rdx mov rdx [CONST_VAR+CONST] mov [rax+CONST] rcx mov [rdx+CONST] rax mov rdx [CONST_VAR+CONST] mov [rdx+CONST] rax jmp JUMP_ADDR_9	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov [rax+CONST] rax mov [rax+CONST] rax jmp JUMP_ADDR_9	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST] nop [rax]
[ph]libcap-git-setcap_malloc_consolidate
push r15 lea rax [CONST_VAR+CONST] mov r15 rdi push r14 push r13 lea r13 [CONST_VAR+CONST] push r12 push rbp push rbx sub rsp CONST mov [CONST_VAR+CONST] CONST mov [rsp+CONST+var_xxx] rax	xor ebx ebx xchg rbx [r13+CONST] test rbx rbx jnz JUMP_ADDR_11	add r13 CONST cmp [rsp+CONST+var_xxx] r13 jnz JUMP_ADDR_1	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test [r8+r10+CONST] CONST jz JUMP_ADDR_18	and rdx CONST mov [r8+CONST] rdx	mov rax [r15+CONST] mov [r15+CONST] rbx mov [rax+CONST] rbx cmp rbp CONST jbe JUMP_ADDR_8	mov [rbx+CONST] CONST mov [rbx+CONST] CONST	mov rcx [rsp+CONST+var_xxx] mov rdx rbp mov [rbx+CONST] rax or rdx CONST mov [rbx+CONST] rdx mov [rbx+CONST] rcx mov [rbx+rbp] rbp	cmp r12 r14 jz JUMP_ADDR_2	mov rbx r9	test bl CONST jnz JUMP_ADDR_19	mov rax [rbx+CONST] mov edx eax shr edx CONST sub edx CONST lea rdx [r15+rdx*8+CONST] cmp r13 rdx jnz JUMP_ADDR_21	mov rbp rax mov r12 [rbx+CONST] lea r14 [rbx+CONST] and rbp CONST shr r14 CONST lea r8 [rbx+rbp] mov r9 r12 mov rdx [r8+CONST] xor r9 r14 mov r10 rdx and r10 CONST test al CONST jnz JUMP_ADDR_16	mov rax [rbx] sub rbx rax add rbp rax mov rdi [rbx+CONST] and rdi CONST cmp rdi rax jnz JUMP_ADDR_20	mov rdi rbx mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx]	cmp [r15+CONST] r8 jnz JUMP_ADDR_4	add rbp r10 or rbp CONST mov [rbx+CONST] rbp mov [r15+CONST] rbx jmp JUMP_ADDR_9	mov rdi r8 mov [rsp+CONST+var_xxx] r9 add rbp r10 call sub_xxx mov r9 [rsp+CONST+var_xxx] jmp JUMP_ADDR_6	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST]
[ph]libcap-git-setcap__int_free
push r15 push r14 push r13 mov r13d edx push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax [CONST_VAR+CONST] mov rbx rax and rbx CONST mov rdx rbx neg rdx cmp rsi rdx ja JUMP_ADDR_46	mov r12 rsi test sil CONST jnz JUMP_ADDR_46	cmp rbx CONST jbe JUMP_ADDR_47	and eax CONST jnz JUMP_ADDR_47	mov rcx fs:xxx mov rbp rdi test rcx rcx jz JUMP_ADDR_8	lea rdx [rbx+CONST] shr rdx CONST cmp cs:xxx rdx jbe JUMP_ADDR_8	mov rdi cs:xxx lea r8 [CONST_VAR+CONST] cmp rcx [CONST_VAR+CONST] jz JUMP_ADDR_102	movzx esi [rcx+rdx*2] mov rax rsi cmp rsi rdi jb JUMP_ADDR_45	cmp rbx cs:xxx ja JUMP_ADDR_20	lea r14 [r12+rbx] mov rax [r14+CONST] cmp rax CONST jbe JUMP_ADDR_48	and rax CONST cmp rax [rbp+CONST] jnb JUMP_ADDR_48	mov eax cs:xxx test eax eax jnz JUMP_ADDR_90	mov [rbp+CONST] CONST shr ebx CONST lea ecx [rbx+CONST] add rcx CONST mov rdx [rbp+rcx*8+CONST] mov eax fs:xxx test eax eax jnz JUMP_ADDR_63	cmp r12 rdx jz JUMP_ADDR_69	lea rax [r12+CONST] shr rax CONST xor rax rdx mov [r12+CONST] rax mov [rbp+rcx*8+CONST] r12	test rdx rdx jz JUMP_ADDR_18	and r13d CONST jz JUMP_ADDR_18	mov rax [rdx+CONST] shr eax CONST cmp ebx eax jnz JUMP_ADDR_58	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_134	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test [r12+CONST] CONST jnz JUMP_ADDR_43	mov eax fs:xxx and r13d CONST jnz JUMP_ADDR_23	test eax eax jnz JUMP_ADDR_117	mov [rsp+CONST+var_xxx] CONST	mov rax [rbp+CONST] lea r13 [r12+rbx] cmp rax r12 jz JUMP_ADDR_109	test [rbp+CONST] CONST jz JUMP_ADDR_110	mov rax [r13+CONST] test al CONST jz JUMP_ADDR_112	mov r14 rax and r14 CONST cmp rax CONST jbe JUMP_ADDR_89	cmp [rbp+CONST] r14 jbe JUMP_ADDR_89	mov esi cs:xxx test esi esi jnz JUMP_ADDR_113	test [r12+CONST] CONST jnz JUMP_ADDR_33	mov rax [r12] sub r12 rax add rbx rax mov rdx [r12+CONST] and rdx CONST cmp rdx rax jnz JUMP_ADDR_120	mov rdi r12 call sub_xxx	cmp [rbp+CONST] r13 jz JUMP_ADDR_88	test [r13+r14+CONST] CONST jz JUMP_ADDR_91	and [r13+CONST] CONST	mov rax [rbp+CONST] lea rdx [rbp+CONST] cmp [rax+CONST] rdx jnz JUMP_ADDR_119	mov [r12+CONST] rax mov [r12+CONST] rdx cmp rbx CONST ja JUMP_ADDR_57	mov [rbp+CONST] r12 mov [rax+CONST] r12 mov rax rbx or rax CONST mov [r12+CONST] rax mov [r12+rbx] rbx	cmp rbx CONST ja JUMP_ADDR_70	mov eax [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_18	mov eax fs:xxx test eax eax jnz JUMP_ADDR_59	sub [rbp+CONST] CONST jmp JUMP_ADDR_18	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_134	add rsp CONST mov rdi r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	mov rsi r8 add eax CONST mov [r12+CONST] rcx shr rsi CONST xor rsi [rcx+rdx*8+CONST] mov [r12+CONST] rsi mov [rcx+rdx*8+CONST] r8 mov [rcx+rdx*2] ax jmp JUMP_ADDR_18	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	test r13d r13d jnz JUMP_ADDR_56	mov eax fs:xxx test eax eax jnz JUMP_ADDR_61	mov eax r13d mov edx CONST cmpxchg [rbp+CONST] edx	mov rax [r14+CONST] mov r8d CONST cmp rax CONST jbe JUMP_ADDR_53	xor r8d r8d and rax CONST cmp rax [rbp+CONST] setnb r8b	mov eax fs:xxx test eax eax jnz JUMP_ADDR_121	sub [rbp+CONST] CONST	test r8d r8d jz JUMP_ADDR_11	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov [r12+CONST] CONST mov [r12+CONST] CONST jmp JUMP_ADDR_38	lea rdi GLOBAL_VAR call sub_xxx	mov r15d [rsp+CONST+var_xxx] xchg r15d [rbp+CONST] cmp r15d CONST jle JUMP_ADDR_18	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall jmp JUMP_ADDR_18	mov edx CONST mov eax r13d lock CONST edx jz JUMP_ADDR_51	mov rdi rbp call sub_xxx jmp JUMP_ADDR_51	mov eax ebx lea rsi [r12+CONST] lea rcx [rbp+rax*8+CONST] shr rsi CONST jmp JUMP_ADDR_68	mov rax rdx xor rax rsi mov [r12+CONST] rax mov rax rdx cmp fs:xxx CONST jz JUMP_ADDR_66	lock	cmpxchg [rcx] r12 cmp rdx rax jz JUMP_ADDR_15	mov rdx rax	cmp rdx r12 jnz JUMP_ADDR_64	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST]	mov eax [rbp+CONST] test eax eax jnz JUMP_ADDR_114	lea rax GLOBAL_VAR cmp rbp rax jz JUMP_ADDR_115	mov r15 [rbp+CONST] mov r14 r15 and r14 CONST cmp [r14] rbp jnz JUMP_ADDR_142	mov rbx cs:xxx mov rdi cs:xxx lea rax [r14+CONST] mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rdi cmp r15 rax jnz JUMP_ADDR_130	mov rax rdi lea rdi [rbx+CONST_VAR+CONST] sub rax CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_82	mov rcx [rdx] add rcx r12 lea rsi [rcx+CONST] mov r12 rcx mov rbx rcx cmp rsi CONST ja JUMP_ADDR_133	mov esi CONST sub rsi rax lea rax [CONST_VAR+r12] cmp rax [rsp+CONST+var_xxx] jb JUMP_ADDR_92	mov rax [CONST_VAR+CONST] sub [rbp+CONST] rax nop lea rax [CONST_VAR+CONST] cmp cs:xxx rax jz JUMP_ADDR_87	mov esi CONST mov r15 r13 call sub_xxx test [r13+CONST] CONST jz JUMP_ADDR_86	lea rcx [r15+r12] test [rsp+CONST+var_xxx] rcx jnz JUMP_ADDR_132	mov rax [r14+CONST] add rax r14 cmp rcx rax jnz JUMP_ADDR_131	or rbx CONST lea rax [r14+CONST] mov [rbp+CONST] r15 mov [r15+CONST] rbx cmp r15 rax jnz JUMP_ADDR_93	mov rdi r14 mov r14 [r14+CONST] mov rax [r14+CONST] lea rdx [rax+CONST] lea rcx [r14+rdx] and ecx CONST sub rdx rcx add rdx r14 cmp [rdx+CONST] CONST jnz JUMP_ADDR_136	sub rdx [rdx] mov r8 [rdx+CONST] mov r13 rdx mov rsi r8 and rsi CONST add rsi rcx lea r12 [CONST_VAR+CONST] add rsi CONST cmp rsi CONST ja JUMP_ADDR_135	and r8d CONST jz JUMP_ADDR_75	mov rbx r12 jmp JUMP_ADDR_76	sub r15 [r13+CONST] mov rdi r15 call sub_xxx jmp JUMP_ADDR_79	mov cs:xxx CONST jmp JUMP_ADDR_78	add rbx r14 mov rax rbx or rax CONST mov [r12+CONST] rax mov [rbp+CONST] r12 jmp JUMP_ADDR_39	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi [r12+CONST] lea rcx [r12+CONST] movzx eax al mov rsi CONST and rdi CONST imul rax rsi lea rdx [rbx+CONST] sub rcx rdi mov esi edx add ecx edx shr ecx CONST mov [r12+CONST] rax mov [r12+CONST_VAR+CONST] rax rep CONST jmp JUMP_ADDR_12	mov rdi r13 add rbx r14 call sub_xxx jmp JUMP_ADDR_36	mov rbx [r15+CONST] mov r14 rdi	and rbx CONST cmp cs:xxx rbx ja JUMP_ADDR_40	mov rax rbx sub rax CONST js JUMP_ADDR_40	mov rdi [rsp+CONST+var_xxx] cmp rdi rax jnb JUMP_ADDR_40	sub rax rdi mov r12 rax mov rax [rsp+CONST+var_xxx] neg rax and r12 rax jz JUMP_ADDR_40	mov r13 [r14+CONST] sub r13 r12 cmp r13 CONST jle JUMP_ADDR_40	mov edx cs:xxx test edx edx js JUMP_ADDR_125	jnz JUMP_ADDR_128	lea rdi [r14+r13] mov edx CONST mov rsi r12 call sub_xxx	mov [r14+CONST] r13 nop sub rbx r12 sub [rbp+CONST] r12 or rbx CONST mov [r15+CONST] rbx jmp JUMP_ADDR_40	nop mov rcx fs:xxx mov rdi cs:xxx mov rsi [rcx+rdx*8+CONST] test rsi rsi jnz JUMP_ADDR_106	jmp JUMP_ADDR_7	cmp rsi r8 jz JUMP_ADDR_141	mov r10 [CONST_VAR] shr rsi CONST add rax CONST mov r9 rsi mov rsi r10 xor rsi r9 cmp r10 r9 jz JUMP_ADDR_7	cmp rdi rax jz JUMP_ADDR_140	test sil CONST jz JUMP_ADDR_104	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov rdx [rax+CONST] and rdx CONST add rax rdx cmp r13 rax jb JUMP_ADDR_26	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdx [rbx+CONST] lea rdi [r12+CONST] call sub_xxx jmp JUMP_ADDR_30	mov rdi rbp call sub_xxx jmp JUMP_ADDR_71	mov rax [rbp+CONST] mov rax [rax+CONST] and rax CONST cmp rax cs:xxx jb JUMP_ADDR_40	mov rdi cs:xxx call sub_xxx jmp JUMP_ADDR_40	mov r15d fs:xxx mov [rsp+CONST+var_xxx] r15d mov eax r15d test r15d r15d jnz JUMP_ADDR_123	mov edx CONST cmpxchg [rbp+CONST] edx jmp JUMP_ADDR_24	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx	xor eax eax xchg eax [rbp+CONST] cmp eax CONST jle JUMP_ADDR_55	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall jmp JUMP_ADDR_55	xor eax eax mov edx CONST lock CONST edx mov [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_24	mov rdi rbp call sub_xxx jmp JUMP_ADDR_24	mov ecx cs:xxx test ecx ecx mov cs:xxx ecx mov [rsp+CONST+var_xxx] ecx jnz JUMP_ADDR_128	lea rdi GLOBAL_VAR mov esi CONST xor eax eax call sub_xxx mov edi eax test eax eax jns JUMP_ADDR_137	cmp cs:xxx CONST jz JUMP_ADDR_100	xor r9d r9d or r8d CONST xor edx edx mov ecx CONST lea rdi [r14+r13] mov rsi r12 call sub_xxx add rax CONST jz JUMP_ADDR_40	mov [r14+CONST] r13 jmp JUMP_ADDR_101	mov rbx [r15+CONST] jmp JUMP_ADDR_93	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rsi [rsp+CONST+var_xxx] mov edx CONST mov [rsp+CONST+var_xxx] eax call sub_xxx mov edi [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] test rax rax jle JUMP_ADDR_139	xor ecx ecx cmp [rsp+CONST+var_xxx] CONST setz cl	mov cs:xxx ecx call sub_xxx jmp JUMP_ADDR_127	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_sysmalloc
push r15 push r14 push r13 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov r14 cs:xxx test rsi rsi jz JUMP_ADDR_29	cmp cs:xxx rdi mov rbx rsi jbe JUMP_ADDR_21	mov [rsp+CONST+var_xxx] CONST	mov rdx r14 lea rax [r14+rbp+CONST] lea r10 [rbx+CONST] neg rdx mov r15 r10 and rax rdx mov [rsp+CONST+var_xxx] rax	mov r13 [rbx+CONST] mov rax [r13+CONST] mov r12 rax and r12 CONST lea r11 [r13+r12+CONST] cmp r13 r15 jnz JUMP_ADDR_6	test r12 r12 jz JUMP_ADDR_9	cmp r12 CONST jbe JUMP_ADDR_88	test al CONST jz JUMP_ADDR_88	lea rax [r14+CONST] test r11 rax jnz JUMP_ADDR_88	lea r10 [rbp+CONST] cmp r10 r12 jbe JUMP_ADDR_89	lea rax GLOBAL_VAR cmp rbx rax jz JUMP_ADDR_39	mov rcx r13 mov rdx r10 and rcx CONST sub rdx r12 mov r8 [rcx+CONST] test rdx rdx jle JUMP_ADDR_24	mov rax cs:xxx lea r9 [rdx+rax+CONST] neg rax and r9 rax add r9 r8 cmp r9 CONST ja JUMP_ADDR_24	mov rdi [rcx+CONST] cmp r9 rdi ja JUMP_ADDR_54	mov r15 r10	mov [rcx+CONST] r9 nop mov rdx [rcx+CONST] mov rax [rbx+CONST] add rax rdx add rdx rcx sub rdx r13 sub rax r8 mov r8 [rbx+CONST] or rdx CONST mov [rbx+CONST] rax mov [r13+CONST] rdx	cmp [rbx+CONST] rax jnb JUMP_ADDR_18	mov [rbx+CONST] rax	mov rax [r8+CONST] and rax CONST cmp r15 rax ja JUMP_ADDR_27	lea rdi GLOBAL_VAR xor ecx ecx lea rsi [r8+rbp] cmp rbx rdi mov [rbx+CONST] rsi setnz cl sub rax rbp add r8 CONST shl rcx CONST or rax CONST or rcx rbp or rcx CONST mov [r8+CONST] rcx mov [CONST_VAR+CONST] rax	add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax cs:xxx cmp cs:xxx eax jge JUMP_ADDR_2	mov rax r14 lea r12 [r14+CONST_VAR+CONST] neg rax and r12 rax cmp rdi r12 jb JUMP_ADDR_90	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_3	mov rsi cs:xxx lea rdi [rbp+CONST] mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov r10 [rsp+CONST+var_xxx] test rax rax mov rsi rax jz JUMP_ADDR_52	mov rcx [rsp+CONST+var_xxx] mov [rax] rbx sub r12 CONST lea r8 [CONST_VAR+CONST] and r12 CONST mov r15 r10 mov [rax+CONST] rcx mov rcx [rax+CONST] mov rax [rbx+CONST] mov [rbx+CONST] r8 add rax rcx sub rcx CONST or rcx CONST mov [rbx+CONST] rax mov [CONST_VAR+CONST] rcx lea rcx [r12+CONST] lea rsi [r13+rcx+CONST] mov [CONST_VAR+CONST] CONST cmp r12 CONST ja JUMP_ADDR_51	mov rdi rcx or rdi CONST mov [r13+CONST] rdi mov [CONST_VAR] rcx jmp JUMP_ADDR_16	mov rax CONST mov fs:xxx CONST	xor r8d r8d jmp JUMP_ADDR_20	lea r12 [r14+CONST_VAR+CONST] neg r14 and r12 r14 cmp rdi r12 jnb JUMP_ADDR_28	xor r9d r9d xor edi edi mov r8d CONST mov ecx CONST mov edx CONST mov rsi r12 call sub_xxx cmp rax CONST jz JUMP_ADDR_28	lea r8 [rax+CONST] test al CONST jnz JUMP_ADDR_98	mov rdx r12 mov [rax] CONST or rdx CONST mov [rax+CONST] rdx mov edx CONST lock CONST edx add edx CONST	mov eax cs:xxx cmp edx eax jle JUMP_ADDR_35	lock CONST edx jnz JUMP_ADDR_33	mov rdx r12 lock CONST rdx add rdx r12	mov rax cs:xxx cmp rdx rax jbe JUMP_ADDR_20	lock CONST rdx jz JUMP_ADDR_20	jmp JUMP_ADDR_36	lea rax [r14+CONST] mov r15 r10 mov r10 r14 mov [rsp+CONST+var_xxx] rax mov rax cs:xxx neg r10 lea r14 [r14+rax+CONST] add r14 rbp test [rbx+CONST] CONST jnz JUMP_ADDR_48	sub r14 r12 and r14 r10 jle JUMP_ADDR_57	mov [rsp+CONST+var_xxx] r10 mov rdi r14 mov [rsp+CONST+var_xxx] r11 call cs:xxx mov rcx rax nop test rax rax mov r11 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] jz JUMP_ADDR_56	mov rax cs:xxx test rax rax jnz JUMP_ADDR_86	mov rsi cs:xxx mov rdi cs:xxx mov edx CONST test rsi rsi jz JUMP_ADDR_72	mov rdi cs:xxx xor esi esi	lea rax [r14+CONST_VAR] mov cs:xxx rax mov rdi rax cmp r11 rcx jnz JUMP_ADDR_58	test dl dl jz JUMP_ADDR_58	add r14 r12 mov r8 cs:xxx or r14 CONST mov [r13+CONST] r14 jmp JUMP_ADDR_16	and r14 r10 jg JUMP_ADDR_41	mov eax CONST cmp r14 rax cmovb r14 rax cmp rbp r14 jb JUMP_ADDR_78	mov rax cs:xxx mov r8 cs:xxx jmp JUMP_ADDR_16	mov [r13+r12+CONST] CONST or r12 CONST mov edx CONST mov rdi rbx mov [CONST_VAR] CONST mov rsi r13 mov [r13+CONST] r12 call sub_xxx mov rax [rbx+CONST] mov r8 [rbx+CONST] jmp JUMP_ADDR_16	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_92	mov rax [rbx+CONST] mov r8 [rbx+CONST] mov r15 r10 jmp JUMP_ADDR_16	mov rsi r9 mov edx CONST mov [rsp+CONST+var_xxx] r10 sub rsi rdi add rdi rcx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_24	mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r15 r10 mov [rcx+CONST] r9 jmp JUMP_ADDR_15	test cs:xxx CONST jnz JUMP_ADDR_49	mov rax [rsp+CONST+var_xxx] add rax r12 add rax r14 and rax r10 mov r14 rax jmp JUMP_ADDR_49	test cs:xxx CONST jnz JUMP_ADDR_73	test r12 r12 jz JUMP_ADDR_63	cmp r11 rcx ja JUMP_ADDR_95	test r12 r12 jz JUMP_ADDR_63	mov rdx rcx sub rdx r11 add rax rdx mov cs:xxx rax	mov rax rcx and eax CONST jz JUMP_ADDR_83	mov esi CONST sub rsi rax lea r8 [rcx+CONST_VAR] add rsi r12	add r14 rsi mov rax [rsp+CONST+var_xxx] add rcx r14 add rax rcx sub rsi rcx and rax r10 lea r14 [rax+CONST_VAR] test r14 r14 js JUMP_ADDR_97	mov [rsp+CONST+var_xxx] r8 mov rdi r14 mov [rsp+CONST+var_xxx] r14 call cs:xxx mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] test rax rax mov rsi rax jz JUMP_ADDR_85	mov rax cs:xxx mov rdi cs:xxx test rax rax jnz JUMP_ADDR_87	sub rsi r8 lea rax [r14+CONST_VAR] mov cs:xxx r8 add rsi rcx or rsi CONST mov [r8+CONST] rsi mov cs:xxx rax test r12 r12 jz JUMP_ADDR_16	sub r12 CONST and r12 CONST mov rcx r12 or rcx CONST mov [r13+CONST] rcx mov [r13+r12+CONST] CONST mov [r13+r12+CONST] CONST cmp r12 CONST jbe JUMP_ADDR_16	mov edx CONST mov rsi r13 lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_50	mov rcx r8 xor edx edx nop [rax+rax+CONST]	mov cs:xxx rcx jmp JUMP_ADDR_45	mov r14 rcx and r14d CONST jnz JUMP_ADDR_96	test dl dl jz JUMP_ADDR_84	mov [rsp+CONST+var_xxx] rcx xor edi edi call cs:xxx mov r8 [rsp+CONST+var_xxx] mov rsi rax	test rsi rsi jz JUMP_ADDR_50	mov rdi cs:xxx xor r14d r14d xor ecx ecx jmp JUMP_ADDR_68	xor r9d r9d mov r8d CONST xor edi edi mov ecx CONST mov edx CONST mov rsi r14 mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov r11 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] cmp rax CONST mov r8 rax jz JUMP_ADDR_50	or cs:xxx CONST test rax rax jz JUMP_ADDR_50	cmp cs:xxx CONST mov rdi cs:xxx lea rsi [rax+r14] jz JUMP_ADDR_71	add rdi r14 mov r14 r8 mov cs:xxx rdi and r14d CONST jnz JUMP_ADDR_96	xor ecx ecx jmp JUMP_ADDR_68	mov rsi r12 mov r8 rcx jmp JUMP_ADDR_65	mov r8 rcx xor ecx ecx jmp JUMP_ADDR_68	mov [rsp+CONST+var_xxx] r8 xor edi edi call cs:xxx mov r8 [rsp+CONST+var_xxx] mov rsi rax jmp JUMP_ADDR_76	mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] rcx call rax mov r11 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_43	mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rsi call rax mov rdi cs:xxx mov rsi [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_68	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor r9d r9d or r8d CONST xor edi edi mov ecx CONST mov edx CONST mov rsi r12 call sub_xxx cmp rax CONST jnz JUMP_ADDR_31	jmp JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] mov r12 rax cmp rax rbp jbe JUMP_ADDR_94	xor r9d r9d or r8d CONST xor edi edi mov ecx CONST mov edx CONST mov rsi rax call sub_xxx cmp rax CONST jnz JUMP_ADDR_31	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_4	lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_free_check
endbr64 test rdi rdi jz JUMP_ADDR_13	push r12 mov r12 rdi push rbp push rbx mov rbx CONST mov ebp fs:xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_14	mov edx CONST cmpxchg cs:xxx edx	xor esi esi mov rdi r12 call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_18	test [rax+CONST] CONST jz JUMP_ADDR_9	mov eax fs:xxx test eax eax jnz JUMP_ADDR_11	sub cs:xxx CONST	mov rdi r8 call sub_xxx	mov fs:xxx ebp pop rbx pop rbp pop r12 retn	lea r12 GLOBAL_VAR mov edx CONST mov rsi rax mov rdi r12 call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_16	sub cs:xxx CONST mov fs:xxx ebp pop rbx pop rbp pop r12 retn	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_7	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_7	retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_8	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_8	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]
[ph]libcap-git-setcap_arena_get2.part.0
push r13 push r12 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov rax cs:xxx mov rdx cs:xxx test rax rax jnz JUMP_ADDR_3	mov rax cs:xxx test rax rax jz JUMP_ADDR_27	mov cs:xxx rax	sub rax CONST cmp rax rdx jnb JUMP_ADDR_35	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_33	xor ecx ecx mov edx CONST jmp JUMP_ADDR_8	cmpxchg [r12] edx test eax eax jz JUMP_ADDR_11	mov r12 [r12+CONST] cmp r12 cs:xxx jz JUMP_ADDR_30	mov eax fs:xxx test eax eax jz JUMP_ADDR_6	mov eax ecx lock CONST edx setnz al movzx eax al test eax eax jnz JUMP_ADDR_7	nop [rax+CONST]	mov rbp CONST mov r13 fs:xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_41	mov edx CONST cmpxchg cs:xxx edx	test r13 r13 jz JUMP_ADDR_16	mov rax [r13+CONST] test rax rax jz JUMP_ADDR_78	sub rax CONST mov [r13+CONST] rax	mov rax cs:xxx lea rcx GLOBAL_VAR test rax rax jnz JUMP_ADDR_20	jmp JUMP_ADDR_23	lea rcx [rax+CONST] test rdx rdx jz JUMP_ADDR_23	mov rax rdx	cmp [rax+CONST] CONST jnz JUMP_ADDR_46	mov rdx [rax+CONST] cmp rax r12 jnz JUMP_ADDR_18	mov [rcx] rdx	add [r12+CONST] CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_39	sub cs:xxx CONST	nop mov fs:xxx r12 mov rax [r12+CONST] mov cs:xxx rax	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	cmp cs:xxx rdx jnb JUMP_ADDR_3	call sub_xxx test eax eax jle JUMP_ADDR_43	shl eax CONST mov rdx cs:xxx cdqe mov cs:xxx rax jmp JUMP_ADDR_3	cmp rbx r12 jz JUMP_ADDR_34	nop mov eax fs:xxx test eax eax jnz JUMP_ADDR_44	mov edx CONST cmpxchg [r12] edx jmp JUMP_ADDR_11	lea r12 GLOBAL_VAR mov cs:xxx r12 jmp JUMP_ADDR_5	mov r12 [rbx+CONST] jmp JUMP_ADDR_31	lea rcx [rdx+CONST] mov rax rdx cmp fs:xxx CONST jz JUMP_ADDR_37	lock	cmpxchg cs:xxx rcx cmp rax rdx jz JUMP_ADDR_47	mov rdx cs:xxx mov rax cs:xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_25	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_25	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_13	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_13	mov cs:xxx CONST mov rdx cs:xxx mov eax CONST jmp JUMP_ADDR_3	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_11	mov rdi r12 call sub_xxx jmp JUMP_ADDR_11	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi cs:xxx lea rdi [rbp+CONST] call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_68	lea r12 [rbx+CONST] lea rax [rbx+CONST] mov [rbx] r12 lea rdx [rbx+CONST] nop [rax]	mov [rax+CONST] rax mov [rax+CONST] rax add rax CONST cmp rdx rax jnz JUMP_ADDR_49	lea rax GLOBAL_VAR cmp r12 rax jz JUMP_ADDR_67	or [rbx+CONST] CONST	mov [rbx+CONST] CONST lea rcx [rbx+CONST] lea rdx [rbx+CONST] mov [rbx+CONST] CONST mov rax [rbx+CONST] mov [rbx+CONST] rax mov [rbx+CONST] rax and ecx CONST jz JUMP_ADDR_54	sub rdx rcx add rdx CONST	add rax rbx mov [rbx+CONST] rdx sub rax rdx or rax CONST mov [rdx+CONST] rax nop mov rax CONST mov rbp fs:xxx mov fs:xxx r12 mov [rbx+CONST] CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_76	mov edx CONST cmpxchg cs:xxx edx	mov rax cs:xxx mov [rbx+CONST] rax mov cs:xxx r12 mov eax fs:xxx test eax eax jnz JUMP_ADDR_74	sub cs:xxx CONST	mov eax fs:xxx test eax eax jnz JUMP_ADDR_72	mov edx CONST cmpxchg cs:xxx edx	test rbp rbp jz JUMP_ADDR_63	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_78	sub rax CONST mov [rbp+CONST] rax	mov eax fs:xxx test eax eax jnz JUMP_ADDR_81	sub cs:xxx CONST	mov eax fs:xxx test eax eax jnz JUMP_ADDR_79	mov edx CONST cmpxchg [r12] edx jmp JUMP_ADDR_26	mov cs:xxx CONST jmp JUMP_ADDR_52	mov rsi cs:xxx mov edi CONST call sub_xxx mov rbx rax test rax rax jnz JUMP_ADDR_48	cmp fs:xxx CONST jz JUMP_ADDR_71	lock	dec cs:xxx xor r12d r12d jmp JUMP_ADDR_26	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_60	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_60	xor eax eax xchg eax cs:xxx sub eax CONST jle JUMP_ADDR_58	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_58	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_56	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_56	call sub_xxx	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_26	mov rdi r12 call sub_xxx jmp JUMP_ADDR_26	xor eax eax xchg eax cs:xxx sub eax CONST jle JUMP_ADDR_65	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_65
[ph]libcap-git-setcap_ptmalloc_init.part.0
push rbp lea rcx GLOBAL_VAR sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax CONST mov cs:xxx CONST mov fs:xxx rcx add rcx CONST mov rax rcx lea rdx [rcx+CONST] nop	mov [rax+CONST] rax mov [rax+CONST] rax add rax CONST cmp rax rdx jnz JUMP_ADDR_1	mov rbp rsp lea rdx sub_xxx mov edi CONST mov cs:xxx CONST mov cs:xxx CONST mov rsi rbp mov cs:xxx rcx call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx lea rdx sub_xxx mov rsi rbp mov edi CONST call sub_xxx mov cs:xxx CONST mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_4	add rsp CONST pop rbp retn	call sub_xxx
[ph]libcap-git-setcap_arena_get_retry
push r12 push rbp sub rsp CONST nop lea r12 GLOBAL_VAR cmp rdi r12 jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_10	sub [CONST_VAR] CONST	mov eax fs:xxx test eax eax jnz JUMP_ADDR_12	mov edx CONST cmpxchg cs:xxx edx lea rax GLOBAL_VAR	add rsp CONST pop rbp pop r12 retn	mov rbp rsi mov eax fs:xxx test eax eax jnz JUMP_ADDR_14	sub [r12] CONST	call sub_xxx test rax rax jnz JUMP_ADDR_5	add rsp CONST mov rsi r12 mov rdi rbp pop rbp pop r12 jmp UNK_JUMP_ADDR	xor eax eax xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_3	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_3	xor eax eax mov edx CONST lock CONST edx lea rax GLOBAL_VAR jz JUMP_ADDR_5	mov rdi r12 mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_5	xor eax eax xchg eax [r12] cmp eax CONST jle JUMP_ADDR_8	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_8
[ph]libcap-git-setcap__int_malloc
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST test rsi rsi js JUMP_ADDR_94	lea rax [CONST_VAR+CONST] mov rbx rdi mov rbp rsi cmp rax CONST ja JUMP_ADDR_19	test rdi rdi jz JUMP_ADDR_90	cmp cs:xxx CONST ja JUMP_ADDR_28	mov eax CONST mov r14d CONST mov r12d CONST	add rax rbx mov r15 [rax+CONST] lea rcx [rax+CONST] cmp rcx r15 jz JUMP_ADDR_62	mov rdx [r15+CONST] cmp [rdx+CONST] r15 jnz JUMP_ADDR_151	lea r10 GLOBAL_VAR or [r15+r12+CONST] CONST mov [rax+CONST] rdx mov [rdx+CONST] rcx cmp rbx r10 jz JUMP_ADDR_9	or [r15+CONST] CONST	mov r9 fs:xxx test r9 r9 jz JUMP_ADDR_17	lea r8 [r12+CONST] shr r8 CONST cmp cs:xxx r8 jbe JUMP_ADDR_17	mov rdi cs:xxx movzx r11d [r9+r8*2] lea r13 [r8+CONST]	movzx esi r11w jmp JUMP_ADDR_15	mov rdx [rax+CONST] cmp rcx rdx jz JUMP_ADDR_17	test rdx rdx jnz JUMP_ADDR_145	cmp rsi rdi jb JUMP_ADDR_13	nop [rax+rax+CONST]	mov esi cs:xxx add r15 CONST test esi esi jnz JUMP_ADDR_93	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	and rax CONST mov r12 rax test rdi rdi jz JUMP_ADDR_91	mov r14d eax shr r14d CONST cmp rax cs:xxx jbe JUMP_ADDR_60	cmp rax CONST jbe JUMP_ADDR_150	mov rdi rax mov rcx rax mov rsi rax mov r10 rax shr rax CONST mov edx CONST shr rsi CONST shr rdi CONST shr rcx CONST lea r15d [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rsi shr r10 CONST cmp rax rdx lea r8d [rcx+CONST] mov [rsp+CONST+var_xxx] rdi cmova rax rdx lea r11d [r10+CONST] mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 lea r9d [rax+CONST] mov rax rsi mov esi edi mov [rsp+CONST+var_xxx] r11d add esi CONST mov [rsp+CONST+var_xxx] r9d mov [rsp+CONST+var_xxx] r15d mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] esi mov [rsp+CONST+var_xxx] esi cmp rdi CONST jbe JUMP_ADDR_26	mov [rsp+CONST+var_xxx] r8d cmp rcx CONST jbe JUMP_ADDR_26	mov [rsp+CONST+var_xxx] r15d cmp rax CONST ja JUMP_ADDR_126	nop [rax+CONST]	mov eax [rbx+CONST] test eax eax jz JUMP_ADDR_63	mov rdi rbx call sub_xxx jmp JUMP_ADDR_63	xor eax eax mov edi CONST mov r14d CONST mov r12d CONST lea r8 [rbx+rax*8] mov rdx [r8+CONST] test rdx rdx jz JUMP_ADDR_61	test dl CONST jnz JUMP_ADDR_148	add rdi rbx mov ecx fs:xxx lea r15 [rdx+CONST] mov rax [rdx+CONST] mov rsi r15 shr rsi CONST test ecx ecx jnz JUMP_ADDR_48	xor rax rsi mov [r8+CONST] rax	mov rax [rdx+CONST] shr eax CONST cmp eax r14d jnz JUMP_ADDR_128	mov rdx fs:xxx lea r9 [r12+CONST] shr r9 CONST test rdx rdx jz JUMP_ADDR_92	cmp cs:xxx r9 jbe JUMP_ADDR_92	movzx eax [rdx+r9*2] cmp rax cs:xxx lea r10 [r9+CONST] jb JUMP_ADDR_40	jmp JUMP_ADDR_92	mov ebx fs:xxx lea r11 [rcx+CONST] mov rax [rcx+CONST] mov rsi r11 shr rsi CONST test ebx ebx jnz JUMP_ADDR_58	xor rax rsi mov [r8+CONST] rax	movzx eax [rdx+r9*2] xor rsi [rdx+r10*8] mov [rcx+CONST] rdx mov [rcx+CONST] rsi add eax CONST mov [rdx+r10*8] r11 mov [rdx+r9*2] ax movzx eax ax cmp rax cs:xxx jnb JUMP_ADDR_92	mov rcx [r8+CONST] test rcx rcx jz JUMP_ADDR_92	test cl CONST jz JUMP_ADDR_37	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov rax rdx cmp fs:xxx CONST jz JUMP_ADDR_45	lock	cmpxchg [CONST_VAR] rcx cmp rax rdx jz JUMP_ADDR_32	test rax rax jz JUMP_ADDR_61	mov rdx rax lea r15 [rax+CONST]	mov rsi r15 mov rax [rdx+CONST] shr rsi CONST mov rcx rsi xor rcx rax cmp rsi rax jz JUMP_ADDR_43	test cl CONST jz JUMP_ADDR_43	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST]	test bl CONST jnz JUMP_ADDR_50	nop [rax]	mov rax rcx cmp fs:xxx CONST jz JUMP_ADDR_55	lock	cmpxchg [CONST_VAR] rbx cmp rax rcx jz JUMP_ADDR_39	test rax rax jz JUMP_ADDR_92	mov rcx rax lea r11 [rax+CONST]	mov rsi r11 mov rax [rcx+CONST] shr rsi CONST mov rbx rsi xor rbx rax cmp rsi rax jz JUMP_ADDR_53	jmp JUMP_ADDR_51	lea eax [r14+CONST] lea r8 [rbx+rax*8] lea rdi ds:xxx mov rdx [r8+CONST] test rdx rdx jnz JUMP_ADDR_29	lea eax [r14+r14+CONST] shl rax CONST jmp JUMP_ADDR_5	mov rax r12 mov rdx r12 mov [rsp+CONST+var_xxx] r14d shr rax CONST shr rdx CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax add eax CONST mov [rsp+CONST+var_xxx] rdx add edx CONST mov [rsp+CONST+var_xxx] edx mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST	lea rax [r12+CONST] xor r9d r9d shr rax CONST cmp fs:xxx CONST mov r13 rax jz JUMP_ADDR_65	cmp cs:xxx rax cmova r9 r12	mov [rsp+CONST+var_xxx] CONST lea r10 [rbx+CONST] mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r14d mov [rsp+CONST+var_xxx] rbp	mov rax [rbx+CONST] cmp rax r10 jz JUMP_ADDR_113	mov r9 cs:xxx mov rdi cs:xxx lea r15 [r13+CONST] test r9 r9 setnz [rsp+CONST+var_xxx] xor r8d r8d xor ebp ebp mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdi lea rdi [r12+CONST] mov [rsp+CONST+var_xxx] rdi	mov rcx [rax+CONST] and rcx CONST lea r11 [rax+rcx] cmp rcx CONST jbe JUMP_ADDR_95	mov rdi [rbx+CONST] cmp rdi rcx jb JUMP_ADDR_95	mov rsi [r11+CONST] cmp rsi CONST jbe JUMP_ADDR_96	cmp rdi rsi jb JUMP_ADDR_96	mov rdi [r11] and rdi CONST cmp rdi rcx jnz JUMP_ADDR_139	mov rdi [rax+CONST] cmp [CONST_VAR+CONST] rax jnz JUMP_ADDR_124	cmp [rax+CONST] r10 jnz JUMP_ADDR_124	test sil CONST jnz JUMP_ADDR_149	cmp r12 CONST ja JUMP_ADDR_78	cmp rdi r10 jz JUMP_ADDR_140	mov [rbx+CONST] rdi mov [CONST_VAR+CONST] r10 cmp r12 rcx jz JUMP_ADDR_97	cmp rcx CONST ja JUMP_ADDR_102	shr ecx CONST lea esi [rcx+rcx+CONST] mov r14d ecx movsxd rsi esi lea rsi [rbx+rsi*8] mov rdi [CONST_VAR] lea r11 [CONST_VAR+CONST]	mov esi r14d mov r14d CONST add [rsp+CONST+var_xxx] CONST sar esi CONST shl r14d cl movsxd rsi esi or [rbx+rsi*4+CONST] r14d mov [rax+CONST] r11 mov [rax+CONST] rdi mov [CONST_VAR+CONST] rax mov [r11+CONST] rax mov rax [rsp+CONST+var_xxx] test ebp ebp jz JUMP_ADDR_111	cmp r9 rax jnb JUMP_ADDR_86	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_86	lea rcx [r13+CONST] mov r15 [rdx+rcx*8] test r15b CONST jnz JUMP_ADDR_183	mov rax r15 shr rax CONST xor rax [r15] mov [rdx+rcx*8] rax sub [rdx+r13*2] CONST mov [r15+CONST] CONST jmp JUMP_ADDR_18	add r8d CONST cmp r8d CONST jg JUMP_ADDR_84	mov rax [rbx+CONST]	cmp r10 rax jz JUMP_ADDR_84	mov ebp CONST jmp JUMP_ADDR_68	mov r12d CONST	xor esi esi mov rdi r12 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_18	mov esi cs:xxx test esi esi jz JUMP_ADDR_18	xor sil CONST mov rdx rbp mov rdi r15 call sub_xxx jmp JUMP_ADDR_18	mov rax CONST xor r15d r15d mov fs:xxx CONST jmp JUMP_ADDR_18	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	or rsi CONST lea rcx GLOBAL_VAR mov [r11+CONST] rsi cmp rbx rcx jz JUMP_ADDR_99	or [rax+CONST] CONST	cmp [rsp+CONST+var_xxx] CONST lea r11 [rax+CONST] jz JUMP_ADDR_101	movzx esi [rdx+r13*2] mov rcx rsi cmp rsi [rsp+CONST+var_xxx] jb JUMP_ADDR_125	mov rbp [rsp+CONST+var_xxx] mov r15 r11 jmp JUMP_ADDR_92	mov rsi rcx shr rsi CONST lea r14d [CONST_VAR+CONST] cmp rcx CONST jbe JUMP_ADDR_107	mov rsi rcx shr rsi CONST lea r14d [CONST_VAR+CONST] cmp rcx CONST jbe JUMP_ADDR_107	mov rsi rcx shr rsi CONST lea r14d [CONST_VAR+CONST] cmp rcx CONST jbe JUMP_ADDR_107	mov rsi rcx shr rsi CONST lea r14d [CONST_VAR+CONST] cmp rcx CONST jbe JUMP_ADDR_107	mov rsi rcx mov edi CONST shr rsi CONST cmp rsi rdi cmova rsi rdi lea r14d [CONST_VAR+CONST] nop	lea esi [r14+r14+CONST] movsxd rsi esi lea r11 [rbx+rsi*8] mov rsi [r11] lea rdi [r11+CONST] cmp rdi rsi jz JUMP_ADDR_127	mov r11 [r11+CONST] or rcx CONST mov [rsp+CONST+var_xxx] rcx mov rcx [r11+CONST] test cl CONST jnz JUMP_ADDR_199	cmp rcx [rsp+CONST+var_xxx] jbe JUMP_ADDR_152	mov rcx [CONST_VAR+CONST] mov [rax+CONST] rsi mov [rax+CONST] rcx mov [rcx+CONST] rax mov ecx r14d mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_81	add r8d CONST cmp r8d CONST jg JUMP_ADDR_113	mov rax [rbx+CONST] cmp rax r10 jnz JUMP_ADDR_68	cmp r12 CONST jbe JUMP_ADDR_116	mov eax [rsp+CONST+var_xxx] lea eax [rax+rax+CONST] lea rax [rbx+rax*8] mov rdx [rax] lea rcx [rax+CONST] cmp rdx rcx jz JUMP_ADDR_116	cmp [rdx+CONST] r12 jnb JUMP_ADDR_184	mov eax [rsp+CONST+var_xxx] lea ecx [rax+CONST] lea eax [rax+rax+CONST] mov edi ecx lea rdx [rbx+rax*8+CONST] mov eax CONST shr edi CONST shl eax cl mov r8d edi mov esi [rbx+r8*4+CONST] nop [rax+CONST]	cmp eax esi ja JUMP_ADDR_130	test eax eax jnz JUMP_ADDR_121	jmp JUMP_ADDR_130	add rdx CONST add eax eax jz JUMP_ADDR_177	test eax esi jz JUMP_ADDR_120	mov r15 [rdx+CONST] cmp rdx r15 jnz JUMP_ADDR_163	mov ecx eax add rdx CONST add eax eax not ecx and esi ecx mov [rbx+r8*4+CONST] esi jmp JUMP_ADDR_117	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov rsi r11 add ecx CONST mov [rax+CONST] rdx shr rsi CONST xor rsi [rdx+r15*8] mov [rax+CONST] rsi mov rax rdi mov [rdx+r15*8] r11 mov [rdx+r13*2] cx jmp JUMP_ADDR_88	cmp r10 CONST cmovb r9d r11d mov [rsp+CONST+var_xxx] r9d jmp JUMP_ADDR_26	mov [rax+CONST] rax mov ecx r14d mov r11 rdi mov [rax+CONST] rax jmp JUMP_ADDR_81	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov r8d edi mov esi [rbx+r8*4+CONST] test esi esi jnz JUMP_ADDR_161	add edi CONST cmp edi CONST jnz JUMP_ADDR_129	mov r15 [rbx+CONST] mov rax [r15+CONST] and rax CONST cmp [rbx+CONST] rax jb JUMP_ADDR_173	lea rdx [r12+CONST] cmp rdx rax jbe JUMP_ADDR_180	mov [rsp+CONST+var_xxx] r10 mov eax [rbx+CONST] test eax eax jz JUMP_ADDR_178	mov rdi rbx call sub_xxx mov eax [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] cmp r12 CONST mov [rsp+CONST+var_xxx] eax jbe JUMP_ADDR_66	mov eax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax jbe JUMP_ADDR_66	mov eax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax jbe JUMP_ADDR_66	mov eax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax jbe JUMP_ADDR_66	mov eax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST cmova eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_66	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	cmp [rbx+CONST] rax jnz JUMP_ADDR_78	cmp [rsp+CONST+var_xxx] rcx jnb JUMP_ADDR_78	lea rdx [rax+r12] sub rcx r12 mov rbp [rsp+CONST+var_xxx] mov [rbx+CONST] rdx mov [rbx+CONST] rdx mov [rbx+CONST] rdx mov [rdx+CONST] r10 mov [rdx+CONST] r10 cmp rcx CONST jbe JUMP_ADDR_144	mov [rdx+CONST] CONST mov [rdx+CONST] CONST	lea rsi GLOBAL_VAR lea r15 [rax+CONST] cmp rbx rsi mov rdi r15 setnz sil movzx esi sil shl rsi CONST or rsi r12 or rsi CONST mov [rax+CONST] rsi mov rsi rcx or rsi CONST mov [rdx+CONST] rsi mov rsi rbp mov [r11] rcx call sub_xxx jmp JUMP_ADDR_18	mov rsi [rdx+CONST] or [rdx+r12+CONST] CONST cmp rbx r10 jz JUMP_ADDR_147	or [rdx+CONST] CONST	lea r14 [rdx+CONST] mov [rax+CONST] rsi add r11d CONST mov [CONST_VAR+CONST] rcx mov rsi r14 shr rsi CONST xor rsi [r9+r13*8] mov [rdx+CONST] r9 mov [rdx+CONST] rsi mov [r9+r13*8] r14 mov [r9+r8*2] r11w jmp JUMP_ADDR_12	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea eax [r14+r14+CONST] lea rax ds:xxx jmp JUMP_ADDR_5	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	mov rdi [CONST_VAR+CONST] test dil CONST jnz JUMP_ADDR_197	mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_155	mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] test dil CONST jnz JUMP_ADDR_194	cmp rcx rdi jb JUMP_ADDR_154	jz JUMP_ADDR_162	mov rcx [CONST_VAR+CONST] mov [rax+CONST] rsi mov [rax+CONST] rcx mov rcx [CONST_VAR+CONST] cmp [rcx+CONST] rsi jnz JUMP_ADDR_174	mov [CONST_VAR+CONST] rax mov rcx [rax+CONST] mov rdi rsi mov [rcx+CONST] rax	mov r11 [CONST_VAR+CONST] cmp [r11+CONST] rdi jnz JUMP_ADDR_201	mov ecx r14d jmp JUMP_ADDR_81	mov eax edi shl eax CONST add eax CONST lea rdx [rbx+rax*8+CONST] mov eax CONST jmp JUMP_ADDR_121	mov rdi [CONST_VAR+CONST] jmp JUMP_ADDR_159	mov r13 [r15+CONST] mov rbp [rsp+CONST+var_xxx] and r13 CONST cmp r12 r13 ja JUMP_ADDR_200	mov r14 r13 mov rdi r15 mov [rsp+CONST+var_xxx] r10 call sub_xxx sub r14 r12 mov r10 [rsp+CONST+var_xxx] cmp r14 CONST jbe JUMP_ADDR_175	mov rdx [rbx+CONST] lea rax [r15+r12] cmp [rdx+CONST] r10 jnz JUMP_ADDR_182	mov [rax+CONST] r10 mov [rax+CONST] rdx mov [rbx+CONST] rax mov [rdx+CONST] rax cmp r12 CONST ja JUMP_ADDR_168	mov [rbx+CONST] rax	cmp r14 CONST jbe JUMP_ADDR_170	mov [rax+CONST] CONST mov [rax+CONST] CONST	lea rdx GLOBAL_VAR cmp rbx rdx setnz dl movzx edx dl shl rdx CONST or rdx r12 or rdx CONST mov [r15+CONST] rdx mov rdx r14 or rdx CONST mov [rax+CONST] rdx mov [r15+r13] r14	mov eax cs:xxx add r15 CONST test eax eax jz JUMP_ADDR_18	xor al CONST mov rdx rbp mov rdi r15 mov esi eax call sub_xxx jmp JUMP_ADDR_18	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx	lea rax GLOBAL_VAR or [r15+r13+CONST] CONST cmp rbx rax jz JUMP_ADDR_171	or [r15+CONST] CONST jmp JUMP_ADDR_171	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi rbx mov rdi r12 mov rbp [rsp+CONST+var_xxx] call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_18	mov rsi rbp mov rdi r15 call sub_xxx jmp JUMP_ADDR_18	lea rdx GLOBAL_VAR lea rcx [r15+r12] mov rbp [rsp+CONST+var_xxx] cmp rbx rdx mov [rbx+CONST] rcx setnz dl sub rax r12 movzx edx dl or rax CONST shl rdx CONST or rdx r12 or rdx CONST mov [r15+CONST] rdx mov [rcx+CONST] rax	add r15 CONST jmp JUMP_ADDR_179	lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx	mov rbp [rsp+CONST+var_xxx] mov r15 [rdx+CONST] jmp JUMP_ADDR_186	mov r15 [r15+CONST]	mov rdx [r15+CONST] mov r13 rdx and r13 CONST cmp r12 r13 ja JUMP_ADDR_185	cmp [rax+CONST] r15 jz JUMP_ADDR_189	mov rax [r15+CONST] cmp rdx [rax+CONST] cmovz r15 rax	mov r14 r13 mov rdi r15 mov [rsp+CONST+var_xxx] r10 call sub_xxx sub r14 r12 mov r10 [rsp+CONST+var_xxx] cmp r14 CONST jbe JUMP_ADDR_195	mov rdx [rbx+CONST] lea rax [r15+r12] cmp [rdx+CONST] r10 jnz JUMP_ADDR_198	mov [rax+CONST] r10 mov [rax+CONST] rdx mov [rbx+CONST] rax mov [rdx+CONST] rax cmp r14 CONST jbe JUMP_ADDR_193	mov [rax+CONST] CONST mov [rax+CONST] CONST	lea rdx GLOBAL_VAR cmp rbx rdx setnz dl movzx edx dl shl rdx CONST or rdx r12 or rdx CONST mov [r15+CONST] rdx mov rdx r14 or rdx CONST mov [rax+CONST] rdx mov [r15+r13] r14 jmp JUMP_ADDR_181	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rax GLOBAL_VAR or [r15+r13+CONST] CONST cmp rbx rax jz JUMP_ADDR_181	or [r15+CONST] CONST jmp JUMP_ADDR_181	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST]
[ph]libcap-git-setcap_malloc_check
endbr64 push r13 push r12 mov r12 rdi push rbp add r12 CONST jb JUMP_ADDR_10	mov rbp rdi mov eax fs:xxx test eax eax jnz JUMP_ADDR_6	mov edx CONST cmpxchg cs:xxx edx lea r13 GLOBAL_VAR	call sub_xxx mov rsi r12 mov rdi r13 call sub_xxx mov r8 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_8	sub cs:xxx CONST	mov rsi rbp mov rdi r8 pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	xor eax eax mov edx CONST lock CONST edx lea r13 GLOBAL_VAR jz JUMP_ADDR_3	mov rdi r13 call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_5	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_5	mov rax CONST mov fs:xxx CONST xor eax eax pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap__int_memalign
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST test rdx rdx js JUMP_ADDR_12	add rdx CONST mov eax CONST mov rbx rsi mov rbp rdi mov r13 rdx and r13 CONST cmp rdx CONST cmovbe r13 rax lea rsi [r13+CONST_VAR+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_11	xor edx edx lea rsi [rax+CONST] div rbx test rdx rdx jz JUMP_ADDR_8	mov rax rbx lea r14 [r12+rbx+CONST] neg rax and r14 rax sub r14 CONST mov rdx r14 sub rdx rsi cmp rdx CONST jbe JUMP_ADDR_13	mov rax [r12+CONST] mov r15 rax and r15 CONST sub r15 rdx test al CONST jnz JUMP_ADDR_14	lea rax GLOBAL_VAR xor ecx ecx mov rdi rbp cmp rbp rax mov rax r15 setnz cl shl rcx CONST or rax rcx or rax CONST mov [r14+CONST] rax or [r14+r15+CONST] CONST mov rax [r12+CONST] and eax CONST or rax rcx or rax rdx mov edx CONST mov [r12+CONST] rax call sub_xxx cmp r15 r13 jb JUMP_ADDR_15	lea r12 [r14+CONST] xor edx edx mov rax r12 div rbx test rdx rdx jnz JUMP_ADDR_15	mov rsi r14	mov rax [CONST_VAR+CONST] test al CONST jnz JUMP_ADDR_11	and rax CONST lea rdx [r13+CONST] cmp rdx rax jnb JUMP_ADDR_11	lea rdx GLOBAL_VAR lea r8 [CONST_VAR+r13] mov rdi rbp cmp rbp rdx setnz dl sub rax r13 movzx edx dl shl rdx CONST or rax rdx mov edx CONST or rax CONST mov [r8+CONST] rax mov rax [CONST_VAR+CONST] and eax CONST or rax r13 mov [CONST_VAR+CONST] rax mov rsi r8 call sub_xxx	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax CONST xor r12d r12d mov fs:xxx CONST jmp JUMP_ADDR_11	add r14 rbx mov rdx r14 sub rdx rsi jmp JUMP_ADDR_4	add rdx [r12+CONST] or r15 CONST lea r12 [r14+CONST] mov [r14] rdx mov [r14+CONST] r15 jmp JUMP_ADDR_11	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_memalign_check
endbr64 push r13 push r12 mov r12 rsi push rbp cmp rdi CONST jbe JUMP_ADDR_15	cmp rdi CONST ja JUMP_ADDR_8	mov ebp CONST cmp rsi CONST ja JUMP_ADDR_16	mov eax fs:xxx test eax eax jnz JUMP_ADDR_21	mov edx CONST cmpxchg cs:xxx edx lea r13 GLOBAL_VAR	call sub_xxx lea rdx [r12+CONST] mov rsi rbp mov rdi r13 call sub_xxx mov r8 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	sub cs:xxx CONST	pop rbp mov rsi r12 mov rdi r8 pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax CONST cmp rdi rax ja JUMP_ADDR_18	mov rax CONST sub rax rdi cmp rax rsi jb JUMP_ADDR_16	lea rax [CONST_VAR+CONST] test rax rdi jz JUMP_ADDR_23	mov ebp CONST cmp rdi CONST jz JUMP_ADDR_3	nop [rax+rax+CONST]	add rbp rbp cmp rdi rbp ja JUMP_ADDR_13	jmp JUMP_ADDR_3	pop rbp mov rdi r12 xor esi esi pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST	pop rbp xor eax eax pop r12 pop r13 retn	mov rax CONST mov fs:xxx CONST jmp JUMP_ADDR_17	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_7	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_7	xor eax eax mov edx CONST lock CONST edx lea r13 GLOBAL_VAR jz JUMP_ADDR_5	mov rdi r13 call sub_xxx jmp JUMP_ADDR_5	mov rbp rdi jmp JUMP_ADDR_3
[ph]libcap-git-setcap__int_realloc
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax [CONST_VAR+CONST] cmp rax CONST jbe JUMP_ADDR_20	mov rbp rcx mov rcx [CONST_VAR+CONST] mov r13 rdi mov rbx rdx cmp rcx rdx jbe JUMP_ADDR_20	test al CONST jnz JUMP_ADDR_24	lea r14 [CONST_VAR+rdx] mov r12 rsi mov rsi [r14+CONST] mov rdx rsi and rdx CONST cmp rcx rdx jbe JUMP_ADDR_21	cmp rsi CONST jbe JUMP_ADDR_21	cmp rbx rbp jb JUMP_ADDR_10	lea rdx GLOBAL_VAR mov rcx rbx sub rcx rbp cmp r13 rdx setnz dl and eax CONST movzx edx dl shl rdx CONST or rax rdx cmp rcx CONST ja JUMP_ADDR_15	or rbx rax mov [r12+CONST] rbx or [r14+CONST] CONST	lea r15 [r12+CONST]	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [CONST_VAR+CONST] r14 jz JUMP_ADDR_22	test [r14+rdx+CONST] CONST jz JUMP_ADDR_16	lea rsi [rbp+CONST] mov rdi r13 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_9	lea rdx [r15+CONST] mov rax [rax+CONST] cmp r14 rdx jz JUMP_ADDR_18	mov rdx [r12+CONST] lea rsi [r12+CONST] mov rdi r15 mov rax rdx and rdx CONST shr rax CONST xor rax CONST and eax CONST lea rdx [rdx+rax*8+CONST] call sub_xxx mov edx CONST mov rsi r12 mov rdi r13 call sub_xxx jmp JUMP_ADDR_9	or rcx rdx lea rsi [r12+rbp] or rbp rax mov edx CONST or rcx CONST mov [r12+CONST] rbp mov rdi r13 mov [CONST_VAR+CONST] rcx or [r14+CONST] CONST call sub_xxx jmp JUMP_ADDR_8	lea r15 [rbx+rdx] cmp rbp r15 ja JUMP_ADDR_12	mov rdi r14 mov rbx r15 lea r14 [r12+r15] call sub_xxx mov rax [r12+CONST] jmp JUMP_ADDR_6	and rax CONST add rbx rax cmp rbp rbx ja JUMP_ADDR_25	mov rax [r12+CONST] lea r14 [r12+rbx] jmp JUMP_ADDR_6	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	add rdx rbx lea rcx [rbp+CONST] cmp rcx rdx ja JUMP_ADDR_12	lea rcx GLOBAL_VAR lea r15 [r12+CONST] cmp rdi rcx setnz cl and eax CONST sub rdx rbp movzx ecx cl or rdx CONST shl rcx CONST or rax rcx or rax rbp mov [r12+CONST] rax lea rax [r12+rbp] mov [CONST_VAR+CONST] rax mov [rax+CONST] rdx jmp JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_realloc_check
endbr64 push r15 push r14 mov r14 rsi push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax add r14 CONST jb JUMP_ADDR_35	mov r13 rdi mov rbp rsi test rdi rdi jz JUMP_ADDR_24	test rsi rsi jz JUMP_ADDR_26	mov eax fs:xxx test eax eax jnz JUMP_ADDR_27	mov edx CONST cmpxchg cs:xxx edx	mov rsi rsp mov rdi r13 call sub_xxx mov r12 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_29	sub cs:xxx CONST	test r12 r12 jz JUMP_ADDR_37	mov rbx [r12+CONST] test r14 r14 js JUMP_ADDR_15	lea rax [r14+CONST] mov rdx rax and rdx CONST cmp rax CONST mov eax CONST cmova rax rdx mov r15 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_33	mov edx CONST cmpxchg cs:xxx edx	and rbx CONST test [r12+CONST] CONST jz JUMP_ADDR_14	mov rsi r15 mov rdi r12 call sub_xxx test rax rax jz JUMP_ADDR_21	lea r13 [rax+CONST] jmp JUMP_ADDR_16	call sub_xxx mov rcx r15 mov rdx rbx mov rsi r12 lea rdi GLOBAL_VAR call sub_xxx mov r13 rax test rax rax jnz JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] xor r13d r13d not [rax]	mov eax fs:xxx test eax eax jnz JUMP_ADDR_31	sub cs:xxx CONST	mov rsi rbp mov rdi r13 call sub_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_36	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rax [rbx+CONST] cmp rax r15 jnb JUMP_ADDR_16	call sub_xxx mov rsi r14 lea rdi GLOBAL_VAR call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_15	mov rsi r13 lea rdx [rbx+CONST] mov rdi rax mov r13 r14 call sub_xxx mov rdi r12 call sub_xxx jmp JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_36	add rsp CONST mov rdi rbp xor esi esi pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	xor esi esi call sub_xxx xor eax eax jmp JUMP_ADDR_19	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_7	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_7	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_18	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_18	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_11	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_11	mov rax CONST mov fs:xxx CONST xor eax eax jmp JUMP_ADDR_19	call sub_xxx	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]
[ph]libcap-git-setcap_tcache_init.part.0
mov rax CONST push rbp mov rbp fs:xxx test rbp rbp jz JUMP_ADDR_9	mov eax fs:xxx test eax eax jnz JUMP_ADDR_16	mov edx CONST cmpxchg [rbp+CONST] edx	mov esi CONST mov rdi rbp call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_13	mov eax fs:xxx test eax eax jnz JUMP_ADDR_18	sub [rbp+CONST] CONST	test r8 r8 jz JUMP_ADDR_8	mov fs:xxx r8 lea rdi [r8+CONST] xor eax eax and rdi CONST mov [r8] CONST mov [r8+CONST] CONST sub r8 rdi lea ecx [r8+CONST] shr ecx CONST rep CONST	pop rbp retn	call sub_xxx mov rbp rax test rax rax jnz JUMP_ADDR_3	xor esi esi mov edi CONST call sub_xxx mov esi CONST mov rdi rax mov rbp rax call sub_xxx mov r8 rax test rax rax jnz JUMP_ADDR_14	test rbp rbp jz JUMP_ADDR_6	nop [rax+rax+CONST]	mov rdi rbp mov esi CONST call sub_xxx mov esi CONST mov rdi rax mov rbp rax call sub_xxx mov r8 rax	test rbp rbp jz JUMP_ADDR_6	jmp JUMP_ADDR_4	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	mov rdi rbp call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax [rbp+CONST] cmp eax CONST jle JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall jmp JUMP_ADDR_6
[ph]libcap-git-setcap___malloc_fork_lock_parent
endbr64 mov eax cs:xxx test eax eax jle JUMP_ADDR_10	push r12 push rbp push rbx mov eax fs:xxx test eax eax jnz JUMP_ADDR_11	mov edx CONST cmpxchg cs:xxx edx	lea rbp GLOBAL_VAR xor r12d r12d mov rbx rbp nop [rax+rax+CONST]	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_8	cmpxchg [rbx] edx	mov rbx [rbx+CONST] cmp rbx rbp jnz JUMP_ADDR_4	pop rbx pop rbp pop r12 retn	mov eax r12d lock CONST edx jz JUMP_ADDR_6	mov rdi rbx call sub_xxx jmp JUMP_ADDR_6	retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3
[ph]libcap-git-setcap___malloc_fork_unlock_parent
endbr64 mov eax cs:xxx test eax eax jle JUMP_ADDR_10	lea r8 GLOBAL_VAR push rbx xor r9d r9d mov ebx CONST mov rdi r8 nop [rax+CONST]	mov eax fs:xxx test eax eax jnz JUMP_ADDR_8	sub [CONST_VAR] CONST	mov rdi [CONST_VAR+CONST] cmp rdi r8 jnz JUMP_ADDR_2	mov eax fs:xxx test eax eax jnz JUMP_ADDR_11	sub cs:xxx CONST	pop rbx retn	mov eax r9d xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov eax ebx syscall jmp JUMP_ADDR_4	retn	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_7	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall pop rbx retn
[ph]libcap-git-setcap___malloc_fork_unlock_child
endbr64 mov eax cs:xxx test eax eax jle JUMP_ADDR_8	mov rax CONST mov cs:xxx CONST mov rcx fs:xxx test rcx rcx jz JUMP_ADDR_3	mov [rcx+CONST] CONST	mov cs:xxx CONST lea rsi GLOBAL_VAR mov rax rsi nop [rax+CONST]	mov [rax] CONST cmp rcx rax jz JUMP_ADDR_6	mov rdx cs:xxx mov [rax+CONST] CONST mov cs:xxx rax mov [rax+CONST] rdx	mov rax [rax+CONST] cmp rax rsi jnz JUMP_ADDR_4	mov cs:xxx CONST	retn
[ph]libcap-git-setcap___malloc_check_init
endbr64 lea rax sub_xxx mov cs:xxx CONST mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax lea rax sub_xxx mov cs:xxx rax retn
[ph]libcap-git-setcap___libc_malloc
endbr64 push r12 mov rax cs:xxx push rbp mov rbp rdi push rbx test rax rax jnz JUMP_ADDR_21	test rdi rdi js JUMP_ADDR_20	lea rax [CONST_VAR+CONST] xor ebx ebx cmp rax CONST ja JUMP_ADDR_11	mov rax fs:xxx test rax rax jz JUMP_ADDR_12	cmp rbx cs:xxx jb JUMP_ADDR_16	mov eax fs:xxx test eax eax jnz JUMP_ADDR_22	lea rbx GLOBAL_VAR mov rsi rbp mov rdi rbx call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_19	mov rax [rax+CONST] test al CONST jnz JUMP_ADDR_10	test al CONST jz JUMP_ADDR_10	lea rax [r8+CONST] and rax CONST cmp [rax] rbx jnz JUMP_ADDR_36	pop rbx mov rax r8 pop rbp pop r12 retn	and rax CONST lea rbx [rax+CONST] shr rbx CONST jmp JUMP_ADDR_3	cmp fs:xxx CONST jnz JUMP_ADDR_5	call sub_xxx cmp cs:xxx rbx jbe JUMP_ADDR_5	mov rax fs:xxx test rax rax jz JUMP_ADDR_5	nop	movzx edx [rax+rbx*2] test dx dx jz JUMP_ADDR_5	lea rsi [rbx+CONST] mov r8 [rax+rsi*8] test r8b CONST jnz JUMP_ADDR_44	mov rcx r8 sub edx CONST shr rcx CONST xor rcx [r8] mov [rax+rsi*8] rcx mov [rax+rbx*2] dx mov rax r8 mov [r8+CONST] CONST pop rbx pop rbp pop r12 retn	xor r8d r8d pop rbx pop rbp mov rax r8 pop r12 retn	mov rax CONST xor r8d r8d mov fs:xxx CONST mov rax r8 pop rbx pop rbp pop r12 retn	mov rsi [rsp+CONST] pop rbx pop rbp pop r12 jmp rax	mov rax CONST mov r12 fs:xxx test r12 r12 jz JUMP_ADDR_37	mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	mov edx CONST cmpxchg [r12] edx	mov rsi rbp mov rdi r12 call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_41	mov eax fs:xxx test eax eax jnz JUMP_ADDR_45	sub [r12] CONST	test r8 r8 jz JUMP_ADDR_19	mov rax [r8+CONST] test al CONST jnz JUMP_ADDR_10	lea rdx GLOBAL_VAR test al CONST jz JUMP_ADDR_32	lea rax [r8+CONST] and rax CONST mov rdx [rax]	cmp rdx r12 jz JUMP_ADDR_10	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_25	mov rdi r12 call sub_xxx jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx mov r12 rax test rax rax jnz JUMP_ADDR_25	xor esi esi mov rdi rbp call sub_xxx mov rsi rbp mov rdi rax mov r12 rax call sub_xxx mov r8 rax test rax rax jnz JUMP_ADDR_42	test r12 r12 jz JUMP_ADDR_28	nop [rax+rax+CONST]	nop mov rdi r12 mov rsi rbp call sub_xxx mov rsi rbp mov rdi rax mov r12 rax call sub_xxx mov r8 rax	test r12 r12 jz JUMP_ADDR_28	jmp JUMP_ADDR_26	lea rdi GLOBAL_VAR call sub_xxx	xor eax eax xchg eax [r12] cmp eax CONST jle JUMP_ADDR_28	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_28
[ph]libcap-git-setcap_malloc_hook_ini
endbr64 mov eax cs:xxx mov cs:xxx CONST test eax eax js JUMP_ADDR_2	jmp UNK_JUMP_ADDR	sub rsp CONST mov [rsp+CONST+var_xxx] rdi call sub_xxx mov rdi [rsp+CONST+var_xxx] add rsp CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__mid_memalign
push r13 mov rax cs:xxx push r12 mov r12 rsi push rbp test rax rax jnz JUMP_ADDR_18	cmp rdi CONST jbe JUMP_ADDR_16	cmp rdi CONST ja JUMP_ADDR_10	mov ebp CONST	mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	mov rsi rbp lea rbp GLOBAL_VAR mov rdx r12 mov rdi rbp call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_17	mov rax [rax+CONST] test al CONST jnz JUMP_ADDR_9	test al CONST jz JUMP_ADDR_9	lea rax [r8+CONST] and rax CONST cmp [rax] rbp jnz JUMP_ADDR_42	pop rbp mov rax r8 pop r12 pop r13 retn	mov rax CONST cmp rdi rax ja JUMP_ADDR_31	lea rax [CONST_VAR+CONST] test rax rdi jz JUMP_ADDR_43	mov ebp CONST cmp rdi CONST jz JUMP_ADDR_4	nop	add rbp rbp cmp rdi rbp ja JUMP_ADDR_14	jmp JUMP_ADDR_4	pop rbp mov rdi rsi pop r12 pop r13 jmp UNK_JUMP_ADDR	xor r8d r8d pop rbp pop r12 mov rax r8 pop r13 retn	pop rbp pop r12 pop r13 jmp rax	mov rax CONST mov r13 fs:xxx test r13 r13 jz JUMP_ADDR_34	mov eax fs:xxx test eax eax jnz JUMP_ADDR_32	mov edx CONST cmpxchg [r13+CONST] edx	mov rdx r12 mov rsi rbp mov rdi r13 call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_37	mov eax fs:xxx test eax eax jnz JUMP_ADDR_40	sub [r13+CONST] CONST	test r8 r8 jz JUMP_ADDR_17	mov rax [r8+CONST] test al CONST jnz JUMP_ADDR_9	lea rdx GLOBAL_VAR test al CONST jz JUMP_ADDR_29	lea rax [r8+CONST] and rax CONST mov rdx [rax]	cmp rdx r13 jz JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rax CONST xor r8d r8d mov fs:xxx CONST jmp JUMP_ADDR_9	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_22	mov rdi r13 call sub_xxx jmp JUMP_ADDR_22	call sub_xxx mov r13 rax test rax rax jnz JUMP_ADDR_22	lea rdi [rbp+r12+CONST] xor esi esi call sub_xxx mov rdx r12 mov rsi rbp mov rdi rax mov r13 rax call sub_xxx mov r8 rax test rax rax jnz JUMP_ADDR_38	test r13 r13 jz JUMP_ADDR_25	nop mov rdi r13 mov rsi r12 call sub_xxx mov rdx r12 mov rsi rbp mov rdi rax mov r13 rax call sub_xxx mov r8 rax	test r13 r13 jz JUMP_ADDR_25	jmp JUMP_ADDR_23	xor eax eax xchg eax [r13+CONST] cmp eax CONST jle JUMP_ADDR_25	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_25	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rbp rdi jmp JUMP_ADDR_4
[ph]libcap-git-setcap_memalign_hook_ini
endbr64 sub rsp CONST mov eax cs:xxx mov cs:xxx CONST test eax eax jns JUMP_ADDR_2	mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx]	mov rdx [rsp+CONST] add rsp CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_free
endbr64 push rbp push rbx sub rsp CONST mov rax cs:xxx test rax rax jnz JUMP_ADDR_12	test rdi rdi jz JUMP_ADDR_7	mov rbx CONST mov rax [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] mov ebp fs:xxx test al CONST jnz JUMP_ADDR_8	cmp fs:xxx CONST jz JUMP_ADDR_14	lea rdi GLOBAL_VAR test al CONST jz JUMP_ADDR_6	mov rax rsi and rax CONST mov rdi [rax]	xor edx edx call sub_xxx mov fs:xxx ebp	add rsp CONST pop rbx pop rbp retn	mov edx cs:xxx test edx edx jnz JUMP_ADDR_11	cmp rax cs:xxx jbe JUMP_ADDR_11	cmp rax CONST jbe JUMP_ADDR_13	mov rdi rsi call sub_xxx mov fs:xxx ebp add rsp CONST pop rbx pop rbp retn	mov rsi [rsp+CONST] add rsp CONST pop rbx pop rbp jmp rax	and rax CONST lea rdx [rax+rax] mov cs:xxx rax mov cs:xxx rdx nop jmp JUMP_ADDR_11	mov [rsp+CONST+var_xxx] rdi cmp fs:xxx CONST jnz JUMP_ADDR_4	mov [rsp+CONST+var_xxx] rsi call sub_xxx mov rdi [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rax [CONST_VAR+CONST] jmp JUMP_ADDR_4
[ph]libcap-git-setcap___malloc_arena_thread_freeres
endbr64 push r12 push rbp push rbx mov rbp fs:xxx test rbp rbp jz JUMP_ADDR_8	mov fs:xxx CONST lea rbx [rbp+CONST] lea r12 [rbp+CONST] mov fs:xxx CONST jmp JUMP_ADDR_3	mov rax rdi shr rax CONST xor rax [CONST_VAR] mov [rbx] rax call sub_xxx	mov rdi [rbx] test rdi rdi jz JUMP_ADDR_6	test dil CONST jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx nop [rax+CONST]	add rbx CONST cmp rbx r12 jnz JUMP_ADDR_3	mov rdi rbp call sub_xxx nop [rax+CONST]	mov rax CONST mov rbx fs:xxx mov fs:xxx CONST test rbx rbx jz JUMP_ADDR_16	mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	mov edx CONST cmpxchg cs:xxx edx	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_21	sub rax CONST mov [rbx+CONST] rax jnz JUMP_ADDR_14	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax	mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	sub cs:xxx CONST	pop rbx pop rbp pop r12 retn	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_16	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_16	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_11	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_11	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___realloc
endbr64 push r15 push r14 push r13 push r12 mov r12 rsi push rbp mov rbp rdi push rbx sub rsp CONST mov rax cs:xxx test rax rax jnz JUMP_ADDR_26	test rsi rsi jnz JUMP_ADDR_4	test rdi rdi jnz JUMP_ADDR_27	add rsp CONST mov rdi r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	test rdi rdi jz JUMP_ADDR_3	mov rax [CONST_VAR+CONST] lea r14 [CONST_VAR+CONST] xor ebx ebx mov r15 rax and r15 CONST test al CONST jnz JUMP_ADDR_8	cmp fs:xxx CONST jz JUMP_ADDR_28	lea rbx GLOBAL_VAR test al CONST jnz JUMP_ADDR_21	mov rdx r15 neg rdx cmp r14 rdx ja JUMP_ADDR_46	test r14b CONST jnz JUMP_ADDR_46	test r12 r12 js JUMP_ADDR_25	lea rdx [r12+CONST] mov rcx rdx and rcx CONST cmp rdx CONST mov edx CONST cmovbe rcx rdx test al CONST jz JUMP_ADDR_14	mov rsi rcx mov rdi r14 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] test rax rax lea r13 [rax+CONST] jz JUMP_ADDR_22	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax fs:xxx test eax eax jnz JUMP_ADDR_30	mov rdx r15 mov rsi r14 mov rdi rbx call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_13	mov rax [rax+CONST] test al CONST jnz JUMP_ADDR_13	lea rdx GLOBAL_VAR test al CONST jz JUMP_ADDR_19	lea rax [r13+CONST] and rax CONST mov rdx [rax]	cmp rbx rdx jz JUMP_ADDR_13	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rdx r14 and rdx CONST mov rbx [rdx] jmp JUMP_ADDR_8	lea rax [r15+CONST] mov r13 rbp cmp rax rcx jnb JUMP_ADDR_13	mov rdi r12 call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_13	lea rdx [r15+CONST] mov rsi rbp mov rdi rax call sub_xxx mov rdi r14 call sub_xxx jmp JUMP_ADDR_13	mov rax CONST xor r13d r13d mov fs:xxx CONST jmp JUMP_ADDR_13	mov rdx [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	call sub_xxx xor r13d r13d jmp JUMP_ADDR_13	cmp fs:xxx CONST jnz JUMP_ADDR_7	call sub_xxx mov rax [rbp+CONST] jmp JUMP_ADDR_7	mov eax fs:xxx test eax eax jnz JUMP_ADDR_44	mov edx CONST cmpxchg [rbx] edx	mov rdx r15 mov rsi r14 mov rdi rbx call sub_xxx mov r13 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_42	sub [rbx] CONST	test r13 r13 jz JUMP_ADDR_40	mov rax [r13+CONST] test al CONST jnz JUMP_ADDR_13	lea rdx GLOBAL_VAR test al CONST jz JUMP_ADDR_38	lea rax [r13+CONST] and rax CONST mov rdx [rax]	cmp rbx rdx jz JUMP_ADDR_13	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	nop mov rdi r12 call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_13	lea rdx [r15+CONST] mov rsi rbp mov rdi rax call sub_xxx xor edx edx mov rsi r14 mov rdi rbx call sub_xxx jmp JUMP_ADDR_13	xor eax eax xchg eax [rbx] cmp eax CONST jle JUMP_ADDR_34	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbx mov eax CONST syscall jmp JUMP_ADDR_34	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_32	mov rdi rbx mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_32	lea rdi GLOBAL_VAR call sub_xxx nop [rax+rax+CONST]	endbr64 mov eax cs:xxx mov cs:xxx CONST mov cs:xxx CONST test eax eax js JUMP_ADDR_49	jmp UNK_JUMP_ADDR	sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] add rsp CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_aligned_alloc
endbr64 mov rdx [rsp] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___valloc
endbr64 mov eax cs:xxx push rbp mov rbp rdi test eax eax js JUMP_ADDR_2	mov rdx [rsp+CONST] mov rdi cs:xxx mov rsi rbp pop rbp jmp UNK_JUMP_ADDR	call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap___pvalloc
endbr64 mov eax cs:xxx push rbx mov rbx rdi test eax eax js JUMP_ADDR_3	mov rdi cs:xxx mov rdx [rsp+CONST] lea rax [CONST_VAR+CONST] add rbx rax jb JUMP_ADDR_4	mov esi CONST sub rsi rdi and rsi rbx pop rbx jmp UNK_JUMP_ADDR	call sub_xxx jmp JUMP_ADDR_1	mov rax CONST mov fs:xxx CONST xor eax eax pop rbx retn
[ph]libcap-git-setcap___libc_calloc
endbr64 push r13 mov rax rdi push r12 push rbp push rbx sub rsp CONST mul rsi mov r12 rax seto al test r12 r12 js JUMP_ADDR_27	movzx eax al test rax rax jnz JUMP_ADDR_27	mov rax cs:xxx test rax rax jnz JUMP_ADDR_28	cmp fs:xxx CONST jz JUMP_ADDR_41	mov eax fs:xxx test eax eax jnz JUMP_ADDR_30	mov r13 cs:xxx lea rbp GLOBAL_VAR mov rbx [r13+CONST] and rbx CONST	mov rsi r12 mov rdi rbp call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_8	mov rax [rax+CONST] test al CONST jz JUMP_ADDR_20	mov eax fs:xxx test eax eax jnz JUMP_ADDR_35	test r8 r8 jz JUMP_ADDR_29	mov rdx [r8+CONST] mov eax cs:xxx test dl CONST jz JUMP_ADDR_13	mov rdx r12 test eax eax jnz JUMP_ADDR_25	add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 retn	and rdx CONST test eax eax jz JUMP_ADDR_24	sub rdx CONST cmp rdx CONST jbe JUMP_ADDR_50	cmp rdx CONST ja JUMP_ADDR_25	mov [r8] CONST mov [r8+CONST] CONST mov [r8+CONST] CONST cmp rdx CONST jbe JUMP_ADDR_12	mov [r8+CONST] CONST mov [r8+CONST] CONST cmp rdx CONST jbe JUMP_ADDR_12	mov [r8+CONST] CONST mov [r8+CONST] CONST cmp rdx CONST jbe JUMP_ADDR_12	mov [r8+CONST] CONST mov [r8+CONST] CONST jmp JUMP_ADDR_12	lea rdx GLOBAL_VAR test al CONST jz JUMP_ADDR_22	lea rax [r8+CONST] and rax CONST mov rdx [rax]	cmp rdx rbp jz JUMP_ADDR_8	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	cmp rbx rdx mov rcx rdx lea rax [r8+CONST] cmovbe rdx rbx cmp r13 rax cmovnz rdx rcx jmp JUMP_ADDR_14	xor esi esi mov rdi r8	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax CONST xor r8d r8d mov fs:xxx CONST add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 retn	mov rsi [rsp+CONST] mov rdi r12 call rax mov rdx r12 xor esi esi mov rdi rax test rax rax jnz JUMP_ADDR_26	xor r8d r8d jmp JUMP_ADDR_12	mov rax CONST mov rbp fs:xxx test rbp rbp jz JUMP_ADDR_43	mov eax fs:xxx test eax eax jnz JUMP_ADDR_46	mov edx CONST cmpxchg [rbp+CONST] edx	mov r13 [rbp+CONST] lea rax GLOBAL_VAR mov rbx [r13+CONST] and rbx CONST cmp rbp rax jz JUMP_ADDR_6	mov rax r13 and rax CONST add rax [rax+CONST] sub rax r13 cmp rbx rax cmovb rbx rax jmp JUMP_ADDR_6	test r8 r8 jnz JUMP_ADDR_38	test rbp rbp jz JUMP_ADDR_9	nop mov rdi rbp mov rsi r12 call sub_xxx mov rsi r12 mov rdi rax mov rbp rax call sub_xxx mov r8 rax	test rbp rbp jz JUMP_ADDR_9	mov eax fs:xxx test eax eax jnz JUMP_ADDR_48	sub [rbp+CONST] CONST jmp JUMP_ADDR_9	cmp fs:xxx CONST jnz JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_4	call sub_xxx mov rbp rax test rax rax jnz JUMP_ADDR_33	xor esi esi mov rdi r12 call sub_xxx mov rbp rax test rax rax jnz JUMP_ADDR_33	xor r13d r13d xor ebx ebx jmp JUMP_ADDR_6	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_33	mov rdi rbp call sub_xxx jmp JUMP_ADDR_33	xor eax eax xchg eax [rbp+CONST] cmp eax CONST jle JUMP_ADDR_9	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall jmp JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov eax cs:xxx mov [rsp+CONST+var_xxx] rdi test eax eax js JUMP_ADDR_85	lea rax GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax	mov eax fs:xxx mov edx CONST mov rcx [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_83	cmpxchg [rcx] edx	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rcx cs:xxx cmp rcx CONST ja JUMP_ADDR_74	mov eax ecx shr eax CONST mov [rsp+CONST+var_xxx] eax	mov rax [rsp+CONST+var_xxx] lea rbp [rcx+CONST] lea r13 [rcx+CONST] neg rcx xor esi esi mov r15d CONST mov r12 rcx lea r14 [rax+CONST] jmp JUMP_ADDR_60	cmp [rsp+CONST+var_xxx] r15d jle JUMP_ADDR_61	add r15d CONST add r14 CONST cmp r15d CONST jz JUMP_ADDR_69	cmp r15d CONST jnz JUMP_ADDR_58	mov rbx [r14+CONST] cmp r14 rbx jnz JUMP_ADDR_64	jmp JUMP_ADDR_59	mov rbx [rbx+CONST] cmp r14 rbx jz JUMP_ADDR_59	mov rax [rbx+CONST] and rax CONST cmp rax r13 jbe JUMP_ADDR_63	lea rdi [rbx+r13] lea rdx [rbx+CONST] and rdi r12 cmp rdi rdx jb JUMP_ADDR_82	lea rdx [rbx+rax] cmp rdi rdx jnb JUMP_ADDR_81	mov rdx rdi sub rdx rbx sub rax rdx cmp rbp rax jnb JUMP_ADDR_63	and rax r12 mov edx CONST mov rsi rax call sub_xxx mov esi CONST jmp JUMP_ADDR_63	lea rcx GLOBAL_VAR cmp [rsp+CONST+var_xxx] rcx jz JUMP_ADDR_80	or [rsp+CONST+var_xxx] esi mov eax fs:xxx test eax eax jnz JUMP_ADDR_88	mov rax [rsp+CONST+var_xxx] sub [rax] CONST	mov rax [rsp+CONST+var_xxx] lea rcx GLOBAL_VAR mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rax cmp rax rcx jnz JUMP_ADDR_53	mov eax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rbp rcx shr rbp CONST cmp rcx CONST ja JUMP_ADDR_76	lea eax [rbp+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_57	mov rbp rcx shr rbp CONST cmp rcx CONST jbe JUMP_ADDR_79	mov rbp rcx shr rbp CONST cmp rcx CONST ja JUMP_ADDR_86	lea eax [rbp+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_57	lea eax [rbp+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_57	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] esi call sub_xxx mov esi [rsp+CONST+var_xxx] or esi eax jmp JUMP_ADDR_70	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor eax eax lock CONST edx jz JUMP_ADDR_55	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_55	call sub_xxx jmp JUMP_ADDR_52	mov rbp rcx shr rbp CONST cmp rcx CONST ja JUMP_ADDR_90	lea eax [rbp+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_57	mov rcx [rsp+CONST+var_xxx] xor eax eax xchg eax [rcx] cmp eax CONST jle JUMP_ADDR_72	xor r10d r10d mov edx CONST mov esi CONST mov rdi rcx mov eax CONST syscall jmp JUMP_ADDR_72	mov rbp rcx mov eax CONST shr rbp CONST cmp rbp rax cmova rbp rax lea eax [rbp+CONST] mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_57
[ph]libcap-git-setcap___malloc_usable_size
endbr64 test rdi rdi jz JUMP_ADDR_5	mov rax [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] mov rcx rax and rax CONST and ecx CONST cmp cs:xxx CONST mov rdx rax jz JUMP_ADDR_6	test rcx rcx jz JUMP_ADDR_4	lea rax [rax+CONST] retn	mov rax [CONST_VAR+rax+CONST] sub rdx CONST and eax CONST cmovnz rax rdx retn	xor eax eax retn	mov r8 rsi mov rax rsi shr rax CONST shr r8 CONST xor r8d eax mov eax CONST cmp r8b CONST cmovz r8d eax xor eax eax test rcx rcx setz al lea rax [rdx+rax*8+CONST] movzx edx [CONST_VAR+rax+CONST] cmp r8b dl jz JUMP_ADDR_11	nop [rax]	test dl dl jz JUMP_ADDR_12	lea rcx [rdx+CONST] cmp rcx rax ja JUMP_ADDR_12	sub rax rdx movzx edx [CONST_VAR+rax] cmp r8b dl jnz JUMP_ADDR_8	sub rax CONST retn	sub rsp CONST lea rdi GLOBAL_VAR call sub_xxx xchg ax ax
[ph]libcap-git-setcap___libc_mallinfo2
endbr64 push r14 push r13 mov r13 rdi push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov eax cs:xxx test eax eax js JUMP_ADDR_13	pxor xmm0 xmm0 lea rbp GLOBAL_VAR mov r12 rsp xor r14d r14d movaps [rsp+CONST+var_xxx] xmm0 mov rbx rbp movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm0 nop [rax]	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_11	cmpxchg [rbx] edx	mov rsi r12 mov rdi rbx call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_9	sub [rbx] CONST	mov rbx [rbx+CONST] cmp rbx rbp jnz JUMP_ADDR_2	movdqa xmm1 [rsp+CONST+var_xxx] movdqa xmm2 [rsp+CONST+var_xxx] movdqa xmm3 [rsp+CONST+var_xxx] movdqa xmm4 [rsp+CONST+var_xxx] movdqa xmm5 [rsp+CONST+var_xxx] movups [r13+CONST] xmm1 movups [r13+CONST] xmm2 movups [r13+CONST] xmm3 movups [r13+CONST] xmm4 movups [r13+CONST] xmm5 mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_14	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov eax r14d xchg eax [rbx] cmp eax CONST jle JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbx mov eax CONST syscall jmp JUMP_ADDR_6	mov eax r14d lock CONST edx jz JUMP_ADDR_4	mov rdi rbx call sub_xxx jmp JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_1	call sub_xxx	endbr64 push r12 mov r12 rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi rsp call sub_xxx mov rax [rsp+CONST+var_xxx] mov [r12] eax mov rax [rsp+CONST+var_xxx+CONST] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx+CONST] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx+CONST] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] eax mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_17	add rsp CONST mov rax r12 pop r12 retn	call sub_xxx	endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r15 cs:xxx mov rax fs:xxx mov [rsp+CONST+var_xxx+CONST] rax xor eax eax mov eax cs:xxx mov r12d r15d test eax eax js JUMP_ADDR_32	mov rax cs:xxx lea r8 [rsp+CONST+var_xxx] xor ebp ebp lea rbx GLOBAL_VAR lea r14 GLOBAL_VAR lea r13 GLOBAL_VAR mov ecx [rax+CONST] mov edx ecx mov [rsp+CONST+var_xxx] ecx or edx CONST mov [rax+CONST] edx mov rax r8 mov r8d r12d mov r12d ebp mov rbp rax jmp JUMP_ADDR_21	add r12d CONST	pxor xmm0 xmm0 movaps [rbp+CONST] xmm0 movaps [rbp+CONST] xmm0 movaps [rbp+CONST] xmm0 movaps [rbp+CONST] xmm0 movaps [rbp+CONST] xmm0 mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_30	cmpxchg [rbx] edx	mov rsi rbp mov rdi rbx mov [rsp+CONST+var_xxx] r8d call sub_xxx mov rdi cs:xxx mov edx r12d xor eax eax lea rsi GLOBAL_VAR call sub_xxx mov edx [rsp+CONST+var_xxx] mov rsi r14 xor eax eax mov rdi cs:xxx call sub_xxx mov edx [rsp+CONST+var_xxx+CONST] mov rsi r13 xor eax eax mov rdi cs:xxx call sub_xxx mov r8d [rsp+CONST+var_xxx] add r15d [rsp+CONST+var_xxx+CONST] add r8d [rsp+CONST+var_xxx] mov eax fs:xxx test eax eax jnz JUMP_ADDR_28	sub [rbx] CONST	mov rbx [rbx+CONST] lea rax GLOBAL_VAR cmp rbx rax jnz JUMP_ADDR_20	mov rcx cs:xxx mov edx CONST mov esi CONST mov r12d r8d lea rdi GLOBAL_VAR call sub_xxx mov edx r12d mov rsi r14 xor eax eax mov rdi cs:xxx call sub_xxx mov edx r15d mov rsi r13 xor eax eax mov rdi cs:xxx call sub_xxx mov edx cs:xxx mov rdi cs:xxx xor eax eax lea rsi GLOBAL_VAR call sub_xxx mov rdx cs:xxx mov rdi cs:xxx xor eax eax lea rsi GLOBAL_VAR call sub_xxx mov rax cs:xxx mov ecx [rsp+CONST+var_xxx] mov [rax+CONST] ecx mov rax [rsp+CONST+var_xxx+CONST] sub rax fs:xxx jnz JUMP_ADDR_33	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	xor eax eax xchg eax [rbx] cmp eax CONST jle JUMP_ADDR_25	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbx mov eax CONST syscall jmp JUMP_ADDR_25	xor eax eax lock CONST edx jz JUMP_ADDR_23	mov rdi rbx mov [rsp+CONST+var_xxx] r8d call sub_xxx mov r8d [rsp+CONST+var_xxx] jmp JUMP_ADDR_23	call sub_xxx jmp JUMP_ADDR_19	call sub_xxx
[ph]libcap-git-setcap___mallopt
endbr64 mov eax cs:xxx push r12 push rbp mov ebp edi push rbx movsxd rbx esi test eax eax js JUMP_ADDR_5	mov eax fs:xxx test eax eax jnz JUMP_ADDR_21	mov edx CONST cmpxchg cs:xxx edx lea r12 GLOBAL_VAR	nop mov rdi r12 call sub_xxx lea eax [rbp+CONST] cmp eax CONST ja JUMP_ADDR_10	lea rdx unk_xxx movsxd rax [rdx+rax*4] add rax rdx jmp rax	call sub_xxx jmp JUMP_ADDR_1	xor r8d r8d cmp rbx CONST jbe UNK_JUMP_ADDR	mov eax fs:xxx test eax eax jnz JUMP_ADDR_23	sub cs:xxx CONST	pop rbx mov eax r8d pop rbp pop r12 retn	mov r8d CONST jmp JUMP_ADDR_7	mov cs:xxx CONST mov r8d CONST mov cs:xxx ebx jmp JUMP_ADDR_7	xor r8d r8d cmp rbx CONST ja JUMP_ADDR_7	nop mov cs:xxx CONST mov r8d CONST mov cs:xxx rbx jmp JUMP_ADDR_7	mov cs:xxx CONST mov r8d CONST mov cs:xxx rbx jmp JUMP_ADDR_7	mov cs:xxx CONST mov r8d CONST mov cs:xxx rbx jmp JUMP_ADDR_7	mov r8d CONST test ebx ebx jle JUMP_ADDR_7	nop mov cs:xxx rbx jmp JUMP_ADDR_7	mov r8d CONST mov cs:xxx ebx jmp JUMP_ADDR_7	mov r8d CONST test ebx ebx jle JUMP_ADDR_7	nop mov cs:xxx rbx jmp JUMP_ADDR_7	xor eax eax mov edx CONST lock CONST edx lea r12 GLOBAL_VAR jz JUMP_ADDR_3	mov rdi r12 call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_9	xor r10d r10d mov edx CONST mov esi CONST mov rdi r12 mov eax CONST syscall jmp JUMP_ADDR_9
[ph]libcap-git-setcap_posix_memalign
endbr64 push rbx mov rbx rdi mov rdi rsi mov rsi rdx mov rdx rdi shr rdx CONST lea rax [rdx+CONST] and rax rdx mov rdx rdi and edx CONST or rax rdx jnz JUMP_ADDR_5	test rdi rdi jz JUMP_ADDR_5	mov rdx [rsp+CONST] call sub_xxx mov rdx rax mov eax CONST test rdx rdx jz JUMP_ADDR_4	mov [rbx] rdx xor eax eax	pop rbx retn	mov eax CONST pop rbx retn
[ph]libcap-git-setcap_malloc_info
endbr64 test edi edi jnz JUMP_ADDR_4	mov eax cs:xxx push rbp mov rbp rsi test eax eax js JUMP_ADDR_3	mov rsi rbp lea rdi GLOBAL_VAR call sub_xxx mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	call sub_xxx jmp JUMP_ADDR_2	mov eax CONST retn
[ph]libcap-git-setcap___default_morecore
endbr64 sub rsp CONST call sub_xxx xor edx edx cmp rax CONST cmovz rax rdx add rsp CONST retn
[ph]libcap-git-setcap___libc_scratch_buffer_grow_preserve
endbr64 push r14 lea r14 [CONST_VAR+CONST] push r13 push r12 push rbp push rbx mov r13 [CONST_VAR+CONST] mov rbx rdi mov r12 [CONST_VAR] lea rbp [r13+r13+CONST] cmp r12 r14 jz JUMP_ADDR_5	cmp r13 rbp ja JUMP_ADDR_7	mov rsi rbp mov rdi r12 call sub_xxx mov rcx rax test rax rax jz JUMP_ADDR_9	mov [rbx] rcx mov eax CONST mov [rbx+CONST] rbp	pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_10	mov rdx r13 mov rsi r12 mov rdi rax call sub_xxx mov rcx rax jmp JUMP_ADDR_3	mov rax CONST mov fs:xxx CONST	mov rdi r12 call sub_xxx mov [rbx] r14 xor eax eax mov [rbx+CONST] CONST jmp JUMP_ADDR_4	mov r12 [rbx] jmp JUMP_ADDR_8	xor eax eax jmp JUMP_ADDR_4
[ph]libcap-git-setcap___libc_scratch_buffer_set_array_size
endbr64 mov rcx rdx mov rax rsi push r12 mul rcx push rbp push rbx mov rbx rdi mov r12 rax seto al or rcx rsi shr rcx CONST jz JUMP_ADDR_2	test rsi rsi jnz JUMP_ADDR_8	mov eax CONST cmp [rbx+CONST] r12 jnb JUMP_ADDR_7	mov rdi [rbx] lea rbp [rbx+CONST] cmp rdi rbp jz JUMP_ADDR_5	call sub_xxx	mov rdi r12 call sub_xxx test rax rax jz JUMP_ADDR_12	mov [rbx+CONST] r12 mov [rbx] rax mov eax CONST	pop rbx pop rbp pop r12 retn	movzx eax al test rax rax jz JUMP_ADDR_2	mov rdi [CONST_VAR] lea rbp [rbx+CONST] cmp rdi rbp jz JUMP_ADDR_11	call sub_xxx	mov rax CONST mov [rbx] rbp mov [rbx+CONST] CONST mov fs:xxx CONST xor eax eax pop rbx pop rbp pop r12 retn	mov [rbx] rbp mov [rbx+CONST] CONST jmp JUMP_ADDR_7
[ph]libcap-git-setcap_strchr_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_4	test cs:xxx CONST jz JUMP_ADDR_4	lea rax sub_xxx test dh CONST jnz JUMP_ADDR_5	nop [rax+CONST]	and edx CONST lea rax loc_xxx lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap_strcmp_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_2	test cs:xxx CONST jnz JUMP_ADDR_5	and edx CONST lea rax sub_xxx jnz JUMP_ADDR_4	test cs:xxx CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn	lea rax sub_xxx test dh CONST jz JUMP_ADDR_2	retn
[ph]libcap-git-setcap_strcpy_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_2	test cs:xxx CONST jnz JUMP_ADDR_5	and edx CONST lea rax sub_xxx jnz JUMP_ADDR_4	test cs:xxx CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn	lea rax sub_xxx test dh CONST jz JUMP_ADDR_2	retn
[ph]libcap-git-setcap_strcspn_ifunc
endbr64 test cs:xxx CONST lea rdx sub_xxx lea rax loc_xxx cmovnz rax rdx retn
[ph]libcap-git-setcap_strdup
endbr64 push r12 push rbp mov rbp rdi sub rsp CONST call sub_xxx lea r12 [rax+CONST] mov rdi r12 call sub_xxx test rax rax jz JUMP_ADDR_2	add rsp CONST mov rdx r12 mov rsi rbp mov rdi rax pop rbp pop r12 jmp UNK_JUMP_ADDR	pop rdx xor eax eax pop rbp pop r12 retn
[ph]libcap-git-setcap_strerror
endbr64 mov rax CONST mov rsi fs:xxx jmp JUMP_ADDR_1	endbr64 push r15 push r14 push r13 mov r13d edi push r12 push rbp mov rbp rsi push rbx sub rsp CONST mov rbx CONST mov r14d fs:xxx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_4	mov rdi rbp call sub_xxx mov rsi r12 mov edx CONST lea rdi GLOBAL_VAR mov rbp rax call sub_xxx mov rdi rbp mov r12 rax call sub_xxx	mov fs:xxx r14d add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r15 fs:xxx mov rdi [r15+CONST] call sub_xxx mov rdi rbp call sub_xxx mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdi [rsp+CONST+var_xxx] mov rbp rax call sub_xxx xor eax eax mov ecx r13d mov rdx rbp lea rdi [r15+CONST] lea rsi GLOBAL_VAR call sub_xxx cmp eax CONST jz JUMP_ADDR_6	mov r12 [r15+CONST] jmp JUMP_ADDR_3	mov [r15+CONST] CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap_strerror_r
endbr64 push r12 mov r12 rsi push rbp mov rbp rdx push rbx mov ebx edi call sub_xxx test rax rax jz JUMP_ADDR_2	pop rbx mov rsi rax pop rbp mov edx CONST lea rdi GLOBAL_VAR pop r12 jmp UNK_JUMP_ADDR	mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx mov r8d ebx mov rsi rbp mov rdi r12 mov rcx rax lea rdx GLOBAL_VAR xor eax eax call sub_xxx mov rax r12 pop rbx pop rbp pop r12 retn
[ph]libcap-git-setcap_strlen_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___strnlen_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap_strncmp_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_4	test cs:xxx CONST jz JUMP_ADDR_4	lea rax sub_xxx test dh CONST jnz JUMP_ADDR_7	nop [rax+CONST]	mov ecx cs:xxx test ecx CONST jz JUMP_ADDR_6	and edx CONST lea rax sub_xxx jz JUMP_ADDR_7	and ch CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap_two_way_long_needle
push r15 push r14 mov r14 rdi push r13 push r12 mov r12 rsi push rbp mov rbp rdx push rbx mov rbx rcx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp rcx CONST jbe JUMP_ADDR_65	xor esi esi mov r15d CONST mov ecx CONST mov rdx CONST mov eax CONST jmp JUMP_ADDR_4	mov r15 rax mov rsi rax mov ecx CONST sub r15 rdx	lea rax [rcx+CONST_VAR] cmp rbx rax jbe JUMP_ADDR_7	lea rdi [rbp+rcx+CONST] movzx edi [CONST_VAR+rdx] cmp [rbp+rax+CONST] dil jb JUMP_ADDR_2	jz JUMP_ADDR_33	mov rdx rsi mov ecx CONST add rsi CONST mov r15d CONST lea rax [rcx+CONST_VAR] cmp rbx rax ja JUMP_ADDR_4	xor esi esi mov r10d CONST mov ecx CONST mov rdi CONST mov eax CONST jmp JUMP_ADDR_10	mov r10 rax mov rsi rax mov ecx CONST sub r10 rdi	lea rax [CONST_VAR+rcx] cmp rbx rax jbe JUMP_ADDR_13	lea r8 [rbp+CONST_VAR+CONST] movzx r11d [r8+rcx] cmp [rbp+rax+CONST] r11b ja JUMP_ADDR_8	jz JUMP_ADDR_35	mov rdi rsi mov ecx CONST add rsi CONST mov r10d CONST lea rax [CONST_VAR+rcx] cmp rbx rax ja JUMP_ADDR_10	add rdi CONST lea r13 [rdx+CONST] cmp rdi r13 jb JUMP_ADDR_15	mov r15 r10 mov r13 rdi	lea rax [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] nop [rax+CONST]	mov [rax] rbx add rax CONST cmp rax rcx jnz JUMP_ADDR_16	test rbx rbx jz JUMP_ADDR_20	lea r9 [rbx+rbp] mov rax rbp lea rdi [rbp+rbx+CONST] nop [rax]	movzx edx [rax] mov rcx rdi sub rcx rax add rax CONST mov [rsp+rdx*8+CONST+var_xxx] rcx cmp r9 rax jnz JUMP_ADDR_19	lea rsi [rbp+r15+CONST] mov rdx r13 mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_48	lea rax [rbx+CONST] lea r9 [rbx+CONST] xor ecx ecx xor r10d r10d mov [rsp+CONST+var_xxx] rax mov eax CONST mov r8 rbx sub rax r13 mov [rsp+CONST+var_xxx] rax lea rax [r13+CONST] mov [rsp+CONST+var_xxx] rax mov rax rbx mov rbx rcx mov rcx r13 sub rax r15 mov r13 r10 mov [rsp+CONST+var_xxx] rax mov rax r9 mov r9 r15 mov r15 r14 mov r14 r12 mov r12 rbp mov rbp rax jmp JUMP_ADDR_25	test r13 r13 jz JUMP_ADDR_24	cmp rax r9 cmovb rax [rsp+CONST+var_xxx]	add rbx rax xor r13d r13d	lea rdx [rbx+r8] cmp rdx r14 jbe JUMP_ADDR_27	mov rsi [rsp+CONST+var_xxx] lea rdi [r15+r14] mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] add r14 rax mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] cmp rdx r14 ja JUMP_ADDR_44	movzx eax [r15+rdx+CONST] mov rax [rsp+rax*8+CONST+var_xxx] test rax rax jnz JUMP_ADDR_22	cmp r13 rcx mov rax rcx lea rdx [r15+rbx] cmovnb rax r13 cmp rax rbp jb JUMP_ADDR_31	jmp JUMP_ADDR_37	add rax CONST cmp rax rbp jnb JUMP_ADDR_37	movzx esi [rdx+rax] cmp [r12+rax] sil jz JUMP_ADDR_30	add rbx [rsp+CONST+var_xxx] jmp JUMP_ADDR_24	cmp r15 rcx jz JUMP_ADDR_63	add rcx CONST jmp JUMP_ADDR_3	cmp r10 rcx jz JUMP_ADDR_64	add rcx CONST jmp JUMP_ADDR_9	mov rsi [rsp+CONST+var_xxx] lea rdi [r12+CONST] mov rdx rcx mov rax rsi add rsi rbx sub rsi rcx add rsi r15 cmp r13 rcx jb JUMP_ADDR_41	jmp JUMP_ADDR_42	lea rdx [rax+CONST] cmp r13 rax jz JUMP_ADDR_47	mov rax rdx	movzx r11d [rax+CONST_VAR+CONST] lea rdx [rax+CONST] cmp [CONST_VAR+rax+CONST] r11b jz JUMP_ADDR_39	add r13 CONST cmp r13 rdx ja JUMP_ADDR_67	mov r13 [rsp+CONST+var_xxx] add rbx r9 jmp JUMP_ADDR_25	xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_68	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx r13 jmp JUMP_ADDR_42	mov rax rbx lea r9 [rbx+CONST] mov rcx r13 mov r8 rbx sub rax r13 cmp rax r13 cmovb rax r13 xor r15d r15d add rax CONST mov [rsp+CONST+var_xxx] rax lea rax [rbx+CONST] mov rbx r9 mov [rsp+CONST+var_xxx] rax mov eax CONST sub rax r13 mov r13 r12 mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_50	add r15 rax	lea r12 [r15+r8] cmp r12 r13 jbe JUMP_ADDR_52	mov rsi [rsp+CONST+var_xxx] lea rdi [r14+r13] mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] add r13 rax cmp r12 r13 ja JUMP_ADDR_44	movzx eax [r14+r12+CONST] mov rax [rsp+rax*8+CONST+var_xxx] test rax rax jnz JUMP_ADDR_49	mov rax rcx lea rdx [r14+r15] cmp rbx rcx ja JUMP_ADDR_56	jmp JUMP_ADDR_58	add rax CONST cmp rbx rax jbe JUMP_ADDR_58	movzx edi [rdx+rax] cmp [rbp+rax+CONST] dil jz JUMP_ADDR_55	add r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_49	lea rax [rcx+CONST] lea rdx [r15+rax] cmp rax CONST jz JUMP_ADDR_66	sub rdx rcx lea rsi [rbp+CONST] add rdx r14 jmp JUMP_ADDR_61	sub rax CONST jb JUMP_ADDR_66	movzx edi [rax+rdx+CONST] cmp [CONST_VAR+rax+CONST] dil jz JUMP_ADDR_60	add r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_50	add rsi r15 mov ecx CONST jmp JUMP_ADDR_3	add rsi r10 mov ecx CONST jmp JUMP_ADDR_9	mov r15d CONST xor r13d r13d jmp JUMP_ADDR_15	lea rax [r14+r15] jmp JUMP_ADDR_45	lea rax [r15+rbx] jmp JUMP_ADDR_45	call sub_xxx
[ph]libcap-git-setcap___libc_strstr_ifunc
endbr64 test cs:xxx CONST lea rdx loc_xxx lea rax sub_xxx cmovz rax rdx retn
[ph]libcap-git-setcap_memcmp_ifunc
endbr64 mov ecx cs:xxx mov edx cs:xxx test ch CONST jnz JUMP_ADDR_2	test cs:xxx CONST jnz JUMP_ADDR_5	lea rax sub_xxx test edx CONST jnz JUMP_ADDR_4	and dh CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn	test edx CONST jz JUMP_ADDR_2	lea rax sub_xxx and ch CONST jz JUMP_ADDR_2	retn
[ph]libcap-git-setcap___libc_memmove_ifunc
endbr64 mov edx cs:xxx lea rax loc_xxx test dh CONST jnz JUMP_ADDR_7	mov ecx cs:xxx test ecx CONST jnz JUMP_ADDR_8	test dh CONST jz JUMP_ADDR_4	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	test cs:xxx CONST jz JUMP_ADDR_11	test dl CONST jnz JUMP_ADDR_11	and edx CONST lea rax sub_xxx lea rdx loc_xxx cmovnz rax rdx	retn	test dh CONST jnz JUMP_ADDR_2	lea rax sub_xxx and dh CONST jnz JUMP_ADDR_7	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn
[ph]libcap-git-setcap_memset_ifunc
endbr64 mov edx cs:xxx lea rax loc_xxx test dh CONST jnz JUMP_ADDR_5	mov ecx cs:xxx test ecx CONST jnz JUMP_ADDR_6	mov eax ecx and eax CONST and ecx CONST jz JUMP_ADDR_4	test eax eax lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	test eax eax lea rdx sub_xxx lea rax sub_xxx cmovnz rax rdx	retn	test dh CONST jnz JUMP_ADDR_2	lea rax loc_xxx and dh CONST jnz JUMP_ADDR_5	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn
[ph]libcap-git-setcap___mempcpy_ifunc
endbr64 mov edx cs:xxx lea rax loc_xxx test dh CONST jnz JUMP_ADDR_7	mov ecx cs:xxx test ecx CONST jnz JUMP_ADDR_8	test dh CONST jz JUMP_ADDR_4	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	test cs:xxx CONST jz JUMP_ADDR_11	test dl CONST jnz JUMP_ADDR_11	and edx CONST lea rax sub_xxx lea rdx loc_xxx cmovnz rax rdx	retn	test dh CONST jnz JUMP_ADDR_2	lea rax loc_xxx and dh CONST jnz JUMP_ADDR_7	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn
[ph]libcap-git-setcap___stpcpy_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_2	test cs:xxx CONST jnz JUMP_ADDR_5	and edx CONST lea rax sub_xxx jnz JUMP_ADDR_4	test cs:xxx CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn	lea rax sub_xxx test dh CONST jz JUMP_ADDR_2	retn
[ph]libcap-git-setcap___strcasecmp_l_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test edx CONST jnz JUMP_ADDR_4	test edx CONST jz JUMP_ADDR_3	lea rax sub_xxx test cs:xxx CONST jz JUMP_ADDR_4	and dh CONST lea rax sub_xxx lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___new_memcpy_ifunc
endbr64 mov edx cs:xxx lea rax loc_xxx test dh CONST jnz JUMP_ADDR_7	mov ecx cs:xxx test ecx CONST jnz JUMP_ADDR_8	test dh CONST jz JUMP_ADDR_4	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	test cs:xxx CONST jz JUMP_ADDR_11	test dl CONST jnz JUMP_ADDR_11	and edx CONST lea rax sub_xxx lea rdx loc_xxx cmovnz rax rdx	retn	test dh CONST jnz JUMP_ADDR_2	lea rax sub_xxx and dh CONST jnz JUMP_ADDR_7	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn	and ch CONST lea rdx sub_xxx lea rax loc_xxx cmovz rax rdx retn
[ph]libcap-git-setcap___rawmemchr_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___strchrnul_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___strcmp_sse2
endbr64 mov ecx esi mov eax edi and rcx CONST and rax CONST cmp ecx CONST ja JUMP_ADDR_4	cmp eax CONST ja JUMP_ADDR_4	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_167	add rsi CONST add rdi CONST nop [rax+rax+CONST] nop	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_8	ja JUMP_ADDR_7	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 [CONST_VAR] psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+CONST]	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST jmp JUMP_ADDR_10	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_20	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_20	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_15	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_22	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_16	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_30	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_30	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_25	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_32	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_26	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_35	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_42	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_36	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_50	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_50	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_45	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_52	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_60	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_60	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_55	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_62	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_56	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_65	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_72	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_66	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_80	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_80	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_75	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_82	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_90	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_90	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_85	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_92	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_86	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_95	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_102	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_96	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_110	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_110	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_105	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_112	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_120	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_120	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_115	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_122	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_116	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_125	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_132	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_126	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_140	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_140	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_135	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_142	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_150	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_150	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_145	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_152	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_146	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_155	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_162	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_156	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx xchg ax ax	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_167	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] sub eax ecx retn
[ph]libcap-git-setcap___strcmp_sse2_unaligned
endbr64 mov eax edi xor edx edx pxor xmm7 xmm7 or eax esi and eax CONST cmp eax CONST jg JUMP_ADDR_13	movdqu xmm1 [CONST_VAR] movdqu xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pminub xmm0 xmm1 pxor xmm1 xmm1 pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test rax rax jz JUMP_ADDR_3	bsf rdx rax movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx retn	movdqu xmm6 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] pcmpeqb xmm3 xmm6 movdqu xmm2 [CONST_VAR+CONST] pminub xmm3 xmm6 pcmpeqb xmm3 xmm1 movdqu xmm4 [CONST_VAR+CONST] pcmpeqb xmm2 xmm5 pmovmskb edx xmm3 movdqu xmm0 [CONST_VAR+CONST] pminub xmm2 xmm5 pcmpeqb xmm2 xmm1 pcmpeqb xmm0 xmm4 pmovmskb eax xmm2 shl rdx CONST pminub xmm0 xmm4 pcmpeqb xmm0 xmm1 shl rax CONST or rax rdx pmovmskb ecx xmm0 mov rdx rcx shl rdx CONST or rax rdx jnz JUMP_ADDR_2	lea rdx [CONST_VAR+CONST] mov ecx CONST pxor xmm9 xmm9 and rdx CONST sub rdx rdi lea rax [CONST_VAR+rdx] add rdx rsi mov rsi rdx and esi CONST sub rcx rsi shr rcx CONST mov rsi rcx jmp JUMP_ADDR_6	add rax CONST add rdx CONST	test rsi rsi lea rsi [CONST_VAR+CONST] jz JUMP_ADDR_9	movdqu xmm0 [rdx] movdqu xmm1 [rdx+CONST] movdqa xmm2 [rax] movdqa xmm3 [rax+CONST] pcmpeqb xmm0 xmm2 movdqu xmm5 [rdx+CONST] pcmpeqb xmm1 xmm3 pminub xmm0 xmm2 movdqu xmm6 [rdx+CONST] pminub xmm1 xmm3 movdqa xmm2 [rax+CONST] pminub xmm0 xmm1 movdqa xmm3 [rax+CONST] pcmpeqb xmm5 xmm2 pcmpeqb xmm6 xmm3 pminub xmm5 xmm2 pminub xmm6 xmm3 pminub xmm0 xmm5 pminub xmm0 xmm6 pcmpeqb xmm0 xmm7 pmovmskb ecx xmm0 test ecx ecx jz JUMP_ADDR_5	pcmpeqb xmm5 xmm7 movdqu xmm0 [rdx] pcmpeqb xmm1 xmm7 movdqa xmm2 [rax] pcmpeqb xmm0 xmm2 pminub xmm0 xmm2 pcmpeqb xmm6 xmm7 pcmpeqb xmm0 xmm7 pmovmskb ecx xmm1 pmovmskb r8d xmm5 pmovmskb edi xmm0 shl rcx CONST shl r8 CONST pmovmskb esi xmm6 or rcx r8 or rcx rdi shl rsi CONST or rcx rsi bsf rcx rcx movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx retn	xor r10 r10 mov r9 rdx and r9 CONST sub r10 r9 movdqa xmm0 [rdx+r10] movdqa xmm1 [rdx+r10+CONST] movdqu xmm2 [rax+r10] movdqu xmm3 [rax+r10+CONST] pcmpeqb xmm0 xmm2 movdqa xmm5 [rdx+r10+CONST] pcmpeqb xmm1 xmm3 pminub xmm0 xmm2 movdqa xmm6 [rdx+r10+CONST] pminub xmm1 xmm3 movdqu xmm2 [rax+r10+CONST] movdqu xmm3 [rax+r10+CONST] pcmpeqb xmm5 xmm2 pcmpeqb xmm6 xmm3 pminub xmm5 xmm2 pminub xmm6 xmm3 pcmpeqb xmm0 xmm7 pcmpeqb xmm1 xmm7 pcmpeqb xmm5 xmm7 pcmpeqb xmm6 xmm7 pmovmskb ecx xmm1 pmovmskb r8d xmm5 pmovmskb edi xmm0 shl rcx CONST shl r8 CONST pmovmskb esi xmm6 or rdi r8 or rdi rcx shl rsi CONST or rdi rsi mov rcx r9 mov rsi CONST shr rdi cl test rdi rdi jz JUMP_ADDR_7	bsf rcx rdi movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx retn	cmp al cl jnz JUMP_ADDR_15	add rdx CONST cmp rdx CONST jz JUMP_ADDR_4	movzx eax [CONST_VAR+rdx] movzx ecx [CONST_VAR+rdx] test al al jnz JUMP_ADDR_11	xor eax eax	sub eax ecx retn
[ph]libcap-git-setcap___strcmp_ssse3
endbr64 mov ecx esi mov eax edi and rcx CONST and rax CONST cmp ecx CONST ja JUMP_ADDR_4	cmp eax CONST ja JUMP_ADDR_4	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_167	add rsi CONST add rdi CONST nop [rax+rax+CONST] nop	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_8	ja JUMP_ADDR_7	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 [CONST_VAR] psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+CONST]	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST jmp JUMP_ADDR_10	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_20	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_20	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_15	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_22	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_16	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_30	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_30	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_25	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_32	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_26	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_35	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_42	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_36	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_50	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_50	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_45	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_52	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_60	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_60	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_55	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_62	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_56	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_65	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_72	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_66	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_80	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_80	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_75	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_82	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_90	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_90	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_85	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_92	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_86	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_95	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_102	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_96	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_110	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_110	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_105	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_112	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_120	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_120	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_115	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_122	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_116	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_125	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_132	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_126	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_140	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_140	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_135	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_142	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_150	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_150	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_145	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_152	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_146	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_163	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_165	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_164	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_155	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_162	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_156	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx xchg ax ax	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_167	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] sub eax ecx retn
[ph]libcap-git-setcap___strcmp_avx2
endbr64 mov eax edi xor edx edx vpxor xmm7 xmm7 xmm7 or eax esi and eax CONST cmp eax CONST jg JUMP_ADDR_33	vmovdqu ymm1 CONST vpcmpeqb ymm0 ymm1 ymm1 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jz JUMP_ADDR_6	tzcnt edx ecx movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	tzcnt edx ecx movzx eax [CONST_VAR+rdx+CONST] movzx edx [CONST_VAR+rdx+CONST] sub eax edx vzeroupper retn	tzcnt edx ecx movzx eax [CONST_VAR+rdx+CONST] movzx edx [CONST_VAR+rdx+CONST] sub eax edx vzeroupper retn	tzcnt edx ecx movzx eax [CONST_VAR+rdx+CONST] movzx edx [CONST_VAR+rdx+CONST] sub eax edx vzeroupper retn	vmovdqu ymm6 CONST vpcmpeqb ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb ecx ymm3 test ecx ecx jnz JUMP_ADDR_3	vmovdqu ymm5 CONST vmovdqu ymm4 CONST vmovdqu ymm0 CONST vpcmpeqb ymm2 ymm5 ymm5 vpminub ymm2 ymm2 ymm2 vpcmpeqb ymm0 ymm0 ymm0 vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb ecx ymm2 test ecx ecx jnz JUMP_ADDR_4	vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jnz JUMP_ADDR_5	lea rdx [CONST_VAR+CONST] mov ecx CONST and rdx CONST sub rdx rdi lea rax [CONST_VAR+rdx] add rdx rsi mov rsi rdx and esi CONST sub rcx rsi shr rcx CONST mov esi ecx jmp JUMP_ADDR_11	add rax CONST add rdx CONST	test esi esi lea esi [esi+CONST] jz JUMP_ADDR_20	vmovdqa ymm0 CONST vmovdqa ymm3 CONST vpcmpeqb ymm4 ymm0 ymm0 vpcmpeqb ymm1 ymm3 ymm3 vpminub ymm4 ymm4 ymm4 vpminub ymm1 ymm1 ymm1 vmovdqa ymm2 CONST vpminub ymm0 ymm4 ymm4 vmovdqa ymm3 CONST vpcmpeqb ymm5 ymm2 ymm2 vpcmpeqb ymm6 ymm3 ymm3 vpminub ymm5 ymm5 ymm5 vpminub ymm6 ymm6 ymm6 vpminub ymm0 ymm0 ymm0 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jz JUMP_ADDR_10	vpcmpeqb ymm0 ymm4 ymm4 vpmovmskb edi ymm0 test edi edi jz JUMP_ADDR_15	tzcnt ecx edi movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	vpcmpeqb ymm1 ymm1 ymm1 vpmovmskb ecx ymm1 test ecx ecx jz JUMP_ADDR_17	tzcnt edi ecx movzx eax [rax+CONST_VAR+CONST] movzx edx [rdx+CONST_VAR+CONST] sub eax edx vzeroupper retn	vpcmpeqb ymm5 ymm5 ymm5 vpmovmskb ecx ymm5 test ecx ecx jz JUMP_ADDR_19	tzcnt edi ecx movzx eax [rax+CONST_VAR+CONST] movzx edx [rdx+CONST_VAR+CONST] sub eax edx vzeroupper retn	vpcmpeqb ymm6 ymm6 ymm6 vpmovmskb esi ymm6 tzcnt ecx esi movzx eax [rax+rcx+CONST] movzx edx [rdx+rcx+CONST] sub eax edx vzeroupper retn	xor r10d r10d mov rcx rdx and ecx CONST sub r10 rcx cmp ecx CONST jge JUMP_ADDR_23	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vpcmpeqb ymm0 ymm2 ymm2 vpcmpeqb ymm1 ymm3 ymm3 vpminub ymm0 ymm0 ymm0 vpminub ymm1 ymm1 ymm1 vpcmpeqb ymm0 ymm0 ymm0 vpcmpeqb ymm1 ymm1 ymm1 vpmovmskb edi ymm0 vpmovmskb esi ymm1 shl rsi CONST xor rdi rsi shr rdi cl test rdi rdi jz JUMP_ADDR_23	tzcnt rcx rdi movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vpcmpeqb ymm5 ymm2 ymm2 vpminub ymm5 ymm5 ymm5 vpcmpeqb ymm6 ymm3 ymm3 vpcmpeqb ymm5 ymm5 ymm5 vpminub ymm6 ymm6 ymm6 vpcmpeqb ymm6 ymm6 ymm6 vpmovmskb edi ymm5 vpmovmskb esi ymm6 shl rsi CONST xor rdi rsi xor r8d r8d sub ecx CONST jle JUMP_ADDR_25	shr rdi cl mov r8d ecx	mov esi CONST test rdi rdi jz JUMP_ADDR_12	tzcnt rcx rdi add rcx r10 add rcx r8 movzx eax [rax+rcx+CONST] movzx edx [rdx+rcx+CONST] sub eax edx vzeroupper retn	sub eax ecx jnz JUMP_ADDR_31	add edx CONST cmp edx CONST jz JUMP_ADDR_9	movzx eax [CONST_VAR+rdx] movzx ecx [CONST_VAR+rdx] test eax eax jnz JUMP_ADDR_27	sub eax ecx	vzeroupper retn	add rdi rdx add rsi rdx tzcnt edx ecx movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	cmp eax CONST jg JUMP_ADDR_36	vmovdqu ymm1 CONST vpcmpeqb ymm0 ymm1 ymm1 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jnz JUMP_ADDR_32	add edx CONST add eax CONST cmp eax CONST jle JUMP_ADDR_34	cmp eax CONST jg JUMP_ADDR_39	vmovdqu xmm1 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 test ecx ecx jnz JUMP_ADDR_32	add edx CONST add eax CONST	cmp eax CONST jg JUMP_ADDR_42	vmovq xmm1 [CONST_VAR+rdx] vmovq xmm0 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 and ecx CONST test ecx ecx jnz JUMP_ADDR_32	add edx CONST add eax CONST	cmp eax CONST jg JUMP_ADDR_45	vmovd xmm1 [CONST_VAR+rdx] vmovd xmm0 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 and ecx CONST test ecx ecx jnz JUMP_ADDR_32	add edx CONST	movzx eax [CONST_VAR+rdx] movzx ecx [CONST_VAR+rdx] test eax eax jnz JUMP_ADDR_27	sub eax ecx vzeroupper retn
[ph]libcap-git-setcap___strncmp_sse2
endbr64 test rdx rdx jz JUMP_ADDR_251	cmp rdx CONST jz JUMP_ADDR_252	mov r11 rdx mov ecx esi mov eax edi and rcx CONST and rax CONST cmp ecx CONST ja JUMP_ADDR_7	cmp eax CONST ja JUMP_ADDR_7	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_249	sub r11 CONST jbe JUMP_ADDR_251	add rsi CONST add rdi CONST nop [rax+rax+CONST] nop	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_11	ja JUMP_ADDR_10	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 [CONST_VAR] psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+rax+CONST] xchg ax ax	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST jmp JUMP_ADDR_15	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_24	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_34	cmp r11 CONST jbe JUMP_ADDR_34	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_25	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_39	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_49	cmp r11 CONST jbe JUMP_ADDR_49	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_54	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_64	cmp r11 CONST jbe JUMP_ADDR_64	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_55	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_69	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_79	cmp r11 CONST jbe JUMP_ADDR_79	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_84	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_94	cmp r11 CONST jbe JUMP_ADDR_94	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_85	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_99	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_109	cmp r11 CONST jbe JUMP_ADDR_109	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_114	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_124	cmp r11 CONST jbe JUMP_ADDR_124	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_115	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_129	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_139	cmp r11 CONST jbe JUMP_ADDR_139	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_144	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_154	cmp r11 CONST jbe JUMP_ADDR_154	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_145	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_166	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_166	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_159	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_169	cmp r11 CONST jbe JUMP_ADDR_169	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_181	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_181	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_174	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_184	cmp r11 CONST jbe JUMP_ADDR_184	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_175	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_196	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_196	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_189	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_199	cmp r11 CONST jbe JUMP_ADDR_199	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_190	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_211	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_211	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_204	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_214	cmp r11 CONST jbe JUMP_ADDR_214	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_205	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_226	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_226	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_219	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_229	cmp r11 CONST jbe JUMP_ADDR_229	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_220	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_241	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_241	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_234	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_244	cmp r11 CONST jbe JUMP_ADDR_244	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_235	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx xchg ax ax	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_249	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx sub r11 rdx jbe JUMP_ADDR_251	movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] sub eax ecx retn	xor eax eax retn	movzx ecx [CONST_VAR] movzx eax [CONST_VAR] sub eax ecx retn
[ph]libcap-git-setcap___strncmp_ssse3
endbr64 test rdx rdx jz JUMP_ADDR_251	cmp rdx CONST jz JUMP_ADDR_252	mov r11 rdx mov ecx esi mov eax edi and rcx CONST and rax CONST cmp ecx CONST ja JUMP_ADDR_7	cmp eax CONST ja JUMP_ADDR_7	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_249	sub r11 CONST jbe JUMP_ADDR_251	add rsi CONST add rdi CONST nop [rax+rax+CONST] nop	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_11	ja JUMP_ADDR_10	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 [CONST_VAR] psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+rax+CONST] xchg ax ax	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST jmp JUMP_ADDR_15	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_24	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_34	cmp r11 CONST jbe JUMP_ADDR_34	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_25	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_46	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_39	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_49	cmp r11 CONST jbe JUMP_ADDR_49	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_40	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_54	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_64	cmp r11 CONST jbe JUMP_ADDR_64	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_55	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_76	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_69	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_79	cmp r11 CONST jbe JUMP_ADDR_79	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_70	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_84	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_94	cmp r11 CONST jbe JUMP_ADDR_94	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_85	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_106	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_99	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_109	cmp r11 CONST jbe JUMP_ADDR_109	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_100	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_114	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_124	cmp r11 CONST jbe JUMP_ADDR_124	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_115	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_136	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_129	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_139	cmp r11 CONST jbe JUMP_ADDR_139	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_130	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_144	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_154	cmp r11 CONST jbe JUMP_ADDR_154	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_145	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_166	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_166	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_159	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_169	cmp r11 CONST jbe JUMP_ADDR_169	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_160	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_181	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_181	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_174	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_184	cmp r11 CONST jbe JUMP_ADDR_184	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_175	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_196	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_196	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_189	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_199	cmp r11 CONST jbe JUMP_ADDR_199	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_190	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_211	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_211	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_204	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_214	cmp r11 CONST jbe JUMP_ADDR_214	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_205	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_226	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_226	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_219	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_229	cmp r11 CONST jbe JUMP_ADDR_229	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_220	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_245	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_247	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_251	test r9 r9 jz JUMP_ADDR_251	mov r11 r9 pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax+rax+CONST] nop [rax+CONST]	add r10 CONST jg JUMP_ADDR_241	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_241	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_246	sub r11 CONST jbe JUMP_ADDR_251	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_234	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_244	cmp r11 CONST jbe JUMP_ADDR_244	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_235	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx xchg ax ax	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_249	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx sub r11 rdx jbe JUMP_ADDR_251	movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] sub eax ecx retn	xor eax eax retn	movzx ecx [CONST_VAR] movzx eax [CONST_VAR] sub eax ecx retn
[ph]libcap-git-setcap___strncmp_sse42
endbr64 test rdx rdx jz JUMP_ADDR_242	cmp rdx CONST jz JUMP_ADDR_243	mov r11 rdx mov ecx esi mov eax edi and rcx CONST and rax CONST cmp ecx CONST ja JUMP_ADDR_7	cmp eax CONST ja JUMP_ADDR_7	movdqu xmm1 [CONST_VAR] movdqu xmm2 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_240	sub r11 CONST jbe JUMP_ADDR_242	add rsi CONST add rdi CONST nop [rax+rax+CONST]	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST pxor xmm0 xmm0 cmp ecx eax jz JUMP_ADDR_11	ja JUMP_ADDR_10	mov r8d edx xchg eax ecx xchg rsi rdi	movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] pcmpeqb xmm0 xmm1 lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pcmpeqb xmm1 [CONST_VAR] psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9 CONST mov rdx rcx xchg ax ax	movdqa xmm0 [CONST_VAR+rdx] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] lea rdx [rdx+CONST] jbe JUMP_ADDR_20	sub r11 CONST jbe JUMP_ADDR_242	movdqa xmm0 [CONST_VAR+rdx] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] lea rdx [rdx+CONST] jbe JUMP_ADDR_20	sub r11 CONST jbe JUMP_ADDR_242	jmp JUMP_ADDR_15	jnb JUMP_ADDR_242	sub r11 rcx jbe JUMP_ADDR_242	lea rcx [rdx+rcx+CONST] movzx eax [CONST_VAR+rcx] movzx edx [CONST_VAR+rcx] sub eax edx retn	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_34	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_34	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_27	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_28	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_48	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_48	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_41	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_42	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_62	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_62	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_55	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_56	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_76	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_76	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_69	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_70	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_90	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_90	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_83	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_84	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_104	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_104	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_97	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_98	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_118	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_118	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_111	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_112	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_132	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_132	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_125	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_126	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_146	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_146	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_139	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_140	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_160	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_160	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_153	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_154	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_174	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_174	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_167	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_168	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_188	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_188	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_181	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_182	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_202	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_202	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_195	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_196	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_216	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_216	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_209	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_210	jmp JUMP_ADDR_232	pslldq xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_238	movdqa xmm3 [CONST_VAR] lea r9 [rcx+r11+CONST] cmp r11 r9 jb JUMP_ADDR_242	test r9 r9 jz JUMP_ADDR_242	mov r11 r9 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_230	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST add r10 CONST jg JUMP_ADDR_230	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] jbe JUMP_ADDR_233	sub r11 CONST jbe JUMP_ADDR_242	add rdx CONST jmp JUMP_ADDR_223	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp rcx r11 jnb JUMP_ADDR_232	cmp ecx CONST ja JUMP_ADDR_224	pcmpistri xmm0 [CONST_VAR+rdx] [CONST_VAR+rdx] nop [rax+CONST]	jnb JUMP_ADDR_242	sub r11 rcx jbe JUMP_ADDR_242	add rdx rcx lea rdi [CONST_VAR+r9+CONST] movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] test r8d r8d jz JUMP_ADDR_237	xchg eax edx	sub eax edx retn	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_240	xchg rsi rdi	bsf rdx rdx sub r11 rdx jbe JUMP_ADDR_242	movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] sub eax ecx retn	xor eax eax retn	movzx ecx [CONST_VAR] movzx eax [CONST_VAR] sub eax ecx retn
[ph]libcap-git-setcap___strncmp_avx2
endbr64 cmp rdx CONST jz JUMP_ADDR_53	jb JUMP_ADDR_52	mov r11 rdx mov eax edi xor edx edx vpxor xmm7 xmm7 xmm7 or eax esi and eax CONST cmp eax CONST jg JUMP_ADDR_56	vmovdqu ymm1 CONST vpcmpeqb ymm0 ymm1 ymm1 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jz JUMP_ADDR_12	tzcnt edx ecx cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	tzcnt edx ecx add rdx CONST cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	tzcnt edx ecx add rdx CONST cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	tzcnt edx ecx add rdx CONST cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	vmovdqu ymm6 CONST vpcmpeqb ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb ecx ymm3 test ecx ecx jnz JUMP_ADDR_6	vmovdqu ymm5 CONST vmovdqu ymm4 CONST vmovdqu ymm0 CONST vpcmpeqb ymm2 ymm5 ymm5 vpminub ymm2 ymm2 ymm2 vpcmpeqb ymm0 ymm0 ymm0 vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb ecx ymm2 test ecx ecx jnz JUMP_ADDR_8	vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jnz JUMP_ADDR_10	lea rdx [CONST_VAR+CONST] mov ecx CONST and rdx CONST sub rdx rdi lea rax [CONST_VAR+rdx] sub r11 rdx jbe JUMP_ADDR_52	add rdx rsi mov rsi rdx and esi CONST sub rcx rsi shr rcx CONST mov esi ecx jmp JUMP_ADDR_19	sub r11 CONST jbe JUMP_ADDR_52	add rax CONST add rdx CONST	test esi esi lea esi [esi+CONST] jz JUMP_ADDR_35	vmovdqa ymm0 CONST vmovdqa ymm3 CONST vpcmpeqb ymm4 ymm0 ymm0 vpcmpeqb ymm1 ymm3 ymm3 vpminub ymm4 ymm4 ymm4 vpminub ymm1 ymm1 ymm1 vmovdqa ymm2 CONST vpminub ymm0 ymm4 ymm4 vmovdqa ymm3 CONST vpcmpeqb ymm5 ymm2 ymm2 vpcmpeqb ymm6 ymm3 ymm3 vpminub ymm5 ymm5 ymm5 vpminub ymm6 ymm6 ymm6 vpminub ymm0 ymm0 ymm0 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jz JUMP_ADDR_17	vpcmpeqb ymm0 ymm4 ymm4 vpmovmskb edi ymm0 test edi edi jz JUMP_ADDR_24	tzcnt ecx edi cmp r11 rcx jbe JUMP_ADDR_52	movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	cmp r11 CONST jbe JUMP_ADDR_52	vpcmpeqb ymm1 ymm1 ymm1 vpmovmskb ecx ymm1 test ecx ecx jz JUMP_ADDR_28	tzcnt edi ecx add rdi CONST cmp r11 rdi jbe JUMP_ADDR_52	movzx eax [rax+CONST_VAR] movzx edx [rdx+CONST_VAR] sub eax edx vzeroupper retn	cmp r11 CONST jbe JUMP_ADDR_52	vpcmpeqb ymm5 ymm5 ymm5 vpmovmskb ecx ymm5 test ecx ecx jz JUMP_ADDR_32	tzcnt edi ecx add rdi CONST cmp r11 rdi jbe JUMP_ADDR_52	movzx eax [rax+CONST_VAR] movzx edx [rdx+CONST_VAR] sub eax edx vzeroupper retn	cmp r11 CONST jbe JUMP_ADDR_52	vpcmpeqb ymm6 ymm6 ymm6 vpmovmskb esi ymm6 tzcnt ecx esi add rcx CONST cmp r11 rcx jbe JUMP_ADDR_52	movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	xor r10d r10d mov rcx rdx and ecx CONST sub r10 rcx cmp ecx CONST jge JUMP_ADDR_39	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vpcmpeqb ymm0 ymm2 ymm2 vpcmpeqb ymm1 ymm3 ymm3 vpminub ymm0 ymm0 ymm0 vpminub ymm1 ymm1 ymm1 vpcmpeqb ymm0 ymm0 ymm0 vpcmpeqb ymm1 ymm1 ymm1 vpmovmskb edi ymm0 vpmovmskb esi ymm1 shl rsi CONST xor rdi rsi shr rdi cl test rdi rdi jz JUMP_ADDR_39	tzcnt rcx rdi cmp r11 rcx jbe JUMP_ADDR_52	movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vpcmpeqb ymm5 ymm2 ymm2 vpminub ymm5 ymm5 ymm5 vpcmpeqb ymm6 ymm3 ymm3 vpcmpeqb ymm5 ymm5 ymm5 vpminub ymm6 ymm6 ymm6 vpcmpeqb ymm6 ymm6 ymm6 vpmovmskb edi ymm5 vpmovmskb esi ymm6 shl rsi CONST xor rdi rsi xor r8d r8d sub ecx CONST jle JUMP_ADDR_41	shr rdi cl mov r8d ecx	mov esi CONST test rdi rdi jz JUMP_ADDR_44	tzcnt rcx rdi add rcx r10 add rcx r8 add rcx CONST sub r11 rcx jbe JUMP_ADDR_52	movzx eax [rax+rcx] movzx edx [rdx+rcx] sub eax edx vzeroupper retn	lea r10 [r10+CONST] cmp r11 r10 jbe JUMP_ADDR_52	jmp JUMP_ADDR_20	sub eax ecx jnz JUMP_ADDR_51	add edx CONST cmp edx CONST jz JUMP_ADDR_15	cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx ecx [CONST_VAR+rdx] test eax eax jnz JUMP_ADDR_46	sub eax ecx	vzeroupper retn	xor eax eax vzeroupper retn	movzx ecx [CONST_VAR] movzx eax [CONST_VAR] sub eax ecx vzeroupper retn	add rdi rdx add rsi rdx sub r11 rdx tzcnt edx ecx cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] sub eax edx vzeroupper retn	cmp eax CONST jg JUMP_ADDR_60	vmovdqu ymm1 CONST vpcmpeqb ymm0 ymm1 ymm1 vpminub ymm0 ymm0 ymm0 vpcmpeqb ymm0 ymm0 ymm0 vpmovmskb ecx ymm0 test ecx ecx jnz JUMP_ADDR_54	add edx CONST add eax CONST cmp rdx r11 jnb JUMP_ADDR_52	cmp eax CONST jle JUMP_ADDR_57	cmp eax CONST jg JUMP_ADDR_63	vmovdqu xmm1 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 test ecx ecx jnz JUMP_ADDR_54	add edx CONST add eax CONST cmp rdx r11 jnb JUMP_ADDR_52	cmp eax CONST jg JUMP_ADDR_66	vmovq xmm1 [CONST_VAR+rdx] vmovq xmm0 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 and ecx CONST test ecx ecx jnz JUMP_ADDR_54	add edx CONST add eax CONST cmp rdx r11 jnb JUMP_ADDR_52	cmp eax CONST jg JUMP_ADDR_69	vmovd xmm1 [CONST_VAR+rdx] vmovd xmm0 [CONST_VAR+rdx] vpcmpeqb xmm0 xmm1 xmm1 vpminub xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpmovmskb ecx xmm0 and ecx CONST test ecx ecx jnz JUMP_ADDR_54	add edx CONST cmp rdx r11 jnb JUMP_ADDR_52	cmp rdx r11 jnb JUMP_ADDR_52	movzx eax [CONST_VAR+rdx] movzx ecx [CONST_VAR+rdx] test eax eax jnz JUMP_ADDR_46	sub eax ecx vzeroupper retn
[ph]libcap-git-setcap___rawmemchr_sse2
endbr64 movq xmm1 rsi mov rcx rdi punpcklbw xmm1 xmm1 punpcklbw xmm1 xmm1 and rcx CONST pshufd xmm1 xmm1 xmm1 cmp rcx CONST ja JUMP_ADDR_3	movdqu xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_22	add rdi CONST and rdi CONST jmp JUMP_ADDR_6	and rcx CONST and rdi CONST movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 sar eax cl test eax eax jz JUMP_ADDR_5	bsf eax eax add rax rdi add rax rcx retn	add rdi CONST nop [rax+rax+CONST] nop	movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_22	movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_23	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_24	movdqa xmm4 [CONST_VAR+CONST] pcmpeqb xmm4 xmm1 add rdi CONST pmovmskb eax xmm4 test eax eax jnz JUMP_ADDR_21	test rdi CONST jz JUMP_ADDR_16	movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_22	movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_23	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_24	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 add rdi CONST test eax eax jnz JUMP_ADDR_21	and rdi CONST nop [rax+rax+CONST]	movdqa xmm0 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] pcmpeqb xmm0 xmm1 pcmpeqb xmm2 xmm1 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm1 pmaxub xmm3 xmm0 pmaxub xmm4 xmm2 pmaxub xmm4 xmm3 pmovmskb eax xmm4 add rdi CONST test eax eax jz JUMP_ADDR_16	sub rdi CONST pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_22	pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_23	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pcmpeqb xmm1 [CONST_VAR+CONST] pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_24	pmovmskb eax xmm1 bsf eax eax lea rax [CONST_VAR+rax+CONST] retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax add rax rdi retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn
[ph]libcap-git-setcap___rawmemchr_avx2
endbr64 mov ecx edi vmovd xmm0 esi vpbroadcastb ymm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_3	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	add rdi CONST and ecx CONST and rdi CONST jmp JUMP_ADDR_6	and ecx CONST and rdi CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_5	tzcnt eax eax add rax rdi add rax rcx vzeroupper retn	add rdi CONST	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_14	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_15	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_20	add rdi CONST mov rcx rdi and ecx CONST and rdi CONST nop [rax+CONST]	vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm0 ymm0 vpcmpeqb ymm4 ymm0 ymm0 vpor ymm5 ymm2 ymm2 vpor ymm6 ymm4 ymm4 vpor ymm5 ymm6 ymm6 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_16	add rdi CONST jmp JUMP_ADDR_11	tzcnt eax eax add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_14	vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_15	vpmovmskb eax ymm4 test eax eax	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn
[ph]libcap-git-setcap___memcmp_sse2
endbr64 test rdx rdx jz JUMP_ADDR_22	cmp rdx CONST jbe JUMP_ADDR_17	sub rsi rdi mov r10 rdx cmp r10 CONST jnb JUMP_ADDR_23	test r10 CONST jz JUMP_ADDR_6	movzx eax [CONST_VAR] movzx edx [CONST_VAR+CONST_VAR] sub r10 CONST jz JUMP_ADDR_18	add rdi CONST sub eax edx jnz JUMP_ADDR_19	test r10 CONST jz JUMP_ADDR_9	movzx eax [CONST_VAR] movzx edx [CONST_VAR+CONST_VAR] sub r10 CONST jz JUMP_ADDR_20	add rdi CONST cmp eax edx jnz JUMP_ADDR_20	test r10 CONST jz JUMP_ADDR_12	mov eax [CONST_VAR] mov edx [CONST_VAR+CONST_VAR] sub r10 CONST jz JUMP_ADDR_20	add rdi CONST cmp eax edx jnz JUMP_ADDR_20	test r10 CONST jz JUMP_ADDR_15	mov rax [CONST_VAR] mov rdx [CONST_VAR+CONST_VAR] sub r10 CONST jz JUMP_ADDR_20	add rdi CONST cmp rax rdx jnz JUMP_ADDR_20	movdqu xmm1 [CONST_VAR] movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm1 xmm0 pmovmskb edx xmm1 xor eax eax sub edx CONST jz JUMP_ADDR_22	bsf ecx edx lea rcx [CONST_VAR+rcx] movzx eax [rcx] movzx edx [CONST_VAR+rcx] jmp JUMP_ADDR_18	movzx eax [CONST_VAR] movzx edx [CONST_VAR]	sub eax edx	retn	cmp rax rdx jz JUMP_ADDR_22	mov r11 rax sub r11 rdx bsf rcx r11 sar rcx CONST shl rcx CONST sar rax cl movzx eax al sar rdx cl movzx edx dl sub eax edx retn	xor eax eax retn	mov r11 rdx add r11 rdi mov r8 rdi and r8 CONST jz JUMP_ADDR_26	movdqu xmm1 [CONST_VAR] movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_47	neg r8 lea rdi [CONST_VAR+r8+CONST]	test rsi CONST jz JUMP_ADDR_48	test rdi CONST jz JUMP_ADDR_30	movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST	mov r10 r11 and r10 CONST cmp rdi r10 jnb JUMP_ADDR_45	test rdi CONST jz JUMP_ADDR_35	movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST	mov r10 r11 and r10 CONST cmp rdi r10 jnb JUMP_ADDR_41	movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST cmp r10 rdi jnz JUMP_ADDR_36	mov r10 r11 and r10 CONST cmp rdi r10 jnb JUMP_ADDR_45	movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqu xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST cmp r10 rdi jnz JUMP_ADDR_42	sub r11 rdi jz JUMP_ADDR_22	mov r10 r11 jmp JUMP_ADDR_3	bsf ecx edx movzx eax [CONST_VAR+rcx] add rsi rdi movzx edx [CONST_VAR+rcx] jmp JUMP_ADDR_18	mov r10 r11 and r10 CONST cmp rdi r10 jnb JUMP_ADDR_45	test rdi CONST jz JUMP_ADDR_52	movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST cmp r10 rdi jz JUMP_ADDR_45	mov r10 r11 and r10 CONST test rdi CONST jz JUMP_ADDR_56	movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST	cmp r10 rdi jz JUMP_ADDR_41	movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST cmp r10 rdi jnz JUMP_ADDR_57	mov r10 r11 and r10 CONST cmp rdi r10 jnb JUMP_ADDR_45	movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST movdqa xmm0 [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR] pmovmskb edx xmm0 sub edx CONST jnz JUMP_ADDR_47	add rdi CONST cmp rdi r10 jnz JUMP_ADDR_63	sub r11 rdi jz JUMP_ADDR_22	mov r10 r11 jmp JUMP_ADDR_3
[ph]libcap-git-setcap___memcmp_avx2_movbe
endbr64 cmp rdx CONST jb JUMP_ADDR_18	vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	cmp rdx CONST jbe JUMP_ADDR_9	vpcmpeqb ymm0 ymm0 ymm0 cmp rdx CONST ja JUMP_ADDR_29	cmp rdx CONST jb JUMP_ADDR_35	vmovdqu ymm1 CONST vpcmpeqb ymm1 ymm1 ymm1 vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vmovdqu ymm3 CONST vpcmpeqb ymm3 ymm3 ymm3 vmovdqu ymm4 CONST vpcmpeqb ymm4 ymm4 ymm4 vpand ymm5 ymm2 ymm2 vpand ymm6 ymm4 ymm4 vpand ymm5 ymm6 ymm6 vptest ymm5 ymm0 jnb JUMP_ADDR_40	lea rdi [CONST_VAR+rdx+CONST] lea rsi [CONST_VAR+rdx+CONST] vmovdqu ymm1 CONST vpcmpeqb ymm1 ymm1 ymm1 vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpand ymm5 ymm1 ymm1 vmovdqu ymm3 CONST vpcmpeqb ymm3 ymm3 ymm3 vpand ymm5 ymm5 ymm5 vmovdqu ymm4 CONST vpcmpeqb ymm4 ymm4 ymm4 vpand ymm5 ymm5 ymm5 vptest ymm5 ymm0 jnb JUMP_ADDR_40	xor eax eax vzeroupper retn	vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	lea rdi [CONST_VAR+rdx+CONST] lea rsi [CONST_VAR+rdx+CONST] vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	vzeroupper retn	tzcnt ecx eax movzx eax [CONST_VAR+rcx] movzx edx [CONST_VAR+rcx] sub eax edx vzeroupper retn	movbe eax [CONST_VAR] movbe ecx [CONST_VAR] shl rax CONST shl rcx CONST movbe edi [CONST_VAR+rdx+CONST] movbe esi [CONST_VAR+rdx+CONST] or rax rdi or rcx rsi sub rax rcx jz JUMP_ADDR_14	sbb eax eax or eax CONST retn	retn	movzx eax [CONST_VAR] movzx ecx [CONST_VAR] shl eax CONST shl ecx CONST bswap eax bswap ecx mov al [CONST_VAR+rdx+CONST] mov cl [CONST_VAR+rdx+CONST] sub eax ecx retn	movzx eax [CONST_VAR] movzx ecx [CONST_VAR] sub eax ecx retn	xor eax eax retn	cmp dl CONST jz JUMP_ADDR_16	jb JUMP_ADDR_17	cmp dl CONST jb JUMP_ADDR_15	cmp dl CONST jb JUMP_ADDR_12	cmp dl CONST jnb JUMP_ADDR_26	vmovq xmm1 [CONST_VAR] vmovq xmm2 [CONST_VAR] vpcmpeqb xmm2 xmm2 xmm2 vpmovmskb eax xmm2 sub eax CONST jnz JUMP_ADDR_11	lea rdi [CONST_VAR+rdx+CONST] lea rsi [CONST_VAR+rdx+CONST] vmovq xmm1 [CONST_VAR] vmovq xmm2 [CONST_VAR] vpcmpeqb xmm2 xmm2 xmm2 vpmovmskb eax xmm2 sub eax CONST jnz JUMP_ADDR_11	retn	vmovdqu xmm2 [CONST_VAR] vpcmpeqb xmm2 xmm2 xmm2 vpmovmskb eax xmm2 sub eax CONST jnz JUMP_ADDR_11	lea rdi [CONST_VAR+rdx+CONST] lea rsi [CONST_VAR+rdx+CONST] vmovdqu xmm2 [CONST_VAR] vpcmpeqb xmm2 xmm2 xmm2 vpmovmskb eax xmm2 sub eax CONST jnz JUMP_ADDR_11	retn	vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	mov rcx rdi and ecx CONST sub rcx CONST sub rsi rcx sub rdi rcx add rdx rcx	vmovdqu ymm1 CONST vpcmpeqb ymm1 ymm1 ymm1 vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpand ymm5 ymm1 ymm1 vmovdqu ymm3 CONST vpcmpeqb ymm3 ymm3 ymm3 vpand ymm5 ymm5 ymm5 vmovdqu ymm4 CONST vpcmpeqb ymm4 ymm4 ymm4 vpand ymm5 ymm5 ymm5 vptest ymm5 ymm0 jnb JUMP_ADDR_40	add rdi CONST add rsi CONST sub rdx CONST cmp rdx CONST jnb JUMP_ADDR_31	cmp rdx CONST jbe JUMP_ADDR_9	cmp rdx CONST jbe JUMP_ADDR_8	vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	add rdi CONST add rsi CONST vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	lea rdi [CONST_VAR+rdx+CONST] lea rsi [CONST_VAR+rdx+CONST] vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	add rdi CONST add rsi CONST vmovdqu ymm2 CONST vpcmpeqb ymm2 ymm2 ymm2 vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_11	vzeroupper retn	vpmovmskb eax ymm1 sub eax CONST jnz JUMP_ADDR_11	vpmovmskb eax ymm2 sub eax CONST jnz JUMP_ADDR_44	vpmovmskb eax ymm3 sub eax CONST jnz JUMP_ADDR_45	vpmovmskb eax ymm4 sub eax CONST tzcnt ecx eax movzx eax [CONST_VAR+rcx+CONST] movzx edx [CONST_VAR+rcx+CONST] sub eax edx vzeroupper retn	tzcnt ecx eax movzx eax [CONST_VAR+rcx+CONST] movzx edx [CONST_VAR+rcx+CONST] sub eax edx vzeroupper retn	tzcnt ecx eax movzx eax [CONST_VAR+rcx+CONST] movzx edx [CONST_VAR+rcx+CONST] sub eax edx vzeroupper retn
[ph]libcap-git-setcap___memcmp_sse4_1
endbr64 pxor xmm0 xmm0 cmp rdx CONST ja JUMP_ADDR_5	cmp rdx CONST jz JUMP_ADDR_4	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	movzx eax [CONST_VAR] movzx ecx [CONST_VAR] sub eax ecx retn	movdqu xmm1 [CONST_VAR] movdqu xmm2 [CONST_VAR] pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_152	mov rcx rsi and rsi CONST add rsi CONST sub rcx rsi sub rdi rcx add rdx rcx test rdi CONST jz JUMP_ADDR_70	cmp rdx CONST ja JUMP_ADDR_18	sub rdx CONST movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	cmp rdx CONST jb JUMP_ADDR_16	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	sub rdx CONST add rdi CONST add rsi CONST	add rdi CONST add rsi CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	cmp rdx CONST ja JUMP_ADDR_59	cmp rdx CONST ja JUMP_ADDR_35	sub rdx CONST movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_146	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_145	add rsi CONST add rdi CONST cmp rdx CONST jnb JUMP_ADDR_8	cmp rdx CONST jb JUMP_ADDR_33	movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	sub rdx CONST add rdi CONST add rsi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	sub rdx CONST movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_146	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_145	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_144	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_143	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_142	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_141	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_140	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_139	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_138	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_137	add rsi CONST add rdi CONST cmp rdx CONST jnb JUMP_ADDR_20	cmp rdx CONST jnb JUMP_ADDR_8	cmp rdx CONST jb JUMP_ADDR_57	movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	sub rdx CONST add rdi CONST add rsi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	mov r8 cs:xxx mov r9 r8 shr r8 CONST add r8 r9 cmp rdx r8 ja JUMP_ADDR_65	sub rdx CONST nop [rax+CONST]	movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] movdqa xmm1 xmm2 movdqu xmm3 [CONST_VAR+CONST] pxor xmm3 [CONST_VAR+CONST] por xmm1 xmm3 movdqu xmm4 [CONST_VAR+CONST] pxor xmm4 [CONST_VAR+CONST] por xmm1 xmm4 movdqu xmm5 [CONST_VAR+CONST] pxor xmm5 [CONST_VAR+CONST] por xmm1 xmm5 ptest xmm0 xmm1 jnb JUMP_ADDR_133	add rsi CONST add rdi CONST sub rdx CONST jnb JUMP_ADDR_61	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] movdqa xmm1 xmm2 movdqu xmm3 [CONST_VAR+CONST] pxor xmm3 [CONST_VAR+CONST] por xmm1 xmm3 movdqu xmm4 [CONST_VAR+CONST] pxor xmm4 [CONST_VAR+CONST] por xmm1 xmm4 movdqu xmm5 [CONST_VAR+CONST] pxor xmm5 [CONST_VAR+CONST] por xmm1 xmm5 ptest xmm0 xmm1 jnb JUMP_ADDR_133	add rsi CONST add rdi CONST sub rdx CONST jnb JUMP_ADDR_66	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	cmp rdx CONST ja JUMP_ADDR_81	sub rdx CONST movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	cmp rdx CONST jb JUMP_ADDR_79	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	sub rdx CONST add rdi CONST add rsi CONST	add rdi CONST add rsi CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	cmp rdx CONST ja JUMP_ADDR_122	cmp rdx CONST ja JUMP_ADDR_98	sub rdx CONST movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_146	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_145	add rsi CONST add rdi CONST cmp rdx CONST jnb JUMP_ADDR_71	cmp rdx CONST jb JUMP_ADDR_96	movdqu xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqu xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	sub rdx CONST add rdi CONST add rsi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	sub rdx CONST movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_150	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_149	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_148	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_147	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_146	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_145	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_144	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_143	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_142	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_141	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_140	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_139	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_138	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_137	add rsi CONST add rdi CONST cmp rdx CONST jnb JUMP_ADDR_83	cmp rdx CONST jnb JUMP_ADDR_71	cmp rdx CONST jb JUMP_ADDR_120	movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] ptest xmm0 xmm2 jnb JUMP_ADDR_152	movdqa xmm2 [CONST_VAR+CONST] pxor xmm2 [CONST_VAR+CONST] ptest xmm0 xmm2 jnb JUMP_ADDR_151	sub rdx CONST add rdi CONST add rsi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	mov r8 cs:xxx mov r9 r8 shr r8 CONST add r8 r9 cmp rdx r8 ja JUMP_ADDR_128	sub rdx CONST nop [rax+CONST]	movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] movdqa xmm1 xmm2 movdqa xmm3 [CONST_VAR+CONST] pxor xmm3 [CONST_VAR+CONST] por xmm1 xmm3 movdqa xmm4 [CONST_VAR+CONST] pxor xmm4 [CONST_VAR+CONST] por xmm1 xmm4 movdqa xmm5 [CONST_VAR+CONST] pxor xmm5 [CONST_VAR+CONST] por xmm1 xmm5 ptest xmm0 xmm1 jnb JUMP_ADDR_133	add rsi CONST add rdi CONST sub rdx CONST jnb JUMP_ADDR_124	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR] pxor xmm2 [CONST_VAR] movdqa xmm1 xmm2 movdqa xmm3 [CONST_VAR+CONST] pxor xmm3 [CONST_VAR+CONST] por xmm1 xmm3 movdqa xmm4 [CONST_VAR+CONST] pxor xmm4 [CONST_VAR+CONST] por xmm1 xmm4 movdqa xmm5 [CONST_VAR+CONST] pxor xmm5 [CONST_VAR+CONST] por xmm1 xmm5 ptest xmm0 xmm1 jnb JUMP_ADDR_133	add rsi CONST add rdi CONST sub rdx CONST jnb JUMP_ADDR_129	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] add rcx r11 jmp rcx	ud2	add rdi CONST add rsi CONST ptest xmm0 xmm2 jnb JUMP_ADDR_153	add rdi CONST add rsi CONST ptest xmm0 xmm3 jnb JUMP_ADDR_153	add rdi CONST add rsi CONST ptest xmm0 xmm4 jnb JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST jmp JUMP_ADDR_153	add rdi CONST add rsi CONST	add rdi CONST add rsi CONST	add rdi CONST add rsi CONST	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov ecx [CONST_VAR+CONST] mov eax [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] cmp al cl jnz JUMP_ADDR_289	and eax CONST and ecx CONST sub eax ecx retn	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	movzx ecx [CONST_VAR+CONST] movzx eax [CONST_VAR+CONST] cmp al cl jnz JUMP_ADDR_289	and eax CONST and ecx CONST sub eax ecx retn	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_287	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] sub eax ecx retn	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov ecx [CONST_VAR+CONST] mov eax [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rcx [CONST_VAR+CONST] mov rax [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] sub eax ecx retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] jmp JUMP_ADDR_287	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov ecx [CONST_VAR+CONST] mov eax [CONST_VAR+CONST] cmp ecx eax jnz JUMP_ADDR_285	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	movdqu xmm2 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov dl CONST pxor xmm2 xmm1 ptest xmm0 xmm2 jnb JUMP_ADDR_281	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	mov rax [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] cmp rcx rax jnz JUMP_ADDR_283	xor eax eax retn	movsx rdx dl mov rcx [CONST_VAR+rdx] mov rax [CONST_VAR+rdx] cmp rcx rax jnz JUMP_ADDR_283	mov rcx [CONST_VAR+rdx+CONST] mov rax [CONST_VAR+rdx+CONST]	cmp ecx eax jnz JUMP_ADDR_285	shr rcx CONST shr rax CONST	cmp ax cx jnz JUMP_ADDR_287	shr ecx CONST shr eax CONST	cmp al cl jnz JUMP_ADDR_289	and eax CONST and ecx CONST sub eax ecx retn	and eax CONST and ecx CONST sub eax ecx retn
[ph]libcap-git-setcap___mempcpy_chk_ssse3
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]
[ph]libcap-git-setcap___mempcpy_ssse3
endbr64 mov rax rdi add rax rdx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memcpy_chk_ssse3
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]
[ph]libcap-git-setcap___memcpy_ssse3
endbr64 mov rax rdi	cmp rdx CONST lea r11 unk_xxx ja JUMP_ADDR_4	movsxd r9 [r11+rdx*4] add rsi rdx add rdi rdx add r9 r11 jmp r9	ud2	cmp sil dil jle JUMP_ADDR_9	movdqu xmm0 [CONST_VAR] mov rcx rdi and rdi CONST add rdi CONST mov r8 rcx sub rcx rdi add rdx rcx sub rsi rcx mov rcx cs:xxx cmp rdx rcx mov r9 rsi ja JUMP_ADDR_397	and r9 CONST jz JUMP_ADDR_13	mov rcx cs:xxx lea r11 unk_xxx movsxd r9 [r11+r9*4] lea r9 [r11+r9] jmp r9	ud2	movdqu xmm0 [CONST_VAR+rdx+CONST] add rsi rdx lea r8 [CONST_VAR+rdx+CONST] add rdi rdx mov rcx rdi and rcx CONST xor rdi rcx sub rdx rcx sub rsi rcx mov rcx cs:xxx cmp rdx rcx mov r9 rsi ja JUMP_ADDR_403	and r9 CONST jz JUMP_ADDR_31	mov rcx cs:xxx lea r11 unk_xxx movsxd r9 [r11+r9*4] lea r9 [r11+r9] jmp r9	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR] add rsi CONST movdqa [CONST_VAR] xmm1 add rdi CONST cmp rdx CONST movdqu [r8] xmm0 ja JUMP_ADDR_18	cmp rdx CONST jb JUMP_ADDR_16	movaps xmm4 [CONST_VAR] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR] xmm4 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST add rsi CONST add rdi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp rdx cs:xxx lea rdx [rdx+CONST] jnb JUMP_ADDR_24	movdqa xmm4 [CONST_VAR] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm4 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_19	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_22	movdqa xmm4 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm4 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm4 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqa xmm0 [CONST_VAR] movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] movdqa xmm5 [CONST_VAR+CONST] movdqa xmm6 [CONST_VAR+CONST] movdqa xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_24	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_27	movdqa xmm0 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	cmp rdx CONST jb JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST cmp rdx CONST movdqu [r8] xmm0 ja JUMP_ADDR_36	cmp rdx CONST jb JUMP_ADDR_34	movaps xmm0 [CONST_VAR+CONST] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST sub rsi CONST sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp rdx cs:xxx lea rdx [rdx+CONST] jnb JUMP_ADDR_42	movdqa xmm0 [CONST_VAR+CONST] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_37	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_40	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] movdqa xmm5 [CONST_VAR+CONST] movdqa xmm6 [CONST_VAR+CONST] movdqa xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_42	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_45	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	cmp rdx CONST jb JUMP_ADDR_47	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_51	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_56	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_60	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_65	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_69	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_74	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_78	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_83	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_87	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_92	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_96	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_101	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_105	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_110	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_114	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_119	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_123	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_128	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_132	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_137	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_141	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_146	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_150	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_155	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_159	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_164	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_168	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_173	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_177	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_181	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm4 add rsi rdx movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_185	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_190	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_194	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_199	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_203	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_208	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_212	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_217	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_221	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_226	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_230	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_235	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_239	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_244	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_248	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_253	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_257	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_262	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_266	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_271	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_275	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_280	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_284	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_289	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_293	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_298	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_302	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_307	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_311	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_316	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx retn	movdqu xmm0 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx retn	mov rcx [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] dl retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dx [CONST_VAR+CONST] mov cx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx mov [CONST_VAR+CONST] cx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm1 [CONST_VAR] lea rsi [CONST_VAR+CONST] movdqu [r8] xmm0 movntdq [CONST_VAR] xmm1 lea rdi [CONST_VAR+CONST] lea rdx [rdx+CONST]	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_398	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_401	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	add rsi rdx add rdi rdx sfence lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm1 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movdqu [r8] xmm0 movdqa [CONST_VAR+CONST] xmm1 lea rdi [CONST_VAR+CONST] lea rdx [rdx+CONST]	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movntdq [CONST_VAR+CONST] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_404	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_407	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movntdq [CONST_VAR+CONST] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	sfence lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx
[ph]libcap-git-setcap___memmove_chk_ssse3
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]
[ph]libcap-git-setcap___memmove_ssse3
endbr64 mov rax rdi cmp rdi rsi jb JUMP_ADDR_4	jz JUMP_ADDR_329	cmp rdx CONST jbe JUMP_ADDR_4	jmp JUMP_ADDR_11	cmp rdx CONST lea r11 unk_xxx ja JUMP_ADDR_7	movsxd r9 [r11+rdx*4] add rsi rdx add rdi rdx add r9 r11 jmp r9	ud2	movdqu xmm0 [CONST_VAR] mov rcx rdi and rdi CONST add rdi CONST mov r8 rcx sub rcx rdi add rdx rcx sub rsi rcx mov rcx cs:xxx cmp rdx rcx mov r9 rsi ja JUMP_ADDR_400	and r9 CONST jz JUMP_ADDR_15	mov rcx cs:xxx lea r11 unk_xxx movsxd r9 [r11+r9*4] lea r9 [r11+r9] jmp r9	ud2	movdqu xmm0 [CONST_VAR+rdx+CONST] add rsi rdx lea r8 [CONST_VAR+rdx+CONST] add rdi rdx mov rcx rdi and rcx CONST xor rdi rcx sub rdx rcx sub rsi rcx mov rcx cs:xxx cmp rdx rcx mov r9 rsi ja JUMP_ADDR_412	and r9 CONST jz JUMP_ADDR_33	mov rcx cs:xxx lea r11 unk_xxx movsxd r9 [r11+r9*4] lea r9 [r11+r9] jmp r9	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR] add rsi CONST movdqa [CONST_VAR] xmm1 add rdi CONST cmp rdx CONST movdqu [r8] xmm0 ja JUMP_ADDR_20	cmp rdx CONST jb JUMP_ADDR_18	movaps xmm4 [CONST_VAR] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR] xmm4 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST add rsi CONST add rdi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp rdx cs:xxx lea rdx [rdx+CONST] jnb JUMP_ADDR_26	movdqa xmm4 [CONST_VAR] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm4 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_21	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_24	movdqa xmm4 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm4 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm4 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqa xmm0 [CONST_VAR] movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] movdqa xmm5 [CONST_VAR+CONST] movdqa xmm6 [CONST_VAR+CONST] movdqa xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_26	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	cmp rdx CONST jb JUMP_ADDR_31	movdqa xmm0 [CONST_VAR] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] add rsi CONST movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 add rdi CONST	add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST cmp rdx CONST movdqu [r8] xmm0 ja JUMP_ADDR_38	cmp rdx CONST jb JUMP_ADDR_36	movaps xmm0 [CONST_VAR+CONST] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST sub rsi CONST sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp rdx cs:xxx lea rdx [rdx+CONST] jnb JUMP_ADDR_44	movdqa xmm0 [CONST_VAR+CONST] movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 sub rdx CONST movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_39	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_42	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] movdqa xmm5 [CONST_VAR+CONST] movdqa xmm6 [CONST_VAR+CONST] movdqa xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_44	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_47	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	cmp rdx CONST jb JUMP_ADDR_49	movdqa xmm0 [CONST_VAR+CONST] sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] sub rsi CONST movdqa [CONST_VAR+CONST] xmm0 movdqa [CONST_VAR+CONST] xmm1 sub rdi CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_53	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_58	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_62	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_67	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_71	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_76	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_80	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_85	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_89	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_94	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_98	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_103	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_107	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_112	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_116	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_121	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_125	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_130	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_134	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_139	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_143	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_148	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_152	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_157	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_161	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_166	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_170	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_175	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_179	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_183	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm4 add rsi rdx movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_187	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_192	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_196	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_201	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_205	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_210	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_214	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_219	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_223	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_228	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_232	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_237	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_241	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_246	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_250	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_255	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_259	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_264	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_268	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_273	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_277	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_282	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_286	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_291	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_295	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_300	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_304	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] sub rdx CONST movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movdqa xmm6 xmm5 palignr xmm5 xmm4 xmm4 lea rsi [CONST_VAR+CONST] palignr xmm4 xmm3 xmm3 palignr xmm3 xmm2 xmm2 lea rdi [CONST_VAR+CONST] palignr xmm2 xmm1 xmm1 movdqa xmm1 xmm6 movdqa [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_309	movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 jmp r9	ud2	movaps [CONST_VAR+CONST] xmm4 lea rdx [rdx+CONST] movaps [CONST_VAR+CONST] xmm5 add rdi rdx movdqu [r8] xmm0 add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r9 [r9+CONST] cmp rdx rcx movaps xmm1 [CONST_VAR+CONST] jb JUMP_ADDR_313	lea r9 [r9+CONST]	lea rdx [rdx+CONST] jmp r9	ud2	prefetchnta [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] sub rdx CONST movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 palignr xmm2 xmm3 xmm3 palignr xmm3 xmm4 xmm4 palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm1 movaps xmm1 xmm5 movaps [CONST_VAR+CONST] xmm2 lea rdi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 jb JUMP_ADDR_318	movaps [CONST_VAR] xmm4 jmp r9	ud2	movaps [CONST_VAR] xmm4 lea rdx [rdx+CONST] movdqu [r8] xmm0 lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx retn	movdqu xmm0 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx retn	mov rcx [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rdx retn	mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx	retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] dl retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dl [CONST_VAR+CONST] mov [CONST_VAR+CONST] dl retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov dx [CONST_VAR+CONST] mov cx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx mov [CONST_VAR+CONST] cx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov rcx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] edx retn	mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	movdqu xmm0 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8 mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r9 [CONST_VAR+CONST] mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9 mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov r11 [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] r11 mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdx retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	movdqu xmm1 [CONST_VAR] lea rsi [CONST_VAR+CONST] movdqu [r8] xmm0 movntdq [CONST_VAR] xmm1 lea rdi [CONST_VAR+CONST] lea rdx [rdx+CONST] mov r9 rsi sub r9 rdi cmp r9 rdx jnb JUMP_ADDR_402	shl rcx CONST cmp rdx rcx jb JUMP_ADDR_407	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_402	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_405	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	add rsi rdx add rdi rdx sfence lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movaps [CONST_VAR] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_407	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_410	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm1 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movdqu [r8] xmm0 movdqa [CONST_VAR+CONST] xmm1 lea rdi [CONST_VAR+CONST] lea rdx [rdx+CONST] mov r9 rdi sub r9 rsi cmp r9 rdx jnb JUMP_ADDR_414	cmp r9 rcx jb JUMP_ADDR_419	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movntdq [CONST_VAR+CONST] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_414	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_417	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movntdq [CONST_VAR+CONST] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	sfence lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST movaps [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 movaps [CONST_VAR+CONST] xmm4 movaps [CONST_VAR+CONST] xmm5 movaps [CONST_VAR+CONST] xmm6 movaps [CONST_VAR+CONST] xmm7 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_419	cmp rdx CONST lea rdx [rdx+CONST] jl JUMP_ADDR_422	movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 lea rdi [CONST_VAR+CONST] sub rdx CONST	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx
[ph]libcap-git-setcap___mempcpy_chk_ssse3_back
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi add rax rdx jmp JUMP_ADDR_6	endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi	cmp rdx CONST jnb JUMP_ADDR_12	cmp sil dil jbe JUMP_ADDR_10	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp sil dil jle JUMP_ADDR_17	movdqu xmm0 [CONST_VAR] mov r8 rdi and rdi CONST add rdi CONST mov r9 rdi sub r9 r8 sub rdx r9 add rsi r9 mov r9 rsi and r9 CONST jz JUMP_ADDR_21	mov rcx cs:xxx cmp rdx rcx jnb JUMP_ADDR_120	lea r11 unk_xxx sub rdx CONST movsxd r9 [r11+r9*4] add r9 r11 jmp r9	ud2	mov rcx cs:xxx shl rcx CONST cmp rdx rcx ja JUMP_ADDR_133	add rdi rdx add rsi rdx movdqu xmm0 [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] mov r9 rdi and r9 CONST xor rdi r9 sub rsi r9 sub rdx r9 mov r9 rsi and r9 CONST jz JUMP_ADDR_26	lea r11 unk_xxx sub rdx CONST movsxd r9 [r11+r9*4] add r9 r11 jmp r9	ud2	mov r9 rdx shr r9 CONST add r9 rdx cmp r9 cs:xxx jnb JUMP_ADDR_120	sub rdx CONST xchg ax ax	movdqa xmm1 [CONST_VAR] movdqa [CONST_VAR] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps xmm1 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 sub rdx CONST lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_23	movdqu [r8] xmm0 add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST	movaps xmm1 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_27	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_30	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_33	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_36	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_39	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_42	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_45	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_48	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_51	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_54	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_57	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_60	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_63	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_66	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_69	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_72	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_75	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_78	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_81	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_84	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_87	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_90	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_93	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_96	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_99	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_102	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_105	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_108	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_111	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_114	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_117	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm1 [CONST_VAR] movdqu [r8] xmm0 movdqa [CONST_VAR] xmm1 sub rdx CONST add rsi CONST add rdi CONST mov rcx cs:xxx cmp rdx rcx ja JUMP_ADDR_122	mov rcx rdx	sub rdx rcx cmp rdx CONST jbe JUMP_ADDR_129	mov r9 rcx shl r9 CONST cmp rdx r9 jbe JUMP_ADDR_125	add rdx rcx xor rcx rcx	sub rdx CONST	sub rdx CONST prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lfence movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_126	sfence cmp rcx CONST jb JUMP_ADDR_131	add rdx CONST	add rdx rcx sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] sub rdx CONST movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_130	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	add rsi rdx add rdi rdx movdqu xmm0 [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] mov r9 rdi and rdi CONST sub r9 rdi sub rsi r9 sub rdx r9 mov rcx cs:xxx cmp rdx rcx ja JUMP_ADDR_135	mov rcx rdx	sub rdx rcx cmp rdx CONST jbe JUMP_ADDR_142	mov r9 rcx shl r9 CONST cmp rdx r9 jbe JUMP_ADDR_138	add rdx rcx xor rcx rcx	sub rdx CONST	sub rdx CONST prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqu xmm8 [CONST_VAR+CONST] lfence movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 movntdq [CONST_VAR+CONST] xmm8 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_139	sfence cmp rcx CONST jb JUMP_ADDR_144	add rdx CONST	add rdx rcx sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] sub rdx CONST movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqu xmm8 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 movdqa [CONST_VAR+CONST] xmm8 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_143	movdqu [r8] xmm0 add rdx CONST sub rsi rdx sub rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx
[ph]libcap-git-setcap___memmove_chk_ssse3_back
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi cmp rdi rsi jb JUMP_ADDR_7	jz JUMP_ADDR_181	cmp rdx CONST jnb JUMP_ADDR_14	lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	cmp rdx CONST jnb JUMP_ADDR_10	add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm0 [CONST_VAR] mov r8 rdi and rdi CONST add rdi CONST mov r9 rdi sub r9 r8 sub rdx r9 add rsi r9 mov r9 rsi and r9 CONST jz JUMP_ADDR_18	mov rcx cs:xxx cmp rdx rcx jnb JUMP_ADDR_117	lea r11 unk_xxx sub rdx CONST movsxd r9 [r11+r9*4] add r9 r11 jmp r9	ud2	mov rcx cs:xxx shl rcx CONST cmp rdx rcx ja JUMP_ADDR_133	add rdi rdx add rsi rdx movdqu xmm0 [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] mov r9 rdi and r9 CONST xor rdi r9 sub rsi r9 sub rdx r9 mov r9 rsi and r9 CONST jz JUMP_ADDR_23	lea r11 unk_xxx sub rdx CONST movsxd r9 [r11+r9*4] add r9 r11 jmp r9	ud2	mov r9 rdx shr r9 CONST add r9 rdx cmp r9 cs:xxx jnb JUMP_ADDR_117	sub rdx CONST xchg ax ax	movdqa xmm1 [CONST_VAR] movdqa [CONST_VAR] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps xmm1 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 sub rdx CONST lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_20	movdqu [r8] xmm0 add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST	movaps xmm1 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm1 movaps xmm2 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm2 movaps xmm3 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm3 movaps xmm4 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm4 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] movaps [CONST_VAR+CONST] xmm5 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_24	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_27	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_30	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_33	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_36	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_39	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_42	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_45	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_48	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_51	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_54	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_57	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_60	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_63	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_66	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_69	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_72	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_75	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_78	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_81	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_84	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_87	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_90	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movdqa xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_93	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_96	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_99	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_102	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_105	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_108	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	sub rdx CONST movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm4 [CONST_VAR+CONST] movaps xmm5 [CONST_VAR+CONST] movaps xmm6 [CONST_VAR+CONST] movaps xmm7 [CONST_VAR+CONST] movaps xmm8 [CONST_VAR+CONST] movaps xmm9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] palignr xmm9 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm9 palignr xmm8 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm8 palignr xmm7 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm7 palignr xmm6 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm6 palignr xmm5 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm5 palignr xmm4 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm4 palignr xmm3 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm3 palignr xmm2 xmm1 xmm1 movaps [CONST_VAR] xmm2 lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_111	movdqu [r8] xmm0 add rdx CONST add rdi rdx add rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movaps xmm1 [CONST_VAR+CONST] movaps xmm2 [CONST_VAR+CONST] palignr xmm1 xmm2 xmm2 movaps [CONST_VAR+CONST] xmm1 movaps xmm3 [CONST_VAR+CONST] palignr xmm2 xmm3 xmm3 movaps [CONST_VAR+CONST] xmm2 movaps xmm4 [CONST_VAR+CONST] palignr xmm3 xmm4 xmm4 movaps [CONST_VAR+CONST] xmm3 movaps xmm5 [CONST_VAR+CONST] palignr xmm4 xmm5 xmm5 movaps [CONST_VAR+CONST] xmm4 movaps xmm6 [CONST_VAR+CONST] palignr xmm5 xmm6 xmm6 movaps [CONST_VAR+CONST] xmm5 movaps xmm7 [CONST_VAR+CONST] palignr xmm6 xmm7 xmm7 movaps [CONST_VAR+CONST] xmm6 movaps xmm8 [CONST_VAR+CONST] palignr xmm7 xmm8 xmm8 movaps [CONST_VAR+CONST] xmm7 movaps xmm9 [CONST_VAR+CONST] palignr xmm8 xmm9 xmm9 movaps [CONST_VAR+CONST] xmm8 sub rdx CONST lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jnb JUMP_ADDR_114	movdqu [r8] xmm0 add rdx CONST sub rdi rdx sub rsi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	movdqu xmm1 [CONST_VAR] movdqu [r8] xmm0 movdqa [CONST_VAR] xmm1 sub rdx CONST add rsi CONST add rdi CONST mov rcx cs:xxx mov r9 rsi sub r9 rdi cmp r9 rdx jnb JUMP_ADDR_119	cmp r9 rcx jbe JUMP_ADDR_129	cmp rdx rcx ja JUMP_ADDR_121	mov rcx rdx	sub rdx rcx cmp rdx CONST jbe JUMP_ADDR_128	mov r9 rcx shl r9 CONST cmp rdx r9 jbe JUMP_ADDR_124	add rdx rcx xor rcx rcx	sub rdx CONST	sub rdx CONST prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] lfence movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_125	sfence cmp rcx CONST jb JUMP_ADDR_131	add rdx CONST	add rdx rcx	sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] sub rdx CONST movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqa [CONST_VAR] xmm0 movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_130	add rdx CONST add rsi rdx add rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	add rsi rdx add rdi rdx movdqu xmm0 [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] mov r9 rdi and rdi CONST sub r9 rdi sub rsi r9 sub rdx r9 mov rcx cs:xxx mov r9 rdi sub r9 rsi cmp r9 rdx jnb JUMP_ADDR_135	cmp r9 rcx jbe JUMP_ADDR_145	cmp rdx rcx ja JUMP_ADDR_137	mov rcx rdx	sub rdx rcx cmp rdx CONST jbe JUMP_ADDR_144	mov r9 rcx shl r9 CONST cmp rdx r9 jbe JUMP_ADDR_140	add rdx rcx xor rcx rcx	sub rdx CONST	sub rdx CONST prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqu xmm8 [CONST_VAR+CONST] lfence movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 movntdq [CONST_VAR+CONST] xmm4 movntdq [CONST_VAR+CONST] xmm5 movntdq [CONST_VAR+CONST] xmm6 movntdq [CONST_VAR+CONST] xmm7 movntdq [CONST_VAR+CONST] xmm8 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_141	sfence cmp rcx CONST jb JUMP_ADDR_147	add rdx CONST	add rdx rcx	sub rdx CONST	prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] prefetchnta [CONST_VAR+CONST] sub rdx CONST movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movdqu xmm8 [CONST_VAR+CONST] movdqa [CONST_VAR+CONST] xmm1 movdqa [CONST_VAR+CONST] xmm2 movdqa [CONST_VAR+CONST] xmm3 movdqa [CONST_VAR+CONST] xmm4 movdqa [CONST_VAR+CONST] xmm5 movdqa [CONST_VAR+CONST] xmm6 movdqa [CONST_VAR+CONST] xmm7 movdqa [CONST_VAR+CONST] xmm8 lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jnb JUMP_ADDR_146	movdqu [r8] xmm0 add rdx CONST sub rsi rdx sub rdi rdx lea r11 unk_xxx movsxd rdx [r11+rdx*4] lea rdx [r11+rdx] jmp rdx	ud2	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rcx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rcx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rcx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov rdx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rdx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov edx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx mov [CONST_VAR+CONST] ecx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	mov dx [CONST_VAR+CONST] mov cx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx mov [CONST_VAR+CONST] cx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	movzx edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dx retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] lddqu xmm1 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm1 retn	movzx edx [CONST_VAR+CONST] mov [CONST_VAR+CONST] dl retn	lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm0 lddqu xmm0 [CONST_VAR] movdqu [CONST_VAR] xmm0	retn
[ph]libcap-git-setcap___mempcpy_chk_avx512_no_vzeroupper
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi add rax rdx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memmove_chk_avx512_no_vzeroupper
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]
[ph]libcap-git-setcap___memmove_avx512_no_vzeroupper
endbr64 mov rax rdi	lea rcx [CONST_VAR+rdx] lea r9 [CONST_VAR+rdx] cmp rdx CONST ja JUMP_ADDR_21	cmp rdx CONST jbe JUMP_ADDR_12	cmp rdx CONST jb JUMP_ADDR_5	vmovups zmm0 CONST vmovups zmm1 CONST vmovups zmm2 CONST vmovups zmm3 CONST vmovups zmm4 CONST vmovups zmm5 CONST vmovups zmm6 CONST vmovups zmm7 CONST vmovups CONST zmm0 vmovups CONST zmm1 vmovups CONST zmm2 vmovups CONST zmm3 vmovups CONST zmm4 vmovups CONST zmm5 vmovups CONST zmm6 vmovups CONST zmm7 retn	cmp dl CONST jb JUMP_ADDR_7	vmovups zmm0 CONST vmovups zmm1 CONST vmovups zmm2 CONST vmovups zmm3 CONST vmovups CONST zmm0 vmovups CONST zmm1 vmovups CONST zmm2 vmovups CONST zmm3 retn	cmp dl CONST jb JUMP_ADDR_9	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vmovdqu CONST ymm2 vmovdqu CONST ymm3 retn	cmp dl CONST jb JUMP_ADDR_11	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 retn	vmovdqu xmm0 [CONST_VAR] vmovdqu xmm1 [rcx+CONST] vmovdqu [CONST_VAR] xmm0 vmovdqu [r9+CONST] xmm1 retn	cmp dl CONST jb JUMP_ADDR_14	mov rsi [CONST_VAR] mov rcx [rcx+CONST] mov [CONST_VAR] rsi mov [r9+CONST] rcx retn	cmp dl CONST jb JUMP_ADDR_16	mov esi [CONST_VAR] mov ecx [rcx+CONST] mov [CONST_VAR] esi mov [r9+CONST] ecx retn	cmp dl CONST jb JUMP_ADDR_18	mov si [CONST_VAR] mov cx [rcx+CONST] mov [CONST_VAR] si mov [r9+CONST] cx retn	cmp dl CONST jb JUMP_ADDR_20	mov cl [CONST_VAR] mov [CONST_VAR] cl	retn	mov r8 cs:xxx cmp rdx r8 jnb JUMP_ADDR_31	cmp rdx CONST ja JUMP_ADDR_24	prefetcht1 [CONST_VAR] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] vmovups zmm0 CONST vmovups zmm1 CONST vmovups zmm2 CONST vmovups zmm3 CONST vmovups zmm4 CONST vmovups zmm5 CONST vmovups zmm6 CONST vmovups zmm7 CONST vmovups zmm8 CONST vmovups zmm9 CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST zmm0 vmovups CONST zmm1 vmovups CONST zmm2 vmovups CONST zmm3 vmovups CONST zmm4 vmovups CONST zmm5 vmovups CONST zmm6 vmovups CONST zmm7 vmovups CONST zmm8 vmovups CONST zmm9 vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST retn	cmp rdi rsi ja JUMP_ADDR_28	sub r9 CONST vmovups zmm8 CONST vmovups zmm9 CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST prefetcht1 [CONST_VAR] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST]	vmovups zmm0 CONST vmovups zmm1 CONST vmovups zmm2 CONST vmovups zmm3 CONST vmovups zmm4 CONST vmovups zmm5 CONST vmovups zmm6 CONST vmovups zmm7 CONST add rsi CONST prefetcht1 [CONST_VAR] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] vmovups CONST zmm0 vmovups CONST zmm1 vmovups CONST zmm2 vmovups CONST zmm3 vmovups CONST zmm4 vmovups CONST zmm5 vmovups CONST zmm6 vmovups CONST zmm7 add rdi CONST cmp rdi r9 jb JUMP_ADDR_26	vmovups CONST zmm8 vmovups CONST zmm9 vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST retn	add rdi CONST vmovups zmm8 CONST vmovups zmm9 CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST]	vmovups zmm0 CONST vmovups zmm1 CONST vmovups zmm2 CONST vmovups zmm3 CONST vmovups zmm4 CONST vmovups zmm5 CONST vmovups zmm6 CONST vmovups zmm7 CONST sub rcx CONST prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] vmovups CONST zmm0 vmovups CONST zmm1 vmovups CONST zmm2 vmovups CONST zmm3 vmovups CONST zmm4 vmovups CONST zmm5 vmovups CONST zmm6 vmovups CONST zmm7 sub r9 CONST cmp r9 rdi ja JUMP_ADDR_29	vmovups CONST zmm8 vmovups CONST zmm9 vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST vmovups CONST CONST retn	cmp rdi rsi ja JUMP_ADDR_35	vmovups zmm4 CONST vmovups zmm5 CONST mov r11 rdi mov r8 rdi and rdi CONST add rdi CONST sub r8 rdi sub rsi r8 add rdx r8	prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] prefetcht1 [CONST_VAR+CONST] vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST vmovntdq CONST zmm0 vmovntdq CONST zmm1 vmovntdq CONST zmm2 vmovntdq CONST zmm3 sub rdx CONST add rsi CONST add rdi CONST cmp rdx CONST ja JUMP_ADDR_33	sfence vmovups CONST zmm4 vmovups CONST zmm5 jmp JUMP_ADDR_2	vmovups zmm4 CONST vmovups zmm5 CONST mov r8 r9 and r9 CONST sub r8 r9 sub rcx r8 sub rdx r8 add r8 r9	prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] prefetcht1 [rcx+CONST] vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST vmovntdq CONST zmm0 vmovntdq CONST zmm1 vmovntdq CONST zmm2 vmovntdq CONST zmm3 sub rdx CONST sub rcx CONST sub r9 CONST cmp rdx CONST ja JUMP_ADDR_36	sfence vmovups CONST zmm4 vmovups CONST zmm5 jmp JUMP_ADDR_2
[ph]libcap-git-setcap___strcasecmp_sse2
endbr64 mov rax CONST mov rdx fs:xxx nop [rax+rax+CONST] nop [rax+rax+CONST] nop
[ph]libcap-git-setcap___strcasecmp_l_sse2
endbr64 mov rax [rdx] test [rax+CONST] CONST jnz UNK_JUMP_ADDR	mov ecx esi mov eax edi and rcx CONST and rax CONST movdqa xmm5 cs:xxx movdqa xmm6 cs:xxx movdqa xmm7 cs:xxx cmp ecx CONST ja JUMP_ADDR_5	cmp eax CONST ja JUMP_ADDR_5	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_168	add rsi CONST add rdi CONST nop [rax]	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_9	ja JUMP_ADDR_8	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 movdqa xmm2 [CONST_VAR] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+rax+CONST] xchg ax ax	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST jmp JUMP_ADDR_11	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_21	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_21	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_16	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_23	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_17	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_26	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_33	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_27	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_41	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_41	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_36	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_43	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_37	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_51	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_51	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_46	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_53	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_47	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_56	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_63	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_57	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_71	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_71	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_66	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_73	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_67	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_81	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_81	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_76	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_83	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_77	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_86	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_93	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_87	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_101	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_101	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_96	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_103	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_97	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_111	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_111	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_106	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_113	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_107	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_116	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_123	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_117	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_131	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_131	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_126	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_133	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_127	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_141	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_141	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_136	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_143	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_137	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_146	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_153	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_147	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_161	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_161	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 psrldq xmm3 CONST pslldq xmm2 CONST por xmm2 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_156	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_163	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_157	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm3 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm3 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm3 CONST pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx nop [rax+rax+CONST] nop	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_168	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] lea rdx GLOBAL_VAR mov ecx [rdx+rcx*4] mov eax [rdx+rax*4] sub eax ecx retn
[ph]libcap-git-setcap___strcasecmp_ssse3
endbr64 mov rax CONST mov rdx fs:xxx nop [rax+rax+CONST] nop [rax+rax+CONST] nop
[ph]libcap-git-setcap___strcasecmp_l_ssse3
endbr64 mov rax [rdx] test [rax+CONST] CONST jnz UNK_JUMP_ADDR	mov ecx esi mov eax edi and rcx CONST and rax CONST movdqa xmm5 cs:xxx movdqa xmm6 cs:xxx movdqa xmm7 cs:xxx cmp ecx CONST ja JUMP_ADDR_5	cmp eax CONST ja JUMP_ADDR_5	movlpd xmm1 [CONST_VAR] movlpd xmm2 [CONST_VAR] movhpd xmm1 [CONST_VAR+CONST] movhpd xmm2 [CONST_VAR+CONST] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_168	add rsi CONST add rdi CONST nop [rax]	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST cmp ecx eax jz JUMP_ADDR_9	ja JUMP_ADDR_8	mov r8d edx xchg eax ecx xchg rsi rdi	lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 movdqa xmm2 [CONST_VAR] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	mov rcx CONST mov r9 CONST pxor xmm0 xmm0 nop [rax+rax+CONST] xchg ax ax	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST jmp JUMP_ADDR_11	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_21	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_21	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_16	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_23	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_17	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_31	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_26	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_33	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_27	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_41	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_41	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_36	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_43	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_37	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_51	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_51	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_46	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_53	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_47	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_61	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_56	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_63	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_57	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_71	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_71	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_66	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_73	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_67	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_81	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_81	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_76	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_83	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_77	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_91	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_86	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_93	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_87	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_101	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_101	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_96	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_103	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_97	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_111	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_111	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_106	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_113	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_107	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_121	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_116	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_123	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_117	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_131	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_131	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_126	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_133	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_127	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_141	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_141	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_136	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_143	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_137	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_151	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_146	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_153	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_147	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm0 CONST psrldq xmm3 CONST jmp JUMP_ADDR_164	pxor xmm0 xmm0 movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 pslldq xmm2 CONST movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_166	movdqa xmm3 [CONST_VAR] pxor xmm0 xmm0 mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST nop [rax]	add r10 CONST jg JUMP_ADDR_161	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 add r10 CONST jg JUMP_ADDR_161	movdqa xmm1 [CONST_VAR+rcx] movdqa xmm2 [CONST_VAR+rcx] movdqa xmm4 xmm2 palignr xmm2 xmm3 xmm3 movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm2 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm2 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm2 CONST pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_165	add rcx CONST movdqa xmm3 xmm4 jmp JUMP_ADDR_156	pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx CONST jnz JUMP_ADDR_163	pxor xmm0 xmm0 sub r10 CONST jmp JUMP_ADDR_157	movdqa xmm1 [CONST_VAR+rcx] psrldq xmm3 CONST psrldq xmm0 CONST nop	movdqa xmm8 xmm1 movdqa xmm9 xmm6 movdqa CONST xmm3 movdqa CONST xmm6 pcmpgtb xmm8 xmm5 pcmpgtb xmm9 xmm1 pcmpgtb CONST xmm5 pcmpgtb CONST xmm3 pand xmm8 xmm9 pand CONST CONST pand xmm8 xmm7 pand CONST xmm7 por xmm1 xmm8 por xmm3 CONST pcmpeqb xmm1 xmm3 psubb xmm1 xmm0 pmovmskb edx xmm1 not edx nop [rax+rax+CONST] nop	lea rax [r9+rcx+CONST]	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_168	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] lea rdx GLOBAL_VAR mov ecx [rdx+rcx*4] mov eax [rdx+rax*4] sub eax ecx retn
[ph]libcap-git-setcap___strcasecmp_sse42
endbr64 mov rax CONST mov rdx fs:xxx nop [rax+rax+CONST]
[ph]libcap-git-setcap___strcasecmp_l_sse42
endbr64 mov rax [rdx] test [rax+CONST] CONST jnz UNK_JUMP_ADDR	mov ecx esi mov eax edi and rcx CONST and rax CONST movdqa xmm4 cs:xxx movdqa xmm5 cs:xxx movdqa xmm6 cs:xxx cmp ecx CONST ja JUMP_ADDR_5	cmp eax CONST ja JUMP_ADDR_5	movdqu xmm1 [CONST_VAR] movdqu xmm2 [CONST_VAR] movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pxor xmm0 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_157	add rsi CONST add rdi CONST nop [rax+rax+CONST]	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST pxor xmm0 xmm0 cmp ecx eax jz JUMP_ADDR_9	ja JUMP_ADDR_8	mov r8d edx xchg eax ecx xchg rsi rdi	movdqa xmm2 [CONST_VAR] movdqa xmm1 [CONST_VAR] lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] pcmpeqb xmm0 xmm1 lea r10 [r10+r9] jmp r10	movdqa xmm1 [CONST_VAR] pcmpeqb xmm0 xmm1 movdqa xmm2 [CONST_VAR] movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm1 xmm2 psubb xmm1 xmm0 pmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	mov rcx CONST mov r9 CONST mov rdx rcx nop [rax+rax+CONST]	movdqa xmm0 [CONST_VAR+rdx] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 lea rdx [rdx+CONST] jbe JUMP_ADDR_14	movdqa xmm0 [CONST_VAR+rdx] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 lea rdx [rdx+CONST] jbe JUMP_ADDR_14	jmp JUMP_ADDR_11	jnb JUMP_ADDR_158	lea rcx [rdx+rcx+CONST] movzx eax [CONST_VAR+rcx] movzx edx [CONST_VAR+rcx] lea rcx GLOBAL_VAR mov eax [rcx+rax*4] mov edx [rcx+rdx*4] sub eax edx retn	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_23	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_23	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_18	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_19	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_32	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_32	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_27	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_28	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_41	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_41	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_36	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_37	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_50	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_50	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_45	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_46	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_59	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_59	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_54	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_55	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_68	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_68	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_63	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_64	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_77	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_77	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_72	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_73	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_86	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_86	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_81	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_82	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_95	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_95	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_90	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_91	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_104	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_104	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_99	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_100	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_113	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_113	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_108	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_109	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_122	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_122	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_117	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_118	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_131	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_131	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_126	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_127	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_140	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_140	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_135	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_136	jmp JUMP_ADDR_150	pslldq xmm2 CONST movdqa xmm7 xmm1 movdqa xmm8 xmm5 movdqa xmm9 xmm2 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm1 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm2 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm1 xmm7 por xmm2 xmm9 pcmpeqb xmm2 xmm1 psubb xmm2 xmm0 pmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	movdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx nop [rax+rax+CONST]	add r10 CONST jg JUMP_ADDR_149	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_149	movdqa xmm0 [CONST_VAR+rdx] palignr xmm0 [CONST_VAR+rdx+CONST] [CONST_VAR+rdx+CONST_VAR] movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_144	sub r10 CONST movdqa xmm0 [CONST_VAR+rdx+CONST] psrldq xmm0 CONST pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_145	movdqa xmm1 [CONST_VAR+rdx] movdqa xmm7 xmm0 movdqa xmm8 xmm5 movdqa xmm9 xmm1 movdqa CONST xmm5 pcmpgtb xmm7 xmm4 pcmpgtb xmm8 xmm0 pcmpgtb xmm9 xmm4 pcmpgtb CONST xmm1 pand xmm7 xmm8 pand xmm9 CONST pand xmm7 xmm6 pand xmm9 xmm6 por xmm0 xmm7 por xmm1 xmm9 pcmpistri xmm0 xmm1 xmm1 xchg ax ax	jnb JUMP_ADDR_158	add rdx rcx lea rdi [CONST_VAR+r9+CONST] movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] test r8d r8d jz JUMP_ADDR_154	xchg eax edx	lea rcx GLOBAL_VAR mov edx [rcx+rdx*4] mov eax [rcx+rax*4] sub eax edx retn	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_157	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] lea rdx GLOBAL_VAR mov ecx [rdx+rcx*4] mov eax [rdx+rax*4] sub eax ecx retn	xor eax eax retn
[ph]libcap-git-setcap___strcasecmp_avx
endbr64 mov rax CONST mov rdx fs:xxx nop [rax+rax+CONST]
[ph]libcap-git-setcap___strcasecmp_l_avx
endbr64 mov rax [rdx] test [rax+CONST] CONST jnz UNK_JUMP_ADDR	mov ecx esi mov eax edi and rcx CONST and rax CONST vmovdqa xmm4 cs:xxx vmovdqa xmm5 cs:xxx vmovdqa xmm6 cs:xxx cmp ecx CONST ja JUMP_ADDR_5	cmp eax CONST ja JUMP_ADDR_5	vmovdqu xmm1 [CONST_VAR] vmovdqu xmm2 [CONST_VAR] vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpxor xmm0 xmm0 xmm0 vpcmpeqb xmm0 xmm0 xmm0 vpcmpeqb xmm1 xmm1 xmm1 vpsubb xmm1 xmm1 xmm1 vpmovmskb edx xmm1 sub edx CONST jnz JUMP_ADDR_157	add rsi CONST add rdi CONST nop [rax+rax+CONST] nop [rax]	and rsi CONST and rdi CONST mov edx CONST xor r8d r8d and ecx CONST and eax CONST vpxor xmm0 xmm0 xmm0 cmp ecx eax jz JUMP_ADDR_9	ja JUMP_ADDR_8	mov r8d edx xchg eax ecx xchg rsi rdi	vmovdqa xmm2 [CONST_VAR] vmovdqa xmm1 [CONST_VAR] lea r9 [rax+CONST] sub r9 rcx lea r10 unk_xxx movsxd r9 [r10+r9*4] vpcmpeqb xmm0 xmm0 xmm0 lea r10 [r10+r9] jmp r10	vmovdqa xmm1 [CONST_VAR] vpcmpeqb xmm0 xmm0 xmm0 vmovdqa xmm2 [CONST_VAR] vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm1 xmm1 xmm1 vpsubb xmm1 xmm1 xmm1 vpmovmskb r9d xmm1 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	mov rcx CONST mov r9 CONST mov rdx rcx	vmovdqa xmm0 [CONST_VAR+rdx] vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 lea rdx [rdx+CONST] jbe JUMP_ADDR_14	vmovdqa xmm0 [CONST_VAR+rdx] vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 lea rdx [rdx+CONST] jbe JUMP_ADDR_14	jmp JUMP_ADDR_11	jnb JUMP_ADDR_158	lea rcx [rdx+rcx+CONST] movzx eax [CONST_VAR+rcx] movzx edx [CONST_VAR+rcx] lea rcx GLOBAL_VAR mov eax [rcx+rax*4] mov edx [rcx+rdx*4] sub eax edx retn	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_23	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_23	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_18	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_19	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_32	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_32	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_27	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_28	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx	add r10 CONST jg JUMP_ADDR_41	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_41	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_36	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_37	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_50	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_50	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_45	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_46	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_59	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_59	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_54	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_55	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_68	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_68	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_63	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_64	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_77	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_77	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_72	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_73	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_86	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_86	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_81	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_82	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_95	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_95	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_90	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_91	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_104	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_104	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_99	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_100	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_113	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_113	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_108	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_109	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_122	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_122	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_117	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_118	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_131	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_131	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_126	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_127	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_140	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_140	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_135	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_136	jmp JUMP_ADDR_150	vpslldq xmm2 xmm2 xmm2 vpcmpgtb xmm7 xmm1 xmm1 vpcmpgtb xmm8 xmm1 xmm1 vpcmpgtb xmm9 xmm2 xmm2 vpcmpgtb CONST xmm2 xmm2 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm1 xmm8 xmm8 vpor xmm2 CONST CONST vpcmpeqb xmm2 xmm2 xmm2 vpsubb xmm2 xmm2 xmm2 vpmovmskb r9d xmm2 shr edx cl shr r9d cl sub edx r9d jnz JUMP_ADDR_155	vmovdqa xmm3 [CONST_VAR] mov rcx CONST mov r9d CONST lea r10 [CONST_VAR+CONST] and r10 CONST sub r10 CONST mov rdx rcx xchg ax ax	add r10 CONST jg JUMP_ADDR_149	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST add r10 CONST jg JUMP_ADDR_149	vmovdqa xmm0 [CONST_VAR+rdx] vpalignr xmm0 xmm0 xmm0 vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 jbe JUMP_ADDR_151	add rdx CONST jmp JUMP_ADDR_144	sub r10 CONST vmovdqa xmm0 [CONST_VAR+rdx+CONST] vpsrldq xmm0 xmm0 xmm0 vpcmpistri xmm0 xmm0 xmm0 cmp ecx CONST ja JUMP_ADDR_145	vmovdqa xmm1 [CONST_VAR+rdx] vpcmpgtb xmm7 xmm0 xmm0 vpcmpgtb xmm8 xmm0 xmm0 vpcmpgtb xmm9 xmm1 xmm1 vpcmpgtb CONST xmm1 xmm1 vpandn xmm8 xmm8 xmm8 vpandn CONST CONST CONST vpand xmm8 xmm8 xmm8 vpand CONST CONST CONST vpor xmm0 xmm8 xmm8 vpor xmm1 CONST CONST vpcmpistri xmm0 xmm1 xmm1 nop [rax+rax+CONST]	jnb JUMP_ADDR_158	add rdx rcx lea rdi [CONST_VAR+r9+CONST] movzx eax [CONST_VAR+rdx] movzx edx [CONST_VAR+rdx] test r8d r8d jz JUMP_ADDR_154	xchg eax edx	lea rcx GLOBAL_VAR mov edx [rcx+rdx*4] mov eax [rcx+rax*4] sub eax edx retn	lea rdi [CONST_VAR+rax] lea rsi [CONST_VAR+rcx] test r8d r8d jz JUMP_ADDR_157	xchg rsi rdi nop [rax+rax+CONST]	bsf rdx rdx movzx ecx [CONST_VAR+rdx] movzx eax [CONST_VAR+rdx] lea rdx GLOBAL_VAR mov ecx [rdx+rcx*4] mov eax [rdx+rax*4] sub eax ecx retn	xor eax eax retn
[ph]libcap-git-setcap___strchrnul_sse2
endbr64 movd xmm1 esi mov eax edi and eax CONST punpcklbw xmm1 xmm1 cmp eax CONST punpcklwd xmm1 xmm1 pshufd xmm1 xmm1 xmm1 jg JUMP_ADDR_8	movdqu xmm0 [CONST_VAR] pxor xmm3 xmm3 movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb eax xmm0 test eax eax jz JUMP_ADDR_3	bsf eax eax lea rax [CONST_VAR+rax] retn	movdqu xmm0 [CONST_VAR+CONST] movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb ecx xmm0 movdqu xmm0 [CONST_VAR+CONST] movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 shl rcx CONST pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb eax xmm0 movdqu xmm0 [CONST_VAR+CONST] pcmpeqb xmm3 xmm0 shl rax CONST pcmpeqb xmm0 xmm1 or rax rcx por xmm0 xmm3 pmovmskb ecx xmm0 shl rcx CONST or rax rcx test rax rax jnz JUMP_ADDR_7	nop [rax+rax+CONST] nop [rax] pxor xmm6 xmm6 and rdi CONST	add rdi CONST movdqa xmm5 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] pxor xmm5 xmm1 movdqa xmm4 [CONST_VAR+CONST] pxor xmm2 xmm1 pxor xmm3 xmm1 pminub xmm5 [CONST_VAR] pxor xmm4 xmm1 pminub xmm2 [CONST_VAR+CONST] pminub xmm3 [CONST_VAR+CONST] pminub xmm5 xmm2 pminub xmm4 [CONST_VAR+CONST] pminub xmm5 xmm3 pminub xmm5 xmm4 pcmpeqb xmm5 xmm6 pmovmskb eax xmm5 test eax eax jz JUMP_ADDR_5	movdqa xmm5 [CONST_VAR] movdqa xmm0 xmm5 pcmpeqb xmm5 xmm1 pcmpeqb xmm0 xmm6 por xmm5 xmm0 pcmpeqb xmm2 xmm6 pcmpeqb xmm3 xmm6 pcmpeqb xmm4 xmm6 pmovmskb ecx xmm5 pmovmskb eax xmm2 shl rax CONST pmovmskb r8d xmm3 pmovmskb edx xmm4 shl r8 CONST or rax r8 or rax rcx shl rdx CONST or rax rdx	bsf rax rax lea rax [CONST_VAR+rax] retn	mov rdx rdi pxor xmm2 xmm2 and rdx CONST movdqa xmm0 xmm1 movdqa xmm3 [rdx] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb r8d xmm3 movdqa xmm3 [rdx+CONST] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb eax xmm3 movdqa xmm3 [rdx+CONST] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 shl rax CONST pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb r9d xmm3 movdqa xmm3 [rdx+CONST] pcmpeqb xmm2 xmm3 shl r9 CONST pcmpeqb xmm0 xmm3 or rax r9 or rax r8 por xmm0 xmm2 pmovmskb ecx xmm0 shl rcx CONST or rax rcx mov ecx edi sub cl dl shr rax cl test rax rax jnz JUMP_ADDR_7	jmp JUMP_ADDR_4
[ph]libcap-git-setcap___strchr_avx2
endbr64 mov ecx edi vmovd xmm0 esi vpxor xmm9 xmm9 xmm9 vpbroadcastb ymm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_3	vmovdqu ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	add rdi CONST and ecx CONST and rdi CONST jmp JUMP_ADDR_6	and ecx CONST and rdi CONST vmovdqu ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_5	tzcnt eax eax add rax rcx xor edx edx lea rax [CONST_VAR+rax] cmp sil [rax] cmovnz rax rdx vzeroupper retn	add rdi CONST	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_14	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_15	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_20	add rdi CONST mov rcx rdi and ecx CONST and rdi CONST	vmovdqa ymm5 CONST vmovdqa ymm6 CONST vmovdqa ymm7 CONST vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm0 ymm0 vpcmpeqb ymm4 ymm0 ymm0 vpcmpeqb ymm5 ymm9 ymm9 vpcmpeqb ymm6 ymm9 ymm9 vpcmpeqb ymm7 ymm9 ymm9 vpcmpeqb ymm8 ymm9 ymm9 vpor ymm1 ymm5 ymm5 vpor ymm2 ymm6 ymm6 vpor ymm3 ymm7 ymm7 vpor ymm4 ymm8 ymm8 vpor ymm5 ymm2 ymm2 vpor ymm6 ymm4 ymm4 vpor ymm5 ymm6 ymm6 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_16	add rdi CONST jmp JUMP_ADDR_11	tzcnt eax eax xor edx edx lea rax [CONST_VAR+rax] cmp sil [rax] cmovnz rax rdx vzeroupper retn	tzcnt eax eax xor edx edx lea rax [CONST_VAR+rax+CONST] cmp sil [rax] cmovnz rax rdx vzeroupper retn	tzcnt eax eax xor edx edx lea rax [CONST_VAR+rax+CONST] cmp sil [rax] cmovnz rax rdx vzeroupper retn	vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_14	vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_15	vpmovmskb eax ymm4 test eax eax	tzcnt eax eax xor edx edx lea rax [CONST_VAR+rax+CONST] cmp sil [rax] cmovnz rax rdx vzeroupper retn
[ph]libcap-git-setcap___strchrnul_avx2
endbr64 mov ecx edi vmovd xmm0 esi vpxor xmm9 xmm9 xmm9 vpbroadcastb ymm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_3	vmovdqu ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	add rdi CONST and ecx CONST and rdi CONST jmp JUMP_ADDR_6	and ecx CONST and rdi CONST vmovdqu ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_5	tzcnt eax eax add rax rcx add rax rdi vzeroupper retn	add rdi CONST	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_14	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_15	vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm9 ymm9 vpor ymm1 ymm2 ymm2 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_20	add rdi CONST mov rcx rdi and ecx CONST and rdi CONST	vmovdqa ymm5 CONST vmovdqa ymm6 CONST vmovdqa ymm7 CONST vmovdqa ymm8 CONST vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm0 ymm0 vpcmpeqb ymm4 ymm0 ymm0 vpcmpeqb ymm5 ymm9 ymm9 vpcmpeqb ymm6 ymm9 ymm9 vpcmpeqb ymm7 ymm9 ymm9 vpcmpeqb ymm8 ymm9 ymm9 vpor ymm1 ymm5 ymm5 vpor ymm2 ymm6 ymm6 vpor ymm3 ymm7 ymm7 vpor ymm4 ymm8 ymm8 vpor ymm5 ymm2 ymm2 vpor ymm6 ymm4 ymm4 vpor ymm5 ymm6 ymm6 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_16	add rdi CONST jmp JUMP_ADDR_11	tzcnt eax eax add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_14	vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_15	vpmovmskb eax ymm4 test eax eax	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn
[ph]libcap-git-setcap___strlen_sse2
endbr64 pxor xmm0 xmm0 pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 mov rax rdi mov rcx rdi and rcx CONST cmp rcx CONST ja JUMP_ADDR_5	movdqu xmm4 [rax] pcmpeqb xmm4 xmm0 pmovmskb edx xmm4 test edx edx jz JUMP_ADDR_3	bsf eax edx retn	and rax CONST pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax and rax CONST sar rdx cl test rdx rdx jz JUMP_ADDR_8	bsf rax rdx retn	and rax CONST pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax and rax CONST sar rdx cl test rdx rdx jz JUMP_ADDR_7	bsf rax rdx retn	pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 nop [rax+CONST]	movdqa xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx edx jnz JUMP_ADDR_11	sub rax CONST movdqa xmm0 [rax] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx edx jnz JUMP_ADDR_12	jmp JUMP_ADDR_8	add rax CONST	pxor xmm0 xmm0 pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx bsf rdx rdx add rax rdx sub rax rdi retn
[ph]libcap-git-setcap___strnlen_sse2
endbr64 test rsi rsi jnz JUMP_ADDR_2	xor rax rax retn	add rsi rdi mov r10 rsi and r10 CONST mov r11 rsi pxor xmm0 xmm0 pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 mov rax rdi mov rcx rdi and rcx CONST cmp rcx CONST ja JUMP_ADDR_6	and rax CONST pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax mov rsi r11 sub rsi rax and rax CONST test rsi CONST jz JUMP_ADDR_9	sar rdx cl test rdx rdx jz JUMP_ADDR_12	bsf rax rdx retn	and rax CONST pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax mov rsi r11 sub rsi rax and rax CONST test rsi CONST jz JUMP_ADDR_9	sar rdx cl test rdx rdx jz JUMP_ADDR_11	bsf rax rdx retn	bts rdx rsi sar rdx cl test rdx rdx jz JUMP_ADDR_11	bsf rax rdx retn	pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 nop [rax+CONST]	add rax CONST cmp r10 rax jz JUMP_ADDR_15	movdqa xmm0 [rax] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pminub xmm0 [rax+CONST] pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 test edx edx jnz JUMP_ADDR_18	jmp JUMP_ADDR_12	cmp r11 rax jz JUMP_ADDR_17	pxor xmm0 xmm0 pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx	bts rdx r11 bsf rdx rdx add rax rdx sub rax rdi retn	pxor xmm0 xmm0 pcmpeqb xmm0 [rax] pcmpeqb xmm1 [rax+CONST] pcmpeqb xmm2 [rax+CONST] pcmpeqb xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx bsf rdx rdx add rax rdx sub rax rdi retn
[ph]libcap-git-setcap___strlen_avx2
endbr64 mov ecx edi mov rdx rdi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_3	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	add rdi CONST and ecx CONST and rdi CONST jmp JUMP_ADDR_6	and ecx CONST and rdi CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_5	tzcnt eax eax add rax rdi add rax rcx sub rax rdx vzeroupper retn	add rdi CONST	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_14	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_15	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_20	add rdi CONST mov rcx rdi and ecx CONST and rdi CONST nop [rax+rax+CONST]	vmovdqa ymm1 CONST vmovdqa ymm2 CONST vmovdqa ymm3 CONST vmovdqa ymm4 CONST vpminub ymm5 ymm2 ymm2 vpminub ymm6 ymm4 ymm4 vpminub ymm5 ymm6 ymm6 vpcmpeqb ymm5 ymm0 ymm0 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_16	add rdi CONST jmp JUMP_ADDR_11	tzcnt eax eax add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpcmpeqb ymm2 ymm0 ymm0 vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_14	vpcmpeqb ymm3 ymm0 ymm0 vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_15	vpcmpeqb ymm4 ymm0 ymm0 vpmovmskb eax ymm4	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn
[ph]libcap-git-setcap___strnlen_avx2
endbr64 test rsi rsi jz JUMP_ADDR_39	mov r8 rsi mov ecx edi mov rdx rdi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_6	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub rsi CONST jbe JUMP_ADDR_38	add rdi CONST and ecx CONST and rdi CONST add rsi rcx sub rsi CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_11	and ecx CONST and rdi CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_9	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax rdi add rax rcx sub rax rdx vzeroupper retn	neg rcx add rcx CONST sub rsi rcx jbe JUMP_ADDR_38	add rdi CONST sub rsi CONST jbe JUMP_ADDR_19	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_42	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_47	add rdi CONST sub rsi CONST jbe JUMP_ADDR_19	mov rcx rdi and ecx CONST and rdi CONST add rsi rcx nop [rax+rax+CONST] nop [rax+CONST]	vmovdqa ymm1 CONST vmovdqa ymm2 CONST vmovdqa ymm3 CONST vmovdqa ymm4 CONST vpminub ymm5 ymm2 ymm2 vpminub ymm6 ymm4 ymm4 vpminub ymm5 ymm6 ymm6 vpcmpeqb ymm5 ymm0 ymm0 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_43	add rdi CONST sub rsi CONST ja JUMP_ADDR_17	add esi CONST jle JUMP_ADDR_26	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_34	sub esi CONST jle JUMP_ADDR_38	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_36	mov rax r8 vzeroupper retn	add esi CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub esi CONST jle JUMP_ADDR_38	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_32	mov rax r8 vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx vzeroupper retn	mov rax r8 vzeroupper retn	xor eax eax retn	tzcnt eax eax add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqb ymm2 ymm0 ymm0 vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_41	vpcmpeqb ymm3 ymm0 ymm0 vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_42	vpcmpeqb ymm4 ymm0 ymm0 vpmovmskb eax ymm4	tzcnt eax eax add rax CONST add rax rdi sub rax rdx vzeroupper retn
[ph]libcap-git-setcap___strcpy_avx2
endbr64 mov rcx rsi mov rax rdi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST jbe JUMP_ADDR_16	and rsi CONST and ecx CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 shr rdx cl test edx edx jnz JUMP_ADDR_20	vpcmpeqb ymm2 ymm0 ymm0 vpmovmskb edx ymm2 test edx edx jnz JUMP_ADDR_31	vmovdqu ymm2 CONST vmovdqu CONST ymm2 xchg ax ax	sub rdi rcx mov rcx CONST vmovdqa ymm2 CONST vmovdqu CONST ymm2 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm2 vmovdqa ymm3 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm3 vmovdqa ymm4 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm4 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm2 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqa ymm3 CONST vmovdqu CONST ymm2 vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm3 mov rdx rsi lea rsi [CONST_VAR+rcx+CONST] and rsi CONST sub rdx rsi sub rdi rdx vmovdqa ymm4 CONST vmovdqa ymm5 CONST vmovdqa ymm6 CONST vmovdqa ymm7 CONST vpminub ymm2 ymm4 ymm4 vpminub ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb edx ymm3 test edx edx jnz JUMP_ADDR_12	add rdi CONST add rsi CONST vmovdqu CONST ymm4 vmovdqa ymm4 CONST vmovdqu CONST ymm5 vmovdqa ymm5 CONST vpminub ymm2 ymm4 ymm4 vmovdqu CONST ymm6 vmovdqa ymm6 CONST vmovdqu CONST ymm7 vmovdqa ymm7 CONST vpminub ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb edx ymm3 test edx edx jz JUMP_ADDR_11	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_32	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb ecx ymm1 test ecx ecx jnz JUMP_ADDR_33	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_34	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb ecx ymm1 bsf edx ecx vmovdqu CONST ymm4 vmovdqu CONST ymm5 vmovdqu CONST ymm6 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	vmovdqu ymm3 CONST vmovdqu ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_21	vmovdqu CONST ymm3 vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_30	and rsi CONST and ecx CONST jmp JUMP_ADDR_4	add rdi rcx	add rsi rcx	bsf edx edx	cmp edx CONST jnb JUMP_ADDR_41	cmp edx CONST jnb JUMP_ADDR_40	cmp edx CONST jnb JUMP_ADDR_39	cmp edx CONST jnb JUMP_ADDR_38	cmp edx CONST jz JUMP_ADDR_37	cmp edx CONST ja JUMP_ADDR_36	jz JUMP_ADDR_35	mov [CONST_VAR] CONST vzeroupper retn	add rsi CONST add rdi CONST jmp JUMP_ADDR_21	bsf edx edx add rsi rcx add edx CONST sub edx ecx jmp JUMP_ADDR_22	bsf edx edx jmp JUMP_ADDR_22	bsf edx ecx vmovdqu CONST ymm4 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	bsf edx edx vmovdqu CONST ymm4 vmovdqu CONST ymm5 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	movzx edx [CONST_VAR] mov [CONST_VAR] dx vzeroupper retn	movzx ecx [CONST_VAR] mov [CONST_VAR] cx mov [CONST_VAR+CONST] CONST vzeroupper retn	mov edx [CONST_VAR] mov [CONST_VAR] edx vzeroupper retn	mov ecx [CONST_VAR] mov [CONST_VAR] ecx mov ecx [CONST_VAR+rdx+CONST] mov [CONST_VAR+rdx+CONST] ecx vzeroupper retn	mov rcx [CONST_VAR] mov r9 [CONST_VAR+rdx+CONST] mov [CONST_VAR] rcx mov [CONST_VAR+rdx+CONST] r9 vzeroupper retn	vmovdqu xmm2 [CONST_VAR] vmovdqu xmm3 [CONST_VAR+rdx+CONST] vmovdqu [CONST_VAR] xmm2 vmovdqu [CONST_VAR+rdx+CONST] xmm3 vzeroupper retn	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vmovdqu CONST ymm2 vmovdqu CONST ymm3 vzeroupper retn
[ph]libcap-git-setcap___strcpy_sse2
endbr64 mov rcx rsi and ecx CONST mov rdx rdi jz JUMP_ADDR_4	neg ecx add ecx CONST	mov al [CONST_VAR] test al al mov [rdx] al jz JUMP_ADDR_17	inc rsi inc rdx dec ecx jnz JUMP_ADDR_2	mov r8 CONST nop [rax+rax+CONST] nop	mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST jmp JUMP_ADDR_5	mov [rdx] al test al al jz JUMP_ADDR_17	inc rdx mov [rdx] ah test ah ah jz JUMP_ADDR_17	inc rdx shr rax CONST jmp JUMP_ADDR_14	mov rax rdi retn
[ph]libcap-git-setcap___stpcpy_sse2
endbr64 mov rcx rsi and ecx CONST mov rdx rdi jz JUMP_ADDR_4	neg ecx add ecx CONST	mov al [CONST_VAR] test al al mov [rdx] al jz JUMP_ADDR_17	inc rsi inc rdx dec ecx jnz JUMP_ADDR_2	mov r8 CONST nop [rax+rax+CONST] nop	mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST mov rax [CONST_VAR] add rsi CONST mov r9 rax add r9 r8 jnb JUMP_ADDR_14	xor r9 rax or r9 r8 inc r9 jnz JUMP_ADDR_14	mov [rdx] rax add rdx CONST jmp JUMP_ADDR_5	mov [rdx] al test al al jz JUMP_ADDR_17	inc rdx mov [rdx] ah test ah ah jz JUMP_ADDR_17	inc rdx shr rax CONST jmp JUMP_ADDR_14	mov rax rdx retn
[ph]libcap-git-setcap___strcpy_ssse3
endbr64 mov rcx rsi mov rdx rdi cmp [rcx] CONST jz JUMP_ADDR_201	cmp [rcx+CONST] CONST jz JUMP_ADDR_202	cmp [rcx+CONST] CONST jz JUMP_ADDR_203	cmp [rcx+CONST] CONST jz JUMP_ADDR_204	cmp [rcx+CONST] CONST jz JUMP_ADDR_205	cmp [rcx+CONST] CONST jz JUMP_ADDR_206	cmp [rcx+CONST] CONST jz JUMP_ADDR_207	cmp [rcx+CONST] CONST jz JUMP_ADDR_191	cmp [rcx+CONST] CONST jz JUMP_ADDR_208	cmp [rcx+CONST] CONST jz JUMP_ADDR_209	cmp [rcx+CONST] CONST jz JUMP_ADDR_210	cmp [rcx+CONST] CONST jz JUMP_ADDR_211	cmp [rcx+CONST] CONST jz JUMP_ADDR_212	cmp [rcx+CONST] CONST jz JUMP_ADDR_213	cmp [rcx+CONST] CONST jz JUMP_ADDR_214	cmp [rcx+CONST] CONST jz JUMP_ADDR_200	lea rsi [rcx+CONST] and rsi CONST pxor xmm0 xmm0 mov r9 [rcx] mov [rdx] r9 pcmpeqb xmm0 [CONST_VAR] mov r9 [rcx+CONST] mov [rdx+CONST] r9 pmovmskb eax xmm0 sub rsi rcx test rax rax jnz JUMP_ADDR_182	mov rax rdx lea rdx [rdx+CONST] and rdx CONST sub rax rdx sub rcx rax mov rax rcx and rax CONST mov rsi CONST jz JUMP_ADDR_34	cmp rax CONST jnb JUMP_ADDR_26	cmp rax CONST jz JUMP_ADDR_47	cmp rax CONST jz JUMP_ADDR_56	cmp rax CONST jz JUMP_ADDR_65	cmp rax CONST jz JUMP_ADDR_74	cmp rax CONST jz JUMP_ADDR_83	cmp rax CONST jz JUMP_ADDR_92	jmp JUMP_ADDR_101	jz JUMP_ADDR_110	cmp rax CONST jz JUMP_ADDR_119	cmp rax CONST jz JUMP_ADDR_128	cmp rax CONST jz JUMP_ADDR_137	cmp rax CONST jz JUMP_ADDR_146	cmp rax CONST jz JUMP_ADDR_155	cmp rax CONST jz JUMP_ADDR_164	jmp JUMP_ADDR_173	movaps xmm1 [rcx] movaps xmm2 [rcx+CONST] movaps [rdx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm3 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm2 pcmpeqb xmm0 xmm3 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm4 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm3 pcmpeqb xmm0 xmm4 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm1 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm4 pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm2 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm1 pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm3 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm2 pcmpeqb xmm0 xmm3 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps [rdx+CONST_VAR] xmm3 mov rax rcx lea rcx [rcx+CONST_VAR+CONST] and rcx CONST sub rax rcx sub rdx rax mov rsi CONST nop [rax+CONST]	movaps xmm2 [rcx] movaps xmm4 xmm2 movaps xmm5 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm7 [rcx+CONST] pminub xmm2 xmm5 pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb eax xmm3 lea rdx [rdx+CONST] lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_43	movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm6 movaps [rdx+CONST] xmm7 jmp JUMP_ADDR_41	pcmpeqb xmm0 xmm4 pmovmskb eax xmm0 test rax rax jnz JUMP_ADDR_182	pcmpeqb xmm0 xmm5 pmovmskb eax xmm0 movaps [rdx+CONST] xmm4 test rax rax lea rsi [CONST_VAR+CONST] jnz JUMP_ADDR_182	pcmpeqb xmm0 xmm6 pmovmskb eax xmm0 movaps [rdx+CONST] xmm5 test rax rax lea rsi [CONST_VAR+CONST] jnz JUMP_ADDR_182	movaps [rdx+CONST] xmm6 pcmpeqb xmm0 xmm7 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_48	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_53	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_57	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_62	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_66	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_71	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_75	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_80	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_84	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_89	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_93	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_98	mov r9 [rcx] mov esi [rcx+CONST] mov [rdx] r9 mov [rdx+CONST] esi mov rsi CONST jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_102	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_107	mov r9 [rcx] mov esi [rcx+CONST] mov [rdx] r9 mov [rdx+CONST] esi mov rsi CONST jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_111	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_116	mov r9 [rcx] mov rsi CONST mov [rdx] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_120	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_125	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_129	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_134	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_138	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_143	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_147	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_152	mov r9d [rcx] mov rsi CONST mov [rdx] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_156	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_161	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_165	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_170	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_174	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_179	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d nop [rax+CONST]	add rdx rsi add rcx rsi test al al jz JUMP_ADDR_192	test al CONST jnz JUMP_ADDR_201	test al CONST jnz JUMP_ADDR_202	test al CONST jnz JUMP_ADDR_203	test al CONST jnz JUMP_ADDR_204	test al CONST jnz JUMP_ADDR_205	test al CONST jnz JUMP_ADDR_206	test al CONST jnz JUMP_ADDR_207	nop [rax+rax+CONST] nop [rax]	mov rax [rcx] mov [rdx] rax mov rax rdi retn	test ah CONST jnz JUMP_ADDR_208	test ah CONST jnz JUMP_ADDR_209	test ah CONST jnz JUMP_ADDR_210	test ah CONST jnz JUMP_ADDR_211	test ah CONST jnz JUMP_ADDR_212	test ah CONST jnz JUMP_ADDR_213	test ah CONST jnz JUMP_ADDR_214	nop	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax mov rax rdi retn	mov al [rcx] mov [rdx] al mov rax rdi retn	mov ax [rcx] mov [rdx] ax mov rax rdi retn	mov ax [rcx] mov [rdx] ax mov al [rcx+CONST] mov [rdx+CONST] al mov rax rdi retn	mov eax [rcx] mov [rdx] eax mov rax rdi retn	mov eax [rcx] mov [rdx] eax mov al [rcx+CONST] mov [rdx+CONST] al mov rax rdi retn	mov eax [rcx] mov [rdx] eax mov ax [rcx+CONST] mov [rdx+CONST] ax mov rax rdi retn	mov eax [rcx] mov [rdx] eax mov eax [rcx+CONST] mov [rdx+CONST] eax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax mov rax rdi retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax mov rax rdi retn
[ph]libcap-git-setcap___stpcpy_ssse3
endbr64 mov rcx rsi mov rdx rdi cmp [rcx] CONST jz JUMP_ADDR_201	cmp [rcx+CONST] CONST jz JUMP_ADDR_202	cmp [rcx+CONST] CONST jz JUMP_ADDR_203	cmp [rcx+CONST] CONST jz JUMP_ADDR_204	cmp [rcx+CONST] CONST jz JUMP_ADDR_205	cmp [rcx+CONST] CONST jz JUMP_ADDR_206	cmp [rcx+CONST] CONST jz JUMP_ADDR_207	cmp [rcx+CONST] CONST jz JUMP_ADDR_191	cmp [rcx+CONST] CONST jz JUMP_ADDR_208	cmp [rcx+CONST] CONST jz JUMP_ADDR_209	cmp [rcx+CONST] CONST jz JUMP_ADDR_210	cmp [rcx+CONST] CONST jz JUMP_ADDR_211	cmp [rcx+CONST] CONST jz JUMP_ADDR_212	cmp [rcx+CONST] CONST jz JUMP_ADDR_213	cmp [rcx+CONST] CONST jz JUMP_ADDR_214	cmp [rcx+CONST] CONST jz JUMP_ADDR_200	lea rsi [rcx+CONST] and rsi CONST pxor xmm0 xmm0 mov r9 [rcx] mov [rdx] r9 pcmpeqb xmm0 [CONST_VAR] mov r9 [rcx+CONST] mov [rdx+CONST] r9 pmovmskb eax xmm0 sub rsi rcx test rax rax jnz JUMP_ADDR_182	mov rax rdx lea rdx [rdx+CONST] and rdx CONST sub rax rdx sub rcx rax mov rax rcx and rax CONST mov rsi CONST jz JUMP_ADDR_34	cmp rax CONST jnb JUMP_ADDR_26	cmp rax CONST jz JUMP_ADDR_47	cmp rax CONST jz JUMP_ADDR_56	cmp rax CONST jz JUMP_ADDR_65	cmp rax CONST jz JUMP_ADDR_74	cmp rax CONST jz JUMP_ADDR_83	cmp rax CONST jz JUMP_ADDR_92	jmp JUMP_ADDR_101	jz JUMP_ADDR_110	cmp rax CONST jz JUMP_ADDR_119	cmp rax CONST jz JUMP_ADDR_128	cmp rax CONST jz JUMP_ADDR_137	cmp rax CONST jz JUMP_ADDR_146	cmp rax CONST jz JUMP_ADDR_155	cmp rax CONST jz JUMP_ADDR_164	jmp JUMP_ADDR_173	movaps xmm1 [rcx] movaps xmm2 [rcx+CONST] movaps [rdx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm3 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm2 pcmpeqb xmm0 xmm3 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm4 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm3 pcmpeqb xmm0 xmm4 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm1 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm4 pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm2 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm1 pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps xmm3 [rcx+CONST_VAR+CONST] movaps [rdx+CONST_VAR] xmm2 pcmpeqb xmm0 xmm3 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_182	movaps [rdx+CONST_VAR] xmm3 mov rax rcx lea rcx [rcx+CONST_VAR+CONST] and rcx CONST sub rax rcx sub rdx rax mov rsi CONST nop [rax+CONST]	movaps xmm2 [rcx] movaps xmm4 xmm2 movaps xmm5 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm7 [rcx+CONST] pminub xmm2 xmm5 pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb eax xmm3 lea rdx [rdx+CONST] lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_43	movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm6 movaps [rdx+CONST] xmm7 jmp JUMP_ADDR_41	pcmpeqb xmm0 xmm4 pmovmskb eax xmm0 test rax rax jnz JUMP_ADDR_182	pcmpeqb xmm0 xmm5 pmovmskb eax xmm0 movaps [rdx+CONST] xmm4 test rax rax lea rsi [CONST_VAR+CONST] jnz JUMP_ADDR_182	pcmpeqb xmm0 xmm6 pmovmskb eax xmm0 movaps [rdx+CONST] xmm5 test rax rax lea rsi [CONST_VAR+CONST] jnz JUMP_ADDR_182	movaps [rdx+CONST] xmm6 pcmpeqb xmm0 xmm7 pmovmskb eax xmm0 lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_55	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_48	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_53	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_64	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_57	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_62	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_73	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_66	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_71	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_82	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_75	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_80	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_91	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_84	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_89	movdqu xmm1 [rcx+CONST] mov rsi CONST movdqu [rdx+CONST] xmm1 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_100	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_93	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_98	mov r9 [rcx] mov esi [rcx+CONST] mov [rdx] r9 mov [rdx+CONST] esi mov rsi CONST jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_109	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_102	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_107	mov r9 [rcx] mov esi [rcx+CONST] mov [rdx] r9 mov [rdx+CONST] esi mov rsi CONST jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_118	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_111	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_116	mov r9 [rcx] mov rsi CONST mov [rdx] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_127	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_120	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_125	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_136	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_129	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_134	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_145	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_138	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_143	mov r9 [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9 jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_154	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_147	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_152	mov r9d [rcx] mov rsi CONST mov [rdx] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_163	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_156	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_161	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_172	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_165	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_170	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d jmp JUMP_ADDR_182	movaps xmm1 [rcx+CONST] movaps xmm2 [rcx+CONST]	pcmpeqb xmm0 xmm2 pmovmskb eax xmm0 movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm1 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] movaps xmm3 xmm2 test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm1 xmm1 movaps [rdx] xmm2 movaps xmm2 [rcx+CONST] pcmpeqb xmm0 xmm2 lea rdx [rdx+CONST] pmovmskb eax xmm0 lea rcx [rcx+CONST] test rax rax jnz JUMP_ADDR_181	palignr xmm2 xmm3 xmm3 movaps [rdx] xmm2 lea rcx [rcx+CONST] lea rdx [rdx+CONST] mov rax rcx and rcx CONST sub rax rcx lea rcx [rcx+CONST] sub rdx rax movaps xmm1 [rcx+CONST] nop [rax+rax+CONST]	movaps xmm2 [rcx+CONST] movaps xmm3 [rcx+CONST] movaps xmm6 xmm3 movaps xmm4 [rcx+CONST] movaps xmm7 xmm4 movaps xmm5 [rcx+CONST] pminub xmm6 xmm2 pminub xmm7 xmm5 pminub xmm7 xmm6 pcmpeqb xmm7 xmm0 pmovmskb eax xmm7 movaps xmm7 xmm5 palignr xmm5 xmm4 xmm4 test rax rax palignr xmm4 xmm3 xmm3 jnz JUMP_ADDR_174	palignr xmm3 xmm2 xmm2 lea rcx [rcx+CONST] palignr xmm2 xmm1 xmm1 movaps xmm1 xmm7 movaps [rdx+CONST] xmm5 movaps [rdx+CONST] xmm4 movaps [rdx+CONST] xmm3 movaps [rdx] xmm2 lea rdx [rdx+CONST] jmp JUMP_ADDR_179	mov r9d [rcx+CONST] mov rsi CONST mov [rdx+CONST] r9d nop [rax+CONST]	add rdx rsi add rcx rsi test al al jz JUMP_ADDR_192	test al CONST jnz JUMP_ADDR_201	test al CONST jnz JUMP_ADDR_202	test al CONST jnz JUMP_ADDR_203	test al CONST jnz JUMP_ADDR_204	test al CONST jnz JUMP_ADDR_205	test al CONST jnz JUMP_ADDR_206	test al CONST jnz JUMP_ADDR_207	nop [rax+rax+CONST] nop [rax]	mov rax [rcx] mov [rdx] rax lea rax [rdx+CONST] retn	test ah CONST jnz JUMP_ADDR_208	test ah CONST jnz JUMP_ADDR_209	test ah CONST jnz JUMP_ADDR_210	test ah CONST jnz JUMP_ADDR_211	test ah CONST jnz JUMP_ADDR_212	test ah CONST jnz JUMP_ADDR_213	test ah CONST jnz JUMP_ADDR_214	nop	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax lea rax [rdx+CONST] retn	mov al [rcx] mov [rdx] al lea rax [rdx] retn	mov ax [rcx] mov [rdx] ax lea rax [rdx+CONST] retn	mov ax [rcx] mov [rdx] ax mov al [rcx+CONST] mov [rdx+CONST] al lea rax [rdx+CONST] retn	mov eax [rcx] mov [rdx] eax lea rax [rdx+CONST] retn	mov eax [rcx] mov [rdx] eax mov al [rcx+CONST] mov [rdx+CONST] al lea rax [rdx+CONST] retn	mov eax [rcx] mov [rdx] eax mov ax [rcx+CONST] mov [rdx+CONST] ax lea rax [rdx+CONST] retn	mov eax [rcx] mov [rdx] eax mov eax [rcx+CONST] mov [rdx+CONST] eax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov eax [rcx+CONST] mov [rdx+CONST] eax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax lea rax [rdx+CONST] retn	mov rax [rcx] mov [rdx] rax mov rax [rcx+CONST] mov [rdx+CONST] rax lea rax [rdx+CONST] retn
[ph]libcap-git-setcap___strcpy_sse2_unaligned
endbr64 mov rcx rsi mov rax rdi and rcx CONST cmp rcx CONST jbe JUMP_ADDR_16	and rsi CONST and rcx CONST pxor xmm0 xmm0 pxor xmm1 xmm1 pcmpeqb xmm1 [CONST_VAR] pmovmskb edx xmm1 shr rdx cl test rdx rdx jnz JUMP_ADDR_20	pcmpeqb xmm0 [CONST_VAR+CONST] pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_23	movdqu xmm1 [CONST_VAR+rcx] movdqu [CONST_VAR] xmm1 nop [rax+rax+CONST]	sub rdi rcx mov rcx CONST movdqa xmm1 [CONST_VAR+rcx] movaps xmm2 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm3 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm2 pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm4 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm3 pcmpeqb xmm0 xmm4 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm1 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm4 pcmpeqb xmm0 xmm1 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm2 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm3 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm2 pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movdqu [CONST_VAR+rcx] xmm3 mov rdx rsi lea rsi [CONST_VAR+rcx+CONST] and rsi CONST sub rdx rsi sub rdi rdx movaps xmm2 [CONST_VAR] movaps xmm4 xmm2 movaps xmm5 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm6 xmm3 movaps xmm7 [CONST_VAR+CONST] pminub xmm2 xmm5 pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb edx xmm3 test rdx rdx jnz JUMP_ADDR_12	add rdi CONST add rsi CONST movdqu [CONST_VAR+CONST] xmm4 movaps xmm2 [CONST_VAR] movdqa xmm4 xmm2 movdqu [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] pminub xmm2 xmm5 movaps xmm3 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm6 movaps xmm6 xmm3 movdqu [CONST_VAR+CONST] xmm7 movaps xmm7 [CONST_VAR+CONST] pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb edx xmm3 test rdx rdx jz JUMP_ADDR_11	pxor xmm1 xmm1 pcmpeqb xmm0 xmm4 pcmpeqb xmm1 xmm5 pmovmskb edx xmm0 pmovmskb ecx xmm1 test rdx rdx jnz JUMP_ADDR_24	test rcx rcx jnz JUMP_ADDR_25	pcmpeqb xmm0 xmm6 pcmpeqb xmm1 xmm7 pmovmskb edx xmm0 pmovmskb ecx xmm1 test rdx rdx jnz JUMP_ADDR_26	bsf rdx rcx movdqu [CONST_VAR] xmm4 movdqu [CONST_VAR+CONST] xmm5 movdqu [CONST_VAR+CONST] xmm6 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	pxor xmm0 xmm0 movdqu xmm1 [CONST_VAR] movdqu xmm2 [CONST_VAR+CONST] pcmpeqb xmm0 xmm1 pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_22	pcmpeqb xmm0 xmm2 movdqu [CONST_VAR] xmm1 pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_21	and rsi CONST and rcx CONST jmp JUMP_ADDR_4	add rdi rcx add rsi rcx bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	add rsi rcx bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	add rsi CONST add rdi CONST	bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx add rsi rcx add rdx CONST sub rdx rcx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rcx movdqu [CONST_VAR] xmm4 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx movdqu [CONST_VAR] xmm4 movdqu [CONST_VAR+CONST] xmm5 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx
[ph]libcap-git-setcap___stpcpy_sse2_unaligned
endbr64 mov rcx rsi and rcx CONST cmp rcx CONST jbe JUMP_ADDR_16	and rsi CONST and rcx CONST pxor xmm0 xmm0 pxor xmm1 xmm1 pcmpeqb xmm1 [CONST_VAR] pmovmskb edx xmm1 shr rdx cl test rdx rdx jnz JUMP_ADDR_20	pcmpeqb xmm0 [CONST_VAR+CONST] pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_23	movdqu xmm1 [CONST_VAR+rcx] movdqu [CONST_VAR] xmm1 nop [rax+rax+CONST] nop	sub rdi rcx mov rcx CONST movdqa xmm1 [CONST_VAR+rcx] movaps xmm2 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm3 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm2 pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm4 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm3 pcmpeqb xmm0 xmm4 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm1 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm4 pcmpeqb xmm0 xmm1 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm2 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm1 pcmpeqb xmm0 xmm2 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movaps xmm3 [CONST_VAR+rcx+CONST] movdqu [CONST_VAR+rcx] xmm2 pcmpeqb xmm0 xmm3 pmovmskb edx xmm0 add rcx CONST test rdx rdx jnz JUMP_ADDR_19	movdqu [CONST_VAR+rcx] xmm3 mov rdx rsi lea rsi [CONST_VAR+rcx+CONST] and rsi CONST sub rdx rsi sub rdi rdx movaps xmm2 [CONST_VAR] movaps xmm4 xmm2 movaps xmm5 [CONST_VAR+CONST] movaps xmm3 [CONST_VAR+CONST] movaps xmm6 xmm3 movaps xmm7 [CONST_VAR+CONST] pminub xmm2 xmm5 pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb edx xmm3 test rdx rdx jnz JUMP_ADDR_12	add rdi CONST add rsi CONST movdqu [CONST_VAR+CONST] xmm4 movaps xmm2 [CONST_VAR] movdqa xmm4 xmm2 movdqu [CONST_VAR+CONST] xmm5 movaps xmm5 [CONST_VAR+CONST] pminub xmm2 xmm5 movaps xmm3 [CONST_VAR+CONST] movdqu [CONST_VAR+CONST] xmm6 movaps xmm6 xmm3 movdqu [CONST_VAR+CONST] xmm7 movaps xmm7 [CONST_VAR+CONST] pminub xmm3 xmm7 pminub xmm3 xmm2 pcmpeqb xmm3 xmm0 pmovmskb edx xmm3 test rdx rdx jz JUMP_ADDR_11	pxor xmm1 xmm1 pcmpeqb xmm0 xmm4 pcmpeqb xmm1 xmm5 pmovmskb edx xmm0 pmovmskb ecx xmm1 test rdx rdx jnz JUMP_ADDR_24	test rcx rcx jnz JUMP_ADDR_25	pcmpeqb xmm0 xmm6 pcmpeqb xmm1 xmm7 pmovmskb edx xmm0 pmovmskb ecx xmm1 test rdx rdx jnz JUMP_ADDR_26	bsf rdx rcx movdqu [CONST_VAR] xmm4 movdqu [CONST_VAR+CONST] xmm5 movdqu [CONST_VAR+CONST] xmm6 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	pxor xmm0 xmm0 movdqu xmm1 [CONST_VAR] movdqu xmm2 [CONST_VAR+CONST] pcmpeqb xmm0 xmm1 pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_22	pcmpeqb xmm0 xmm2 movdqu [CONST_VAR] xmm1 pmovmskb edx xmm0 test rdx rdx jnz JUMP_ADDR_21	and rsi CONST and rcx CONST jmp JUMP_ADDR_4	add rdi rcx add rsi rcx bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	add rsi rcx bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	add rsi CONST add rdi CONST	bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx add rsi rcx add rdx CONST sub rdx rcx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rcx movdqu [CONST_VAR] xmm4 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx	bsf rdx rdx movdqu [CONST_VAR] xmm4 movdqu [CONST_VAR+CONST] xmm5 add rsi CONST add rdi CONST lea r11 unk_xxx movsxd rcx [r11+rdx*4] lea rcx [r11+rcx] jmp rcx
[ph]libcap-git-setcap___stpcpy_avx2
endbr64 mov rcx rsi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST jbe JUMP_ADDR_16	and rsi CONST and ecx CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 shr rdx cl test edx edx jnz JUMP_ADDR_20	vpcmpeqb ymm2 ymm0 ymm0 vpmovmskb edx ymm2 test edx edx jnz JUMP_ADDR_31	vmovdqu ymm2 CONST vmovdqu CONST ymm2 nop [rax+rax+CONST]	sub rdi rcx mov rcx CONST vmovdqa ymm2 CONST vmovdqu CONST ymm2 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm2 vmovdqa ymm3 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm3 vmovdqa ymm4 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm4 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm2 vmovdqa ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqa ymm3 CONST vmovdqu CONST ymm2 vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 add rcx CONST test edx edx jnz JUMP_ADDR_19	vmovdqu CONST ymm3 mov rdx rsi lea rsi [CONST_VAR+rcx+CONST] and rsi CONST sub rdx rsi sub rdi rdx vmovdqa ymm4 CONST vmovdqa ymm5 CONST vmovdqa ymm6 CONST vmovdqa ymm7 CONST vpminub ymm2 ymm4 ymm4 vpminub ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb edx ymm3 test edx edx jnz JUMP_ADDR_12	add rdi CONST add rsi CONST vmovdqu CONST ymm4 vmovdqa ymm4 CONST vmovdqu CONST ymm5 vmovdqa ymm5 CONST vpminub ymm2 ymm4 ymm4 vmovdqu CONST ymm6 vmovdqa ymm6 CONST vmovdqu CONST ymm7 vmovdqa ymm7 CONST vpminub ymm3 ymm6 ymm6 vpminub ymm3 ymm3 ymm3 vpcmpeqb ymm3 ymm3 ymm3 vpmovmskb edx ymm3 test edx edx jz JUMP_ADDR_11	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_32	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb ecx ymm1 test ecx ecx jnz JUMP_ADDR_33	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_34	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb ecx ymm1 bsf edx ecx vmovdqu CONST ymm4 vmovdqu CONST ymm5 vmovdqu CONST ymm6 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	vmovdqu ymm3 CONST vmovdqu ymm2 CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_21	vmovdqu CONST ymm3 vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb edx ymm1 test edx edx jnz JUMP_ADDR_30	and rsi CONST and ecx CONST jmp JUMP_ADDR_4	add rdi rcx	add rsi rcx	bsf edx edx	cmp edx CONST jnb JUMP_ADDR_41	cmp edx CONST jnb JUMP_ADDR_40	cmp edx CONST jnb JUMP_ADDR_39	cmp edx CONST jnb JUMP_ADDR_38	cmp edx CONST jz JUMP_ADDR_37	cmp edx CONST ja JUMP_ADDR_36	jz JUMP_ADDR_35	mov [CONST_VAR] CONST lea rax [CONST_VAR] vzeroupper retn	add rsi CONST add rdi CONST jmp JUMP_ADDR_21	bsf edx edx add rsi rcx add edx CONST sub edx ecx jmp JUMP_ADDR_22	bsf edx edx jmp JUMP_ADDR_22	bsf edx ecx vmovdqu CONST ymm4 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	bsf edx edx vmovdqu CONST ymm4 vmovdqu CONST ymm5 add rsi CONST add rdi CONST jmp JUMP_ADDR_22	movzx edx [CONST_VAR] mov [CONST_VAR] dx lea rax [CONST_VAR+CONST] vzeroupper retn	movzx ecx [CONST_VAR] mov [CONST_VAR] cx mov [CONST_VAR+CONST] CONST lea rax [CONST_VAR+CONST] vzeroupper retn	mov edx [CONST_VAR] mov [CONST_VAR] edx lea rax [CONST_VAR+CONST] vzeroupper retn	mov ecx [CONST_VAR] mov [CONST_VAR] ecx mov ecx [CONST_VAR+rdx+CONST] mov [CONST_VAR+rdx+CONST] ecx lea rax [CONST_VAR+rdx] vzeroupper retn	mov rcx [CONST_VAR] mov r9 [CONST_VAR+rdx+CONST] mov [CONST_VAR] rcx mov [CONST_VAR+rdx+CONST] r9 lea rax [CONST_VAR+rdx] vzeroupper retn	vmovdqu xmm2 [CONST_VAR] vmovdqu xmm3 [CONST_VAR+rdx+CONST] vmovdqu [CONST_VAR] xmm2 vmovdqu [CONST_VAR+rdx+CONST] xmm3 lea rax [CONST_VAR+rdx] vzeroupper retn	vmovdqu ymm2 CONST vmovdqu ymm3 CONST vmovdqu CONST ymm2 vmovdqu CONST ymm3 lea rax [CONST_VAR+rdx] vzeroupper retn
[ph]libcap-git-setcap___strchr_sse2_no_bsf
endbr64 movd xmm1 esi mov rcx rdi punpcklbw xmm1 xmm1 and rdi CONST pxor xmm2 xmm2 punpcklbw xmm1 xmm1 or esi CONST movdqa xmm0 [CONST_VAR] pshufd xmm1 xmm1 xmm1 sub rcx rdi movdqa xmm3 xmm0 lea rdi [CONST_VAR+CONST] pcmpeqb xmm0 xmm1 pcmpeqb xmm3 xmm2 shl esi cl pmovmskb eax xmm0 pmovmskb edx xmm3 and eax esi and edx esi test eax eax jnz JUMP_ADDR_6	test edx edx jnz JUMP_ADDR_5	movdqa xmm0 [CONST_VAR] lea rdi [CONST_VAR+CONST] movdqa xmm3 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm3 xmm2 pmovmskb eax xmm0 pmovmskb edx xmm3 or edx eax jz JUMP_ADDR_2	pmovmskb edx xmm3 test eax eax jnz JUMP_ADDR_6	nop [rax+rax+CONST]	xor rax rax retn	lea rdi [CONST_VAR+CONST] test edx edx jz JUMP_ADDR_41	test al al jz JUMP_ADDR_24	mov cl al and cl CONST jnz JUMP_ADDR_17	mov ch dl and ch CONST jnz JUMP_ADDR_5	test al CONST jnz JUMP_ADDR_62	test dl CONST jnz JUMP_ADDR_5	test al CONST jnz JUMP_ADDR_63	test dl CONST jnz JUMP_ADDR_5	test al CONST jnz JUMP_ADDR_64	test dl CONST jnz JUMP_ADDR_5	lea rax [CONST_VAR+CONST] retn	test al CONST jnz JUMP_ADDR_58	test dl CONST jnz JUMP_ADDR_5	test al CONST jnz JUMP_ADDR_59	test dl CONST jnz JUMP_ADDR_5	test al CONST jnz JUMP_ADDR_60	test dl CONST jnz JUMP_ADDR_5	lea rax [CONST_VAR+CONST] retn	test dl dl jnz JUMP_ADDR_5	mov cl ah and cl CONST jnz JUMP_ADDR_34	mov ch dh and ch CONST jnz JUMP_ADDR_5	test ah CONST jnz JUMP_ADDR_69	test dh CONST jnz JUMP_ADDR_5	test ah CONST jnz JUMP_ADDR_70	test dh CONST jnz JUMP_ADDR_5	test ah CONST jnz JUMP_ADDR_71	test dh CONST jnz JUMP_ADDR_5	lea rax [CONST_VAR+CONST] retn	test ah CONST jnz JUMP_ADDR_65	test dh CONST jnz JUMP_ADDR_5	test ah CONST jnz JUMP_ADDR_66	test dh CONST jnz JUMP_ADDR_5	test ah CONST jnz JUMP_ADDR_67	test dh CONST jnz JUMP_ADDR_5	lea rax [CONST_VAR+CONST] retn	test al al jz JUMP_ADDR_50	test al CONST jnz JUMP_ADDR_58	test al CONST jnz JUMP_ADDR_59	test al CONST jnz JUMP_ADDR_60	test al CONST jnz JUMP_ADDR_61	test al CONST jnz JUMP_ADDR_62	test al CONST jnz JUMP_ADDR_63	test al CONST jnz JUMP_ADDR_64	lea rax [CONST_VAR+CONST] retn	test ah CONST jnz JUMP_ADDR_65	test ah CONST jnz JUMP_ADDR_66	test ah CONST jnz JUMP_ADDR_67	test ah CONST jnz JUMP_ADDR_68	test ah CONST jnz JUMP_ADDR_69	test ah CONST jnz JUMP_ADDR_70	test ah CONST jnz JUMP_ADDR_71	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn	lea rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap___memcmp_ssse3
endbr64 mov rcx rdx mov rdx rdi cmp rcx CONST jnb JUMP_ADDR_2	add rsi rcx add rdi rcx jmp JUMP_ADDR_208	movdqu xmm3 [CONST_VAR] movdqu xmm0 [CONST_VAR] pcmpeqb xmm3 xmm0 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_184	mov edx edi and edx CONST xor rdi rdx sub rsi rdx add rcx rdx mov edx esi and edx CONST jz JUMP_ADDR_21	xor rsi rdx cmp edx CONST jnb JUMP_ADDR_13	cmp edx CONST jz JUMP_ADDR_21	cmp edx CONST jz JUMP_ADDR_31	cmp edx CONST jz JUMP_ADDR_41	cmp edx CONST jz JUMP_ADDR_51	cmp edx CONST jz JUMP_ADDR_61	cmp edx CONST jz JUMP_ADDR_71	cmp edx CONST jz JUMP_ADDR_81	jmp JUMP_ADDR_91	cmp edx CONST jz JUMP_ADDR_101	cmp edx CONST jz JUMP_ADDR_111	cmp edx CONST jz JUMP_ADDR_121	cmp edx CONST jz JUMP_ADDR_131	cmp edx CONST jz JUMP_ADDR_141	cmp edx CONST jz JUMP_ADDR_151	cmp edx CONST jz JUMP_ADDR_161	jmp JUMP_ADDR_171	cmp rcx CONST lea rcx [rcx+CONST] jnb JUMP_ADDR_24	xor eax eax movdqa xmm1 [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 [CONST_VAR+CONST] pand xmm2 xmm1 pmovmskb edx xmm2 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi rcx add rdi rcx jmp JUMP_ADDR_208	movdqa xmm0 [CONST_VAR] xor eax eax pcmpeqb xmm0 [CONST_VAR] sub rcx CONST movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 [CONST_VAR+CONST]	pand xmm2 xmm0 sub rcx CONST pmovmskb edx xmm2 movdqa xmm1 xmm0 movdqa xmm0 [CONST_VAR+CONST] movdqa xmm2 [CONST_VAR+CONST] sbb edx CONST pcmpeqb xmm0 [CONST_VAR+CONST] pcmpeqb xmm2 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jz JUMP_ADDR_25	pand xmm2 xmm0 cmp rcx CONST jge JUMP_ADDR_28	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm2 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_34	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_35	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_38	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_44	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_45	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_48	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_54	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_55	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_58	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_64	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_65	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_68	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_74	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_75	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_78	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_84	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_85	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_88	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_94	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_95	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_98	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_104	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_105	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_108	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_114	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_115	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_118	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_124	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_125	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_128	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_134	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_135	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_138	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_144	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_145	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_148	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_154	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_155	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_158	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_164	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_165	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_168	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	cmp rcx CONST lea rcx [rcx+CONST] mov eax edx jnb JUMP_ADDR_174	movdqa xmm1 [CONST_VAR+CONST] movdqa xmm2 xmm1 palignr xmm1 [CONST_VAR] [CONST_VAR] pcmpeqb xmm1 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 xmm2 xmm2 pcmpeqb xmm3 [CONST_VAR+CONST] pand xmm3 xmm1 pmovmskb edx xmm3 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	add rsi CONST add rsi rcx add rdi rcx jmp JUMP_ADDR_208	sub rcx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR] [CONST_VAR] pcmpeqb xmm0 [CONST_VAR] movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm3 [CONST_VAR+CONST]	pand xmm3 xmm0 sub rcx CONST pmovmskb edx xmm3 movdqa xmm1 xmm0 movdqa xmm3 [CONST_VAR+CONST] palignr xmm3 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] sbb edx CONST movdqa xmm0 [CONST_VAR+CONST] palignr xmm0 [CONST_VAR+CONST] [CONST_VAR+CONST_VAR] pcmpeqb xmm0 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] pcmpeqb xmm3 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jz JUMP_ADDR_175	pand xmm3 xmm0 cmp rcx CONST jge JUMP_ADDR_178	inc edx add rcx CONST	test edx edx jnz JUMP_ADDR_181	pmovmskb edx xmm3 movdqa xmm1 xmm0 lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub edx CONST jnz JUMP_ADDR_181	lea rsi [CONST_VAR+CONST] add rsi rcx add rdi rcx jmp JUMP_ADDR_208	pmovmskb r8d xmm1 sub r8d CONST jz JUMP_ADDR_183	lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] mov edx r8d	add rsi rax	test dl dl jz JUMP_ADDR_200	test dl CONST jnz JUMP_ADDR_193	test dl CONST jnz JUMP_ADDR_194	test dl CONST jnz JUMP_ADDR_195	test dl CONST jnz JUMP_ADDR_196	test dl CONST jnz JUMP_ADDR_197	test dl CONST jnz JUMP_ADDR_198	test dl CONST jnz JUMP_ADDR_199	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	lea rdi [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] test dh CONST jnz JUMP_ADDR_193	test dh CONST jnz JUMP_ADDR_194	test dh CONST jnz JUMP_ADDR_195	test dh CONST jnz JUMP_ADDR_196	test dh CONST jnz JUMP_ADDR_197	test dh CONST jnz JUMP_ADDR_198	test dh CONST jnz JUMP_ADDR_199	movzx eax [CONST_VAR+CONST] movzx edx [CONST_VAR+CONST] sub eax edx retn	cmp ecx CONST jnb JUMP_ADDR_217	cmp ecx CONST jz JUMP_ADDR_272	cmp ecx CONST jz JUMP_ADDR_284	cmp ecx CONST jz JUMP_ADDR_297	cmp ecx CONST jz JUMP_ADDR_311	cmp ecx CONST jz JUMP_ADDR_271	cmp ecx CONST jz JUMP_ADDR_283	cmp ecx CONST jz JUMP_ADDR_296	jmp JUMP_ADDR_310	cmp ecx CONST jnb JUMP_ADDR_226	cmp ecx CONST jz JUMP_ADDR_270	cmp ecx CONST jz JUMP_ADDR_282	cmp ecx CONST jz JUMP_ADDR_295	cmp ecx CONST jz JUMP_ADDR_309	cmp ecx CONST jz JUMP_ADDR_269	cmp ecx CONST jz JUMP_ADDR_281	cmp ecx CONST jz JUMP_ADDR_294	jmp JUMP_ADDR_308	cmp ecx CONST jnb JUMP_ADDR_235	cmp ecx CONST jz JUMP_ADDR_268	cmp ecx CONST jz JUMP_ADDR_280	cmp ecx CONST jz JUMP_ADDR_293	cmp ecx CONST jz JUMP_ADDR_307	cmp ecx CONST jz JUMP_ADDR_267	cmp ecx CONST jz JUMP_ADDR_279	cmp ecx CONST jz JUMP_ADDR_292	jmp JUMP_ADDR_306	cmp ecx CONST jnb JUMP_ADDR_244	cmp ecx CONST jz JUMP_ADDR_266	cmp ecx CONST jz JUMP_ADDR_278	cmp ecx CONST jz JUMP_ADDR_291	cmp ecx CONST jz JUMP_ADDR_305	cmp ecx CONST jz JUMP_ADDR_265	cmp ecx CONST jz JUMP_ADDR_277	cmp ecx CONST jz JUMP_ADDR_290	jmp JUMP_ADDR_304	cmp ecx CONST jnb JUMP_ADDR_253	cmp ecx CONST jz JUMP_ADDR_264	cmp ecx CONST jz JUMP_ADDR_276	cmp ecx CONST jz JUMP_ADDR_289	cmp ecx CONST jz JUMP_ADDR_303	cmp ecx CONST jz JUMP_ADDR_263	cmp ecx CONST jz JUMP_ADDR_275	cmp ecx CONST jz JUMP_ADDR_288	jmp JUMP_ADDR_302	cmp ecx CONST jz JUMP_ADDR_262	cmp ecx CONST jz JUMP_ADDR_274	cmp ecx CONST jz JUMP_ADDR_287	cmp ecx CONST jz JUMP_ADDR_301	cmp ecx CONST jz JUMP_ADDR_261	cmp ecx CONST jz JUMP_ADDR_273	cmp ecx CONST jz JUMP_ADDR_286	jmp JUMP_ADDR_300	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	movzx eax [CONST_VAR+CONST] cmp al [CONST_VAR+CONST] jnz JUMP_ADDR_319	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] cmp al cl jnz JUMP_ADDR_319	cmp eax ecx jnz JUMP_ADDR_319	xor eax eax retn	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	mov eax [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] cmp eax ecx jnz JUMP_ADDR_315	movzx eax [CONST_VAR+CONST] movzx ecx [CONST_VAR+CONST] cmp al cl jnz JUMP_ADDR_319	cmp eax ecx jnz JUMP_ADDR_319	movzx eax [CONST_VAR+CONST] cmp al [CONST_VAR+CONST] jnz JUMP_ADDR_319	xor eax eax retn	cmp al cl jnz JUMP_ADDR_319	cmp ax cx jnz JUMP_ADDR_319	shr eax CONST shr ecx CONST cmp al cl jnz JUMP_ADDR_319	cmp eax ecx	sbb eax eax sbb eax CONST retn
[ph]libcap-git-setcap___strstr_sse2_unaligned
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST movzx ebx [CONST_VAR] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test bl bl jz JUMP_ADDR_27	movzx ebp bl mov r12 rsi mov esi ebp call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_24	movzx eax [r12+CONST] test al al jz JUMP_ADDR_25	movzx ecx [r12+CONST] test cl cl jz JUMP_ADDR_28	cmp [r12+CONST] CONST jz JUMP_ADDR_33	mov rdi r12 call sub_xxx mov rdi r13 mov rsi rax mov [rsp+CONST+var_xxx] rax mov r14 rax or rsi CONST call sub_xxx mov r15 rax cmp r14 rax ja JUMP_ADDR_24	mov rdx r14 mov rsi r12 mov rdi r13 call sub_xxx test eax eax jz JUMP_ADDR_25	cmp r14 CONST ja JUMP_ADDR_42	mov rsi [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov ecx CONST xor eax eax mov rdi rdx rep CONST sub r15 rsi lea r14 [CONST_VAR+CONST] add r15 r13 cmp r14 CONST jbe JUMP_ADDR_12	sub rsi CONST mov eax CONST jmp JUMP_ADDR_11	add rax CONST mov ebx ecx	movzx ecx [r12+rax] shl ebx CONST mov edx ecx sub edx ebx movzx edx dl mov [rsp+rdx+CONST+var_xxx] al cmp rsi rax jnz JUMP_ADDR_10	mov rcx [rsp+CONST+var_xxx] mov rbx r14 xor ebp ebp movzx edx [r12+rcx+CONST] movzx eax [r12+rcx+CONST] shl rdx CONST sub rax rdx movzx eax al movzx edx [rsp+rax+CONST+var_xxx] mov [rsp+rax+CONST+var_xxx] r14b lea rax [rcx+CONST] mov [rsp+CONST+var_xxx] rax sub rbx rdx nop [rax+rax+CONST]	cmp r13 r15 ja JUMP_ADDR_23	nop [rax]	add r13 r14 movzx edx [r13+CONST] movzx eax [r13+CONST] shl rdx CONST sub rax rdx movzx eax al movzx eax [rsp+rax+CONST+var_xxx] test rax rax jnz JUMP_ADDR_17	cmp r13 r15 jbe JUMP_ADDR_15	sub r13 rax cmp r14 rax ja JUMP_ADDR_13	cmp r14 CONST jbe JUMP_ADDR_20	mov rax [r12+rbp] cmp [r13+rbp+CONST] rax jnz JUMP_ADDR_22	mov rdx r14 mov rsi r12 mov rdi r13 call sub_xxx test eax eax jz JUMP_ADDR_25	lea rax [rbp+CONST] cmp rbp CONST cmovb rax [rsp+CONST+var_xxx] mov rbp rax	add r13 rbx cmp r13 r15 jbe JUMP_ADDR_15	mov rax [rsp+CONST+var_xxx] mov esi CONST lea rdi [r15+rax] call sub_xxx add r15 rax cmp r13 r15 jbe JUMP_ADDR_15	xor r13d r13d	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_44	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r13 rdi jmp JUMP_ADDR_25	movzx edx [r13+CONST] shl ebp CONST or ebp eax test edx edx jz JUMP_ADDR_24	xor eax eax jmp JUMP_ADDR_31	test edx edx jz JUMP_ADDR_38	shl eax CONST mov rcx r13 add r13 CONST or eax edx movzx edx [r13+CONST] cmp ebp eax jnz JUMP_ADDR_30	lea r13 [rcx+CONST] jmp JUMP_ADDR_25	movzx edx al movzx eax cl movzx ecx [r13+CONST] shl ebp CONST shl edx CONST shl eax CONST or edx eax or edx ebp test ecx ecx jz JUMP_ADDR_24	xor eax eax jmp JUMP_ADDR_36	test ecx ecx jz JUMP_ADDR_40	or eax ecx mov rsi r13 add r13 CONST movzx ecx [r13+CONST] shl eax CONST cmp edx eax jnz JUMP_ADDR_35	lea r13 [CONST_VAR+CONST] jmp JUMP_ADDR_25	cmp ebp eax jnz JUMP_ADDR_24	jmp JUMP_ADDR_32	cmp edx eax jnz JUMP_ADDR_24	jmp JUMP_ADDR_37	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_44	mov rcx [rsp+CONST+var_xxx] mov rdx r12 mov rsi r15 mov rdi r13 add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	call sub_xxx	endbr64 movd xmm1 esi mov eax edi and eax CONST punpcklbw xmm1 xmm1 cmp eax CONST punpcklwd xmm1 xmm1 pshufd xmm1 xmm1 xmm1 jg JUMP_ADDR_53	movdqu xmm0 [CONST_VAR] pxor xmm3 xmm3 movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb eax xmm0 test eax eax jz JUMP_ADDR_48	bsf eax eax mov edx CONST lea rax [CONST_VAR+rax] cmp [rax] sil cmovnz rax rdx retn	movdqu xmm0 [CONST_VAR+CONST] movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb ecx xmm0 movdqu xmm0 [CONST_VAR+CONST] movdqa xmm4 xmm0 pcmpeqb xmm0 xmm1 shl rcx CONST pcmpeqb xmm4 xmm3 por xmm0 xmm4 pmovmskb eax xmm0 movdqu xmm0 [CONST_VAR+CONST] pcmpeqb xmm3 xmm0 shl rax CONST pcmpeqb xmm0 xmm1 or rax rcx por xmm0 xmm3 pmovmskb ecx xmm0 shl rcx CONST or rax rcx test rax rax jnz JUMP_ADDR_52	nop [rax+rax+CONST] nop [rax] pxor xmm6 xmm6 and rdi CONST	add rdi CONST movdqa xmm5 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] pxor xmm5 xmm1 movdqa xmm4 [CONST_VAR+CONST] pxor xmm2 xmm1 pxor xmm3 xmm1 pminub xmm5 [CONST_VAR] pxor xmm4 xmm1 pminub xmm2 [CONST_VAR+CONST] pminub xmm3 [CONST_VAR+CONST] pminub xmm5 xmm2 pminub xmm4 [CONST_VAR+CONST] pminub xmm5 xmm3 pminub xmm5 xmm4 pcmpeqb xmm5 xmm6 pmovmskb eax xmm5 test eax eax jz JUMP_ADDR_50	movdqa xmm5 [CONST_VAR] movdqa xmm0 xmm5 pcmpeqb xmm5 xmm1 pcmpeqb xmm0 xmm6 por xmm5 xmm0 pcmpeqb xmm2 xmm6 pcmpeqb xmm3 xmm6 pcmpeqb xmm4 xmm6 pmovmskb ecx xmm5 pmovmskb eax xmm2 shl rax CONST pmovmskb r8d xmm3 pmovmskb edx xmm4 shl r8 CONST or rax r8 or rax rcx shl rdx CONST or rax rdx	bsf rax rax mov edx CONST lea rax [CONST_VAR+rax] cmp [rax] sil cmovnz rax rdx retn	mov rdx rdi pxor xmm2 xmm2 and rdx CONST movdqa xmm0 xmm1 movdqa xmm3 [rdx] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb r8d xmm3 movdqa xmm3 [rdx+CONST] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb eax xmm3 movdqa xmm3 [rdx+CONST] movdqa xmm4 xmm3 pcmpeqb xmm3 xmm1 shl rax CONST pcmpeqb xmm4 xmm2 por xmm3 xmm4 pmovmskb r9d xmm3 movdqa xmm3 [rdx+CONST] pcmpeqb xmm2 xmm3 shl r9 CONST pcmpeqb xmm0 xmm3 or rax r9 or rax r8 por xmm0 xmm2 pmovmskb ecx xmm0 shl rcx CONST or rax rcx mov ecx edi sub cl dl shr rax cl test rax rax jnz JUMP_ADDR_52	jmp JUMP_ADDR_49	endbr64 movzx eax [CONST_VAR] test al al jz JUMP_ADDR_79	movzx edx [CONST_VAR+CONST] test dl dl jz JUMP_ADDR_63	movd xmm1 eax movd xmm2 edx mov rax rdi and eax CONST punpcklbw xmm1 xmm1 cmp rax CONST punpcklbw xmm2 xmm2 punpcklwd xmm1 xmm1 punpcklwd xmm2 xmm2 pshufd xmm1 xmm1 xmm1 pshufd xmm2 xmm2 xmm2 ja JUMP_ADDR_95	movdqu xmm3 [CONST_VAR] pxor xmm5 xmm5 movdqu xmm4 [CONST_VAR+CONST] movdqa xmm6 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 movdqu xmm0 [CONST_VAR+CONST] pcmpeqb xmm6 xmm5 pminub xmm3 xmm4 movdqa xmm4 xmm3 movdqu xmm3 [CONST_VAR+CONST] pcmpeqb xmm5 xmm0 pcmpeqb xmm3 xmm2 por xmm4 xmm6 pcmpeqb xmm0 xmm1 pminub xmm0 xmm3 por xmm0 xmm5 pmovmskb r8d xmm4 pmovmskb eax xmm0 shl rax CONST or r8 rax jz JUMP_ADDR_70	bsf rax r8 add rax rdi cmp [rax] CONST jz JUMP_ADDR_67	movzx edx [CONST_VAR+CONST] test dl dl jz JUMP_ADDR_66	cmp dl [rax+CONST] jnz JUMP_ADDR_68	xor edx edx jmp JUMP_ADDR_65	movzx esi al jmp JUMP_ADDR_45	add rdx CONST cmp cl [rax+rdx+CONST] jnz JUMP_ADDR_68	movzx ecx [CONST_VAR+rdx+CONST] test cl cl jnz JUMP_ADDR_64	retn	xor eax eax retn	lea rax [r8+CONST] and r8 rax jnz JUMP_ADDR_59	nop [rax+CONST]	movdqu xmm3 [CONST_VAR+CONST] pxor xmm5 xmm5 movdqu xmm4 [CONST_VAR+CONST] movdqa xmm6 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm2 movdqu xmm0 [CONST_VAR+CONST] pcmpeqb xmm6 xmm5 pminub xmm3 xmm4 movdqa xmm4 xmm3 movdqu xmm3 [CONST_VAR+CONST] pcmpeqb xmm5 xmm0 pcmpeqb xmm3 xmm2 por xmm4 xmm6 pcmpeqb xmm0 xmm1 pminub xmm0 xmm3 por xmm0 xmm5 pmovmskb eax xmm4 shl rax CONST pmovmskb r8d xmm0 shl r8 CONST or r8 rax jz JUMP_ADDR_81	bsf rax r8 add rax rdi cmp [rax] CONST jz JUMP_ADDR_78	movzx edx [CONST_VAR+CONST] test dl dl jz JUMP_ADDR_77	cmp dl [rax+CONST] jnz JUMP_ADDR_80	xor edx edx jmp JUMP_ADDR_76	add rdx CONST cmp cl [rax+rdx+CONST] jnz JUMP_ADDR_80	movzx ecx [CONST_VAR+rdx+CONST] test cl cl jnz JUMP_ADDR_75	retn	xor eax eax retn	mov rax rdi retn	lea rax [r8+CONST] and r8 rax jnz JUMP_ADDR_71	mov r11 CONST mov r9 rdi pxor xmm7 xmm7 and rdi CONST nop [rax+rax+CONST]	movdqa xmm3 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] movdqa xmm0 xmm3 pxor xmm3 xmm2 pxor xmm6 xmm1 movdqa CONST [CONST_VAR+CONST] por xmm6 xmm3 pminub xmm0 CONST movdqu xmm3 [CONST_VAR+CONST] pxor CONST xmm2 pxor xmm3 xmm1 movdqa xmm9 [CONST_VAR+CONST] por xmm3 CONST pminub xmm0 xmm9 pxor xmm9 xmm2 movdqa xmm8 [CONST_VAR+CONST] add rdi CONST pminub xmm3 xmm6 movdqu xmm4 [CONST_VAR+CONST] pminub xmm0 xmm8 pxor xmm8 xmm2 pxor xmm4 xmm1 por xmm4 xmm9 pminub xmm3 xmm4 movdqu xmm5 [CONST_VAR+CONST] pxor xmm5 xmm1 por xmm5 xmm8 pminub xmm3 xmm5 pminub xmm0 xmm3 pcmpeqb xmm0 xmm7 pmovmskb eax xmm0 test eax eax jz JUMP_ADDR_82	pminub xmm6 [CONST_VAR] pminub xmm4 [CONST_VAR+CONST] pminub xmm5 [CONST_VAR+CONST] pcmpeqb xmm6 xmm7 pcmpeqb xmm5 xmm7 pmovmskb edx xmm6 movdqa xmm8 [CONST_VAR+CONST] pcmpeqb xmm4 xmm7 movdqu xmm0 [CONST_VAR+CONST] pmovmskb r8d xmm5 movdqa xmm3 xmm8 pmovmskb ecx xmm4 pcmpeqb xmm0 xmm1 pcmpeqb xmm3 xmm2 shl rcx CONST pcmpeqb xmm8 xmm7 shl r8 CONST pminub xmm3 xmm0 or rdx rcx por xmm8 xmm3 or r8 rdx pmovmskb eax xmm8 shl rax CONST or r8 rax jz JUMP_ADDR_82	bsf rcx r8 add rcx rdi cmp [rcx] CONST jz JUMP_ADDR_107	xor eax eax movzx edx [CONST_VAR+CONST] test dl dl jz JUMP_ADDR_90	cmp dl [rcx+CONST] jnz JUMP_ADDR_91	jmp JUMP_ADDR_89	add rax CONST cmp dl [rcx+rax+CONST] jnz JUMP_ADDR_91	movzx edx [CONST_VAR+rax+CONST] test dl dl jnz JUMP_ADDR_88	lea rax [rcx+CONST] retn	add r11 rax mov rax rdi sub rax r9 cmp rax r11 jl JUMP_ADDR_94	lea rax [r8+CONST] and r8 rax jnz JUMP_ADDR_84	jmp JUMP_ADDR_82	mov rdi rdi jmp UNK_JUMP_ADDR	mov rax rdi pxor xmm0 xmm0 and rax CONST movdqa xmm3 [rax] movdqu xmm4 [rax+CONST] movdqa xmm8 xmm3 movdqa xmm5 [rax+CONST] pcmpeqb xmm4 xmm1 pcmpeqb xmm8 xmm0 pcmpeqb xmm3 xmm2 movdqa xmm7 xmm5 pminub xmm3 xmm4 movdqu xmm4 [rax+CONST] pcmpeqb xmm7 xmm0 por xmm8 xmm3 movdqa xmm3 xmm5 movdqa xmm5 [rax+CONST] pcmpeqb xmm4 xmm1 pcmpeqb xmm3 xmm2 movdqa xmm6 xmm5 pmovmskb ecx xmm8 pminub xmm3 xmm4 movdqu xmm4 [rax+CONST] por xmm7 xmm3 movdqa xmm3 xmm5 pcmpeqb xmm6 xmm0 movdqa xmm5 [rax+CONST] pcmpeqb xmm4 xmm1 pmovmskb r8d xmm7 pcmpeqb xmm3 xmm2 pcmpeqb xmm0 xmm5 pminub xmm3 xmm4 movdqu xmm4 [rax+CONST] por xmm6 xmm3 movdqa xmm3 xmm5 shl r8 CONST pcmpeqb xmm4 xmm1 pcmpeqb xmm3 xmm2 pmovmskb r10d xmm6 pminub xmm3 xmm4 por xmm0 xmm3 shl r10 CONST or r8 r10 or r8 rcx mov ecx edi pmovmskb edx xmm0 sub ecx eax shl rdx CONST or r8 rdx shr r8 cl jz JUMP_ADDR_81	bsf rax r8 add rax rdi cmp [rax] CONST jz JUMP_ADDR_107	cmp rdi rax jz JUMP_ADDR_104	movzx edx [CONST_VAR+CONST] test dl dl jz JUMP_ADDR_103	cmp dl [rax+CONST] jnz JUMP_ADDR_104	xor edx edx jmp JUMP_ADDR_102	add rdx CONST cmp cl [rax+rdx+CONST] jnz JUMP_ADDR_104	movzx ecx [CONST_VAR+rdx+CONST] test cl cl jnz JUMP_ADDR_101	sub rax CONST retn	lea rax [r8+CONST] and r8 rax jnz JUMP_ADDR_96	jmp JUMP_ADDR_81	rep retn	xor eax eax retn
[ph]libcap-git-setcap___strcspn_sse42
endbr64 mov rdx rdi mov r8 rdi sub rsp CONST mov ecx CONST mov rdi rsp xor eax eax cld rep CONST mov rax rsi nop [rax+rax+CONST] nop [rax]	mov cl [rax] test cl cl jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] test cl CONST jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] test cl CONST jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] add rax CONST mov [rsp+rcx+CONST+var_xxx] cl test cl CONST jnz JUMP_ADDR_1	lea rax [rdx+CONST] nop [rax+rax+CONST] nop [rax]	add rax CONST mov cl [rax] cmp [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_13	mov cl [rax+CONST] cmp [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_12	mov cl [rax+CONST] cmp [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_11	mov cl [rax+CONST] cmp [rsp+rcx+CONST+var_xxx] cl jnz JUMP_ADDR_6	inc rax	inc rax	inc rax	add rsp CONST sub rax rdx retn	endbr64 cmp [CONST_VAR] CONST jz JUMP_ADDR_29	mov edx esi and edx CONST jnz JUMP_ADDR_25	movdqa xmm1 [CONST_VAR] pcmpistri xmm1 xmm1 xmm1 cmp ecx CONST jz JUMP_ADDR_31	mov esi edi mov rax rdi and esi CONST jz JUMP_ADDR_23	and rax CONST lea rcx unk_xxx movsxd rdx esi movdqu xmm2 [rcx+rdx] movdqa xmm0 [rax] pshufb xmm0 xmm2 pcmpistri xmm1 xmm0 xmm0 jb JUMP_ADDR_20	mov edx CONST pcmpistri xmm0 xmm0 xmm0 add rax CONST sub edx esi cmp edx ecx jle JUMP_ADDR_23	movsxd rax ecx retn	test esi esi jnz JUMP_ADDR_30	add rax CONST	movdqa xmm3 [rax] mov edx CONST pcmpistri xmm1 xmm3 xmm3 setz sil setb dl movzx esi sil test edx edx jz JUMP_ADDR_21	movsxd rcx ecx add rax rcx sub rax rdi retn	mov r8 rsi movsxd rax edx lea rcx unk_xxx and r8 CONST movdqu xmm0 [rcx+rax] mov eax CONST movdqa xmm1 [r8] pshufb xmm1 xmm0 pcmpistri xmm1 xmm1 xmm1 sub eax edx cmp eax ecx jnz JUMP_ADDR_17	movdqa xmm0 [r8+CONST] pcmpistri xmm0 xmm0 xmm0 add eax ecx cmp eax CONST jg JUMP_ADDR_32	test ecx ecx jz JUMP_ADDR_17	movdqu xmm1 [CONST_VAR] jmp JUMP_ADDR_17	jmp UNK_JUMP_ADDR	pcmpistri xmm3 xmm3 xmm3 movsxd rcx ecx add rax rcx sub rax rdi retn	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_17	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memset_chk_avx512_no_vzeroupper
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 vpxor xmm0 xmm0 xmm0 vmovd xmm1 esi lea rsi [CONST_VAR+rdx] mov rax rdi vpshufb xmm0 xmm1 xmm1 cmp rdx CONST jb JUMP_ADDR_13	cmp rdx CONST vbroadcastss zmm2 xmm0 ja JUMP_ADDR_22	cmp rdx CONST jb JUMP_ADDR_6	vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 retn	cmp dl CONST jb JUMP_ADDR_8	vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 retn	cmp dl CONST jb JUMP_ADDR_10	vmovups CONST zmm2 vmovups CONST zmm2 retn	cmp dl CONST jb JUMP_ADDR_12	vmovdqu CONST ymm2 vmovdqu CONST ymm2 retn	vmovdqu [CONST_VAR] xmm0 vmovdqu [CONST_VAR+CONST] xmm0 retn	cmp dl CONST jb JUMP_ADDR_15	vmovq [CONST_VAR] xmm0 vmovq [CONST_VAR+CONST] xmm0 retn	vmovd ecx xmm0 cmp dl CONST jb JUMP_ADDR_17	mov [CONST_VAR] ecx mov [CONST_VAR+CONST] ecx retn	cmp dl CONST jb JUMP_ADDR_19	mov [CONST_VAR] cx mov [CONST_VAR+CONST] cx retn	cmp dl CONST jb JUMP_ADDR_21	mov [CONST_VAR] cl	retn	mov rcx cs:xxx cmp rdx rcx ja JUMP_ADDR_28	cmp rdx CONST ja JUMP_ADDR_25	vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 retn	sub rsi CONST vmovups CONST zmm2 and rdi CONST add rdi CONST	vmovaps CONST zmm2 vmovaps CONST zmm2 vmovaps CONST zmm2 vmovaps CONST zmm2 add rdi CONST cmp rdi rsi jb JUMP_ADDR_26	vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 retn	and rdi CONST add rdi CONST vmovups CONST zmm2 vmovups CONST zmm2 sub rsi CONST	vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 vmovntdq CONST zmm2 add rdi CONST cmp rdi rsi jb JUMP_ADDR_29	sfence vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 vmovups CONST zmm2 retn
[ph]libcap-git-setcap___mempcpy_sse2_unaligned
endbr64 mov rax rdi add rax rdx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memcpy_sse2_unaligned
endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_28	cmp rdx CONST ja JUMP_ADDR_38	movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+rdx+CONST] movups [CONST_VAR] xmm0 movups [CONST_VAR+rdx+CONST] xmm1 retn	endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi test rdx rdx jz JUMP_ADDR_15	add rax rdx jmp JUMP_ADDR_11	endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 mov rax rdi test rdx rdx jz JUMP_ADDR_15	mov rcx rdx cmp rdi rsi jb JUMP_ADDR_14	jz JUMP_ADDR_15	lea rdx [CONST_VAR+rcx] cmp rdi rdx jb JUMP_ADDR_16	rep CONST	retn	lea rdi [CONST_VAR+rcx+CONST] lea rsi [CONST_VAR+rcx+CONST] std rep CONST cld retn	endbr64 mov rax rdi add rax rdx jmp JUMP_ADDR_19	endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_28	cmp rdx CONST ja JUMP_ADDR_37	movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+rdx+CONST] movups [CONST_VAR] xmm0 movups [CONST_VAR+rdx+CONST] xmm1 retn	cmp rdx cs:xxx jnb JUMP_ADDR_42	cmp rdi rsi jb JUMP_ADDR_26	jz JUMP_ADDR_27	lea r9 [CONST_VAR+rdx] cmp rdi r9 jb JUMP_ADDR_47	mov rcx rdx rep CONST	retn	cmp dl CONST jnb JUMP_ADDR_34	cmp dl CONST jnb JUMP_ADDR_35	cmp dl CONST ja JUMP_ADDR_36	jb JUMP_ADDR_33	movzx ecx [CONST_VAR] mov [CONST_VAR] cl	retn	mov rcx [CONST_VAR+rdx+CONST] mov rsi [CONST_VAR] mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rsi retn	mov ecx [CONST_VAR+rdx+CONST] mov esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] esi retn	movzx ecx [CONST_VAR+rdx+CONST] movzx esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] si retn	cmp rdx cs:xxx ja JUMP_ADDR_22	cmp rdx CONST ja JUMP_ADDR_42	cmp rdx CONST jb JUMP_ADDR_41	movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+CONST] movups xmm2 [CONST_VAR+CONST] movups xmm3 [CONST_VAR+CONST] movups xmm4 [CONST_VAR+rdx+CONST] movups xmm5 [CONST_VAR+rdx+CONST] movups xmm6 [CONST_VAR+rdx+CONST] movups xmm7 [CONST_VAR+rdx+CONST] movups [CONST_VAR] xmm0 movups [CONST_VAR+CONST] xmm1 movups [CONST_VAR+CONST] xmm2 movups [CONST_VAR+CONST] xmm3 movups [CONST_VAR+rdx+CONST] xmm4 movups [CONST_VAR+rdx+CONST] xmm5 movups [CONST_VAR+rdx+CONST] xmm6 movups [CONST_VAR+rdx+CONST] xmm7 retn	movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+CONST] movups xmm2 [CONST_VAR+rdx+CONST] movups xmm3 [CONST_VAR+rdx+CONST] movups [CONST_VAR] xmm0 movups [CONST_VAR+CONST] xmm1 movups [CONST_VAR+rdx+CONST] xmm2 movups [CONST_VAR+rdx+CONST] xmm3 retn	cmp rdi rsi ja JUMP_ADDR_47	jz JUMP_ADDR_27	movups xmm4 [CONST_VAR] movups xmm5 [CONST_VAR+rdx+CONST] movups xmm6 [CONST_VAR+rdx+CONST] movups xmm7 [CONST_VAR+rdx+CONST] movups xmm8 [CONST_VAR+rdx+CONST] mov r11 rdi lea rcx [CONST_VAR+rdx+CONST] mov r8 rdi and r8 CONST sub r8 CONST sub rsi r8 sub rdi r8 add rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_50	movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+CONST] movups xmm2 [CONST_VAR+CONST] movups xmm3 [CONST_VAR+CONST] add rsi CONST sub rdx CONST movaps [CONST_VAR] xmm0 movaps [CONST_VAR+CONST] xmm1 movaps [CONST_VAR+CONST] xmm2 movaps [CONST_VAR+CONST] xmm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_45	movups [rcx] xmm5 movups [rcx+CONST] xmm6 movups [rcx+CONST] xmm7 movups [rcx+CONST] xmm8 movups [r11] xmm4 retn	movups xmm4 [CONST_VAR] movups xmm5 [CONST_VAR+CONST] movups xmm6 [CONST_VAR+CONST] movups xmm7 [CONST_VAR+CONST] movups xmm8 [CONST_VAR+rdx+CONST] lea r11 [CONST_VAR+rdx+CONST] lea rcx [CONST_VAR+rdx+CONST] mov r9 r11 mov r8 r11 and r8 CONST sub rcx r8 sub r9 r8 sub rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_53	movups xmm0 [rcx] movups xmm1 [rcx+CONST] movups xmm2 [rcx+CONST] movups xmm3 [rcx+CONST] sub rcx CONST sub rdx CONST movaps [r9] xmm0 movaps [r9+CONST] xmm1 movaps [r9+CONST] xmm2 movaps [r9+CONST] xmm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_48	movups [CONST_VAR] xmm4 movups [CONST_VAR+CONST] xmm5 movups [CONST_VAR+CONST] xmm6 movups [CONST_VAR+CONST] xmm7 movups [r11] xmm8 retn	lea r10 [CONST_VAR+rdx] cmp rsi r10 jb JUMP_ADDR_45	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] movups xmm0 [CONST_VAR] movups xmm1 [CONST_VAR+CONST] movups xmm2 [CONST_VAR+CONST] movups xmm3 [CONST_VAR+CONST] add rsi CONST sub rdx CONST movntdq [CONST_VAR] xmm0 movntdq [CONST_VAR+CONST] xmm1 movntdq [CONST_VAR+CONST] xmm2 movntdq [CONST_VAR+CONST] xmm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_51	sfence movups [rcx] xmm5 movups [rcx+CONST] xmm6 movups [rcx+CONST] xmm7 movups [rcx+CONST] xmm8 movups [r11] xmm4 retn	lea r10 [rcx+rdx] cmp r9 r10 jb JUMP_ADDR_48	prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] movups xmm0 [rcx] movups xmm1 [rcx+CONST] movups xmm2 [rcx+CONST] movups xmm3 [rcx+CONST] sub rcx CONST sub rdx CONST movntdq [r9] xmm0 movntdq [r9+CONST] xmm1 movntdq [r9+CONST] xmm2 movntdq [r9+CONST] xmm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_54	sfence movups [CONST_VAR] xmm4 movups [CONST_VAR+CONST] xmm5 movups [CONST_VAR+CONST] xmm6 movups [CONST_VAR+CONST] xmm7 movups [r11] xmm8 retn
[ph]libcap-git-setcap___mempcpy_avx_unaligned
endbr64 mov rax rdi add rax rdx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memmove_avx_unaligned
endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_18	cmp rdx CONST ja JUMP_ADDR_30	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vzeroupper retn	endbr64 mov rax rdi add rax rdx jmp JUMP_ADDR_6	endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_18	cmp rdx CONST ja JUMP_ADDR_29	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vzeroupper retn	cmp rdx cs:xxx jnb JUMP_ADDR_34	cmp rdi rsi jb JUMP_ADDR_14	jz JUMP_ADDR_17	lea r9 [CONST_VAR+rdx] cmp rdi r9 jb JUMP_ADDR_39	mov rcx rdi sub rcx rsi jmp JUMP_ADDR_15	mov rcx rsi sub rcx rdi	cmp ecx CONST jbe JUMP_ADDR_30	mov rcx rdx rep CONST	retn	cmp dl CONST jnb JUMP_ADDR_25	cmp dl CONST jnb JUMP_ADDR_26	cmp dl CONST jnb JUMP_ADDR_27	cmp dl CONST ja JUMP_ADDR_28	jb JUMP_ADDR_24	movzx ecx [CONST_VAR] mov [CONST_VAR] cl	retn	vmovdqu xmm0 [CONST_VAR] vmovdqu xmm1 [CONST_VAR+rdx+CONST] vmovdqu [CONST_VAR] xmm0 vmovdqu [CONST_VAR+rdx+CONST] xmm1 retn	mov rcx [CONST_VAR+rdx+CONST] mov rsi [CONST_VAR] mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rsi retn	mov ecx [CONST_VAR+rdx+CONST] mov esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] esi retn	movzx ecx [CONST_VAR+rdx+CONST] movzx esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] si retn	cmp rdx cs:xxx ja JUMP_ADDR_9	cmp rdx CONST ja JUMP_ADDR_34	cmp rdx CONST jb JUMP_ADDR_33	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST vmovdqu ymm4 CONST vmovdqu ymm5 CONST vmovdqu ymm6 CONST vmovdqu ymm7 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vmovdqu CONST ymm2 vmovdqu CONST ymm3 vmovdqu CONST ymm4 vmovdqu CONST ymm5 vmovdqu CONST ymm6 vmovdqu CONST ymm7 vzeroupper retn	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vmovdqu CONST ymm2 vmovdqu CONST ymm3 vzeroupper retn	cmp rdi rsi ja JUMP_ADDR_39	jz JUMP_ADDR_17	vmovdqu ymm4 CONST vmovdqu ymm5 CONST vmovdqu ymm6 CONST vmovdqu ymm7 CONST vmovdqu ymm8 CONST mov r11 rdi lea rcx [CONST_VAR+rdx+CONST] mov r8 rdi and r8 CONST sub r8 CONST sub rsi r8 sub rdi r8 add rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_42	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST add rsi CONST sub rdx CONST vmovdqa CONST ymm0 vmovdqa CONST ymm1 vmovdqa CONST ymm2 vmovdqa CONST ymm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_37	vmovdqu CONST ymm5 vmovdqu CONST ymm6 vmovdqu CONST ymm7 vmovdqu CONST ymm8 vmovdqu CONST ymm4 vzeroupper retn	vmovdqu ymm4 CONST vmovdqu ymm5 CONST vmovdqu ymm6 CONST vmovdqu ymm7 CONST vmovdqu ymm8 CONST lea r11 [CONST_VAR+rdx+CONST] lea rcx [CONST_VAR+rdx+CONST] mov r9 r11 mov r8 r11 and r8 CONST sub rcx r8 sub r9 r8 sub rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_45	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST sub rcx CONST sub rdx CONST vmovdqa CONST ymm0 vmovdqa CONST ymm1 vmovdqa CONST ymm2 vmovdqa CONST ymm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_40	vmovdqu CONST ymm4 vmovdqu CONST ymm5 vmovdqu CONST ymm6 vmovdqu CONST ymm7 vmovdqu CONST ymm8 vzeroupper retn	lea r10 [CONST_VAR+rdx] cmp rsi r10 jb JUMP_ADDR_37	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST add rsi CONST sub rdx CONST vmovntdq CONST ymm0 vmovntdq CONST ymm1 vmovntdq CONST ymm2 vmovntdq CONST ymm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_43	sfence vmovdqu CONST ymm5 vmovdqu CONST ymm6 vmovdqu CONST ymm7 vmovdqu CONST ymm8 vmovdqu CONST ymm4 vzeroupper retn	lea r10 [rcx+rdx] cmp r9 r10 jb JUMP_ADDR_40	prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu ymm2 CONST vmovdqu ymm3 CONST sub rcx CONST sub rdx CONST vmovntdq CONST ymm0 vmovntdq CONST ymm1 vmovntdq CONST ymm2 vmovntdq CONST ymm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_46	sfence vmovdqu CONST ymm4 vmovdqu CONST ymm5 vmovdqu CONST ymm6 vmovdqu CONST ymm7 vmovdqu CONST ymm8 vzeroupper retn
[ph]libcap-git-setcap___mempcpy_avx512_unaligned
endbr64 mov rax rdi add rax rdx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memcpy_avx512_unaligned
endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_18	cmp rdx CONST ja JUMP_ADDR_32	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm1 vzeroupper retn	endbr64 mov rax rdi add rax rdx jmp JUMP_ADDR_6	endbr64 mov rax rdi	cmp rdx CONST jb JUMP_ADDR_18	cmp rdx CONST ja JUMP_ADDR_31	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm1 vzeroupper retn	cmp rdx cs:xxx jnb JUMP_ADDR_36	cmp rdi rsi jb JUMP_ADDR_14	jz JUMP_ADDR_17	lea r9 [CONST_VAR+rdx] cmp rdi r9 jb JUMP_ADDR_41	mov rcx rdi sub rcx rsi jmp JUMP_ADDR_15	mov rcx rsi sub rcx rdi	cmp ecx CONST jbe JUMP_ADDR_32	mov rcx rdx rep CONST	retn	cmp dl CONST jnb JUMP_ADDR_26	cmp dl CONST jnb JUMP_ADDR_27	cmp dl CONST jnb JUMP_ADDR_28	cmp dl CONST jnb JUMP_ADDR_29	cmp dl CONST ja JUMP_ADDR_30	jb JUMP_ADDR_25	movzx ecx [CONST_VAR] mov [CONST_VAR] cl	retn	vmovdqu ymm0 CONST vmovdqu ymm1 CONST vmovdqu CONST ymm0 vmovdqu CONST ymm1 vzeroupper retn	vmovdqu xmm0 [CONST_VAR] vmovdqu xmm1 [CONST_VAR+rdx+CONST] vmovdqu [CONST_VAR] xmm0 vmovdqu [CONST_VAR+rdx+CONST] xmm1 retn	mov rcx [CONST_VAR+rdx+CONST] mov rsi [CONST_VAR] mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rsi retn	mov ecx [CONST_VAR+rdx+CONST] mov esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] esi retn	movzx ecx [CONST_VAR+rdx+CONST] movzx esi [CONST_VAR] mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] si retn	cmp rdx cs:xxx ja JUMP_ADDR_9	cmp rdx CONST ja JUMP_ADDR_36	cmp rdx CONST jb JUMP_ADDR_35	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST vmovdqu64 zmm4 CONST vmovdqu64 zmm5 CONST vmovdqu64 zmm6 CONST vmovdqu64 zmm7 CONST vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm1 vmovdqu64 CONST zmm2 vmovdqu64 CONST zmm3 vmovdqu64 CONST zmm4 vmovdqu64 CONST zmm5 vmovdqu64 CONST zmm6 vmovdqu64 CONST zmm7 vzeroupper retn	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm1 vmovdqu64 CONST zmm2 vmovdqu64 CONST zmm3 vzeroupper retn	cmp rdi rsi ja JUMP_ADDR_41	jz JUMP_ADDR_17	vmovdqu64 zmm4 CONST vmovdqu64 zmm5 CONST vmovdqu64 zmm6 CONST vmovdqu64 zmm7 CONST vmovdqu64 zmm8 CONST mov r11 rdi lea rcx [CONST_VAR+rdx+CONST] mov r8 rdi and r8 CONST sub r8 CONST sub rsi r8 sub rdi r8 add rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_44	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST add rsi CONST sub rdx CONST vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm1 vmovdqa64 CONST zmm2 vmovdqa64 CONST zmm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_39	vmovdqu64 CONST zmm5 vmovdqu64 CONST zmm6 vmovdqu64 CONST zmm7 vmovdqu64 CONST zmm8 vmovdqu64 CONST zmm4 vzeroupper retn	vmovdqu64 zmm4 CONST vmovdqu64 zmm5 CONST vmovdqu64 zmm6 CONST vmovdqu64 zmm7 CONST vmovdqu64 zmm8 CONST lea r11 [CONST_VAR+rdx+CONST] lea rcx [CONST_VAR+rdx+CONST] mov r9 r11 mov r8 r11 and r8 CONST sub rcx r8 sub r9 r8 sub rdx r8 cmp rdx cs:xxx ja JUMP_ADDR_47	vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST sub rcx CONST sub rdx CONST vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm1 vmovdqa64 CONST zmm2 vmovdqa64 CONST zmm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_42	vmovdqu64 CONST zmm4 vmovdqu64 CONST zmm5 vmovdqu64 CONST zmm6 vmovdqu64 CONST zmm7 vmovdqu64 CONST zmm8 vzeroupper retn	lea r10 [CONST_VAR+rdx] cmp rsi r10 jb JUMP_ADDR_39	prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] prefetcht0 [CONST_VAR+CONST] vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST add rsi CONST sub rdx CONST vmovntdq CONST zmm0 vmovntdq CONST zmm1 vmovntdq CONST zmm2 vmovntdq CONST zmm3 add rdi CONST cmp rdx CONST ja JUMP_ADDR_45	sfence vmovdqu64 CONST zmm5 vmovdqu64 CONST zmm6 vmovdqu64 CONST zmm7 vmovdqu64 CONST zmm8 vmovdqu64 CONST zmm4 vzeroupper retn	lea r10 [rcx+rdx] cmp r9 r10 jb JUMP_ADDR_42	prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] prefetcht0 [rcx+CONST] vmovdqu64 zmm0 CONST vmovdqu64 zmm1 CONST vmovdqu64 zmm2 CONST vmovdqu64 zmm3 CONST sub rcx CONST sub rdx CONST vmovntdq CONST zmm0 vmovntdq CONST zmm1 vmovntdq CONST zmm2 vmovntdq CONST zmm3 sub r9 CONST cmp rdx CONST ja JUMP_ADDR_48	sfence vmovdqu64 CONST zmm4 vmovdqu64 CONST zmm5 vmovdqu64 CONST zmm6 vmovdqu64 CONST zmm7 vmovdqu64 CONST zmm8 vzeroupper retn
[ph]libcap-git-setcap_bzero
endbr64 mov rax rdi mov rdx rsi pxor xmm0 xmm0 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___wmemset_sse2_unaligned
endbr64 shl rdx CONST movd xmm0 esi mov rax rdi pshufd xmm0 xmm0 xmm0 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memset_sse2_unaligned
endbr64 movd xmm0 esi mov rax rdi punpcklbw xmm0 xmm0 punpcklwd xmm0 xmm0 pshufd xmm0 xmm0 xmm0	cmp rdx CONST jb UNK_JUMP_ADDR	cmp rdx CONST ja UNK_JUMP_ADDR	movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR] xmm0 retn
[ph]libcap-git-setcap___memset_chk_erms
endbr64 cmp rcx rdx jb UNK_JUMP_ADDR	nop [rax]	endbr64 test rdx rdx jnz UNK_JUMP_ADDR	mov rax rdi retn
[ph]libcap-git-setcap___memset_sse2_unaligned_erms
mov rcx rdx movzx eax sil mov rdx rdi rep CONST mov rax rdx retn	endbr64 movd xmm0 esi mov rax rdi punpcklbw xmm0 xmm0 punpcklwd xmm0 xmm0 pshufd xmm0 xmm0 xmm0 cmp rdx CONST jb JUMP_ADDR_11	cmp rdx CONST ja JUMP_ADDR_4	movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR] xmm0 retn	cmp rdx cs:xxx ja UNK_JUMP_ADDR	cmp rdx CONST ja JUMP_ADDR_8	movdqu [CONST_VAR] xmm0 movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR+rdx+CONST] xmm0	retn	lea rcx [CONST_VAR+CONST] movdqu [CONST_VAR] xmm0 and rcx CONST movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+rdx+CONST] xmm0 movdqu [CONST_VAR+CONST] xmm0 movdqu [CONST_VAR+rdx+CONST] xmm0 add rdx rdi and rdx CONST cmp rcx rdx jz JUMP_ADDR_7	movdqa [rcx] xmm0 movdqa [rcx+CONST] xmm0 movdqa [rcx+CONST] xmm0 movdqa [rcx+CONST] xmm0 add rcx CONST cmp rdx rcx jnz JUMP_ADDR_9	rep retn	movq rcx xmm0 cmp dl CONST jnb JUMP_ADDR_17	cmp dl CONST jnb JUMP_ADDR_18	cmp dl CONST ja JUMP_ADDR_19	jb JUMP_ADDR_16	mov [CONST_VAR] cl	retn	mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rcx retn	mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] ecx retn	mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] cx retn
[ph]libcap-git-setcap___wmemset_avx2_unaligned
endbr64 shl rdx CONST vmovd xmm0 esi mov rax rdi vpbroadcastd ymm0 xmm0 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memset_avx2_unaligned
endbr64 vmovd xmm0 esi mov rax rdi vpbroadcastb ymm0 xmm0	cmp rdx CONST jb JUMP_ADDR_16	cmp rdx CONST ja JUMP_ADDR_10	vmovdqu CONST ymm0 vmovdqu CONST ymm0 vzeroupper retn	endbr64	vzeroupper mov rcx rdx movzx eax sil mov rdx rdi rep CONST mov rax rdx retn	endbr64 vmovd xmm0 esi mov rax rdi vpbroadcastb ymm0 xmm0 cmp rdx CONST jb JUMP_ADDR_16	cmp rdx CONST ja JUMP_ADDR_9	vmovdqu CONST ymm0 vmovdqu CONST ymm0 vzeroupper retn	cmp rdx cs:xxx ja JUMP_ADDR_5	cmp rdx CONST ja JUMP_ADDR_13	vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0	vzeroupper retn	lea rcx [CONST_VAR+CONST] vmovdqu CONST ymm0 and rcx CONST vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 vmovdqu CONST ymm0 add rdx rdi and rdx CONST cmp rcx rdx jz JUMP_ADDR_12	vmovdqa CONST ymm0 vmovdqa CONST ymm0 vmovdqa CONST ymm0 vmovdqa CONST ymm0 add rcx CONST cmp rdx rcx jnz JUMP_ADDR_14	vzeroupper retn	cmp dl CONST jnb JUMP_ADDR_23	vmovq rcx xmm0 cmp dl CONST jnb JUMP_ADDR_24	cmp dl CONST jnb JUMP_ADDR_25	cmp dl CONST ja JUMP_ADDR_26	jb JUMP_ADDR_22	mov [CONST_VAR] cl	vzeroupper retn	vmovdqu [CONST_VAR+rdx+CONST] xmm0 vmovdqu [CONST_VAR] xmm0 vzeroupper retn	mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rcx vzeroupper retn	mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] ecx vzeroupper retn	mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] cx vzeroupper retn
[ph]libcap-git-setcap___wmemset_avx512_unaligned
endbr64 shl rdx CONST vmovd xmm0 esi mov rax rdi vpbroadcastd xmm0 xmm0 vpbroadcastq zmm0 xmm0 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___memset_avx512_unaligned
endbr64 vmovd xmm0 esi mov rax rdi vpbroadcastb xmm0 xmm0 vpbroadcastq zmm0 xmm0	cmp rdx CONST jb JUMP_ADDR_16	cmp rdx CONST ja JUMP_ADDR_10	vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vzeroupper retn	endbr64	vzeroupper mov rcx rdx movzx eax sil mov rdx rdi rep CONST mov rax rdx retn	endbr64 vmovd xmm0 esi mov rax rdi vpbroadcastb xmm0 xmm0 vpbroadcastq zmm0 xmm0 cmp rdx CONST jb JUMP_ADDR_16	cmp rdx CONST ja JUMP_ADDR_9	vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vzeroupper retn	cmp rdx cs:xxx ja JUMP_ADDR_5	cmp rdx CONST ja JUMP_ADDR_13	vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0	vzeroupper retn	lea rcx [CONST_VAR+CONST] vmovdqu64 CONST zmm0 and rcx CONST vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 vmovdqu64 CONST zmm0 add rdx rdi and rdx CONST cmp rcx rdx jz JUMP_ADDR_12	vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm0 add rcx CONST cmp rdx rcx jnz JUMP_ADDR_14	vzeroupper retn	cmp dl CONST jnb JUMP_ADDR_24	cmp dl CONST jnb JUMP_ADDR_25	vmovq rcx xmm0 cmp dl CONST jnb JUMP_ADDR_26	cmp dl CONST jnb JUMP_ADDR_27	cmp dl CONST ja JUMP_ADDR_28	jb JUMP_ADDR_23	mov [CONST_VAR] cl	vzeroupper retn	vmovdqu CONST ymm0 vmovdqu CONST ymm0 vzeroupper retn	vmovdqu [CONST_VAR+rdx+CONST] xmm0 vmovdqu [CONST_VAR] xmm0 vzeroupper retn	mov [CONST_VAR+rdx+CONST] rcx mov [CONST_VAR] rcx vzeroupper retn	mov [CONST_VAR+rdx+CONST] ecx mov [CONST_VAR] ecx vzeroupper retn	mov [CONST_VAR+rdx+CONST] cx mov [CONST_VAR] cx vzeroupper retn
[ph]libcap-git-setcap___strcasecmp_l_nonascii
endbr64 cmp rdi rsi jz JUMP_ADDR_5	mov rcx [rdx+CONST] xor edx edx jmp JUMP_ADDR_3	add rdx CONST test r9b r9b jz JUMP_ADDR_6	movzx eax [CONST_VAR+rdx] movzx r8d [CONST_VAR+rdx] mov r9 rax mov eax [rcx+rax*4] sub eax [rcx+r8*4] jz JUMP_ADDR_2	retn	xor eax eax	retn
[ph]libcap-git-setcap___wmempcpy
endbr64 shl rdx CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_wcrtomb
endbr64 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov [rsp+CONST+var_xxx] esi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rdx rdx lea rax unk_xxx mov [rsp+CONST+var_xxx] CONST cmovz rdx rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rdx test rdi rdi jz JUMP_ADDR_14	mov rax CONST mov [rsp+CONST+var_xxx] rbp mov rax fs:xxx mov rbx [rax] mov eax [rbx+CONST] mov r12 [rbx+CONST] add rax rbp mov [rsp+CONST+var_xxx] rax test r12 r12 jz JUMP_ADDR_15	mov rax [r12+CONST] cmp [rax] CONST mov rbx [rax+CONST] jz JUMP_ADDR_4	ror rbx CONST xor rbx fs:xxx	mov r8d [rsp+CONST+var_xxx] test r8d r8d jnz JUMP_ADDR_10	mov rdi rbx call sub_xxx lea rsi [rsp+CONST+var_xxx] xor r8d r8d xor ecx ecx mov rdi [r12+CONST] push CONST xor edx edx push CONST lea r9 [rsp+CONST+var_xxx] call rbx pop rsi pop rdi test eax CONST jnz JUMP_ADDR_11	mov rax [rsp+CONST+var_xxx] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx mov [rax] CONST	mov rax [rsp+CONST+var_xxx] sub rax rbp	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_18	add rsp CONST pop rbx pop rbp pop r12 retn	lea rax [rsp+CONST+var_xxx] mov rdi rbx mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] xor r8d r8d lea rsi [rsp+CONST+var_xxx] mov rdi [r12+CONST] push CONST push CONST lea rcx [rax+CONST] lea r9 [rsp+CONST+var_xxx] call rbx pop rdx pop rcx test eax CONST jz JUMP_ADDR_7	lea edx [rax+CONST] cmp edx CONST ja JUMP_ADDR_17	cmp eax CONST jz JUMP_ADDR_7	mov rax CONST mov fs:xxx CONST mov rax CONST jmp JUMP_ADDR_8	mov [rsp+CONST+var_xxx] CONST lea rbp [rsp+CONST+var_xxx] jmp JUMP_ADDR_1	lea rax off_xxx lea r12 off_xxx cmp rbx rax jz JUMP_ADDR_2	mov rdi rbx call sub_xxx mov r12 [rbx+CONST] jmp JUMP_ADDR_2	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap___mbsrtowcs
endbr64 lea rax unk_xxx test rcx rcx cmovz rcx rax mov rax CONST mov r8 fs:xxx jmp JUMP_ADDR_1	endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rbx [r8] mov [rsp+CONST+var_xxx] rsi mov rsi rdx mov [rsp+CONST+var_xxx] rdi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax [rbx+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rcx test rax rax jz JUMP_ADDR_32	mov rbp [rax] cmp [rbp+CONST] CONST mov rbx [rbp+CONST] jz JUMP_ADDR_4	ror rbx CONST xor rbx fs:xxx	mov rax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov r15 [rax] mov [rsp+CONST+var_xxx] r15 jz JUMP_ADDR_27	mov rax [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rax+rsi*4] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax test rsi rsi jnz JUMP_ADDR_10	jmp JUMP_ADDR_34	cmp r15 r12 jnz JUMP_ADDR_12	cmp [r12+CONST] CONST jz JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] sub rax rdi sar rax CONST mov rsi rax jz JUMP_ADDR_12	mov rdi r15 call sub_xxx mov rdi rbx lea r12 [r15+rax+CONST] call sub_xxx push CONST mov rdx r13 mov rdi rbp push CONST mov r9 r14 mov rsi [rsp+CONST+var_xxx] xor r8d r8d mov rcx r12 call rbx pop rsi pop rdi mov edx eax mov r15 [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_7	cmp eax CONST jz JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] mov [rax] r15 mov rax rdi sub rax [rsp+CONST+var_xxx] sar rax CONST mov r15 rax test edx CONST jnz JUMP_ADDR_23	mov ecx [CONST_VAR+CONST] test ecx ecx jnz JUMP_ADDR_18	test rax rax jz JUMP_ADDR_36	mov rax [rsp+CONST+var_xxx] mov eax [rax] test eax eax jnz JUMP_ADDR_37	mov rax [rsp+CONST+var_xxx] mov [rax] CONST	sub r15 CONST	lea eax [rdx+CONST] cmp eax CONST setbe al test edx edx setz cl or eax ecx test al al jz JUMP_ADDR_24	cmp edx CONST jbe JUMP_ADDR_25	mov rax CONST mov r15 CONST mov fs:xxx CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_35	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea eax [rdx+CONST] cmp eax CONST setbe al test al al jnz JUMP_ADDR_19	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rax CONST bt rax rdx jnb JUMP_ADDR_21	jmp JUMP_ADDR_20	mov rdi r15 lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] call sub_xxx lea r11 [rsp+CONST+var_xxx] lea r12 [r15+rax+CONST] mov rax [rsp+CONST+var_xxx] xor r15d r15d mov rax [rax] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax nop [rax]	mov rdi rbx mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] r11 call sub_xxx push CONST mov r9 r14 mov rcx r12 push CONST mov rdx r13 mov rsi [rsp+CONST+var_xxx] xor r8d r8d mov rdi rbp call rbx mov rcx [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov edx eax pop r9 pop r10 mov rax rcx sub rax r11 sar rax CONST add r15 rax cmp edx CONST jz JUMP_ADDR_28	test edx CONST jnz JUMP_ADDR_18	mov r8d [rcx+CONST] test r8d r8d jz JUMP_ADDR_17	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rdx off_xxx lea rax off_xxx cmp rbx rdx jz JUMP_ADDR_2	mov rdi rbx mov [rsp+CONST+var_xxx] rsi call sub_xxx mov rax [rbx+CONST] mov rsi [rsp+CONST+var_xxx] jmp JUMP_ADDR_2	xor r15d r15d jmp JUMP_ADDR_21	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	endbr64 test rsi rsi jnz JUMP_ADDR_40	xor rax rax retn	shl rsi CONST add rsi rdi mov r10 rsi and r10 CONST mov r11 rsi pxor xmm0 xmm0 pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 mov rax rdi mov rcx rdi and rcx CONST cmp rcx CONST ja JUMP_ADDR_44	and rax CONST pcmpeqd xmm0 [rax] pcmpeqd xmm1 [rax+CONST] pcmpeqd xmm2 [rax+CONST] pcmpeqd xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax mov rsi r11 sub rsi rax and rax CONST test rsi CONST jz JUMP_ADDR_47	sar rdx cl test rdx rdx jz JUMP_ADDR_50	bsf rax rdx shr rax CONST retn	and rax CONST pcmpeqd xmm0 [rax] pcmpeqd xmm1 [rax+CONST] pcmpeqd xmm2 [rax+CONST] pcmpeqd xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx mov rcx rdi xor rcx rax mov rsi r11 sub rsi rax and rax CONST test rsi CONST jz JUMP_ADDR_47	sar rdx cl test rdx rdx jz JUMP_ADDR_49	bsf rax rdx shr rax CONST retn	bts rdx rsi sar rdx cl test rdx rdx jz JUMP_ADDR_49	bsf rax rdx shr rax CONST retn	pxor xmm1 xmm1 pxor xmm2 xmm2 pxor xmm3 xmm3 nop [rax+CONST]	add rax CONST cmp r10 rax jz JUMP_ADDR_53	movdqa xmm0 [rax] pminud xmm0 [rax+CONST] pminud xmm0 [rax+CONST] pminud xmm0 [rax+CONST] pcmpeqd xmm0 xmm3 pmovmskb edx xmm0 test edx edx jnz JUMP_ADDR_56	jmp JUMP_ADDR_50	cmp r11 rax jz JUMP_ADDR_55	pxor xmm0 xmm0 pcmpeqd xmm0 [rax] pcmpeqd xmm1 [rax+CONST] pcmpeqd xmm2 [rax+CONST] pcmpeqd xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx	bts rdx r11 bsf rdx rdx add rax rdx sub rax rdi shr rax CONST retn	pxor xmm0 xmm0 pcmpeqd xmm0 [rax] pcmpeqd xmm1 [rax+CONST] pcmpeqd xmm2 [rax+CONST] pcmpeqd xmm3 [rax+CONST] pmovmskb esi xmm0 pmovmskb edx xmm1 pmovmskb r8d xmm2 pmovmskb ecx xmm3 shl rdx CONST shl rcx CONST or rdx rsi or rcx r8 shl rcx CONST or rdx rcx bsf rdx rdx add rax rdx sub rax rdi shr rax CONST retn
[ph]libcap-git-setcap___wcsrtombs
endbr64 push r15 push r14 mov r14 rdx push r13 mov r13 rsi push r12 mov r12 rdi push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax unk_xxx test rcx rcx mov [rsp+CONST+var_xxx] CONST cmovz rcx rax mov rax CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rcx mov rax fs:xxx mov rbx [rax] mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_22	mov rbp [rax+CONST] cmp [rbp+CONST] CONST mov rbx [rbp+CONST] jz JUMP_ADDR_3	ror rbx CONST xor rbx fs:xxx	mov rdx [r13+CONST] test r12 r12 jz JUMP_ADDR_17	mov rsi r14 mov rdi rdx mov [rsp+CONST+var_xxx] rdx add r14 r12 call sub_xxx mov rdx [rsp+CONST+var_xxx] mov rdi rbx mov [rsp+CONST+var_xxx] r14 mov [rsp+CONST+var_xxx] r12 lea r15 [rdx+rax*4+CONST] call sub_xxx lea rsi [rsp+CONST+var_xxx] push CONST mov rcx r15 push CONST mov rdx r13 xor r8d r8d mov rdi rbp lea r9 [rsp+CONST+var_xxx] call rbx mov rdx [rsp+CONST+var_xxx] pop rcx pop rsi mov r14 rdx sub r14 r12 test eax CONST jz JUMP_ADDR_12	lea edx [rax+CONST] test eax eax jz JUMP_ADDR_10	cmp edx CONST jbe JUMP_ADDR_8	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	test eax eax jz JUMP_ADDR_10	cmp edx CONST ja JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_24	add rsp CONST mov rax r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rdx+CONST] CONST jnz JUMP_ADDR_5	cmp rdx r12 jz JUMP_ADDR_27	mov rdx [rsp+CONST+var_xxx] mov edx [rdx] test edx edx jnz JUMP_ADDR_26	mov [r13+CONST] CONST jmp JUMP_ADDR_21	mov rax CONST mov r14 CONST mov fs:xxx CONST jmp JUMP_ADDR_10	mov rdi rdx mov [rsp+CONST+var_xxx] rdx xor r14d r14d lea r12 [rsp+CONST+var_xxx] call sub_xxx mov rdx [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] lea r15 [rdx+rax*4+CONST] mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdx mov rax [rax] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax xchg ax ax	mov rdi rbx mov [rsp+CONST+var_xxx] r12 call sub_xxx push CONST xor r8d r8d mov rcx r15 push CONST mov rdx r13 mov r9 [rsp+CONST+var_xxx] mov rdi rbp mov rsi [rsp+CONST+var_xxx] call rbx mov rdx [rsp+CONST+var_xxx] pop rdi pop r8 mov rcx rdx sub rcx r12 add r14 rcx cmp eax CONST jz JUMP_ADDR_18	test eax CONST jnz JUMP_ADDR_5	cmp [rdx+CONST] CONST jnz JUMP_ADDR_25	sub r14 CONST jmp JUMP_ADDR_5	lea rdx off_xxx lea rax off_xxx cmp rbx rdx jz JUMP_ADDR_1	mov rdi rbx call sub_xxx mov rax [rbx+CONST] jmp JUMP_ADDR_1	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___wcsnlen_ifunc
endbr64 mov edx cs:xxx test dh CONST jnz JUMP_ADDR_4	test cs:xxx CONST jz JUMP_ADDR_4	lea rax sub_xxx and dh CONST jnz JUMP_ADDR_5	nop [rax+CONST]	test cs:xxx CONST lea rax sub_xxx lea rdx loc_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap__nl_cleanup_ctype
endbr64 push rbp mov rbp [CONST_VAR+CONST] test rbp rbp jz JUMP_ADDR_2	mov [CONST_VAR+CONST] CONST mov rsi [rbp+CONST] mov [CONST_VAR+CONST] CONST mov rdi [rbp+CONST] call sub_xxx mov rdi [rbp+CONST] mov rsi [rbp+CONST] call sub_xxx mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	pop rbp retn
[ph]libcap-git-setcap___wcsmbs_getfct
endbr64 push rbx xor r8d r8d mov rbx rdx sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea rcx [rsp+CONST] lea rdx [rsp+CONST] call sub_xxx test eax eax jnz JUMP_ADDR_6	mov rsi [rsp+CONST] mov rax [rsp+CONST] cmp rsi CONST ja JUMP_ADDR_5	mov [rbx] rsi	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST pop rbx retn	mov rdi rax call sub_xxx xor eax eax jmp JUMP_ADDR_3	xor eax eax jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap___wcsmbs_load_conv
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	cmp [rbx+CONST] CONST jnz JUMP_ADDR_17	mov esi CONST mov edi CONST call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_25	mov eax [rbx+CONST] mov rsi [rbx+CONST] lea r9 GLOBAL_VAR neg eax mov eax [rbx+CONST] sbb r8 r8 and r8d CONST test eax eax lea rax unk_xxx cmovz r9 rax movsx rax [CONST_VAR] test al al jz JUMP_ADDR_39	mov rdx rsi mov ecx eax xor edi edi	add rdx CONST cmp cl CONST setz cl movzx ecx cl add rdi rcx movzx ecx [rdx] test cl cl jnz JUMP_ADDR_6	sub rdx rsi mov rcx cs:xxx lea rdx [r8+rdx+CONST] and rdx CONST sub rsp rdx lea r13 [rsp+CONST+var_xxx] and r13 CONST mov rdx r13 nop [rax+CONST]	mov eax [rcx+rax*4] mov r10 rdx add rsi CONST add rdx CONST mov [rdx+CONST] al movsx rax [CONST_VAR] test al al jnz JUMP_ADDR_8	cmp rdi CONST jbe JUMP_ADDR_30	mov [rdx] CONST lea r15 [rbp+var_xxx] lea rcx [rbp+var_xxx] xor r8d r8d lea r14 GLOBAL_VAR mov rdx r15 mov rsi r13 mov [rbp+CONST] rcx mov rdi r14 call sub_xxx mov rcx [rbp+CONST] test eax eax jnz JUMP_ADDR_22	mov rsi [rbp+var_xxx] mov rdi [rbp+var_xxx] cmp rsi CONST ja JUMP_ADDR_21	mov [r12+CONST] rsi mov [r12] rdi test rdi rdi jz JUMP_ADDR_23	xor r8d r8d mov rdx r15 mov rsi r14 mov rdi r13 call sub_xxx test eax eax jnz JUMP_ADDR_27	mov rsi [rbp+var_xxx] mov rdi [rbp+var_xxx] cmp rsi CONST ja JUMP_ADDR_26	mov [r12+CONST] rsi mov [r12+CONST] rdi test rdi rdi jz JUMP_ADDR_28	lea rax sub_xxx mov [rbx+CONST] r12 mov [rbx+CONST] rax	cmp cs:xxx CONST jz JUMP_ADDR_19	lea rdi unk_xxx call callfunc_xxx	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_46	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	call sub_xxx	mov [r12] CONST	cmp [r12+CONST] CONST jnz JUMP_ADDR_16	mov rdi r12 call sub_xxx	lea rax off_xxx mov [rbx+CONST] rax jmp JUMP_ADDR_17	call sub_xxx	mov [r12+CONST] CONST	mov rdi [r12] test rdi rdi jz JUMP_ADDR_24	mov rsi [r12+CONST] call sub_xxx jmp JUMP_ADDR_24	mov [rdx] CONST test rdi rdi jz JUMP_ADDR_32	lea rdx [r10+CONST] jmp JUMP_ADDR_10	mov rax rdx	mov [rax+CONST] CONST lea rdx [rax+CONST] test r8 r8 jz JUMP_ADDR_10	mov ecx r8d cmp r8d CONST jnb JUMP_ADDR_40	test r8b CONST jnz JUMP_ADDR_44	test ecx ecx jz JUMP_ADDR_38	movzx eax [r9] mov [rdx] al test cl CONST jnz JUMP_ADDR_45	add rdx r8 jmp JUMP_ADDR_10	lea rax [r8+CONST] and rax CONST sub rsp rax lea rax [rsp+CONST+var_xxx] and rax CONST mov [rax] CONST mov r13 rax jmp JUMP_ADDR_33	mov rcx [r9] add rax CONST and rax CONST mov [rdx] rcx mov ecx r8d mov rsi [r9+rcx+CONST] mov [rdx+rcx+CONST] rsi mov rcx rdx sub rcx rax sub r9 rcx add ecx r8d and ecx CONST cmp ecx CONST jb JUMP_ADDR_38	and ecx CONST xor esi esi	mov edi esi add esi CONST mov r10 [r9+CONST_VAR] mov [rax+CONST_VAR] r10 cmp esi ecx jb JUMP_ADDR_42	jmp JUMP_ADDR_38	mov eax [r9] mov [rdx] eax mov eax [r9+rcx+CONST] mov [rdx+rcx+CONST] eax jmp JUMP_ADDR_38	movzx eax [r9+rcx+CONST] mov [rdx+rcx+CONST] ax jmp JUMP_ADDR_38	call sub_xxx
[ph]libcap-git-setcap___wcsmbs_clone_conv
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax CONST mov rax fs:xxx mov rbp [rax] mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_11	movdqu xmm0 [rax] movups [rbx] xmm0 movdqu xmm1 [rax+CONST] movups [rbx+CONST] xmm1 mov eax fs:xxx test eax eax jnz JUMP_ADDR_13	mov edx CONST cmpxchg cs:xxx edx	mov rdx [rbx] xor r8d r8d cmp [rdx] CONST jz JUMP_ADDR_5	mov eax [rdx+CONST] add eax CONST mov [rdx+CONST] eax seto r8b	mov rdx [rbx+CONST] cmp [rdx] CONST jz JUMP_ADDR_7	mov eax [rdx+CONST] add eax CONST mov [rdx+CONST] eax seto al or r8d eax	mov eax fs:xxx test eax eax jnz JUMP_ADDR_15	sub cs:xxx CONST	test r8b r8b jnz JUMP_ADDR_17	add rsp CONST pop rbx pop rbp retn	lea rdx off_xxx lea rax off_xxx cmp rbp rdx jz JUMP_ADDR_1	mov rdi rbp call sub_xxx mov rax [rbp+CONST] jmp JUMP_ADDR_1	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_9	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_9	lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___wcsmbs_named_conv
endbr64 push r14 xor r8d r8d push r13 push r12 lea r12 GLOBAL_VAR push rbp mov rbp rsi push rbx mov rbx rdi mov rdi r12 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] mov rcx r14 mov rdx r13 call sub_xxx test eax eax jnz JUMP_ADDR_9	mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] cmp rsi CONST ja JUMP_ADDR_8	mov [rbx+CONST] rsi mov [rbx] rdi test rdi rdi jz JUMP_ADDR_14	xor r8d r8d mov rcx r14 mov rdx r13 mov rsi r12 mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_11	mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] cmp rsi CONST ja JUMP_ADDR_10	mov [rbx+CONST] rsi mov [rbx+CONST] rdi test rdi rdi jz JUMP_ADDR_12	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_13	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 retn	call sub_xxx	mov [rbx] CONST mov eax CONST jmp JUMP_ADDR_6	call sub_xxx	mov [rbx+CONST] CONST	mov rsi [rbx+CONST] mov rdi [rbx] call sub_xxx mov eax CONST jmp JUMP_ADDR_6	call sub_xxx	mov eax CONST jmp JUMP_ADDR_6
[ph]libcap-git-setcap___wcsnlen_sse2
endbr64 push rbp mov rdx rsi mov rbp rdi push rbx mov rbx rsi xor esi esi sub rsp CONST call sub_xxx mov rcx rax sub rax rbp sar rax CONST test rcx rcx mov rdx rax mov rax rbx cmovnz rax rdx add rsp CONST pop rbx pop rbp retn
[ph]libcap-git-setcap___wcsnlen_avx2
endbr64 test rsi rsi jz JUMP_ADDR_39	shl rsi CONST mov r8 rsi mov ecx edi mov rdx rdi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_6	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub rsi CONST jbe JUMP_ADDR_38	add rdi CONST and ecx CONST and rdi CONST add rsi rcx sub rsi CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_11	and ecx CONST and rdi CONST vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_9	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax rdi add rax rcx sub rax rdx shr rax CONST vzeroupper retn	neg rcx add rcx CONST sub rsi rcx jbe JUMP_ADDR_38	add rdi CONST sub rsi CONST jbe JUMP_ADDR_19	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_42	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_47	add rdi CONST sub rsi CONST jbe JUMP_ADDR_19	mov rcx rdi and ecx CONST and rdi CONST add rsi rcx nop [rax+rax+CONST] nop [rax+CONST]	vmovdqa ymm1 CONST vmovdqa ymm2 CONST vmovdqa ymm3 CONST vmovdqa ymm4 CONST vpminud ymm5 ymm2 ymm2 vpminud ymm6 ymm4 ymm4 vpminud ymm5 ymm6 ymm6 vpcmpeqd ymm5 ymm0 ymm0 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_43	add rdi CONST sub rsi CONST ja JUMP_ADDR_17	add esi CONST jle JUMP_ADDR_26	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_34	sub esi CONST jle JUMP_ADDR_38	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_36	mov rax r8 shr rax CONST vzeroupper retn	add esi CONST vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub esi CONST jle JUMP_ADDR_38	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_32	mov rax r8 shr rax CONST vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax cmp rsi rax jbe JUMP_ADDR_38	add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	mov rax r8 shr rax CONST vzeroupper retn	xor eax eax retn	tzcnt eax eax add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqd ymm2 ymm0 ymm0 vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_41	vpcmpeqd ymm3 ymm0 ymm0 vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_42	vpcmpeqd ymm4 ymm0 ymm0 vpmovmskb eax ymm4	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn
[ph]libcap-git-setcap_setgroups
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_4	mov [rsp+CONST+var_xxx] rdi mov rdi rsp mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rsi call callfunc_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_6	add rsp CONST retn	mov eax CONST syscall cmp rax CONST jbe JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___waitpid
endbr64 xor ecx ecx jmp JUMP_ADDR_1	endbr64 mov r10 rcx mov eax fs:xxx test eax eax jnz JUMP_ADDR_4	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_6	retn	sub rsp CONST mov [rsp+CONST+CONST_VAR] edx mov [rsp+CONST+CONST_VAR] rsi mov [rsp+CONST+CONST_VAR] edi mov [rsp+CONST+CONST_VAR] rcx call sub_xxx mov r10 [rsp+CONST+CONST_VAR] mov edx [rsp+CONST+CONST_VAR] mov r8d eax mov rsi [rsp+CONST+CONST_VAR] mov edi [rsp+CONST+CONST_VAR] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_7	mov edi r8d mov [rsp+CONST+CONST_VAR] eax call sub_xxx mov eax [rsp+CONST+CONST_VAR] add rsp CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_5
[ph]libcap-git-setcap___fork
endbr64 push r13 push r12 push rbp sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov ebp fs:xxx xor r12d r12d test ebp ebp setnz r12b xor edi edi mov esi r12d call sub_xxx test ebp ebp jz JUMP_ADDR_5	cmp cs:xxx CONST jz JUMP_ADDR_3	mov rdi rsp call callfunc_xxx	call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_5	call sub_xxx	mov rax fs:xxx xor r8d r8d xor edx edx xor esi esi mov edi CONST lea r10 [rax+CONST] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_15	mov r13d eax test eax eax jnz JUMP_ADDR_16	mov rdi fs:xxx mov rax cs:xxx test rax rax jz JUMP_ADDR_9	add [rax] CONST	lea rax [CONST_VAR+CONST] cmp cs:xxx CONST mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] rax jz JUMP_ADDR_11	call callfunc_xxx	test ebp ebp jnz JUMP_ADDR_21	pxor xmm0 xmm0 mov esi r12d mov edi CONST mov cs:xxx CONST movups cs:xxx xmm0 movups cs:xxx xmm0 mov cs:xxx CONST call sub_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_30	add rsp CONST mov eax r13d pop rbp pop r12 pop r13 retn	mov rdx CONST neg eax mov r13d CONST mov fs:xxx eax	test ebp ebp jz JUMP_ADDR_20	cmp cs:xxx CONST jz JUMP_ADDR_19	call sub_xxx	call sub_xxx	mov esi r12d mov edi CONST call sub_xxx jmp JUMP_ADDR_13	cmp cs:xxx CONST jz JUMP_ADDR_23	call sub_xxx	call sub_xxx mov rbp rax jmp JUMP_ADDR_25	mov rdi rbp call sub_xxx mov rbp rax	call sub_xxx cmp rbp rax jz JUMP_ADDR_28	mov rdi rbp call sub_xxx mov eax [rax] test ah CONST jnz JUMP_ADDR_24	mov rdi rbp call sub_xxx mov rax [rax+CONST] mov [rax] CONST mov [rax+CONST] CONST jmp JUMP_ADDR_24	call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_12	mov rdi rsp call callfunc_xxx jmp JUMP_ADDR_12	call sub_xxx
[ph]libcap-git-setcap__exit
endbr64 mov r8 CONST mov esi CONST mov edx CONST jmp JUMP_ADDR_3	mov eax edx syscall cmp rax CONST ja JUMP_ADDR_5	hlt	mov eax esi syscall cmp rax CONST jbe JUMP_ADDR_1	neg eax mov fs:xxx eax jmp JUMP_ADDR_1	neg eax mov fs:xxx eax jmp JUMP_ADDR_2
[ph]libcap-git-setcap___execve
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_setuid
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_4	mov eax edi mov rdi rsp mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call callfunc_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_6	add rsp CONST retn	mov eax CONST syscall cmp rax CONST jbe JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___setgid
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_4	mov eax edi mov rdi rsp mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call callfunc_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_6	add rsp CONST retn	mov eax CONST syscall cmp rax CONST jbe JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___sysconf_check_spec
push rbp mov rbp rsp push r15 lea r15 GLOBAL_VAR push r14 push r13 push r12 mov r12 rdi lea rdi GLOBAL_VAR push rbx mov ebx CONST sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax mov rax CONST mov r13d fs:xxx call sub_xxx test rax rax jz JUMP_ADDR_2	mov rdi rax mov r15 rax call sub_xxx mov rbx rax	mov rdi r12 call sub_xxx mov rdx rbx mov rsi r15 mov r14 rax lea rax [rbx+rax+CONST] and rax CONST sub rsp rax mov rdi rsp call sub_xxx mov edx CONST mov rsi r12 mov rcx CONST mov [rax] rcx lea rdi [rax+CONST] mov [rax+CONST] dx lea rdx [r14+CONST] call sub_xxx lea rsi [rbp+var_xxx] mov rdi rsp call sub_xxx mov rcx CONST cdqe mov fs:xxx r13d sar rax CONST or rax CONST mov rdx [rbp+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	call sub_xxx
[ph]libcap-git-setcap___sysconf
mov eax CONST jmp JUMP_ADDR_7	endbr64 push r13 push r12 push rbp mov ebp edi push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea eax [rbp+CONST] cmp eax CONST jbe JUMP_ADDR_29	cmp ebp CONST jz JUMP_ADDR_38	jg JUMP_ADDR_9	test ebp ebp jz JUMP_ADDR_36	cmp ebp CONST jnz JUMP_ADDR_16	mov esi CONST lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov r12d eax mov eax CONST cmp r12d CONST jnz JUMP_ADDR_40	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_92	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	cmp ebp CONST jle JUMP_ADDR_12	cmp ebp CONST jnz JUMP_ADDR_22	mov eax CONST jmp JUMP_ADDR_7	cmp ebp CONST jg JUMP_ADDR_11	cmp ebp CONST jg JUMP_ADDR_23	cmp ebp CONST jg JUMP_ADDR_27	cmp ebp CONST jg JUMP_ADDR_31	test ebp ebp js JUMP_ADDR_51	cmp ebp CONST ja JUMP_ADDR_51	lea rdx unk_xxx movsxd rax [rdx+rbp*4] add rax rdx jmp rax	mov edi r12d call sub_xxx	cmp ebp CONST jle JUMP_ADDR_14	nop [rax]	cmp ebp CONST jg JUMP_ADDR_25	lea ecx [rbp+CONST] mov eax CONST mov rdx CONST shl rax cl test rax rdx jz JUMP_ADDR_48	mov rax CONST jmp JUMP_ADDR_7	sub ebp CONST cmp ebp CONST ja JUMP_ADDR_51	lea rdx unk_xxx movsxd rax [rdx+rbp*4] add rax rdx jmp rax	sub ebp CONST cmp ebp CONST ja UNK_JUMP_ADDR	lea rdx unk_xxx movsxd rax [rdx+rbp*4] add rax rdx jmp rax	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	add rsp CONST mov edi ebp pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	lea ecx [rbp+CONST] cmp ecx CONST ja JUMP_ADDR_51	mov edx CONST shl rdx cl test edx CONST jnz JUMP_ADDR_24	mov eax CONST test edx CONST jnz JUMP_ADDR_7	test edx CONST jz JUMP_ADDR_51	mov eax CONST jmp JUMP_ADDR_7	mov rsi rsp mov edi CONST call sub_xxx mov r8d eax mov eax CONST test r8d r8d jnz JUMP_ADDR_7	mov rdx [rsp+CONST+var_xxx] mov rcx rdx shr rcx CONST cmp rdx CONST cmova rax rcx jmp JUMP_ADDR_7	mov rsi rsp mov edi CONST call sub_xxx test eax eax jz JUMP_ADDR_91	mov esi CONST lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov r12d eax cmp eax CONST jz JUMP_ADDR_24	lea r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_42	mov rdx CONST cmp fs:xxx CONST jnz JUMP_ADDR_19	mov edx CONST mov rsi r13 mov edi r12d call sub_xxx mov rbx rax cmp rax CONST jz JUMP_ADDR_41	mov edi r12d call sub_xxx test rbx rbx jle JUMP_ADDR_20	mov edx CONST mov rsi rsp mov rdi r13 mov [rsp+rbx+CONST+var_xxx] CONST call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx r13 jz JUMP_ADDR_20	movzx edx [rdx] test dl dl jz JUMP_ADDR_7	cmp dl CONST jnz JUMP_ADDR_20	jmp JUMP_ADDR_7	mov rdx CONST test rax rdx jnz JUMP_ADDR_11	test eax CONST jz JUMP_ADDR_51	mov eax CONST jmp JUMP_ADDR_7	mov rax CONST mov fs:xxx CONST jmp JUMP_ADDR_24	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov rax CONST jmp JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	lea rdi GLOBAL_VAR	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	lea rdi GLOBAL_VAR jmp JUMP_ADDR_62	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	call sub_xxx cdqe jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	call sub_xxx cdqe jmp JUMP_ADDR_7	call sub_xxx cdqe jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	call sub_xxx cdqe jmp JUMP_ADDR_7	call sub_xxx cdqe jmp JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_92	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov rax CONST jmp JUMP_ADDR_7	mov rax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov eax CONST jmp JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_7	call sub_xxx
[ph]libcap-git-setcap_sched_yield
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___get_child_max
endbr64 sub rsp CONST mov edi CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rsi rsp call sub_xxx test eax eax jnz JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_5	add rsp CONST retn	mov rax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap_stat
endbr64 mov rdx rsi xor ecx ecx mov rsi rdi mov edi CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___fstat
endbr64 mov rdx rsi mov ecx CONST lea rsi unk_xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___lstat
endbr64 mov rdx rsi mov ecx CONST mov rsi rdi mov edi CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___GI___fstatat
endbr64 mov r10d ecx mov eax CONST syscall cmp eax CONST ja JUMP_ADDR_2	xor eax eax retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn
[ph]libcap-git-setcap___open64
endbr64 push r12 mov r10d esi mov r12d esi push rbp mov rbp rdi sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax and r10d CONST jnz JUMP_ADDR_6	mov eax esi and eax CONST cmp eax CONST jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_7	mov edx r12d mov rsi rbp mov edi CONST mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_9	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_11	add rsp CONST pop rbp pop r12 retn	lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov r10d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov [rsp+CONST+CONST_VAR] r10d call sub_xxx mov r10d [rsp+CONST+CONST_VAR] mov edx r12d mov rsi rbp mov r8d eax mov edi CONST mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_10	mov edi r8d mov [rsp+CONST+CONST_VAR] eax call sub_xxx mov eax [rsp+CONST+CONST_VAR] jmp JUMP_ADDR_4	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_4	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_8	call sub_xxx
[ph]libcap-git-setcap_read
endbr64 mov eax fs:xxx test eax eax jnz JUMP_ADDR_3	syscall cmp rax CONST ja JUMP_ADDR_5	retn	sub rsp CONST mov [rsp+CONST+CONST_VAR] rdx mov [rsp+CONST+CONST_VAR] rsi mov [rsp+CONST+CONST_VAR] edi call sub_xxx mov rdx [rsp+CONST+CONST_VAR] mov rsi [rsp+CONST+CONST_VAR] mov r8d eax mov edi [rsp+CONST+CONST_VAR] xor eax eax syscall cmp rax CONST ja JUMP_ADDR_6	mov edi r8d mov [rsp+CONST+CONST_VAR] rax call sub_xxx mov rax [rsp+CONST+CONST_VAR] add rsp CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap___libc_write
endbr64 mov eax fs:xxx test eax eax jnz JUMP_ADDR_3	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_5	retn	sub rsp CONST mov [rsp+CONST+CONST_VAR] rdx mov [rsp+CONST+CONST_VAR] rsi mov [rsp+CONST+CONST_VAR] edi call sub_xxx mov rdx [rsp+CONST+CONST_VAR] mov rsi [rsp+CONST+CONST_VAR] mov r8d eax mov edi [rsp+CONST+CONST_VAR] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_6	mov edi r8d mov [rsp+CONST+CONST_VAR] rax call sub_xxx mov rax [rsp+CONST+CONST_VAR] add rsp CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap_lseek64
endbr64 mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn
[ph]libcap-git-setcap_fcntl
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax cmp esi CONST jz JUMP_ADDR_5	cmp esi CONST jz JUMP_ADDR_5	call sub_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_11	add rsp CONST retn	mov eax fs:xxx test eax eax jnz JUMP_ADDR_8	mov eax CONST syscall cmp rax CONST jbe JUMP_ADDR_3	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_3	mov [rsp+CONST+CONST_VAR] esi mov [rsp+CONST+CONST_VAR] edi mov [rsp+CONST+CONST_VAR] rdx call sub_xxx mov rdx [rsp+CONST+CONST_VAR] mov esi [rsp+CONST+CONST_VAR] mov r8d eax mov edi [rsp+CONST+CONST_VAR] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_10	mov edi r8d mov [rsp+CONST+CONST_VAR] eax call sub_xxx mov eax [rsp+CONST+CONST_VAR] jmp JUMP_ADDR_3	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_9	call sub_xxx
[ph]libcap-git-setcap_close
endbr64 mov eax fs:xxx test eax eax jnz JUMP_ADDR_3	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_5	retn	sub rsp CONST mov [rsp+CONST+CONST_VAR] edi call sub_xxx mov edi [rsp+CONST+CONST_VAR] mov r8d eax mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_6	mov edi r8d mov [rsp+CONST+CONST_VAR] eax call sub_xxx mov eax [rsp+CONST+CONST_VAR] add rsp CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap_dup
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_pipe2
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_getcwd
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+CONST_VAR] rsi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rsi rsi jnz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_48	call sub_xxx mov edx CONST cmp eax edx cmovge edx eax movsxd rsi edx	mov rdi rsi mov [rsp+CONST+var_xxx] rsi call sub_xxx mov rsi [rsp+CONST+var_xxx] test rax rax mov [rsp+CONST+CONST_VAR] rax jnz JUMP_ADDR_7	jmp JUMP_ADDR_45	cmp [rsp+CONST+var_xxx] CONST mov rsi [rsp+CONST+CONST_VAR] jz JUMP_ADDR_3	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+CONST_VAR] rax	mov rdi [rsp+CONST+CONST_VAR] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_74	test eax eax jle JUMP_ADDR_40	mov rbx [rsp+CONST+CONST_VAR] cmp [rbx] CONST jz JUMP_ADDR_72	mov rax [rsp+CONST+var_xxx] or rax [rsp+CONST+CONST_VAR] jz JUMP_ADDR_66	cmp [rsp+CONST+CONST_VAR] CONST jz JUMP_ADDR_49	mov rax [rsp+CONST+CONST_VAR] mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+CONST_VAR] mov [rsp+CONST+var_xxx] rax	mov rbp [rsp+CONST+CONST_VAR] add rbp [rsp+CONST+var_xxx] lea r15 [rsp+CONST+var_xxx] lea rdi unk_xxx mov [rbp+CONST] CONST mov rsi r15 call sub_xxx test eax eax js JUMP_ADDR_70	mov rbx [rsp+CONST+var_xxx] mov r14 [rsp+CONST+var_xxx] mov rsi r15 lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] r14 call sub_xxx test eax eax js JUMP_ADDR_70	lea rax [rbp+CONST] mov rcx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rcx cmp rbx rax mov [rsp+CONST+var_xxx] rax setnz dl cmp r14 rcx setnz al or dl al mov [rsp+CONST+var_xxx] dl jz JUMP_ADDR_86	mov rbx CONST xor ebp ebp mov r13d CONST	mov edi r13d xor edx edx lea rsi unk_xxx xor eax eax call sub_xxx mov r13d eax test eax eax js JUMP_ADDR_82	mov rsi r15 mov edi eax call sub_xxx test eax eax jnz JUMP_ADDR_80	test rbp rbp jz JUMP_ADDR_21	mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_78	mov rax [rsp+CONST+var_xxx] mov edi r13d mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_78	movzx r12d [rsp+CONST+var_xxx] nop [rax+CONST]	mov fs:xxx CONST mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_50	cmp [rax+CONST] CONST jz JUMP_ADDR_55	test r12b r12b jz JUMP_ADDR_28	mov rcx [rsp+CONST+var_xxx] cmp [rax] rcx mov rsi [rsp+CONST+var_xxx] setz dl cmp [rsp+CONST+var_xxx] rsi setnz cl or dl cl jz JUMP_ADDR_23	mov r12d edx	lea r14 [rax+CONST] mov ecx CONST mov rdx r15 mov edi r13d mov rsi r14 call sub_xxx test eax eax jnz JUMP_ADDR_23	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_23	mov r9 [rsp+CONST+var_xxx] mov rdi r14 sub r9 [rsp+CONST+CONST_VAR] mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r9 [rsp+CONST+var_xxx] mov r12 rax cmp r9 rax ja JUMP_ADDR_37	cmp [rsp+CONST+CONST_VAR] CONST jnz JUMP_ADDR_93	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 cmp r12 rax mov rdx rax cmovnb rdx r12 add rax rdx mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rax jb JUMP_ADDR_92	mov rdi [rsp+CONST+CONST_VAR] mov rsi rax call sub_xxx mov rdx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_92	add rdx r9 lea rsi [rax+r9] mov [rsp+CONST+CONST_VAR] rax lea rdi [rax+rdx] mov rdx [rsp+CONST+var_xxx] sub rdx r9 call sub_xxx mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax	mov rcx [rsp+CONST+var_xxx] mov rdx r12 mov rsi r14 sub rcx r12 mov rdi rcx call sub_xxx mov rcx rax lea rax [rax+CONST] mov [rcx+CONST] CONST mov rcx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax cmp [rsp+CONST+var_xxx] rcx jnz JUMP_ADDR_39	mov rcx [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rcx jz JUMP_ADDR_84	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_17	jz JUMP_ADDR_10	mov rbx CONST mov eax fs:xxx	cmp eax CONST jz JUMP_ADDR_10	cmp eax CONST jz JUMP_ADDR_68	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_75	mov [rsp+CONST+var_xxx] CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_91	mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax CONST mov fs:xxx CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_46	mov rax CONST mov fs:xxx CONST jmp JUMP_ADDR_45	mov edx fs:xxx test edx edx jnz JUMP_ADDR_61	test r12b r12b jz JUMP_ADDR_59	mov rdi rbp call sub_xxx mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_58	xor r12d r12d cmp [rax+CONST] CONST jnz JUMP_ADDR_28	xchg ax ax	cmp [rax+CONST] CONST jz JUMP_ADDR_23	cmp [rax+CONST] CONST jnz JUMP_ADDR_25	jmp JUMP_ADDR_23	mov edx fs:xxx	test edx edx jnz JUMP_ADDR_61	mov fs:xxx CONST mov edx CONST	mov rdi rbp mov [rsp+CONST+var_xxx] edx call sub_xxx mov edx [rsp+CONST+var_xxx]	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_76	mov fs:xxx edx cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_45	cmp [rsp+CONST+CONST_VAR] CONST jz JUMP_ADDR_45	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_45	mov rdi [rsp+CONST+CONST_VAR] call sub_xxx mov edi CONST call sub_xxx mov [rsp+CONST+CONST_VAR] rax test rax rax jz JUMP_ADDR_45	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_13	mov rax [rsp+CONST+CONST_VAR] or rax [rsp+CONST+var_xxx] jnz JUMP_ADDR_44	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rbx CONST	mov edx fs:xxx jmp JUMP_ADDR_62	mov rbx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+CONST_VAR] or rcx rbx mov [rsp+CONST+var_xxx] rbx jz JUMP_ADDR_77	mov rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+CONST_VAR] test rax rax cmovnz rbx rax mov [rsp+CONST+var_xxx] rbx jmp JUMP_ADDR_46	mov rbx CONST neg eax mov fs:xxx eax jmp JUMP_ADDR_42	mov rdi [rsp+CONST+CONST_VAR] call sub_xxx mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_46	mov rdi [rsp+CONST+CONST_VAR] mov [rsp+CONST+var_xxx] edx call sub_xxx mov edx [rsp+CONST+var_xxx] jmp JUMP_ADDR_63	mov rdi [rsp+CONST+CONST_VAR] movsxd rsi eax call sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_73	mov edx fs:xxx	mov edi r13d mov [rsp+CONST+var_xxx] edx call sub_xxx mov edx [rsp+CONST+var_xxx] jmp JUMP_ADDR_62	mov edx fs:xxx test rbp rbp jz JUMP_ADDR_79	mov rdi rbp mov [rsp+CONST+var_xxx] edx call sub_xxx mov edx [rsp+CONST+var_xxx] jmp JUMP_ADDR_79	mov edx fs:xxx test rbp rbp jz JUMP_ADDR_62	jmp JUMP_ADDR_61	mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_71	mov rbp [rsp+CONST+CONST_VAR] add rbp [rsp+CONST+var_xxx]	mov rax [rsp+CONST+CONST_VAR] mov rbx [rsp+CONST+var_xxx] lea rax [rax+rbx+CONST] cmp [rsp+CONST+var_xxx] rax jz JUMP_ADDR_90	mov rsi [rsp+CONST+var_xxx] mov rbx [rsp+CONST+CONST_VAR] sub rbp rsi mov rdi rbx mov rdx rbp call sub_xxx cmp [rsp+CONST+CONST_VAR] CONST jnz JUMP_ADDR_73	mov [rsp+CONST+var_xxx] rbx cmp rbp [rsp+CONST+var_xxx] jnb JUMP_ADDR_46	mov rdi [rsp+CONST+CONST_VAR] mov rsi rbp call sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_73	mov rax [rsp+CONST+var_xxx] mov [rax+CONST] CONST sub rax CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_87	call sub_xxx	mov fs:xxx CONST mov edx CONST jmp JUMP_ADDR_61	mov fs:xxx CONST mov edx CONST jmp JUMP_ADDR_61
[ph]libcap-git-setcap___close_nocancel
endbr64 mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn
[ph]libcap-git-setcap___fcntl64_nocancel
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax cmp esi CONST jz JUMP_ADDR_4	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_7	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST retn	lea rdx [rsp+CONST+CONST_VAR] mov esi CONST mov eax CONST syscall cmp eax CONST ja JUMP_ADDR_7	cmp [rsp+CONST+CONST_VAR] CONST mov eax [rsp+CONST+CONST_VAR+CONST] jnz JUMP_ADDR_2	neg eax jmp JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___fcntl64_nocancel_adjusted
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp esi CONST jz JUMP_ADDR_4	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_7	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST retn	mov rdx rsp mov esi CONST mov eax CONST syscall cmp eax CONST ja JUMP_ADDR_7	cmp [rsp+CONST+var_xxx] CONST mov eax [rsp+CONST+var_xxx] jnz JUMP_ADDR_2	neg eax jmp JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___open64_nocancel
endbr64 sub rsp CONST mov r10d esi mov r9 rdi mov r8d esi mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax and r10d CONST jnz JUMP_ADDR_5	mov eax esi and eax CONST cmp eax CONST jz JUMP_ADDR_5	mov edx r8d mov rsi r9 mov edi CONST mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_6	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST retn	lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov r10d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap___read_nocancel
endbr64 xor eax eax syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn
[ph]libcap-git-setcap___write_nocancel
endbr64 mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn
[ph]libcap-git-setcap___getrlimit64
endbr64 mov r10 rsi xor edx edx mov esi edi mov eax CONST xor edi edi syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn
[ph]libcap-git-setcap___sbrk
endbr64 push r12 push rbx mov rbx rdi sub rsp CONST mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_10	test rbx rbx jz JUMP_ADDR_6	jle JUMP_ADDR_7	add rbx r12 mov rdi rbx jnb JUMP_ADDR_8	mov rax CONST mov fs:xxx CONST	mov r12 CONST	add rsp CONST mov rax r12 pop rbx pop r12 retn	mov rax rbx lea rdi [r12+rbx] neg rax cmp rax r12 ja JUMP_ADDR_4	call sub_xxx test eax eax js JUMP_ADDR_5	add rsp CONST mov rax r12 pop rbx pop r12 retn	xor edi edi call sub_xxx mov r12 cs:xxx test eax eax jns JUMP_ADDR_1	jmp JUMP_ADDR_5
[ph]libcap-git-setcap___getpagesize
endbr64 mov rax cs:xxx test rax rax jz JUMP_ADDR_2	retn	push rax lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_getdtablesize
endbr64 sub rsp CONST mov edi CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rsi rsp call sub_xxx test eax eax mov eax CONST cmovns eax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_2	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap_chroot
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_syscall
endbr64 mov rax rdi mov rdi rsi mov rsi rdx mov rdx rcx mov r10 r8 mov r8 r9 mov r9 [rsp+arg_xxx] syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_mmap64
endbr64 test r9d CONST jnz JUMP_ADDR_4	push rbp mov rbp rdi push rbx mov ebx ecx test rdi rdi jz JUMP_ADDR_5	mov r10d ebx mov rdi rbp mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_9	pop rbx pop rbp retn	mov rax CONST mov fs:xxx CONST mov rax CONST retn	test dl CONST jz JUMP_ADDR_2	test cs:xxx CONST jz JUMP_ADDR_2	mov r10d ecx xor edi edi mov eax CONST or r10d CONST syscall mov rdi rax cmp rax CONST jbe JUMP_ADDR_3	mov rax CONST neg edi mov fs:xxx edi jmp JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap___munmap
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_mprotect
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___madvise
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_trecurse
push r13 mov r13d edx push r12 mov r12 rsi push rbp mov rbp rdi test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_2	cmp [CONST_VAR+CONST] CONST mov esi CONST jz JUMP_ADDR_5	mov rdi rbp xor esi esi call r12 mov rdi [rbp+CONST] and rdi CONST jnz JUMP_ADDR_6	mov rdi rbp mov edx r13d mov esi CONST call r12 mov rdi [rbp+CONST] test rdi rdi jnz JUMP_ADDR_7	mov edx r13d mov esi CONST	mov rdi rbp mov rax r12 pop rbp pop r12 pop r13 jmp rax	lea edx [r13+CONST] mov rsi r12 call sub_xxx jmp JUMP_ADDR_3	lea edx [r13+CONST] mov rsi r12 call sub_xxx jmp JUMP_ADDR_4
[ph]libcap-git-setcap_trecurse_r
push r13 mov r13 rdx push r12 mov r12 rsi push rbp mov rbp rdi test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_2	cmp [CONST_VAR+CONST] CONST mov esi CONST jz JUMP_ADDR_5	mov rdi rbp xor esi esi call r12 mov rdi [rbp+CONST] and rdi CONST jnz JUMP_ADDR_6	mov rdi rbp mov rdx r13 mov esi CONST call r12 mov rdi [rbp+CONST] test rdi rdi jnz JUMP_ADDR_7	mov rdx r13 mov esi CONST	mov rdi rbp mov rax r12 pop rbp pop r12 pop r13 jmp rax	mov rdx r13 mov rsi r12 call sub_xxx jmp JUMP_ADDR_3	mov rdx r13 mov rsi r12 call sub_xxx jmp JUMP_ADDR_4
[ph]libcap-git-setcap_tdestroy_recurse
push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov rdi [CONST_VAR+CONST] and rdi CONST jnz JUMP_ADDR_3	mov rdi [rbp+CONST] test rdi rdi jnz JUMP_ADDR_4	mov rdi [rbp+CONST] call rbx add rsp CONST mov rdi rbp pop rbx pop rbp jmp UNK_JUMP_ADDR	call sub_xxx mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_2	mov rsi rbx call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap_maybe_split_for_insert.isra.0
mov rax rdi mov r10 rdx mov r11d ecx and rax CONST mov rdx [rax+CONST] mov rcx [rax+CONST] mov rdi rdx and rdi CONST cmp r9d CONST jz JUMP_ADDR_6	test rcx rcx jz JUMP_ADDR_11	test rdi rdi jz JUMP_ADDR_11	test [rcx+CONST] CONST jz JUMP_ADDR_11	test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_12	retn	or rdx CONST mov [rax+CONST] rdx test rcx rcx jnz JUMP_ADDR_13	test rdi rdi jz JUMP_ADDR_9	and [CONST_VAR+CONST] CONST	test rsi rsi jz JUMP_ADDR_11	mov rdx [CONST_VAR] and rdx CONST mov rsi [rdx+CONST] test sil CONST jnz JUMP_ADDR_14	retn	or rdx CONST mov [rax+CONST] rdx	and [rcx+CONST] CONST jmp JUMP_ADDR_7	push rbp push rbx mov rbx [r10] mov r9 rbx and r9 CONST test r11d r11d setnle bpl test r8d r8d setnle r8b cmp bpl r8b jz JUMP_ADDR_19	or rsi CONST mov [rdx+CONST] rsi mov rsi rcx or [r9+CONST] CONST and esi CONST and [rax+CONST] CONST test r11d r11d js JUMP_ADDR_22	mov [rdx+CONST] rdi or rsi r9 mov [rax+CONST] rdx mov rdx [r9+CONST] and edx CONST or rdx rcx mov [r9+CONST] rdx mov [rax+CONST] rsi	mov rdx [r10] and edx CONST or rax rdx mov [r10] rax	pop rbx pop rbp retn	and ebx CONST and rsi CONST or rbx rdx mov [r10] rbx mov [rdx+CONST] rsi or [r9+CONST] CONST test r11d r11d js JUMP_ADDR_21	mov rax [rdx+CONST] mov rcx rax and eax CONST and rcx CONST or rax r9 mov [r9+CONST] rcx mov [rdx+CONST] rax jmp JUMP_ADDR_18	mov rax [rdx+CONST] or rax CONST mov [r9+CONST] rax mov [rdx+CONST] r9 jmp JUMP_ADDR_18	mov r8 [rdx+CONST] or rsi rdx and r8d CONST or rcx r8 mov [rdx+CONST] rcx mov [rax+CONST] rsi mov [r9+CONST] rdi mov [rax+CONST] r9 jmp JUMP_ADDR_17
[ph]libcap-git-setcap___tsearch
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdx test rsi rsi jz JUMP_ADDR_16	mov rbx [CONST_VAR] mov r15 rdi mov rbp rsi mov rax rbx and rax CONST jnz JUMP_ADDR_13	xor r8d r8d xor r13d r13d xor edx edx xor r12d r12d jmp JUMP_ADDR_5	mov rax [rbx+CONST] lea r11 [rbx+CONST] test rax CONST jz JUMP_ADDR_9	mov rbx [r11] mov r8d r13d mov rdx r12 mov r13d r14d mov r12 rbp mov rbp r11	and rbx CONST jz JUMP_ADDR_14	mov rsi [rbx] mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov rdi r15 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rbx call rax mov r14d eax test eax eax jz JUMP_ADDR_12	mov r8d [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] xor r9d r9d mov ecx r13d mov rdi [rbp+CONST] mov rsi r12 call sub_xxx test r14d r14d jns JUMP_ADDR_3	mov rax [rbx+CONST] lea r11 [rbx+CONST] test rax CONST jnz JUMP_ADDR_4	mov edi CONST mov [rsp+CONST+var_xxx] r11 call sub_xxx mov [rsp+CONST+var_xxx] rax mov rcx rax test rax rax jz JUMP_ADDR_16	mov r11 [rsp+CONST+var_xxx] mov rax [r11] and eax CONST or rax rcx mov [r11] rax mov [rcx] r15 mov [rcx+CONST] CONST mov [rcx+CONST] CONST cmp rbp r11 jz JUMP_ADDR_12	mov rdi [r11] mov r9d CONST mov r8d r13d mov ecx r14d mov rdx r12 mov rsi rbp call sub_xxx	mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	and [rax+CONST] CONST jmp JUMP_ADDR_2	mov edi CONST call sub_xxx mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_16	mov rax [rbp+CONST] mov rcx [rsp+CONST+var_xxx] and eax CONST or rax rcx mov [rbp+CONST] rax mov [rcx] r15 mov [rcx+CONST] CONST mov [rcx+CONST] CONST jmp JUMP_ADDR_12	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_12
[ph]libcap-git-setcap___tfind
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST test rsi rsi jz JUMP_ADDR_6	mov rbx [CONST_VAR] mov rbp rdi mov r12 rdx and rbx CONST jnz JUMP_ADDR_4	jmp JUMP_ADDR_6	lea rdx [rbx+CONST] add rbx CONST test eax eax cmovs rbx rdx mov rbx [rbx] and rbx CONST jz JUMP_ADDR_6	mov rsi [rbx] mov r13 rbx mov rdi rbp call r12 test eax eax jnz JUMP_ADDR_3	add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 retn	add rsp CONST xor r13d r13d pop rbx mov rax r13 pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___tdelete
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rdx lea r9 [rsp+CONST+var_xxx] and r9 CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax test rsi rsi jz JUMP_ADDR_8	mov r12 [CONST_VAR] mov r13 rsi and r12 CONST jz JUMP_ADDR_8	mov [rbp+var_xxx] CONST mov rax r12 xor r14d r14d jmp JUMP_ADDR_4	mov rax [r12+CONST] lea r13 [r12+CONST] add r14 CONST test rax rax jz JUMP_ADDR_8	mov rsi [rax] mov rdi [rbp+var_xxx] mov [rbp+var_xxx] r9 mov r15d r14d mov rax [rbp+var_xxx] call rax mov r9 [rbp+var_xxx] test eax eax mov ebx eax jz JUMP_ADDR_12	lea r12 ds:xxx cmp [rbp+var_xxx] r14d jz JUMP_ADDR_11	mov [r9+r12] r13 mov r12 [r13+CONST] and r12 CONST test ebx ebx jns JUMP_ADDR_3	mov rax [r12+CONST] lea r13 [r12+CONST] add r14 CONST and rax CONST test rax rax jnz JUMP_ADDR_4	xor r12d r12d	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_69	lea rsp [rbp+CONST] mov rax r12 pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	add [rbp+var_xxx] CONST movsxd rax [rbp+var_xxx] mov rsi r9 mov rdx r12 lea rax ds:xxx and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST call sub_xxx mov r9 rax jmp JUMP_ADDR_6	mov rcx [r13+CONST] mov r8 rcx and r8 CONST mov rax [r8+CONST] and rax CONST cmp [r8+CONST] CONST jz JUMP_ADDR_61	test rax rax jz JUMP_ADDR_19	movsxd rdx r14d lea rbx [r8+CONST] mov r14 r13 shl rdx CONST jmp JUMP_ADDR_17	mov rdi [rbx] mov [r9+rdx] r14 add r15d CONST add rdx CONST and rdi CONST test [CONST_VAR+CONST] CONST jz JUMP_ADDR_20	mov r14 rbx lea rbx [CONST_VAR+CONST]	cmp [rbp+var_xxx] r15d jnz JUMP_ADDR_15	add [rbp+var_xxx] CONST movsxd rax [rbp+var_xxx] mov rsi r9 mov [rbp+var_xxx] r8 lea rax ds:xxx mov [rbp+var_xxx] rcx and rax CONST mov [rbp+var_xxx] rdx sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST call sub_xxx mov r8 [rbp+var_xxx] mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov r9 rax jmp JUMP_ADDR_15	mov rdi r8 nop [rax+rax+CONST]	mov rax [CONST_VAR+CONST]	mov rdx rax test r15d r15d jnz JUMP_ADDR_55	and ecx CONST or rcx rax mov [r13+CONST] rcx	cmp r8 rdi jz JUMP_ADDR_25	mov rcx [CONST_VAR] mov [r8] rcx	test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_36	test r15d r15d jz JUMP_ADDR_67	test rdx rdx jz JUMP_ADDR_29	mov rcx [rdx+CONST] test cl CONST jnz JUMP_ADDR_60	movsxd rbx r15d mov r11 [r9+rbx*8+CONST] mov r8 [r11] mov rax r8 and rax CONST mov rcx [rax+CONST] and rcx CONST mov rsi rcx cmp rcx rdx jz JUMP_ADDR_43	mov rdx [rcx+CONST] test dl CONST jz JUMP_ADDR_32	mov r13 [rcx+CONST] and rdx CONST and r8d CONST add r15d CONST mov [rcx+CONST] rdx or r8 rsi mov rdx r13 or rdx CONST mov [rax+CONST] rdx mov [rcx+CONST] rax mov [r11] r8 lea r11 [CONST_VAR+CONST] mov rsi r13 and rsi CONST mov [r9+rbx*8] r11 mov rdx [CONST_VAR+CONST]	mov rcx [CONST_VAR+CONST] mov rbx rdx test rcx rcx jz JUMP_ADDR_37	mov r8 [rcx+CONST] test r8b CONST jz JUMP_ADDR_37	and rbx CONST jnz JUMP_ADDR_57	mov rdx r8 and r8 CONST or rdx CONST test [rax+CONST] CONST cmovnz r8 rdx mov [rcx+CONST] r8 mov rdx [rax+CONST] and edx CONST or rdx [rcx+CONST] mov [rax+CONST] rdx mov rdx [rcx+CONST] mov r8 rdx and edx CONST or rdx rsi and r8 CONST mov [CONST_VAR+CONST] r8 mov [rcx+CONST] rdx mov rdx [r11] mov [rcx+CONST] rax and edx CONST or rdx rcx mov [r11] rdx and [rax+CONST] CONST	call sub_xxx jmp JUMP_ADDR_9	and rbx CONST jz JUMP_ADDR_40	test [rbx+CONST] CONST jz JUMP_ADDR_40	or rdx CONST test [rax+CONST] CONST cmovnz rbx rdx mov [CONST_VAR+CONST] rbx and [rax+CONST] CONST mov rdx [CONST_VAR+CONST] and rdx CONST and [rdx+CONST] CONST mov rdx [rax+CONST] and edx CONST or rdx rcx mov [rax+CONST] rdx mov [CONST_VAR+CONST] rax mov rax [r11] and eax CONST or rax rsi mov [r11] rax jmp JUMP_ADDR_36	or rdx CONST mov [CONST_VAR+CONST] rdx	sub r15d CONST jz JUMP_ADDR_59	mov rdx rax jmp JUMP_ADDR_27	mov rdx [rax+CONST] mov rcx [rdx+CONST] test cl CONST jz JUMP_ADDR_45	and rcx CONST and r8d CONST add r15d CONST mov [rdx+CONST] rcx or r8 rdx or [rax+CONST] CONST mov rcx [rdx+CONST] mov rsi rcx and ecx CONST and rsi CONST or rcx rax mov [rax+CONST] rsi mov [rdx+CONST] rcx mov rcx [CONST_VAR+CONST] mov [r11] r8 lea r11 [rdx+CONST] mov rdx rsi mov [r9+rbx*8] r11	mov rsi rcx and rsi CONST jz JUMP_ADDR_51	mov r8 [CONST_VAR+CONST] test r8b CONST jz JUMP_ADDR_51	mov rbx [rdx+CONST] test rbx rbx jnz JUMP_ADDR_64	mov rcx r8 test [rax+CONST] CONST jz JUMP_ADDR_63	or rcx CONST and r8 CONST	mov [CONST_VAR+CONST] rcx mov rcx [rdx+CONST] mov [rax+CONST] r8 and ecx CONST or rcx [CONST_VAR+CONST] mov [rdx+CONST] rcx mov [CONST_VAR+CONST] rdx mov rdx [CONST_VAR+CONST] and edx CONST or rdx rax mov [CONST_VAR+CONST] rdx mov rdx [r11] and edx CONST or rdx rsi mov [r11] rdx and [rax+CONST] CONST jmp JUMP_ADDR_36	mov r8 [rdx+CONST] test r8 r8 jz JUMP_ADDR_54	mov rbx r8 test [r8+CONST] CONST jz JUMP_ADDR_54	or rcx CONST test [rax+CONST] CONST cmovnz rsi rcx mov [rdx+CONST] rsi and [rax+CONST] CONST and [rbx+CONST] CONST mov rcx [rdx+CONST] mov rsi rcx and ecx CONST and rsi CONST or rcx rax mov [rax+CONST] rsi mov rax [r11] mov [rdx+CONST] rcx and eax CONST or rdx rax mov [r11] rdx jmp JUMP_ADDR_36	or rcx CONST mov [rdx+CONST] rcx jmp JUMP_ADDR_41	movsxd rcx r15d mov rcx [r9+rcx*8+CONST] mov rcx [rcx] and rcx CONST cmp rdi [rcx+CONST] jz JUMP_ADDR_66	mov rsi [rcx+CONST] and esi CONST or rsi rax mov [rcx+CONST] rsi jmp JUMP_ADDR_23	test [rbx+CONST] CONST jz JUMP_ADDR_35	jmp JUMP_ADDR_39	mov rcx [rax+CONST] mov rdx rax	and rcx CONST mov [rdx+CONST] rcx jmp JUMP_ADDR_36	test rax rax jz JUMP_ADDR_19	mov rdi r8 jmp JUMP_ADDR_21	and rcx CONST mov r8 rcx jmp JUMP_ADDR_50	test [rbx+CONST] CONST jz JUMP_ADDR_48	jmp JUMP_ADDR_53	mov [rcx+CONST] rax jmp JUMP_ADDR_23	test rax rax jz JUMP_ADDR_36	mov rcx [rax+CONST] jmp JUMP_ADDR_60	call sub_xxx
[ph]libcap-git-setcap_twalk
endbr64 test rdi rdi jz JUMP_ADDR_2	test rsi rsi jnz JUMP_ADDR_3	retn	xor edx edx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___twalk_r
endbr64 test rdi rdi jz JUMP_ADDR_2	test rsi rsi jnz JUMP_ADDR_3	retn	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_tdestroy
endbr64 test rdi rdi jz JUMP_ADDR_2	jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap_next_line
push r15 push r14 push r13 mov r13 rcx push r12 mov r12 rsi mov esi CONST push rbp mov rbp rdx push rbx sub rsp CONST mov rbx [rcx] mov r15 [rdx] mov [rsp+CONST+var_xxx] edi mov r14 rbx mov rdi r15 mov [rsp+CONST+var_xxx] r8 sub r14 r15 mov rdx r14 call sub_xxx test rax rax jz JUMP_ADDR_5	lea rbx [rax+CONST]	mov [rbp+CONST] rbx mov rax [r13+CONST] cmp rax rbx jb JUMP_ADDR_16	cmp rax r15 jz JUMP_ADDR_14	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp r15 r12 jz JUMP_ADDR_2	cmp rbx [rsp+CONST+var_xxx] jnz JUMP_ADDR_2	mov rdx r14 mov rsi r15 mov rdi r12 call sub_xxx mov rax [r13+CONST] mov rdx rbx mov edi [rsp+CONST+var_xxx] add rax r12 sub rax [rbp+CONST] mov [r13+CONST] rax mov [rbp+CONST] r12 mov rsi [r13+CONST] sub rdx rsi call sub_xxx mov rbx rax test rax rax js JUMP_ADDR_14	add rbx [r13+CONST] mov esi CONST mov [r13+CONST] rbx mov r15 [rbp+CONST] mov rdx rbx sub rdx r15 mov rdi r15 call sub_xxx test rax rax jnz JUMP_ADDR_1	mov rcx [rsp+CONST+var_xxx] mov rax rcx sub rax r12 lea rdx [rax+rax*2] test rdx rdx lea rax [rdx+CONST] cmovns rax rdx sar rax CONST add r12 rax sub rcx r12 mov r15 rcx jmp JUMP_ADDR_12	mov [r13+CONST] r12 mov edi [rsp+CONST+var_xxx] mov rdx r15 mov rsi r12 call sub_xxx mov rbx rax test rax rax js JUMP_ADDR_14	mov r14 [r13+CONST] mov rdx rax mov esi CONST mov rdi r14 call sub_xxx mov [r14] CONST add rbx [r13+CONST] mov [r13+CONST] rbx test rax rax jnz JUMP_ADDR_15	cmp rbx [rsp+CONST+var_xxx] jz JUMP_ADDR_10	mov r15 [rbp+CONST] jmp JUMP_ADDR_2	xor r15d r15d jmp JUMP_ADDR_4	mov r15 [rbp+CONST] jmp JUMP_ADDR_1	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_get_nprocs
endbr64 push rbp mov edi CONST mov rbp rsp push r15 push r14 lea r14 [rbp+CONST_VAR] push r13 mov rsi r14 push r12 push rbx sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov rax [rbp+CONST_VAR] mov [rbp+var_xxx] rax mov rcx rax mov rax cs:xxx cmp rax rcx jz JUMP_ADDR_28	mov edi CONST call sub_xxx lea rdi GLOBAL_VAR mov esi CONST cmp eax CONST sbb rbx rbx and rbx CONST lea rax [rbx+CONST] add rbx CONST sub rsp rax xor eax eax lea r13 [rsp+CONST+var_xxx] and r13 CONST add rbx r13 mov [rbp+var_xxx] r13 mov r12 r13 mov [rbp+var_xxx] rbx mov [rbp+var_xxx] rbx call sub_xxx mov [rbp+CONST] eax mov edi eax cmp eax CONST jz JUMP_ADDR_9	lea r15 [rbp+var_xxx] lea r13 [rbp+var_xxx] mov r8 rbx mov rsi r12 mov rdx r15 mov rcx r13 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_19	xor r12d r12d nop [rax+CONST]	mov rsi r14 mov edx CONST mov rdi r15 call sub_xxx mov rsi [rbp+CONST_VAR] mov r13 rax cmp rsi r15 jz JUMP_ADDR_19	cmp [CONST_VAR] CONST jz JUMP_ADDR_17	lea edx [r12+CONST] sub edx r13d lea r13d [rdx+rax] mov rax [rbp+var_xxx] mov r12d r13d cmp rsi rax jb JUMP_ADDR_20	mov edi [rbp+CONST] call sub_xxx test r13d r13d jg JUMP_ADDR_14	nop [rax+rax+CONST]	mov esi CONST lea rdi GLOBAL_VAR xor eax eax mov [rbp+var_xxx] rbx mov [rbp+var_xxx] rbx call sub_xxx mov r14d eax cmp eax CONST jz JUMP_ADDR_30	xor r12d r12d lea r13 [rbp+var_xxx] lea r15 [rbp+var_xxx] nop [rax+rax+CONST]	mov rsi [rbp+var_xxx] mov r8 rbx mov rcx r13 mov rdx r15 mov edi r14d call sub_xxx test rax rax jz JUMP_ADDR_13	cmp [rax] CONST jz JUMP_ADDR_25	mov edi r14d call sub_xxx	mov cs:xxx r12d mov rax [rbp+var_xxx] mov cs:xxx rax	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_35	lea rsp [rbp+CONST] mov eax r12d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	lea r15 [CONST_VAR+CONST] mov edx CONST mov rsi r14 mov rdi r15 call sub_xxx mov rsi [rbp+CONST_VAR] cmp rsi r15 jnz JUMP_ADDR_6	nop [rax+CONST]	mov edi [rbp+CONST] call sub_xxx jmp JUMP_ADDR_9	cmp [CONST_VAR] CONST mov r15 rsi jz JUMP_ADDR_23	cmp [r15] CONST jnz JUMP_ADDR_4	jmp JUMP_ADDR_7	add r15 CONST cmp rax r15 ja JUMP_ADDR_21	jmp JUMP_ADDR_7	cmp [rax+CONST] CONST jnz JUMP_ADDR_13	cmp [rax+CONST] CONST jnz JUMP_ADDR_13	movsx eax [rax+CONST] sub eax CONST cmp eax CONST adc r12d CONST jmp JUMP_ADDR_11	mov r12d cs:xxx test r12d r12d js JUMP_ADDR_1	jmp JUMP_ADDR_15	mov esi CONST lea rdi GLOBAL_VAR xor eax eax mov r12d CONST call sub_xxx mov r14d eax cmp eax CONST jz JUMP_ADDR_14	xor r12d r12d lea r13 [rbp+var_xxx] lea r15 [rbp+var_xxx] jmp JUMP_ADDR_33	mov edx CONST lea rsi GLOBAL_VAR call sub_xxx cmp eax CONST adc r12d CONST	mov rsi [rbp+var_xxx] mov edi r14d mov r8 rbx mov rcx r13 mov rdx r15 call sub_xxx mov rdi rax test rax rax jnz JUMP_ADDR_32	jmp JUMP_ADDR_13	call sub_xxx
[ph]libcap-git-setcap_get_nprocs_conf
endbr64 push r13 lea rdi GLOBAL_VAR push r12 xor r12d r12d push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov r13 rsp call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_13	nop [rax+CONST]	mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_11	cmp [rax+CONST] CONST jnz JUMP_ADDR_2	cmp [rax+CONST] CONST jnz JUMP_ADDR_2	cmp [rax+CONST] CONST jnz JUMP_ADDR_2	cmp [rax+CONST] CONST jnz JUMP_ADDR_2	lea rbx [rax+CONST] mov edx CONST mov rsi r13 mov rdi rbx call sub_xxx cmp rax CONST jz JUMP_ADDR_2	mov rax [rsp+CONST+var_xxx] cmp rbx rax jz JUMP_ADDR_2	cmp [rax] CONST mov rdi rbp adc r12d CONST call sub_xxx test rax rax jnz JUMP_ADDR_3	nop [rax+CONST]	mov rdi rbp call sub_xxx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_15	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 retn	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_15	add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	call sub_xxx
[ph]libcap-git-setcap___get_phys_pages
endbr64 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi rsp call sub_xxx mov ebx [rsp+CONST+var_xxx] mov rbp [rsp+CONST+var_xxx] call sub_xxx movsxd rdx eax cmp ebx CONST ja JUMP_ADDR_3	jmp JUMP_ADDR_4	shr ebx CONST shr rdx CONST cmp ebx CONST jbe JUMP_ADDR_4	cmp rdx CONST ja JUMP_ADDR_2	mov eax ebx imul rax rbp cmp rdx CONST jbe JUMP_ADDR_7	nop [rax+CONST]	shr rdx CONST shr rax CONST cmp rdx CONST jnz JUMP_ADDR_6	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp retn	call sub_xxx
[ph]libcap-git-setcap___get_avphys_pages
endbr64 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi rsp call sub_xxx mov ebx [rsp+CONST+var_xxx] mov rbp [rsp+CONST+var_xxx] call sub_xxx movsxd rdx eax cmp ebx CONST ja JUMP_ADDR_3	jmp JUMP_ADDR_4	shr ebx CONST shr rdx CONST cmp ebx CONST jbe JUMP_ADDR_4	cmp rdx CONST ja JUMP_ADDR_2	mov eax ebx imul rax rbp cmp rdx CONST jbe JUMP_ADDR_7	nop [rax+CONST]	shr rdx CONST shr rax CONST cmp rdx CONST jnz JUMP_ADDR_6	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp retn	call sub_xxx
[ph]libcap-git-setcap___getclktck
endbr64 mov eax cs:xxx mov edx CONST test eax eax cmovz eax edx retn
[ph]libcap-git-setcap_fgetxattr
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_fremovexattr
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_fsetxattr
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_getxattr
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_removexattr
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_setxattr
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___init_misc
endbr64 test rsi rsi jz JUMP_ADDR_4	push rbp push rbx mov rbx rsi sub rsp CONST mov rbp [CONST_VAR] test rbp rbp jz JUMP_ADDR_3	mov rdi rbp mov esi CONST call sub_xxx lea rdx [rax+CONST] test rax rax cmovnz rbp rdx mov cs:xxx rbp mov rax [rbx] mov cs:xxx rax	add rsp CONST pop rbx pop rbp retn	retn
[ph]libcap-git-setcap___prctl
endbr64 sub rsp CONST mov r10 rcx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_3	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_1	call sub_xxx
[ph]libcap-git-setcap_capget
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_capset
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___mremap
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___sysinfo
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap_wctrans
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST mov rax CONST mov rax fs:xxx mov r13 [rax] mov rbx [r13+CONST] cmp [rbx] CONST jz JUMP_ADDR_5	mov r12 rdi xor ebp ebp jmp JUMP_ADDR_3	mov rdi rbx add rbp CONST call sub_xxx lea rbx [rbx+rax+CONST] cmp [rbx] CONST jz JUMP_ADDR_5	mov rsi rbx mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_2	mov eax [r13+CONST] lea rax [rbp+rax+CONST] mov rax [r13+rax*8+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___towctrans
endbr64 mov eax edi test rsi rsi jz JUMP_ADDR_4	mov ecx [CONST_VAR] mov edx edi shr edx cl cmp edx [CONST_VAR+CONST] jnb JUMP_ADDR_4	add edx CONST mov edx [CONST_VAR+rdx*4] test edx edx jz JUMP_ADDR_4	mov ecx [CONST_VAR+CONST] shr edi cl mov ecx edi and ecx [CONST_VAR+CONST] lea rcx [CONST_VAR+rcx*4] mov edx [rcx+rdx] test edx edx jnz JUMP_ADDR_5	retn	mov ecx eax and ecx [CONST_VAR+CONST] lea rcx [CONST_VAR+rcx*4] add eax [rcx+rdx] retn
[ph]libcap-git-setcap___chk_fail
endbr64 sub rsp CONST lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___readonly_area
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx mov rbx rsi lea rsi unk_xxx sub rsp CONST mov [rsp+CONST+var_xxx] rdi lea rdi GLOBAL_VAR mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx test rax rax jz JUMP_ADDR_25	mov rbp rax mov eax [rax] mov edx eax or dh CONST mov [rbp+CONST] edx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST test al CONST jnz JUMP_ADDR_21	mov rax [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] lea r15 [rsp+CONST+var_xxx] add rax rbx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_8	cmp rdi rax jbe JUMP_ADDR_20	cmp rcx r12 jb JUMP_ADDR_18	add rbx rcx sub rbx rax	test rbx rbx jz JUMP_ADDR_21	test [rbp+CONST] CONST jnz JUMP_ADDR_21	mov rcx rbp mov edx CONST mov rsi r14 mov rdi r13 call sub_xxx test rax rax jle JUMP_ADDR_21	mov rdi [rsp+CONST+var_xxx] mov edx CONST mov rsi r15 call sub_xxx mov r12 rax mov rax [rsp+CONST+var_xxx] cmp rax [rsp+CONST+var_xxx] jz JUMP_ADDR_21	lea rdi [rax+CONST] mov [rsp+CONST+var_xxx] rdi cmp [rax] CONST jnz JUMP_ADDR_21	mov edx CONST lea rsi [rsp+CONST+var_xxx] call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_21	lea rsi [rdx+CONST] mov [rsp+CONST+var_xxx] rsi cmp [rdx] CONST jnz JUMP_ADDR_21	mov rdi [rsp+CONST+var_xxx] cmp rdi r12 jbe JUMP_ADDR_7	mov rcx [rsp+CONST+var_xxx] cmp rcx rax jnb JUMP_ADDR_7	lea rsi [rdx+CONST] mov [rsp+CONST+var_xxx] rsi cmp [rdx+CONST] CONST jnz JUMP_ADDR_21	lea rsi [rdx+CONST] mov [rsp+CONST+var_xxx] rsi cmp [rdx+CONST] CONST jnz JUMP_ADDR_21	cmp rcx r12 jnb JUMP_ADDR_3	mov rcx [rsp+CONST+var_xxx] cmp rcx rax ja JUMP_ADDR_29	sub rbx rcx add rbx r12 jmp JUMP_ADDR_6	xor ebx ebx nop	mov rdi rbp call sub_xxx mov rdi [rsp+CONST+var_xxx] call sub_xxx test rbx rbx jz JUMP_ADDR_28	mov eax CONST	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_30	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax CONST mov eax fs:xxx cmp eax CONST jz JUMP_ADDR_28	cmp eax CONST jnz JUMP_ADDR_22	nop [rax+CONST]	mov eax CONST jmp JUMP_ADDR_23	lea rcx [r12+rbx] mov rbx rcx sub rbx rax jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap___stack_chk_fail
endbr64 sub rsp CONST lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___fortify_fail
endbr64 push rbp lea rbp GLOBAL_VAR push rbx mov rbx rdi sub rsp CONST nop [rax+CONST]	mov rdx rbx mov rsi rbp mov edi CONST xor eax eax call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap__dl_debug_state
endbr64 retn
[ph]libcap-git-setcap__dl_debug_initialize
endbr64 lea rax unk_xxx test rsi rsi jz JUMP_ADDR_2	lea rax [CONST_VAR+rsi*8] lea rdx [CONST_VAR+rax*2] lea rax off_xxx lea rax [rax+rdx*8+CONST]	cmp [rax+CONST] CONST jz JUMP_ADDR_7	test rdi rdi jz JUMP_ADDR_6	mov [rax] CONST	lea rdx [CONST_VAR+rsi*8] mov [rax+CONST] rdi lea rcx [CONST_VAR+rdx*2] lea rdx off_xxx mov rdx [rdx+rcx*8] lea rcx sub_xxx mov [rax+CONST] rcx mov [rax+CONST] rdx retn	retn	mov [rax] CONST test rdi rdi jnz JUMP_ADDR_5	mov rdi cs:xxx jmp JUMP_ADDR_5
[ph]libcap-git-setcap__dl_tls_static_surplus_init
endbr64 push r12 xor edx edx push rbp mov rbp rdi xor edi edi push rbx sub rsp CONST lea r12 [rsp+CONST+var_xxx] mov rsi r12 call sub_xxx mov rbx [rsp+CONST+var_xxx] xor edx edx mov rsi r12 mov edi CONST call sub_xxx cmp rbx CONST mov eax CONST mov edx CONST cmova rbx rax mov rcx [rsp+CONST+var_xxx] sub rdx rbx cmp rdx rbp jb JUMP_ADDR_2	add rbx rbp mov cs:xxx rcx lea eax [rbx+rbx+CONST] lea eax [rax+rax*8] shl eax CONST lea eax [rax+rcx+CONST] cdqe mov cs:xxx rax add rsp CONST pop rbx pop rbp pop r12 retn	mov rsi rbp lea rdi GLOBAL_VAR xor eax eax call sub_xxx
[ph]libcap-git-setcap__dl_next_tls_modid
endbr64 cmp cs:xxx CONST mov r8 cs:xxx jnz JUMP_ADDR_2	lea rax [r8+CONST] mov cs:xxx rax retn	sub rsp CONST mov rax cs:xxx mov rcx cs:xxx add rax CONST cmp rax r8 ja JUMP_ADDR_12	mov rdi [rcx] xor esi esi lea r9 [r8+CONST] nop [rax+CONST]	mov rdx rax sub rdx rsi cmp rdx rdi jnb JUMP_ADDR_8	shl rdx CONST cmp [rdx+rcx+CONST] CONST jz JUMP_ADDR_10	add rax CONST cmp r9 rax jnb JUMP_ADDR_4	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rcx [rcx+CONST] add rsi rdi test rcx rcx jz JUMP_ADDR_10	mov rdi [rcx] jmp JUMP_ADDR_4	cmp rax r8 ja JUMP_ADDR_12	add rsp CONST retn	add r8 CONST cmp r8 rax jnz JUMP_ADDR_14	mov cs:xxx CONST mov cs:xxx rax jmp JUMP_ADDR_11	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	endbr64 cmp cs:xxx CONST jnz JUMP_ADDR_18	mov r8 cs:xxx	mov rax r8 retn	mov rcx cs:xxx xor r8d r8d test rcx rcx jz JUMP_ADDR_17	nop	mov rsi [rcx] xor eax eax test rsi rsi jz JUMP_ADDR_23	nop [rax+rax+CONST]	mov rdx rax shl rdx CONST cmp [rcx+rdx+CONST] CONST sbb r8 CONST add rax CONST cmp rax rsi jnz JUMP_ADDR_22	mov rcx [rcx+CONST] test rcx rcx jnz JUMP_ADDR_20	jmp JUMP_ADDR_17
[ph]libcap-git-setcap__dl_get_tls_static_info
endbr64 mov rax cs:xxx mov [CONST_VAR] rax mov rax cs:xxx mov [CONST_VAR] rax retn
[ph]libcap-git-setcap__dl_allocate_tls_storage
endbr64 push r12 mov r12 cs:xxx push rbp push rbx mov rbx cs:xxx lea rdi [rbx+r12+CONST] call sub_xxx test rax rax jz JUMP_ADDR_4	mov rbp rax xor edx edx lea rax [rax+r12+CONST] mov esi CONST div r12 imul rax r12 lea r12 [rbx+rax+CONST] xor eax eax lea rdi [r12+CONST] mov rcx r12 mov [r12] CONST mov [r12+CONST] CONST and rdi CONST sub rcx rdi add ecx CONST shr ecx CONST rep CONST mov [r12+CONST] rbp mov rdi cs:xxx lea rbx [CONST_VAR+CONST] add rdi CONST call sub_xxx test rax rax jz JUMP_ADDR_3	mov [rax] rbx add rax CONST mov [r12+CONST] rax mov rax r12 pop rbx pop rbp pop r12 retn	mov rdi rbp xor r12d r12d call sub_xxx mov rax r12 pop rbx pop rbp pop r12 retn	xor r12d r12d pop rbx pop rbp mov rax r12 pop r12 retn
[ph]libcap-git-setcap__dl_allocate_tls_init
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST] rdi test rdi rdi jz JUMP_ADDR_16	mov rax [CONST_VAR+CONST] mov rcx cs:xxx mov [rsp+CONST] rax cmp [rax+CONST] rcx jb JUMP_ADDR_20	mov [rsp+CONST] CONST mov r12 cs:xxx xor ebp ebp nop [rax+CONST]	mov rax [rsp+CONST] xor r13d r13d test rax rax setz r13b cmp r13 [r12] jnb JUMP_ADDR_17	lea r15 [rax+r13] jmp JUMP_ADDR_14	mov rdx r13 shl rdx CONST mov rax [r12+rdx+CONST] test rax rax jz JUMP_ADDR_13	mov rdx [r12+rdx+CONST] cmp rdx cs:xxx ja JUMP_ADDR_24	cmp rbp rdx mov rsi [rax+CONST] cmovb rbp rdx mov rdx [rax+CONST] mov rcx rsi shl rcx CONST lea rdi [rdx+CONST] add rcx [rsp+CONST] mov [rcx] CONST mov [rcx+CONST] CONST cmp rdi CONST jbe JUMP_ADDR_12	cmp rsi r15 jnz JUMP_ADDR_29	mov r14 [rax+CONST] mov rbx [rax+CONST] cmp r14 rbx jb JUMP_ADDR_27	cmp rdx r14 jb JUMP_ADDR_28	mov rdi [rsp+CONST] mov rsi [rax+CONST] sub rdi rdx mov rdx rbx mov [rcx] rdi call sub_xxx mov rdx r14 xor esi esi mov rdi rax sub rdx rbx call sub_xxx	mov rcx cs:xxx	add r13 CONST add r15 CONST cmp [r12] r13 jbe JUMP_ADDR_17	cmp r15 rcx jbe JUMP_ADDR_5	mov rax [rsp+CONST] mov [rax] rbp	mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	add [rsp+CONST] r13 mov rax [rsp+CONST] cmp rax rcx jnb JUMP_ADDR_15	mov r12 [r12+CONST] test r12 r12 jnz JUMP_ADDR_3	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rax cs:xxx lea rdx unk_xxx lea rbp [rax+CONST] add rax CONST mov rbx [rsp+CONST] shl rax CONST mov r13 [rbx+CONST] cmp rbx rdx jz JUMP_ADDR_25	mov rdi [rsp+CONST] mov rsi rax sub rdi CONST call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_30	lea r14 [r13+CONST] shl r14 CONST	mov [rbx] rbp mov rdx rbp lea rdi [rbx+r14] xor esi esi sub rdx r13 shl rdx CONST call sub_xxx lea rax [rbx+CONST] mov rbx [rsp+CONST] mov rcx cs:xxx mov [rsp+CONST] rax mov [rbx+CONST] rax jmp JUMP_ADDR_2	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rdi rax call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_30	lea r14 [r13+CONST] lea rsi GLOBAL_VAR mov rdi rax shl r14 CONST mov rdx r14 call sub_xxx jmp JUMP_ADDR_23	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR xor eax eax call sub_xxx
[ph]libcap-git-setcap__dl_allocate_tls
endbr64 push rbp push rbx sub rsp CONST test rdi rdi jz JUMP_ADDR_4	mov rbp rdi mov rdi cs:xxx mov esi CONST lea rbx [CONST_VAR+CONST] add rdi CONST call sub_xxx test rax rax jz JUMP_ADDR_5	mov [rax] rbx add rax CONST mov [rbp+CONST] rax	add rsp CONST mov rdi rbp pop rbx pop rbp jmp UNK_JUMP_ADDR	call sub_xxx add rsp CONST mov rbp rax pop rbx mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	xor ebp ebp jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_deallocate_tls
endbr64 push r13 mov r13d esi push r12 mov r12 rdi push rbp push rbx sub rsp CONST mov rbp [CONST_VAR+CONST] cmp [rbp+CONST] CONST jz JUMP_ADDR_3	xor ebx ebx nop [rax+CONST]	add rbx CONST mov rax rbx shl rax CONST mov rdi [rbp+rax+CONST] call sub_xxx cmp rbx [rbp+CONST] jb JUMP_ADDR_2	lea rax unk_xxx cmp rbp rax jz JUMP_ADDR_5	lea rdi [rbp+CONST] call sub_xxx	test r13b r13b jnz JUMP_ADDR_7	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rdi [r12+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__dl_tls_get_addr_soft
endbr64 mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_8	mov rdx fs:xxx mov r8 [rdx] cmp r8 cs:xxx jnz JUMP_ADDR_3	shl rax CONST mov rax [rdx+rax] xor edx edx cmp rax CONST cmovz rax rdx retn	cmp rax [rdx+CONST] jnb JUMP_ADDR_8	mov rsi cs:xxx mov rcx rax mov rdi [CONST_VAR] cmp rax rdi jb JUMP_ADDR_7	nop [rax+rax+CONST]	mov rsi [CONST_VAR+CONST] sub rcx rdi mov rdi [CONST_VAR] cmp rdi rcx jbe JUMP_ADDR_6	shl rcx CONST cmp r8 [rcx+CONST_VAR+CONST] jnb JUMP_ADDR_2	xor eax eax retn
[ph]libcap-git-setcap__dl_add_to_slotinfo
endbr64 push r13 mov r13d esi push r12 mov r12 rdi push rbp push rbx sub rsp CONST mov rbp [CONST_VAR+CONST] mov rbx cs:xxx jmp JUMP_ADDR_3	sub rbp rax mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_7	mov rbx rax	mov rax [rbx] cmp rax rbp jbe JUMP_ADDR_1	test r13b r13b jz JUMP_ADDR_6	mov rax cs:xxx shl rbp CONST add rbx rbp add rax CONST mov [rbx+CONST] r12 mov [rbx+CONST] rax	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	test rbp rbp jnz JUMP_ADDR_11	mov edi CONST call sub_xxx mov [rbx+CONST] rax mov rdx rax test rax rax jz JUMP_ADDR_12	lea rsi [rax+CONST] mov [rax] CONST mov ecx CONST mov rbx rdx mov [rax+CONST] CONST mov rdi rsi mov rax rbp rep CONST test r13b r13b jz JUMP_ADDR_6	jmp JUMP_ADDR_5	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR lea rsi GLOBAL_VAR mov edi CONST add cs:xxx CONST call sub_xxx
[ph]libcap-git-setcap_tunable_initialize
push rbx mov rbx rdi mov rdi rsi sub rsp CONST cmp [rbx+CONST] CONST jnz JUMP_ADDR_4	mov [rbx+CONST] CONST	mov [rbx+CONST] rdi	add rsp CONST pop rbx retn	xor esi esi call sub_xxx mov edx [rbx+CONST] cmp edx CONST jz JUMP_ADDR_13	cmp edx CONST jz JUMP_ADDR_7	jbe JUMP_ADDR_10	cmp rax [rbx+CONST] jb JUMP_ADDR_3	cmp rax [rbx+CONST] ja JUMP_ADDR_3	mov [rbx+CONST] rax mov [rbx+CONST] CONST add rsp CONST pop rbx retn	cmp [rbx+CONST] rax jg JUMP_ADDR_3	cmp [rbx+CONST] rax jge JUMP_ADDR_9	jmp JUMP_ADDR_3	lea rdi [rsp+CONST+var_xxx] jmp JUMP_ADDR_2
[ph]libcap-git-setcap___tunable_set_val
endbr64 mov r8d edi mov rdi rdx lea r9 GLOBAL_VAR mov edx r8d lea rax ds:xxx sub rax rdx shl rax CONST add rax r9 mov r8d [rax+CONST] cmp r8d CONST jz JUMP_ADDR_18	cmp r8d CONST mov rsi [CONST_VAR] mov r10 [rax+CONST] mov r8 [rax+CONST] jz JUMP_ADDR_3	jbe JUMP_ADDR_9	test rdi rdi jz JUMP_ADDR_19	mov rdi [CONST_VAR] test rcx rcx jz JUMP_ADDR_30	mov rcx [rcx] cmp rdi rcx jbe JUMP_ADDR_23	cmp rsi r8 jb JUMP_ADDR_17	cmp rsi r10 ja JUMP_ADDR_17	lea rax ds:xxx sub rax rdx shl rax CONST add rax r9 mov [rax+CONST] rsi mov [rax+CONST] CONST retn	test rdi rdi jz JUMP_ADDR_26	mov rdi [CONST_VAR] test rcx rcx jz JUMP_ADDR_33	mov rcx [rcx] cmp rdi rcx jg JUMP_ADDR_15	cmp rcx r10 jg JUMP_ADDR_15	cmp rdi r8 jl JUMP_ADDR_15	mov [rax+CONST] rdi mov r10 rcx mov r8 rdi mov [rax+CONST] rcx nop [rax]	cmp rsi r8 jl JUMP_ADDR_17	cmp rsi r10 jle JUMP_ADDR_8	retn	mov [rax+CONST] rsi retn	test rcx rcx jz JUMP_ADDR_6	mov rcx [rcx] cmp rcx r10 jnb JUMP_ADDR_6	cmp rcx r8 jb JUMP_ADDR_6	mov [rax+CONST] rcx mov r10 rcx jmp JUMP_ADDR_6	cmp rcx r10 ja JUMP_ADDR_6	cmp rdi r8 jb JUMP_ADDR_6	mov [rax+CONST] rdi mov r10 rcx mov r8 rdi mov [rax+CONST] rcx jmp JUMP_ADDR_6	test rcx rcx jz JUMP_ADDR_15	mov rcx [rcx] cmp rcx r10 jge JUMP_ADDR_15	cmp rcx r8 jl JUMP_ADDR_15	mov [rax+CONST] rcx mov r10 rcx jmp JUMP_ADDR_15	cmp rdi r8 jbe JUMP_ADDR_6	cmp rdi r10 ja JUMP_ADDR_6	mov [rax+CONST] rdi mov r8 rdi jmp JUMP_ADDR_6	cmp rdi r8 jle JUMP_ADDR_15	cmp rdi r10 jg JUMP_ADDR_15	mov [rax+CONST] rdi mov r8 rdi jmp JUMP_ADDR_15
[ph]libcap-git-setcap___tunables_init
endbr64 push r15 push r14 push r13 mov r13 rdi push r12 push rbp push rbx sub rsp CONST mov edx cs:xxx test edx edx jnz JUMP_ADDR_96	mov rax CONST lea rbx GLOBAL_VAR sub rax rbx mov r15 rax nop [rax+rax+CONST]	test r13 r13 jz JUMP_ADDR_27	mov rbx [r13+CONST] test rbx rbx jz JUMP_ADDR_27	movzx edi [rbx] lea r12 [r13+CONST] cmp dil CONST jz JUMP_ADDR_88	test dil dil jz JUMP_ADDR_88	mov eax CONST nop [rax]	movzx edx [rbx+rax] mov rcx rax add rax CONST test dl dl jz JUMP_ADDR_28	cmp dl CONST jnz JUMP_ADDR_7	test dl dl jz JUMP_ADDR_28	lea rbp [rcx+CONST] mov eax edi mov rsi rbx mov edx CONST lea r14 [rbx+rbp] lea rcx GLOBAL_VAR jmp JUMP_ADDR_13	test al al jz JUMP_ADDR_14	movzx edx [rcx+CONST] add rsi CONST add rcx CONST movzx eax [CONST_VAR] test dl dl jz JUMP_ADDR_29	cmp dl al jz JUMP_ADDR_11	lea rdi unk_xxx mov r11d cs:xxx lea r9 [CONST_VAR+CONST] jmp JUMP_ADDR_16	add rdi CONST cmp r9 rdi jz JUMP_ADDR_28	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_15	movzx r8d [CONST_VAR] test r8b r8b jz JUMP_ADDR_15	lea r10 [r15+CONST_VAR] mov rsi rdi mov rax rbx mov ecx r8d nop [rax+CONST]	movzx edx [rax] test dl dl jz JUMP_ADDR_15	cmp cl dl jnz JUMP_ADDR_15	movzx ecx [CONST_VAR+CONST] add rsi CONST add rax CONST test cl cl jnz JUMP_ADDR_19	cmp [rax] CONST jnz JUMP_ADDR_15	test r11d r11d jz JUMP_ADDR_26	mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_73	cmp eax CONST jnz JUMP_ADDR_15	lea rax GLOBAL_VAR mov rsi r14 mov r13 r12 lea rdi [rax+r10] call sub_xxx test r13 r13 jnz JUMP_ADDR_3	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r13 r12 jmp JUMP_ADDR_2	cmp al CONST jnz JUMP_ADDR_14	xor edx edx jmp JUMP_ADDR_32	movzx edi [rbx+rdx+CONST] mov rdx r8	lea r8 [rdx+CONST] test dil dil jnz JUMP_ADDR_31	mov rdi r8 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r9 rax cmp rax CONST jz JUMP_ADDR_100	mov rdx [rsp+CONST+var_xxx] lea rax [rdx+CONST] test rdx rdx jz JUMP_ADDR_89	nop [rax]	movzx edx [rbx+rax] mov [r9+rax] dl sub rax CONST jnb JUMP_ADDR_36	lea rbx [r9+rbp] movzx r11d [rbx] mov [rsp+CONST+var_xxx] rbx test r11b r11b jz JUMP_ADDR_46	mov [rsp+CONST+var_xxx] r14 mov r14 r15 mov r15 r13 mov r13 r9 xchg ax ax	cmp r11b CONST jz JUMP_ADDR_47	mov eax r11d xor edx edx cmp r11b CONST jnz JUMP_ADDR_44	jmp JUMP_ADDR_47	add rdx CONST movzx eax [rbx+rdx] cmp al CONST jz JUMP_ADDR_48	cmp al CONST jz JUMP_ADDR_48	test al al jnz JUMP_ADDR_42	mov r9 r13 mov r13 r15 mov r15 r14	mov [r13+CONST] r9 mov r13 r12 jmp JUMP_ADDR_2	mov eax r11d xor edx edx nop [rax+rax+CONST]	test al al jz JUMP_ADDR_45	lea r8 [rbx+rdx+CONST] movzx esi [r8] cmp al CONST jz JUMP_ADDR_72	xor ebp ebp test sil sil jz JUMP_ADDR_55	cmp sil CONST jnz JUMP_ADDR_54	jmp JUMP_ADDR_55	test sil sil jz JUMP_ADDR_55	add rbp CONST movzx esi [r8+rbp] cmp sil CONST jnz JUMP_ADDR_53	lea rdi GLOBAL_VAR xor r10d r10d	movzx edx [CONST_VAR] mov ecx r11d mov eax CONST test dl dl jnz JUMP_ADDR_60	jmp JUMP_ADDR_66	test cl cl jz JUMP_ADDR_61	movzx edx [CONST_VAR+rax] add rax CONST movzx ecx [rbx+rax+CONST] test dl dl jz JUMP_ADDR_66	cmp dl cl jz JUMP_ADDR_58	add r10 CONST add rdi CONST cmp r10 CONST jnz JUMP_ADDR_56	lea rax [r8+rbp] mov rbx r8 xchg ax ax	cmp [rax] CONST jz JUMP_ADDR_45	lea rbx [rbx+rbp+CONST]	movzx r11d [rbx] jmp JUMP_ADDR_39	cmp cl CONST jnz JUMP_ADDR_61	mov eax cs:xxx test eax eax jz JUMP_ADDR_87	lea rax ds:xxx lea rcx GLOBAL_VAR sub rax r10 shl rax CONST mov edx [rcx+rax+CONST] test edx edx jz JUMP_ADDR_91	lea rax [r8+rbp] mov rbx r8	cmp edx CONST jnz JUMP_ADDR_63	mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] sub r8 [rsp+CONST+var_xxx] lea rsi [rax+r8] mov [CONST_VAR+rbp] CONST call sub_xxx mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_63	mov rbx r8 jmp JUMP_ADDR_65	mov rax [r13+CONST] mov rsi r13 mov r12 r13 test rax rax jz JUMP_ADDR_15	mov rcx rdi test r8b r8b jnz JUMP_ADDR_78	jmp JUMP_ADDR_82	cmp dl r8b jnz JUMP_ADDR_79	movzx r8d [rcx+CONST] add rcx CONST add rax CONST test r8b r8b jz JUMP_ADDR_82	movzx edx [rax] test dl dl jnz JUMP_ADDR_76	mov rax [CONST_VAR+CONST] add rsi CONST test rax rax jz JUMP_ADDR_86	movzx r8d [CONST_VAR] mov rcx rdi test r8b r8b jnz JUMP_ADDR_78	nop	cmp [rax] CONST jnz JUMP_ADDR_79	mov rax rsi nop [rax+rax+CONST]	mov rdx [rax+CONST] add rax CONST mov [rax+CONST] rdx test rdx rdx jnz JUMP_ADDR_84	mov rax [CONST_VAR] test rax rax jnz JUMP_ADDR_80	mov eax [CONST_VAR+CONST] mov r12 r13 jmp JUMP_ADDR_25	lea rax [r8+rbp] mov rbx r8 jmp JUMP_ADDR_71	mov edx edi xor ecx ecx jmp JUMP_ADDR_9	test r9 r9 jz JUMP_ADDR_46	jmp JUMP_ADDR_37	test sil sil jz JUMP_ADDR_99	lea rdx [r8+rbp+CONST] mov rax rbx movzx ecx [rdx] test cl cl jz JUMP_ADDR_95	nop [rax+CONST]	add rdx CONST mov [rax] cl add rax CONST movzx ecx [rdx] test cl cl jnz JUMP_ADDR_94	mov [rax] CONST lea rax ds:xxx lea rsi GLOBAL_VAR xor ebp ebp sub rax r10 shl rax CONST mov edx [CONST_VAR+rax+CONST] mov rax rbx jmp JUMP_ADDR_70	xor esi esi lea rdi GLOBAL_VAR mov eax CONST syscall test eax eax jz JUMP_ADDR_98	cmp eax CONST ja JUMP_ADDR_1	mov cs:xxx CONST jmp JUMP_ADDR_1	mov r9 r13 mov [rbx] CONST mov r13 r15 mov r15 r14 jmp JUMP_ADDR_46	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	endbr64 push r15 lea r15 GLOBAL_VAR push r14 lea r14 GLOBAL_VAR push r13 lea r13 GLOBAL_VAR push r12 lea r12 GLOBAL_VAR push rbp push rbx lea rbx GLOBAL_VAR lea rbp [rbx+CONST] sub rsp CONST jmp JUMP_ADDR_104	mov ecx [rbx+CONST] mov edx [rbx+CONST] lea rdi GLOBAL_VAR mov esi [rbx+CONST] call sub_xxx	add rbx CONST cmp rbx rbp jz JUMP_ADDR_110	cmp [rbx+CONST] CONST mov rsi rbx jnz JUMP_ADDR_106	cmp [rbx+CONST] CONST jz JUMP_ADDR_113	xor eax eax mov rdi r12 call sub_xxx mov eax [rbx+CONST] cmp eax CONST jz JUMP_ADDR_112	ja JUMP_ADDR_111	test eax eax jz JUMP_ADDR_102	mov rcx [rbx+CONST] mov rdx [rbx+CONST] mov rdi r13 xor eax eax mov rsi [rbx+CONST] add rbx CONST call sub_xxx cmp rbx rbp jnz JUMP_ADDR_104	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rsi [rbx+CONST] mov rdi r14 xor eax eax call sub_xxx jmp JUMP_ADDR_103	mov rcx [rbx+CONST] mov rdx [rbx+CONST] mov rdi r15 xor eax eax mov rsi [rbx+CONST] call sub_xxx jmp JUMP_ADDR_103	lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_103
[ph]libcap-git-setcap___tunable_get_val
endbr64 mov edi edi lea rcx GLOBAL_VAR lea rax ds:xxx sub rax rdi shl rax CONST add rax rcx mov r8d [rax+CONST] mov rax [rax+CONST] cmp r8d CONST ja JUMP_ADDR_7	test r8d r8d jnz JUMP_ADDR_7	mov [CONST_VAR] eax	lea rax ds:xxx sub rax rdi shl rax CONST cmp [rcx+rax+CONST] CONST jz JUMP_ADDR_6	test rdx rdx jz JUMP_ADDR_6	lea rdi [rcx+rax+CONST] jmp rdx	retn	mov [CONST_VAR] rax jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_aux_init
endbr64 mov rax [CONST_VAR] mov cs:xxx rdi test rax rax jz JUMP_ADDR_59	push r15 mov rdx rdi xor r9d r9d xor r11d r11d push r14 xor r15d r15d xor r14d r14d xor r10d r10d push r13 xor edi edi xor r13d r13d xor r8d r8d push r12 xor esi esi xor r12d r12d lea rcx unk_xxx push rbp xor ebp ebp push rbx xor ebx ebx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST nop [rax]	sub rax CONST cmp rax CONST ja JUMP_ADDR_5	movsxd rax [rcx+rax*4] add rax rcx jmp rax	mov rax [rdx+CONST] mov r9d CONST mov [rsp+CONST+var_xxx] rax nop	mov rax [rdx+CONST] add rdx CONST test rax rax jnz JUMP_ADDR_2	nop [rax]	test r9b r9b jz JUMP_ADDR_9	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	test r11b r11b jz JUMP_ADDR_11	mov cs:xxx CONST mov eax [rsp+CONST+var_xxx] mov cs:xxx eax	test bl bl jz JUMP_ADDR_13	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	test bpl bpl jz JUMP_ADDR_15	movzx eax [rsp+CONST+var_xxx] mov cs:xxx ax	test r12b r12b jz JUMP_ADDR_17	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	test r13b r13b jz JUMP_ADDR_19	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_21	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	test r15b r15b jz JUMP_ADDR_25	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax	test r14b r14b jz JUMP_ADDR_27	mov eax [rsp+CONST+var_xxx] mov cs:xxx eax	test r10b r10b jnz JUMP_ADDR_60	cmp esi CONST jnz JUMP_ADDR_30	mov cs:xxx CONST xor eax eax or edi r8d setnz al mov cs:xxx eax	pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rdx+CONST] add rdx CONST mov ebx CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] add rdx CONST mov r12d CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov eax [rdx+CONST] add rdx CONST mov r11d CONST mov esi CONST mov [rsp+CONST+var_xxx] eax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	movzx eax [rdx+CONST] add rdx CONST mov ebp CONST mov [rsp+CONST+var_xxx] ax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov eax [rdx+CONST] add rdx CONST mov r14d CONST mov [rsp+CONST+var_xxx] eax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] add rdx CONST mov r13d CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] add rdx CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	xor edi [rdx+CONST] mov rax [rdx+CONST] add rdx CONST or esi CONST test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	xor edi [rdx+CONST] mov rax [rdx+CONST] add rdx CONST or esi CONST test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	xor r8d [rdx+CONST] mov rax [rdx+CONST] add rdx CONST or esi CONST test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	xor r8d [rdx+CONST] mov rax [rdx+CONST] add rdx CONST or esi CONST test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] test rax rax cmovz rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov eax CONST cmovnz r10d eax mov rax [rdx+CONST] add rdx CONST test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] add rdx CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	mov rax [rdx+CONST] add rdx CONST mov r15d CONST mov [rsp+CONST+var_xxx] rax mov rax [rdx] test rax rax jnz JUMP_ADDR_2	jmp JUMP_ADDR_7	retn	mov rax [rsp+CONST+var_xxx] mov cs:xxx rax jmp JUMP_ADDR_28
[ph]libcap-git-setcap__dl_non_dynamic_init
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST call sub_xxx lea rdi GLOBAL_VAR mov cs:xxx rax mov rax cs:xxx mov cs:xxx rax mov rax cs:xxx mov cs:xxx ax call sub_xxx xor edx edx test rax rax jz JUMP_ADDR_2	xor edx edx cmp [rax] CONST setnz dl	cmp cs:xxx CONST mov cs:xxx edx jz JUMP_ADDR_143	lea rdi unk_xxx xor r9d r9d xor r8d r8d xor ecx ecx mov edx CONST mov rsi rdi call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_143	mov rcx cs:xxx xor esi esi mov rax [rcx+CONST] movzx edi [rcx+CONST] add rax rcx mov [rbp+CONST] di mov [rbp+CONST] rax test rdi rdi jnz JUMP_ADDR_9	jmp JUMP_ADDR_11	cmp edx CONST jz JUMP_ADDR_21	cmp edx CONST jz JUMP_ADDR_163	add rsi CONST add rax CONST cmp rsi rdi jz JUMP_ADDR_11	mov edx [rax] cmp edx CONST jnz JUMP_ADDR_6	mov rdx [rax+CONST] add rsi CONST add rax CONST mov [rbp+CONST] rdx mov rdx [rax+CONST] shr rdx CONST mov [rbp+CONST] dx cmp rsi rdi jnz JUMP_ADDR_9	mov [rbp+CONST] rcx sub rcx [rbp+CONST] mov rdx rcx add [rbp+CONST] rcx add [rbp+CONST] rcx add rdx [rbp+CONST] mov [rbp+CONST] rcx mov [rbp+CONST] rdx jz JUMP_ADDR_63	mov rax [rdx] lea rsi [rbp+CONST] test rax rax jz JUMP_ADDR_28	mov r8d CONST mov r14d CONST mov r15d CONST mov r13d CONST mov r12d CONST mov r11d CONST mov r10d CONST jmp JUMP_ADDR_17	mov rdi r10 sub rdi rax mov rax rdi	mov [CONST_VAR+rax*8] rdx	mov rax [rdx+CONST] add rdx CONST test rax rax jz JUMP_ADDR_28	cmp rax CONST jbe JUMP_ADDR_15	mov rdi r8 sub rdi rax cmp rdi CONST jbe JUMP_ADDR_14	lea edi [rax+rax] mov r9d edi sar r9d CONST cmp edi CONST jbe JUMP_ADDR_141	mov eax r11d sub eax r9d jmp JUMP_ADDR_15	cmp [rbp+CONST] CONST mov rdx [rax+CONST] jnz JUMP_ADDR_23	mov [rbp+CONST] rdx	add rdx [rax+CONST] cmp rdx [rbp+CONST] jb JUMP_ADDR_25	mov [rbp+CONST] rdx	test [rax+CONST] CONST jz JUMP_ADDR_8	cmp rdx [rbp+CONST] jb JUMP_ADDR_8	mov [rbp+CONST] rdx jmp JUMP_ADDR_8	test rcx rcx jz JUMP_ADDR_45	mov rdx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_31	mov rax [rdx] mov cs:xxx rax mov rax [rdx+CONST] add rax rcx mov cs:xxx rax lea rax GLOBAL_VAR mov [rbp+CONST] rax mov eax CONST	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_33	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_35	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_37	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_39	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_41	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_43	movsxd rdx eax lea rdi GLOBAL_VAR add eax CONST shl rdx CONST add rdx rdi mov rdi [CONST_VAR] mov [rdx] rdi mov rdi [CONST_VAR+CONST] add rdi rcx mov [rdx+CONST] rdi mov [rbp+CONST] rdx	mov rdx [rbp+CONST] test rdx rdx jz JUMP_ADDR_45	cdqe lea rsi GLOBAL_VAR add rcx [rdx+CONST] shl rax CONST add rax rsi mov rsi [rdx] mov [rax+CONST] rcx mov [rax] rsi mov [rbp+CONST] rax	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_47	cmp [rax+CONST] CONST jnz JUMP_ADDR_164	cmp [rbp+CONST] CONST jz JUMP_ADDR_49	mov rax [rbp+CONST] cmp [rax+CONST] CONST jnz JUMP_ADDR_166	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_56	mov rdx [rax+CONST] mov [rbp+CONST] edx test dl CONST jz JUMP_ADDR_52	mov [rbp+CONST] rax	test dl CONST jz JUMP_ADDR_54	mov [rbp+CONST] rax	and edx CONST jz JUMP_ADDR_56	mov [rbp+CONST] rax	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_61	mov rsi [rax+CONST] mov [rbp+CONST] esi mov eax esi test sil CONST jnz JUMP_ADDR_156	test cs:xxx CONST jnz JUMP_ADDR_161	test al CONST jz JUMP_ADDR_61	mov rax [rbp+CONST] mov [rbp+CONST] rax	cmp [rbp+CONST] CONST jz JUMP_ADDR_63	mov [rbp+CONST] CONST	mov rdi rbp call sub_xxx mov rax [rbp+CONST] lea rdx [rbp+CONST] or [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rax+CONST] CONST mov [rax] rdx mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_66	mov rdx [rbp+CONST] mov r14 [rax+CONST] add r14 [rdx+CONST] mov rdi r14 call sub_xxx lea r15 [rax+CONST] mov rdi r15 call sub_xxx mov rdi rax test rax rax jz JUMP_ADDR_165	mov rdx r15 mov rsi r14 call sub_xxx mov rdx [rbp+CONST] mov [rbp+CONST] rax mov [rdx] rax	xor esi esi mov rdi rbp call sub_xxx mov cs:xxx rbp mov cs:xxx CONST	lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] mov rsi rbp xor r9d r9d pxor xmm0 xmm0 lea r15 GLOBAL_VAR mov rax CONST mov [rsp+CONST+var_xxx] CONST movaps [rsp+CONST+var_xxx] xmm0 lea r12 [rsp+CONST+var_xxx] lea rcx [rbp+CONST] mov r8 r13 mov [rsp+CONST+var_xxx+CONST] CONST mov rdx r12 lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] r15 mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 push CONST push CONST call sub_xxx mov rcx [rsp+CONST+var_xxx] pop rdx pop rsi test rcx rcx jz JUMP_ADDR_160	cmp [rcx+CONST] CONST jz JUMP_ADDR_120	test rax rax jz JUMP_ADDR_120	mov rax [rax]	mov rsi cs:xxx add rax [rcx+CONST]	mov cs:xxx rax test rsi rsi jz JUMP_ADDR_145	pxor xmm0 xmm0 mov [rsp+CONST+var_xxx] r15 xor r9d r9d mov r8 r13 movaps [rsp+CONST+var_xxx] xmm0 lea rcx [CONST_VAR+CONST] mov rax CONST mov rdx r12 mov [rsp+CONST+var_xxx] CONST lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx+CONST] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 push CONST push CONST call sub_xxx mov rcx [rsp+CONST+var_xxx] pop r11 pop rbp test rcx rcx jz JUMP_ADDR_158	cmp [rcx+CONST] CONST jz JUMP_ADDR_152	test rax rax jz JUMP_ADDR_152	mov rax [rax]	mov rsi cs:xxx add rax [rcx+CONST]	mov cs:xxx rax test rsi rsi jz JUMP_ADDR_146	pxor xmm0 xmm0 mov [rsp+CONST+var_xxx] r15 xor r9d r9d mov r8 r13 movaps [rsp+CONST+var_xxx] xmm0 lea rcx [CONST_VAR+CONST] mov rax CONST mov rdx r12 mov [rsp+CONST+var_xxx] CONST lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx+CONST] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 push CONST push CONST call sub_xxx mov rcx [rsp+CONST+var_xxx] pop r9 pop r10 test rcx rcx jz JUMP_ADDR_159	cmp [rcx+CONST] CONST jz JUMP_ADDR_151	test rax rax jz JUMP_ADDR_151	mov rax [rax]	mov rsi cs:xxx add rax [rcx+CONST]	mov cs:xxx rax test rsi rsi jz JUMP_ADDR_147	pxor xmm0 xmm0 mov [rsp+CONST+var_xxx] r15 mov r8 r13 xor r9d r9d movaps [rsp+CONST+var_xxx] xmm0 lea rcx [CONST_VAR+CONST] mov rdx r12 mov rax CONST mov [rsp+CONST+var_xxx] CONST lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx+CONST] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 push CONST push CONST call sub_xxx mov rcx [rsp+CONST+var_xxx] pop rdi pop r8 test rcx rcx jz JUMP_ADDR_157	cmp [rcx+CONST] CONST jz JUMP_ADDR_150	test rax rax jz JUMP_ADDR_150	mov rax [rax]	mov rsi cs:xxx add rax [rcx+CONST]	mov cs:xxx rax test rsi rsi jz JUMP_ADDR_148	pxor xmm0 xmm0 mov [rsp+CONST+var_xxx] r15 mov rdx r12 xor r9d r9d movaps [rsp+CONST+var_xxx] xmm0 lea rcx [CONST_VAR+CONST] mov rax CONST mov r8 r13 mov [rsp+CONST+var_xxx] CONST lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx+CONST] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r14 push CONST push CONST call sub_xxx mov rdx [rsp+CONST+var_xxx] pop rcx pop rsi test rdx rdx jz JUMP_ADDR_148	cmp [rdx+CONST] CONST jz JUMP_ADDR_153	test rax rax jz JUMP_ADDR_153	mov rax [rax]	add rax [rdx+CONST]	lea rbp GLOBAL_VAR mov cs:xxx rax mov rdi rbp call sub_xxx xor edx edx xor ecx ecx mov rsi rbp mov rdi rax call sub_xxx mov rax cs:xxx lea rdi GLOBAL_VAR mov cs:xxx rax call sub_xxx mov edx CONST test rax rax jz JUMP_ADDR_98	xor edx edx cmp [rax] CONST setz dl	lea rdi GLOBAL_VAR mov cs:xxx edx call sub_xxx xor edx edx test rax rax jz JUMP_ADDR_100	xor edx edx cmp [rax] CONST setnz dl	lea rdi GLOBAL_VAR mov cs:xxx edx call sub_xxx mov edx CONST test rax rax jz JUMP_ADDR_102	xor edx edx cmp [rax] CONST setz dl	lea rdi GLOBAL_VAR mov cs:xxx edx call sub_xxx mov cs:xxx rax test rax rax jz JUMP_ADDR_140	cmp [rax] CONST jz JUMP_ADDR_140	mov eax cs:xxx	test eax eax jz JUMP_ADDR_108	lea rbp GLOBAL_VAR lea r14 [rbp+CONST] nop [rax+rax+CONST]	mov rdi rbp call sub_xxx mov rdi rbp xor esi esi call sub_xxx lea rbp [rax+CONST] cmp rbp r14 jb JUMP_ADDR_107	mov rax cs:xxx test rax rax jz JUMP_ADDR_111	cmp [rax] CONST jnz JUMP_ADDR_111	mov cs:xxx CONST	lea rdi GLOBAL_VAR call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_124	xor r15d r15d xor r14d r14d lea r13 [rsp+CONST+var_xxx]	mov rsi r13 mov rdi rbp call sub_xxx cmp rax CONST ja JUMP_ADDR_124	mov rdx [rsp+CONST+var_xxx] cmp rdx rbp jz JUMP_ADDR_124	movzx esi [rdx] cmp r14 CONST jz JUMP_ADDR_121	cmp sil CONST jz JUMP_ADDR_118	test sil sil jnz JUMP_ADDR_124	mov ecx r14d neg ecx lea ecx ds:xxx shl rax cl or r15 rax test sil sil jz JUMP_ADDR_122	add r14 CONST lea rbp [rdx+CONST] jmp JUMP_ADDR_113	xor eax eax jmp JUMP_ADDR_71	or r15 rax	test r15 r15 jz JUMP_ADDR_124	mov cs:xxx r15d	mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_126	call sub_xxx mov cs:xxx rax	mov rax cs:xxx test rax rax jz JUMP_ADDR_138	mov rcx cs:xxx lea rdx ds:xxx sub rdx rcx lea rcx [rax+rdx*8] cmp rax rcx jnb JUMP_ADDR_138	mov r8d [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] xor esi esi xor edi edi jmp JUMP_ADDR_132	cmp edx CONST jnz JUMP_ADDR_131	mov rbx [rax+CONST] mov r9 [rax+CONST] mov esi CONST	add rax CONST cmp rax rcx jnb JUMP_ADDR_134	mov edx [rax] cmp edx CONST jnz JUMP_ADDR_129	mov r8d [rax+CONST] add rax CONST mov edi CONST cmp rax rcx jb JUMP_ADDR_132	mov [rsp+CONST+var_xxx] r8d test sil sil jz JUMP_ADDR_136	mov cs:xxx r9 mov cs:xxx rbx	test dil dil jz JUMP_ADDR_138	mov eax [rsp+CONST+var_xxx] mov cs:xxx eax	cmp cs:xxx CONST jnz JUMP_ADDR_149	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax cs:xxx lea rdx GLOBAL_VAR lea rcx [rdx+CONST] test eax eax cmovnz rdx rcx mov cs:xxx rdx jmp JUMP_ADDR_105	mov rdi r14 sub rdi rax cmp rdi CONST ja JUMP_ADDR_154	mov rdi r12 sub rdi rax mov rax rdi jmp JUMP_ADDR_15	mov rbp cs:xxx test rbp rbp jnz JUMP_ADDR_67	mov cs:xxx CONST	mov cs:xxx CONST	mov cs:xxx CONST	mov cs:xxx CONST	xor eax eax jmp JUMP_ADDR_96	add rsp CONST lea rdi unk_xxx pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	xor eax eax jmp JUMP_ADDR_89	xor eax eax jmp JUMP_ADDR_83	xor eax eax jmp JUMP_ADDR_77	xor eax eax jmp JUMP_ADDR_95	mov rdi r15 sub rdi rax cmp rdi CONST ja JUMP_ADDR_16	mov rdi r13 sub rdi rax mov rax rdi jmp JUMP_ADDR_15	mov [rbp+CONST] CONST jmp JUMP_ADDR_58	mov rsi cs:xxx xor eax eax jmp JUMP_ADDR_90	mov rsi cs:xxx xor eax eax jmp JUMP_ADDR_78	mov rsi cs:xxx xor eax eax jmp JUMP_ADDR_84	mov rsi cs:xxx xor eax eax jmp JUMP_ADDR_72	and esi CONST jz JUMP_ADDR_59	xor eax eax lea rdi GLOBAL_VAR call sub_xxx mov eax [rbp+CONST] jmp JUMP_ADDR_59	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_get_dl_main_map
endbr64 lea rax unk_xxx retn
[ph]libcap-git-setcap___libc_init_secure
endbr64 mov eax cs:xxx test eax eax jz JUMP_ADDR_2	retn	push rbx call sub_xxx mov ebx eax call sub_xxx mov r8d eax mov eax CONST cmp r8d ebx jz JUMP_ADDR_4	mov cs:xxx eax pop rbx retn	call sub_xxx mov ebx eax call sub_xxx cmp eax ebx setnz al movzx eax al jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_mcount_wrapper
endbr64 mov rsi rdi mov rdi [rsp] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__dl_mcount_wrapper_check
endbr64 cmp cs:xxx CONST mov rsi rdi jz JUMP_ADDR_2	mov rdi [rsp+CONST] jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap__dl_tunable_set_hwcaps
endbr64 push r15 push r14 push r13 push r12 lea r12 GLOBAL_VAR push rbp push rbx lea rbx unk_xxx sub rsp CONST mov r14 [CONST_VAR] movzx r15d [r14] nop [rax+rax+CONST]	cmp r15b CONST jz JUMP_ADDR_9	test r15b r15b jz JUMP_ADDR_9	mov rax r14 jmp JUMP_ADDR_5	cmp dl CONST jz JUMP_ADDR_6	movzx edx [rax+CONST] add rax CONST test dl dl jnz JUMP_ADDR_4	sub rax r14 lea r13 [rax+CONST] cmp r15b CONST jz JUMP_ADDR_12	sub rax CONST cmp rax CONST ja JUMP_ADDR_10	movsxd rax [rbx+rax*4] add rax rbx jmp rax	mov r13d CONST xchg ax ax	add r14 r13 movzx r15d [r14] test r15b r15b jnz JUMP_ADDR_1	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	sub rax CONST lea rbp [r14+CONST] cmp rax CONST ja JUMP_ADDR_10	lea rdx unk_xxx movsxd rax [rdx+rax*4] add rax rdx jmp rax
[ph]libcap-git-setcap__dl_tunable_set_x86_ibt
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR] mov edx CONST lea rsi unk_xxx call sub_xxx test eax eax jnz JUMP_ADDR_3	movzx eax cs:xxx and eax CONST or eax CONST mov cs:xxx al	pop rbx retn	mov rdi [rbx] mov edx CONST lea rsi GLOBAL_VAR call sub_xxx test eax eax jnz JUMP_ADDR_5	movzx eax cs:xxx pop rbx and eax CONST or eax CONST mov cs:xxx al retn	mov rdi [rbx] mov edx CONST lea rsi GLOBAL_VAR call sub_xxx test eax eax jnz JUMP_ADDR_2	or cs:xxx CONST pop rbx retn
[ph]libcap-git-setcap__dl_tunable_set_x86_shstk
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR] mov edx CONST lea rsi GLOBAL_VAR call sub_xxx test eax eax jnz JUMP_ADDR_3	movzx eax cs:xxx and eax CONST or eax CONST mov cs:xxx al	pop rbx retn	mov rdi [rbx] mov edx CONST lea rsi GLOBAL_VAR call sub_xxx test eax eax jnz JUMP_ADDR_5	movzx eax cs:xxx pop rbx and eax CONST or eax CONST mov cs:xxx al retn	mov rdi [rbx] mov edx CONST lea rsi GLOBAL_VAR call sub_xxx test eax eax jnz JUMP_ADDR_2	or cs:xxx CONST pop rbx retn
[ph]libcap-git-setcap__dl_discover_osversion
endbr64 push r12 push rbp push rbx sub rsp CONST lea rdi [rsp+CONST+var_xxx] call sub_xxx lea rdi [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_11	xor r8d r8d xor eax eax	movzx ebx [CONST_VAR] lea ecx [rbx+CONST] cmp cl CONST ja JUMP_ADDR_10	movzx edx [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] movsx ecx cl lea edi [rdx+CONST] cmp dil CONST ja JUMP_ADDR_6	nop [rax]	sub edx CONST lea ecx [rcx+rcx*4] add rsi CONST movsx edx dl lea ecx [rdx+rcx*2] movzx edx [CONST_VAR] lea edi [rdx+CONST] cmp dil CONST jbe JUMP_ADDR_5	shl eax CONST add r8d CONST lea rdi [CONST_VAR+CONST] or eax ecx cmp dl CONST jnz JUMP_ADDR_9	cmp r8d CONST jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp pop r12 retn	cmp r8d CONST jz JUMP_ADDR_8	mov ecx CONST add rsp CONST sub ecx r8d pop rbx pop rbp shl ecx CONST pop r12 shl eax cl retn	xor esi esi lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov r12d eax test eax eax js JUMP_ADDR_14	mov rbx rsp mov edi eax mov edx CONST mov rsi rbx call sub_xxx mov edi r12d mov rbp rax call sub_xxx test rbp rbp jle JUMP_ADDR_14	mov eax CONST mov rdi rbx cmp rbp rax cmovg rbp rax mov [rsp+rbp+CONST+var_xxx] CONST jmp JUMP_ADDR_1	mov eax CONST jmp JUMP_ADDR_8
[ph]libcap-git-setcap_fatal_error
push r13 mov r9 rcx mov r13 rsi push r12 mov r12 rdx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax unk_xxx mov rdx rax test edi edi jnz JUMP_ADDR_2	cmp [r13+CONST] CONST lea rcx unk_xxx lea r8 GLOBAL_VAR cmovz r8 rcx test r12 r12 lea rcx GLOBAL_VAR cmovz r12 rcx mov rcx cs:xxx lea rdi unk_xxx mov rsi [rcx] push rax lea rcx GLOBAL_VAR push rdx mov rdx r12 test rsi rsi cmovz rsi rcx mov rcx r13 xor eax eax call sub_xxx	mov edx CONST lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rcx call sub_xxx mov r9 [rsp+CONST+var_xxx] lea rdx GLOBAL_VAR jmp JUMP_ADDR_1
[ph]libcap-git-setcap__dl_signal_exception
endbr64 sub rsp CONST mov rax CONST mov rax fs:xxx test rax rax jz JUMP_ADDR_2	mov rdx [rax] movdqu xmm0 [CONST_VAR] movups [rdx] xmm0 mov rcx [CONST_VAR+CONST] mov esi CONST mov [rdx+CONST] rcx mov rdx [rax+CONST] mov [rdx] edi lea rdi [rax+CONST] call sub_xxx	mov rcx [CONST_VAR+CONST] mov rsi [CONST_VAR] call sub_xxx
[ph]libcap-git-setcap__dl_signal_error
endbr64 push rbp mov r8 rdx mov rdx rcx mov ebp edi push rbx sub rsp CONST mov rax CONST test rcx rcx mov rbx fs:xxx lea rax GLOBAL_VAR cmovz rdx rax test rbx rbx jz JUMP_ADDR_2	mov rdi [rbx] call sub_xxx mov rax [rbx+CONST] lea rdi [rbx+CONST] mov esi CONST mov [rax] ebp call sub_xxx	mov rcx rdx mov rdx r8 call sub_xxx
[ph]libcap-git-setcap__dl_catch_exception
endbr64 push r12 sub rsp CONST mov r12 CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax fs:xxx mov [rsp+CONST+var_xxx] rax test rdi rdi jz JUMP_ADDR_5	mov rax [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] xor esi esi mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov fs:xxx rax call sub_xxx endbr64 mov r12d eax test eax eax jnz JUMP_ADDR_6	mov rcx [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call rcx mov rax CONST mov rcx [rsp+CONST+var_xxx] pxor xmm0 xmm0 mov fs:xxx rcx mov rax [rsp+CONST+var_xxx] mov [rax+CONST] CONST movups [rax] xmm0	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_7	add rsp CONST mov eax r12d pop r12 retn	mov fs:xxx CONST mov rax [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call rax mov rax [rsp+CONST+var_xxx] mov fs:xxx rax xor r12d r12d jmp JUMP_ADDR_3	mov rax CONST mov rcx [rsp+CONST+var_xxx] mov fs:xxx rcx mov r12d [rsp+CONST+var_xxx] jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap__dl_catch_error
endbr64 push r12 mov r12 rdi push rbp mov rbp rsi mov rsi rcx push rbx mov rbx rdx mov rdx r8 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdi rsp call sub_xxx mov rdx [rsp+CONST+var_xxx] mov [r12] rdx mov rdx [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rdx mov [rbp+CONST] rdx setz [rbx] mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp pop r12 retn	call sub_xxx
[ph]libcap-git-setcap___libc_early_init
endbr64 push rbx mov ebx edi call sub_xxx mov cs:xxx bl pop rbx retn
[ph]libcap-git-setcap___libc_init_first
endbr64 push r13 mov r13 rdx push r12 mov r12 rsi push rbp mov ebp edi mov cs:xxx edi mov cs:xxx rsi mov cs:xxx rdx call sub_xxx mov rdx r13 mov rsi r12 mov edi ebp pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___gconv_open
endbr64 push rbp mov rbp rsp push r15 mov r15d edx push r14 push r13 push r12 push rbx sub rsp CONST mov r13 [CONST_VAR+CONST] movzx ebx [CONST_VAR+CONST] mov [rbp+var_xxx] rsi mov r14 [CONST_VAR] mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax movzx eax [CONST_VAR+CONST] cmp [r13+CONST] CONST mov [rbp+var_xxx] al jnz JUMP_ADDR_2	cmp [r13+CONST] CONST jz JUMP_ADDR_9	cmp [r14] CONST jnz JUMP_ADDR_4	cmp [r14+CONST] CONST jz JUMP_ADDR_7	lea rcx [rbp+var_xxx] lea rdx [rbp+var_xxx] mov r8d r15d mov rsi r14 mov rdi r13 call sub_xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] eax test eax eax jz JUMP_ADDR_11	mov rax [rbp+var_xxx] mov rcx [rbp+var_xxx] mov [rax] rcx mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_25	mov eax [rbp+var_xxx] lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp [r14+CONST] CONST jnz JUMP_ADDR_4	mov rax CONST mov rax fs:xxx mov rax [rax] mov rsi [rax+CONST] mov rdi rsi mov [rbp+var_xxx] rsi call sub_xxx mov rsi [rbp+var_xxx] mov rdx rax lea rax [rax+CONST] and rax CONST sub rsp rax lea r14 [rsp+CONST+var_xxx+CONST] and r14 CONST mov rdi r14 call sub_xxx mov edx CONST mov [rax] dx mov [rax+CONST] CONST jmp JUMP_ADDR_4	cmp [r13+CONST] CONST jnz JUMP_ADDR_2	mov rax CONST mov rax fs:xxx mov rax [rax] mov rsi [rax+CONST] mov rdi rsi mov [rbp+var_xxx] rsi call sub_xxx mov rsi [rbp+var_xxx] mov rdx rax lea rax [rax+CONST] and rax CONST sub rsp rax lea r13 [rsp+CONST+var_xxx+CONST] and r13 CONST mov rdi r13 call sub_xxx mov ecx CONST mov [rax] cx mov [rax+CONST] CONST jmp JUMP_ADDR_2	mov r15 [rbp+var_xxx] lea rdx [r15+r15*2] shl rdx CONST lea rdi [rdx+CONST] mov r13 rdx call sub_xxx mov rdi [rbp+var_xxx] mov [rbp+var_xxx] rax mov r14 rax test rax rax jz JUMP_ADDR_26	mov [rax+CONST] rdi xor esi esi lea rdi [rax+CONST] mov rdx r13 mov [rax] r15 call sub_xxx test r15 r15 jz JUMP_ADDR_5	add ebx ebx add r14 CONST xor r13d r13d xor r15d r15d jmp JUMP_ADDR_17	mov r12 [rbp+var_xxx] lea rax [r12+CONST] cmp rax r15 jbe JUMP_ADDR_19	mov rax [rbp+var_xxx] mov [r14+CONST] ebx imul esi [rax+r13+CONST] [rax+r13+CONST_VAR] movsxd rsi esi mov rdi rsi mov [rbp+var_xxx] rsi call sub_xxx mov rsi [rbp+var_xxx] test rax rax mov [r14+CONST] rax jz JUMP_ADDR_20	add rax rsi add r15 CONST add r14 CONST add r13 CONST mov [r14+CONST] rax cmp r12 r15 jbe JUMP_ADDR_5	cmp [rbp+var_xxx] CONST mov [r14+CONST] r14 jz JUMP_ADDR_14	mov rax [rbp+var_xxx] lea rdx off_xxx lea rsi GLOBAL_VAR mov rdi [rax+r13+CONST] call sub_xxx mov r12 [rbp+var_xxx] mov r10d eax mov eax ebx or eax CONST test r10d r10d cmovz ebx eax lea rax [r12+CONST] cmp rax r15 ja JUMP_ADDR_15	mov rcx [rbp+var_xxx] lea rax [r15+r15*2] or ebx CONST shl rax CONST mov [rcx+rax+CONST] ebx jmp JUMP_ADDR_5	mov rbx CONST lea r12 [r15+CONST] mov r14d fs:xxx test r15 r15 jz JUMP_ADDR_23	mov rcx [rbp+var_xxx] lea rax [r15+r15*2] shl rax CONST lea r13 [rcx+rax+CONST]	mov rdi [r13+CONST] sub r12 CONST sub r13 CONST call sub_xxx cmp r12 CONST jnz JUMP_ADDR_22	mov rdi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx]	mov rsi [rbp+var_xxx] call sub_xxx mov fs:xxx r14d mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_5	call sub_xxx	mov rbx CONST mov r14d fs:xxx jmp JUMP_ADDR_24
[ph]libcap-git-setcap___gconv
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rcx cmp rdi CONST jz JUMP_ADDR_23	mov rax [CONST_VAR] mov r15 rdi mov r14 r9 sub rax CONST mov [rsp+CONST+var_xxx] rax test r9 r9 jz JUMP_ADDR_24	mov rax [rsp+CONST+var_xxx] mov r12 rdx mov [r9] CONST mov rbp rsi xor edx edx test rax rax jz JUMP_ADDR_4	mov rdx [rax]	mov rax [rsp+CONST+var_xxx] lea rax [rax+rax*2] shl rax CONST add rax r15 mov [rax+CONST] rdx mov [rax+CONST] r8 mov rax [r15+CONST] cmp [rax] CONST mov rbx [rax+CONST] jz JUMP_ADDR_6	ror rbx CONST xor rbx fs:xxx	test rbp rbp jz JUMP_ADDR_18	mov r13 [rbp+CONST] test r13 r13 jz JUMP_ADDR_18	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_25	cmp [rax] CONST jz JUMP_ADDR_25	lea rax [r15+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_14	mov rdx [rbp+CONST] cmp rdx r13 jz JUMP_ADDR_15	mov rcx [r15+CONST] movsxd rcx [rcx+CONST] add rcx rdx cmp r12 rcx jb JUMP_ADDR_15	mov r13 rdx	mov rdi rbx call sub_xxx mov rdi [r15+CONST] mov rcx r12 push CONST mov rdx rbp push CONST mov r9 r14 mov rsi [rsp+CONST+var_xxx] xor r8d r8d call rbx pop rdx pop rcx cmp eax CONST jz JUMP_ADDR_11	mov rsi [rsp+CONST+var_xxx] cmp [CONST_VAR] CONST jz JUMP_ADDR_17	mov rbx [rsp+CONST+var_xxx] lea rdx [rbx+rbx*2] shl rdx CONST mov rdx [r15+rdx+CONST] mov [CONST_VAR] rdx	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi rbx call sub_xxx mov rdi [r15+CONST] lea rsi [r15+CONST] mov r9 r14 mov rax [rsp+CONST+var_xxx] lea rax [rax+rax*2] shl rax CONST cmp [r15+rax+CONST] CONST mov eax CONST push CONST adc eax CONST xor r8d r8d xor ecx ecx xor edx edx push rax call rbx pop rsi pop rdi test eax eax jnz JUMP_ADDR_21	lea rcx [r15+CONST] xor edx edx nop [rax+rax+CONST]	mov [rcx] CONST add rdx CONST add rcx CONST cmp [rsp+CONST+var_xxx] rdx jnb JUMP_ADDR_20	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_15	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_close
endbr64 push r13 push r12 push rbp mov rbp rdi push rbx lea rbx [CONST_VAR+CONST] sub rsp CONST mov r12 [CONST_VAR+CONST] mov r13 [CONST_VAR] nop [rax+CONST]	test [rbx+CONST] CONST jnz JUMP_ADDR_4	mov rdi [rbx] add rbx CONST test rdi rdi jz JUMP_ADDR_1	call sub_xxx test [rbx+CONST] CONST jz JUMP_ADDR_1	mov rdi rbp call sub_xxx add rsp CONST mov rsi r13 mov rdi r12 pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___gconv_alias_compare
endbr64 mov rsi [CONST_VAR] mov rdi [CONST_VAR] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_derivation_compare
endbr64 push rbp mov rbp rsi push rbx mov rbx rdi sub rsp CONST mov rsi [CONST_VAR] mov rdi [CONST_VAR] call sub_xxx test eax eax jnz JUMP_ADDR_2	mov rsi [rbp+CONST] mov rdi [rbx+CONST] add rsp CONST pop rbx pop rbp jmp UNK_JUMP_ADDR	add rsp CONST pop rbx pop rbp retn
[ph]libcap-git-setcap___gconv_get_modules_db
endbr64 mov rax cs:xxx retn
[ph]libcap-git-setcap___gconv_get_alias_db
endbr64 mov rax cs:xxx retn
[ph]libcap-git-setcap___gconv_release_step
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rdi [CONST_VAR] test rdi rdi jz JUMP_ADDR_6	sub [rbx+CONST] CONST jnz JUMP_ADDR_5	mov rbp [rbx+CONST] ror rbp CONST xor rbp fs:xxx test rbp rbp jz JUMP_ADDR_4	mov rdi rbp call sub_xxx mov rdi rbx call rbp mov rdi [rbx]	call sub_xxx mov [rbx] CONST	add rsp CONST pop rbx pop rbp retn	cmp [rbx+CONST] CONST jz JUMP_ADDR_5	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_find_derivation
push rbp mov rbp rsp push r15 push r14 push r13 push r12 mov r12 rdx push rbx sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax test rsi rsi cmovnz rdi rsi mov [rbp+var_xxx] rdi test rcx rcx jz JUMP_ADDR_112	mov rax [rbp+var_xxx] lea rdi [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov [rbp+var_xxx] rax lea rax sub_xxx mov [rbp+var_xxx] rax mov rdx rax lea rax GLOBAL_VAR mov rsi rax mov [rbp+var_xxx] rax call sub_xxx test rax rax jz JUMP_ADDR_12	mov rax [rax] mov rcx [rbp+var_xxx] mov r13 [rax+CONST] mov r14 [rax+CONST] mov rax [rbp+var_xxx] mov [rcx] r14 lea r12 [r13+CONST] mov [rax] r13 test r13 r13 jz JUMP_ADDR_11	lea rax [r13+r13*2+CONST] lea rax [r13+rax*4+CONST] lea rbx [r14+rax*8+CONST]	mov eax [rbx+CONST] lea edx [rax+CONST] mov [rbx+CONST] edx test eax eax jnz JUMP_ADDR_10	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_10	call sub_xxx mov [rbx] rax test rax rax jz JUMP_ADDR_123	mov rdi [rax+CONST] mov rdx [rax+CONST] mov rax [rax+CONST] mov [rbx+CONST] CONST mov r15 rdi mov [rbx+CONST] rdi ror r15 CONST xor r15 fs:xxx mov [rbx+CONST] rdx mov rdi r15 mov [rbx+CONST] rax test r15 r15 jz JUMP_ADDR_9	call sub_xxx mov rdi rbx call r15 mov rdi [rbx+CONST]	xor rdi fs:xxx rol rdi CONST mov [rbx+CONST] rdi	sub r12 CONST sub rbx CONST cmp r12 CONST jnz JUMP_ADDR_4	xor r8d r8d jmp JUMP_ADDR_110	sub rsp CONST lea rax [rsp+CONST+var_xxx] and rax CONST mov r14 rax mov [rbp+var_xxx] rax mov rax [rbp+var_xxx] mov [r14] rax mov rdi rax call sub_xxx sub rsp CONST mov rdi r12 mov [r14+CONST] CONST lea rbx [rsp+CONST+var_xxx] mov [r14+CONST] rax and rbx CONST mov [r14+CONST] CONST mov [r14+CONST] CONST mov [rbx] r12 call sub_xxx mov [rbx+CONST] CONST mov [rbx+CONST] rax lea rax [rbx+CONST] mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [r14+CONST] rbx mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] xor r13d r13d xor r12d r12d mov [rbp+var_xxx] CONST mov [rbp+var_xxx] r13 mov [rbp+var_xxx] CONST mov r13 rax jmp JUMP_ADDR_17	mov eax [rbp+var_xxx] cmp [r13+CONST] eax jl JUMP_ADDR_19	mov r13 [r13+CONST] test r13 r13 jz JUMP_ADDR_74	mov r12d [r13+CONST]	cmp r12d [rbp+var_xxx] jg JUMP_ADDR_15	jz JUMP_ADDR_14	mov rbx cs:xxx test rbx rbx jz JUMP_ADDR_15	mov r15 [r13+CONST] jmp JUMP_ADDR_23	mov rbx [rbx+CONST]	test rbx rbx jz JUMP_ADDR_15	mov rsi [rbx] mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_34	jns JUMP_ADDR_21	mov rbx [rbx+CONST] jmp JUMP_ADDR_22	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_28	mov rsi rax mov rdi r14 call sub_xxx test eax eax jz JUMP_ADDR_37	cmp [rbp+var_xxx] r12d jg JUMP_ADDR_46	jnz JUMP_ADDR_32	mov ecx [rbp+var_xxx] cmp [rbp+var_xxx] ecx jg JUMP_ADDR_46	nop [rax+rax+CONST]	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_15	mov r12d [r13+CONST]	mov r14 [rbx+CONST] cmp [r14] CONST jnz JUMP_ADDR_36	cmp [r14+CONST] CONST cmovz r14 [rbp+var_xxx]	mov rsi [rbp+var_xxx] mov eax [r13+CONST] mov rdi r14 add eax [rbx+CONST] add r12d [rbx+CONST] mov [rbp+var_xxx] eax call sub_xxx test eax eax jnz JUMP_ADDR_26	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_73	mov r15 rax jmp JUMP_ADDR_40	mov r15 [r15+CONST] test r15 r15 jz JUMP_ADDR_73	mov rsi [r15] mov rdi r14 call sub_xxx test eax eax jnz JUMP_ADDR_39	cmp [r15+CONST] r12d jg JUMP_ADDR_72	jz JUMP_ADDR_70	cmp [rbp+var_xxx] r12d jg JUMP_ADDR_50	jnz JUMP_ADDR_32	mov ecx [rbp+var_xxx] mov eax [rbp+var_xxx] cmp ecx eax cmovle eax ecx mov [rbp+var_xxx] eax jmp JUMP_ADDR_32	mov r15 [rbp+var_xxx] nop [rax+rax+CONST]	mov rsi [r15] mov rdi r14 call sub_xxx test eax eax jz JUMP_ADDR_51	mov r15 [r15+CONST] test r15 r15 jnz JUMP_ADDR_47	sub rsp CONST mov rdi r14 lea rdx [rsp+CONST+var_xxx] and rdx CONST mov [rdx] r14 mov r15 rdx call sub_xxx mov [r15+CONST] r12d mov [r15+CONST] rax mov eax [rbp+var_xxx] mov [r15+CONST] rbx mov [r15+CONST] eax mov rax [rbp+var_xxx] mov [r15+CONST] r13 mov [r15+CONST] CONST mov [rax] r15 lea rax [r15+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_32	mov eax [rbp+var_xxx] mov [rbp+var_xxx] r12d mov [rbp+var_xxx] eax jmp JUMP_ADDR_32	cmp [r15+CONST] r12d jg JUMP_ADDR_55	jnz JUMP_ADDR_32	mov eax [rbp+var_xxx] cmp [r15+CONST] eax jle JUMP_ADDR_32	nop [rax+CONST]	mov [r15+CONST] rbx mov rdi [rbp+var_xxx] mov [r15+CONST] r13 jmp JUMP_ADDR_57	mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_62	mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_56	mov rdx [CONST_VAR+CONST] mov esi [rax+CONST] mov ecx [rax+CONST] mov rax [rdx+CONST] test rax rax jz JUMP_ADDR_61	nop [rax]	mov rdx [rdx+CONST] add esi [rax+CONST] add ecx [rax+CONST] mov rax [rdx+CONST] test rax rax jnz JUMP_ADDR_60	mov [CONST_VAR+CONST] esi mov [CONST_VAR+CONST] ecx mov rdi [CONST_VAR+CONST] test rdi rdi jnz JUMP_ADDR_57	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_32	mov edi [rbp+var_xxx] mov r8d [rbp+var_xxx] jmp JUMP_ADDR_67	cmp ecx r8d jge JUMP_ADDR_66	cmp edx edi cmovz r8d ecx	mov rax [rax+CONST] test rax rax jz JUMP_ADDR_69	mov rsi [rax+CONST] mov rcx [rax+CONST] mov edx [rcx+CONST] mov ecx [rcx+CONST] add edx [CONST_VAR+CONST] add ecx [CONST_VAR+CONST] mov [rax+CONST] edx mov [rax+CONST] ecx cmp edx edi jge JUMP_ADDR_64	mov rax [rax+CONST] mov r8d ecx mov edi edx test rax rax jnz JUMP_ADDR_67	mov [rbp+var_xxx] edi mov [rbp+var_xxx] r8d jmp JUMP_ADDR_32	mov eax [rbp+var_xxx] cmp [r15+CONST] eax jle JUMP_ADDR_43	nop [rax]	mov eax [rbp+var_xxx] mov [r15+CONST] rbx mov [r15+CONST] r13 mov [r15+CONST] r12d mov [r15+CONST] eax jmp JUMP_ADDR_43	sub rsp CONST mov rdi r14 lea rdx [rsp+CONST+var_xxx] and rdx CONST mov [rdx] r14 mov r15 rdx call sub_xxx mov [r15+CONST] r12d mov [r15+CONST] rax mov eax [rbp+var_xxx] mov [r15+CONST] rbx mov [r15+CONST] eax mov rax [rbp+var_xxx] mov [r15+CONST] r13 mov [r15+CONST] rax mov [rbp+var_xxx] r15 jmp JUMP_ADDR_43	mov r13 [rbp+var_xxx] test r13 r13 jz JUMP_ADDR_114	mov rax [r13+CONST] test rax rax jz JUMP_ADDR_79	mov edx [r13+CONST] cmp [rax+CONST] edx jl JUMP_ADDR_117	jnz JUMP_ADDR_79	mov edx [r13+CONST] cmp [rax+CONST] edx cmovl r13 rax	mov rax [r13+CONST] test rax rax jz JUMP_ADDR_118	xor r15d r15d nop [rax+rax+CONST]	mov rax [rax+CONST] mov r12 r15 add r15 CONST test rax rax jnz JUMP_ADDR_81	lea rax [r15+r15*2] lea rbx [r15+rax*4] shl rbx CONST mov rdi rbx call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_119	mov rax [rbp+var_xxx] mov [rax] r15 test r15 r15 jz JUMP_ADDR_107	lea rbx [r14+rbx+CONST] mov [rbp+var_xxx] CONST mov rax rbx mov [rbp+var_xxx] CONST mov rbx r15 mov r15 r13 mov r13 r12 mov r12 rax jmp JUMP_ADDR_88	mov rsi r12 call sub_xxx	mov r15 [r15+CONST] lea rax [r13+CONST] sub r12 CONST mov rbx r13 test r13 r13 jz JUMP_ADDR_106	mov r13 rax	test r13 r13 jz JUMP_ADDR_98	mov rax [r15+CONST] mov rax [rax] mov [r12+CONST] rax	mov rax [rbp+var_xxx] cmp [rax] rbx jz JUMP_ADDR_100	lea rax [rbx+rbx*2] lea rax [rbx+rax*4] mov rax [r14+rax*8+CONST] mov [r12+CONST] rax	mov [r12+CONST] CONST mov rax [r15+CONST] mov [r12+CONST] CONST mov rdi [rax+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_85	call sub_xxx test rax rax jz JUMP_ADDR_101	mov rsi [rax] mov rdi [rax+CONST] mov [r12] rax mov [r12+CONST] rsi mov rsi [rax+CONST] mov rax [rax+CONST] mov [r12+CONST] rdi mov [r12+CONST] rsi mov [r12+CONST] rax mov rax rdi mov [r12+CONST] CONST ror rax CONST xor rax fs:xxx mov [rbp+var_xxx] rax mov rdi rax test rax rax jz JUMP_ADDR_97	call sub_xxx mov rax [rbp+var_xxx] mov rdi r12 call rax test eax eax jnz JUMP_ADDR_115	mov rdi [r12+CONST]	xor rdi fs:xxx rol rdi CONST mov [r12+CONST] rdi jmp JUMP_ADDR_86	mov rdi [rbp+var_xxx] call sub_xxx mov [rbp+var_xxx] rax mov [r14+CONST] rax test rax rax jnz JUMP_ADDR_90	mov ebx CONST jmp JUMP_ADDR_102	mov rdi [r15] call sub_xxx mov [rbp+var_xxx] rax mov [r12+CONST] rax test rax rax jnz JUMP_ADDR_92	lea rbx [r13+CONST]	mov rax [rbp+var_xxx] xor r8d r8d cmp rbx [rax] jnb JUMP_ADDR_122	lea rax [rbx+rbx*2] mov r12 [rbp+var_xxx] mov r15d r8d lea rax [rbx+rax*4] lea r13 [r14+rax*8]	mov rdi r13 add rbx CONST add r13 CONST call sub_xxx cmp rbx [r12] jb JUMP_ADDR_104	mov rdi r14 mov [rbp+var_xxx] r15d xor r14d r14d xor r15d r15d call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rax [rbp+var_xxx] mov r8d [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] test r8d r8d mov [rax] CONST mov eax CONST cmovz r8d eax jmp JUMP_ADDR_108	mov rax [rbp+var_xxx] mov r15 [rax]	mov rax [rbp+var_xxx] xor r8d r8d mov [rax] r14	mov rdi [rbp+var_xxx] mov [rbp+var_xxx] r8d call sub_xxx mov rdi [rbp+var_xxx] lea rbx [rax+CONST] call sub_xxx lea rdi [rbx+rax+CONST] lea r12 [rax+CONST] call sub_xxx mov r8d [rbp+var_xxx] test rax rax mov r13 rax jz JUMP_ADDR_110	lea rdi [rax+CONST] mov rsi [rbp+var_xxx] mov rdx rbx mov [rax] rdi call sub_xxx mov rsi [rbp+var_xxx] mov rdx r12 mov rdi rax call sub_xxx mov [r13+CONST] r14 mov rdi r13 mov rdx [rbp+var_xxx] mov [r13+CONST] rax mov rsi [rbp+var_xxx] mov [r13+CONST] r15 call sub_xxx mov r8d [rbp+var_xxx] test rax rax jz JUMP_ADDR_120	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_127	lea rsp [rbp+CONST] mov eax r8d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rdx lea rdi [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax lea rax sub_xxx mov [rbp+var_xxx] rax mov rdx rax lea rax GLOBAL_VAR mov rsi rax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax call sub_xxx test rax rax jnz JUMP_ADDR_2	sub rsp CONST mov rdi r12 lea rax [rsp+CONST+var_xxx] and rax CONST mov [rax] r12 mov rbx rax mov [rbp+var_xxx] rax call sub_xxx mov [rbx+CONST] CONST mov [rbx+CONST] rax lea rax [rbx+CONST] mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbp+var_xxx] rax mov [rbp+var_xxx] r12 jmp JUMP_ADDR_13	mov rax [rbp+var_xxx] xor r14d r14d xor r15d r15d mov r8d CONST mov [rax] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_108	mov r8d eax xor eax eax lea rbx [rbx+CONST] xor rax fs:xxx rol rax CONST mov [r12+CONST] rax mov rax [rbp+var_xxx] cmp rbx [rax] jb JUMP_ADDR_103	mov rdi r14 mov [rbp+var_xxx] r8d xor r14d r14d xor r15d r15d call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rax [rbp+var_xxx] mov r8d [rbp+var_xxx] mov [rax] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_108	mov r13 rax mov rax [r13+CONST] test rax rax jnz JUMP_ADDR_80	xor edi edi call sub_xxx mov r14 rax test rax rax jnz JUMP_ADDR_121	mov rax [rbp+var_xxx] xor r14d r14d xor r15d r15d mov r8d CONST mov [rax] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_108	mov rdi r13 call sub_xxx mov r8d [rbp+var_xxx] jmp JUMP_ADDR_110	mov rax [rbp+var_xxx] xor r15d r15d mov [rax] CONST jmp JUMP_ADDR_107	mov rdi r14 xor r15d r15d xor r14d r14d call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rax [rbp+var_xxx] mov r8d CONST mov [rax] CONST mov rax [rbp+var_xxx] mov [rax] CONST jmp JUMP_ADDR_108	add r12 CONST sub [rbx+CONST] CONST cmp r13 r12 jbe JUMP_ADDR_126	lea rax [r12+r12*2] lea rax [r12+rax*4] lea rbx [r14+rax*8]	mov rdi rbx add r12 CONST add rbx CONST call sub_xxx cmp r13 r12 ja JUMP_ADDR_125	mov r8d CONST jmp JUMP_ADDR_110	call sub_xxx
[ph]libcap-git-setcap___gconv_compare_alias
endbr64 push r15 push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx lea rdx [rsp+CONST+var_xxx] mov rsi rbp mov rdi rbx call sub_xxx test eax eax jnz JUMP_ADDR_4	mov eax [rsp+CONST+var_xxx]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_11	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea r13 [rsp+CONST+var_xxx] lea r15 sub_xxx mov [rsp+CONST+var_xxx] rbp lea r14 GLOBAL_VAR mov rdx r15 mov rdi r13 mov rsi r14 call sub_xxx test rax rax jz JUMP_ADDR_9	mov rax [rax] mov r12 [rax+CONST] test r12 r12 cmovz r12 rbp	mov rdx r15 mov rsi r14 mov rdi r13 mov [rsp+CONST+var_xxx] rbx call sub_xxx test rax rax jz JUMP_ADDR_10	mov rax [rax] mov rdi [rax+CONST] test rdi rdi cmovz rdi rbx	mov rsi r12 call sub_xxx jmp JUMP_ADDR_2	mov r12 rbp jmp JUMP_ADDR_6	mov rdi rbx jmp JUMP_ADDR_8	call sub_xxx
[ph]libcap-git-setcap___gconv_find_transform
endbr64 push r15 mov r15 rcx push r14 mov r14d r8d push r13 mov r13 rsi push r12 push rbp mov rbp rdi push rbx mov rbx rdx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_21	mov edx CONST cmpxchg cs:xxx edx	mov r8d r14d mov rcx r15 mov rdx rbx mov rsi r13 mov rdi rbp call sub_xxx mov r12d eax cmp eax CONST jz JUMP_ADDR_7	mov eax fs:xxx test eax eax jnz JUMP_ADDR_19	sub cs:xxx CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_36	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp cs:xxx CONST jz JUMP_ADDR_17	lea r12 [rsp+CONST+var_xxx] lea rdx sub_xxx mov [rsp+CONST+var_xxx] r13 lea rsi GLOBAL_VAR mov rdi r12 call sub_xxx lea rsi GLOBAL_VAR lea rdx sub_xxx test rax rax mov rcx rax jz JUMP_ADDR_10	mov rax [rax] mov rcx [rax+CONST]	mov rdi r12 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rbp call sub_xxx mov rcx [rsp+CONST+var_xxx] test rax rax mov r12 rax jz JUMP_ADDR_12	mov rax [rax] mov r12 [rax+CONST]	and r14d CONST jnz JUMP_ADDR_23	mov rsi r12 mov r9 r15 mov r8 rbx mov rdx r13 mov rdi rbp call sub_xxx mov r12d eax mov eax fs:xxx test eax eax jnz JUMP_ADDR_32	sub cs:xxx CONST	test r12d r12d jnz JUMP_ADDR_5	xor r12d r12d cmp [rbx] CONST setz r12b jmp JUMP_ADDR_5	mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	sub cs:xxx CONST mov r12d CONST jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_5	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_5	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2	mov rsi r13 mov rdi rbp mov [rsp+CONST+var_xxx] rcx call sub_xxx test eax eax jz JUMP_ADDR_30	test r12 r12 mov rcx [rsp+CONST+var_xxx] jz JUMP_ADDR_26	mov rsi r13 mov rdi r12 call sub_xxx mov rcx [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_30	test rcx rcx jz JUMP_ADDR_13	mov rsi rcx mov rdi rbp mov [rsp+CONST+var_xxx] rcx call sub_xxx test eax eax jz JUMP_ADDR_30	test r12 r12 mov rcx [rsp+CONST+var_xxx] jz JUMP_ADDR_13	mov rsi rcx mov rdi r12 call sub_xxx mov rcx [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_13	mov eax fs:xxx test eax eax jnz JUMP_ADDR_37	sub cs:xxx CONST or r12d CONST jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_15	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_15	xor eax eax xchg eax cs:xxx mov r12d CONST cmp eax CONST jle JUMP_ADDR_5	jmp JUMP_ADDR_20	call sub_xxx	xor eax eax xchg eax cs:xxx or r12d CONST sub eax CONST jle JUMP_ADDR_5	jmp JUMP_ADDR_20
[ph]libcap-git-setcap___gconv_close_transform
endbr64 push r14 push r13 mov r13 rdi push r12 mov r12 rsi push rbp push rbx mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	mov edx CONST cmpxchg cs:xxx edx	lea rbp [r12+CONST] test r12 r12 jz JUMP_ADDR_12	lea rax [r12+r12*2] lea rax [r12+rax*4] lea rbx [r13+rax*8+CONST] jmp JUMP_ADDR_9	sub [rbx+CONST] CONST jnz JUMP_ADDR_8	mov r14 [rbx+CONST] ror r14 CONST xor r14 fs:xxx test r14 r14 jz JUMP_ADDR_7	mov rdi r14 call sub_xxx mov rdi rbx call r14 mov rdi [rbx]	call sub_xxx mov [rbx] CONST	sub rbp CONST sub rbx CONST cmp rbp CONST jz JUMP_ADDR_12	mov rdi [rbx] test rdi rdi jnz JUMP_ADDR_4	cmp [rbx+CONST] CONST jz JUMP_ADDR_8	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi r12 mov rdi r13 call sub_xxx mov eax fs:xxx test eax eax jnz JUMP_ADDR_15	sub cs:xxx CONST	pop rbx xor eax eax pop rbp pop r12 pop r13 pop r14 retn	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_14	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_14	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap___gconv_get_path
push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rbx cs:xxx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax test rbx rbx jnz JUMP_ADDR_27	mov r13 cs:xxx test r13 r13 jz JUMP_ADDR_23	mov rdi r13 call sub_xxx mov rsi r13 mov rdx rax lea rax [rax+CONST] mov [rbp+var_xxx] rax lea rax [rdx+CONST] and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST mov [rbp+var_xxx] rdi call sub_xxx mov rsi cs:xxx xor edi edi mov [rax] CONST lea rdx [rax+CONST] mov [rax+CONST] rsi mov eax cs:xxx xor esi esi mov [rdx+CONST] eax movzx eax cs:xxx mov [rdx+CONST] ax movzx eax cs:xxx mov [rdx+CONST] al call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_25	mov rdi rax call sub_xxx mov r12 [rbp+var_xxx] mov [rbp+CONST] rax add rax CONST mov [rbp+var_xxx] rax	mov esi CONST mov rdi r12 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_24	mov r14d CONST jmp JUMP_ADDR_7	mov r15 rax	lea rcx [rbx+CONST] xor eax eax lea rdi [r15+CONST] mov esi CONST cmp r15 rcx mov rbx r15 setnz al add r14d eax call sub_xxx test rax rax jnz JUMP_ADDR_6	lea edx [r14+CONST] lea edi [r14+CONST] movsxd r15 r14d movsxd rdx edx imul rdx [rbp+var_xxx] movsxd rdi edi shl rdi CONST	add rdi r15 add rdi [rbp+var_xxx] add rdi rdx call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_30	add r15 CONST mov rdi r12 lea r14 GLOBAL_VAR mov cs:xxx CONST shl r15 CONST mov rsi r14 add r15 rax lea rax [rbp+var_xxx] mov rdx rax mov [rbp+var_xxx] rax call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_29	mov rbx [rbp+var_xxx] xor r12d r12d nop [rax+CONST]	mov [rbx] r15 cmp [r8] CONST jz JUMP_ADDR_15	test r13 r13 jz JUMP_ADDR_26	mov rdx [rbp+CONST] mov rdi r15 mov rsi r13 mov [rbp+var_xxx] r8 call sub_xxx mov r8 [rbp+var_xxx] mov [rax] CONST lea r15 [rax+CONST]	mov rsi r8 mov rdi r15 call sub_xxx cmp [rax+CONST] CONST jz JUMP_ADDR_17	mov [rax] CONST add rax CONST	mov rdx rax sub rdx [rbx] cmp rdx cs:xxx mov [rbx+CONST] rdx jbe JUMP_ADDR_19	mov cs:xxx rdx	mov [rax] CONST mov rdx [rbp+var_xxx] mov rsi r14 xor edi edi lea r15 [rax+CONST] add r12d CONST add rbx CONST call sub_xxx mov r8 rax test rax rax jnz JUMP_ADDR_12	mov rax [rbp+var_xxx] movsxd r12 r12d shl r12 CONST add rax r12 mov [rax] CONST mov [rax+CONST] CONST	mov rax [rbp+var_xxx] mov rdi r13 mov cs:xxx rax call sub_xxx mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_28	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	sub rsp CONST mov rax cs:xxx mov [rbp+var_xxx] CONST lea r12 [rsp+CONST+var_xxx] mov [rbp+CONST] CONST and r12 CONST mov [rbp+var_xxx] CONST mov [r12] rax mov eax cs:xxx mov [rbp+var_xxx] r12 mov [r12+CONST] eax movzx eax cs:xxx mov [r12+CONST] ax movzx eax cs:xxx mov [r12+CONST] al jmp JUMP_ADDR_4	xor edx edx mov r15d CONST mov edi CONST jmp JUMP_ADDR_9	mov [rbp+var_xxx] CONST mov r12 [rbp+var_xxx] mov [rbp+CONST] CONST jmp JUMP_ADDR_4	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rax unk_xxx mov [rbp+var_xxx] rax jmp JUMP_ADDR_21
[ph]libcap-git-setcap_insert_module
push r15 push r14 push r13 mov r13 rdi push r12 push rbp push rbx sub rsp CONST mov rbp cs:xxx test rbp rbp jz JUMP_ADDR_19	mov r12 [CONST_VAR] mov r14d esi lea rbx GLOBAL_VAR jmp JUMP_ADDR_3	lea rbx [rbp+CONST] add rbp CONST test eax eax cmovns rbx rbp mov rbp [rbx] test rbp rbp jz JUMP_ADDR_10	mov rsi [rbp+CONST] mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_2	mov r15 [r13+CONST] nop [rax+rax+CONST]	mov rsi [rbp+CONST] mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_12	lea rbx [rbp+CONST] mov rbp [rbp+CONST] test rbp rbp jz JUMP_ADDR_10	mov rsi [rbp+CONST] mov rdi r12 call sub_xxx test eax eax jz JUMP_ADDR_5	lea rbx [rbp+CONST] mov rbp [rbp+CONST] test rbp rbp jnz JUMP_ADDR_7	nop [rax+rax+CONST]	mov [rbx] r13	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax [rbp+CONST] cmp [r13+CONST] eax jl JUMP_ADDR_17	jz JUMP_ADDR_16	test r14d r14d jz JUMP_ADDR_11	mov rdi r13 jmp JUMP_ADDR_18	mov eax [rbp+CONST] cmp [r13+CONST] eax jge JUMP_ADDR_14	mov rax [rbp+CONST] mov rdi rbp mov [r13+CONST] rax mov rax [rbp+CONST] mov [r13+CONST] rax mov rax [rbp+CONST] mov [r13+CONST] rax mov [rbx] r13	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	lea rbx GLOBAL_VAR jmp JUMP_ADDR_10
[ph]libcap-git-setcap_add_alias2.part.0
push r13 sub rdx rdi push r12 mov r13 rdx mov r12 rsi push rbp push rbx mov rbx rdi lea rdi [rdx+CONST] sub rsp CONST call sub_xxx test rax rax jz JUMP_ADDR_4	lea rdi [rax+CONST] mov rdx r13 mov rsi rbx mov rbp rax call sub_xxx sub r12 rbx lea rdx sub_xxx mov rdi rbp mov [rbp+CONST] rax add rax r12 lea rsi GLOBAL_VAR mov [rbp+CONST] rax call sub_xxx test rax rax jz JUMP_ADDR_3	cmp rbp [rax] jz JUMP_ADDR_4	add rsp CONST mov rdi rbp pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap_add_module.constprop.0
push rbp mov rbp rsp push r15 push r14 push r13 mov r13 rdi push r12 push rbx mov rbx rdx sub rsp CONST mov [rbp+var_xxx] rsi mov rdx cs:xxx mov [rbp+var_xxx] ecx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax movsx rax [CONST_VAR] test [rdx+rax*2+CONST] CONST jz JUMP_ADDR_36	nop [rax+rax+CONST]	movsx rax [r13+CONST] add r13 CONST mov rcx rax test [rdx+rax*2+CONST] CONST jnz JUMP_ADDR_2	test cl cl jz JUMP_ADDR_29	mov rsi cs:xxx mov r12 r13 jmp JUMP_ADDR_6	mov eax [CONST_VAR+rax*4] mov [r12+CONST] al movsx rax [r12] test al al jz JUMP_ADDR_29	mov r14 r12 add r12 CONST test [rdx+rax*2+CONST] CONST jz JUMP_ADDR_5	movsx rax [r14+CONST] mov [r14] CONST mov rdi r12 mov r9 rax test [rdx+rax*2+CONST] CONST jz JUMP_ADDR_10	nop [rax+CONST]	movsx rax [CONST_VAR+CONST] add rdi CONST mov r9 rax test [rdx+rax*2+CONST] CONST jnz JUMP_ADDR_9	mov r8 r12 test r9b r9b jnz JUMP_ADDR_13	jmp JUMP_ADDR_29	mov eax [CONST_VAR+rax*4] mov [r8+CONST] al movsx rax [r15+CONST] test al al jz JUMP_ADDR_29	mov r15 rdi mov r9 r8 lea rdi [CONST_VAR+CONST] add r8 CONST test [rdx+rax*2+CONST] CONST jz JUMP_ADDR_12	mov [r9] CONST nop [rax]	movsx rcx [r15+CONST] add r15 CONST mov rax rcx test [rdx+rcx*2+CONST] CONST jnz JUMP_ADDR_15	mov rsi r8 test cl cl jz JUMP_ADDR_23	nop [rax+rax+CONST]	mov r11 rsi add r15 CONST add rsi CONST mov [CONST_VAR+CONST] al movzx eax [r15] test al al jz JUMP_ADDR_23	movsx rcx al test [rdx+rcx*2+CONST] CONST jz JUMP_ADDR_18	mov [CONST_VAR] CONST add r11 CONST lea rsi [rbp+var_xxx] mov edx CONST mov rdi r15 mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11 call sub_xxx cmp [rbp+var_xxx] r15 mov r11 [rbp+var_xxx] mov r9 [rbp+var_xxx] mov r8 [rbp+var_xxx] mov [rbp+var_xxx] eax jz JUMP_ADDR_22	test eax eax jg JUMP_ADDR_24	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_24	mov [CONST_VAR] CONST lea r11 [CONST_VAR+CONST] mov [rbp+var_xxx] CONST	movzx eax [r9+CONST] test al al jz JUMP_ADDR_29	cmp al CONST mov eax CONST mov r15d CONST cmovz rbx rax mov rax r11 sub rax r8 mov [rbp+var_xxx] rax cmp rax CONST jle JUMP_ADDR_27	xor r15d r15d cmp [r11+CONST] CONST setnz r15b lea r15d [r15+r15*2]	mov r10 r12 mov rdi r13 mov [rbp+var_xxx] r9 sub r10 r13 mov [rbp+var_xxx] r11 mov rsi r10 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r8 call sub_xxx mov rsi r13 mov rdx rax lea rax [rax+CONST] and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST mov [CONST_VAR+rdx] CONST call sub_xxx lea rdi [rbp+var_xxx] lea rdx sub_xxx lea rsi GLOBAL_VAR mov [rbp+var_xxx] rax call sub_xxx mov r10 [rbp+var_xxx] mov r11 [rbp+var_xxx] test rax rax mov r9 [rbp+var_xxx] jz JUMP_ADDR_31	nop [rax]	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_38	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	sub r11 r13 movsxd rax r15d mov edi CONST mov [rbp+var_xxx] r10 lea rsi [rbx+r11+CONST] mov [rbp+var_xxx] r9 add rsi rax call sub_xxx test rax rax jz JUMP_ADDR_29	lea rdi [rax+CONST] mov rdx [rbp+var_xxx] mov rsi r13 mov [rbp+var_xxx] rax mov [rax] rdi call sub_xxx mov r11 [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rsi r12 mov rdi rax mov [r11+CONST] rax sub rdx r14 call sub_xxx mov r11 [rbp+var_xxx] test rbx rbx mov r8 [rbp+var_xxx] mov rdi rax mov eax [rbp+var_xxx] mov [r11+CONST] rdi mov [r11+CONST] eax mov eax [rbp+var_xxx] mov [r11+CONST] eax jnz JUMP_ADDR_37	mov rdx [rbp+var_xxx] mov rsi r8 mov [rbp+var_xxx] r11 call sub_xxx test r15d r15d mov r11 [rbp+var_xxx] jz JUMP_ADDR_35	mov edx cs:xxx mov [rax+CONST] edx	mov esi CONST mov rdi r11 call sub_xxx jmp JUMP_ADDR_29	mov rcx rax jmp JUMP_ADDR_3	mov rsi [rbp+var_xxx] mov rdx rbx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r11 call sub_xxx mov r8 [rbp+var_xxx] mov r11 [rbp+var_xxx] mov rdi rax jmp JUMP_ADDR_33	call sub_xxx
[ph]libcap-git-setcap___gconv_read_conf
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax mov rax CONST mov eax fs:xxx mov [rbp+var_xxx] eax call sub_xxx test eax eax jnz JUMP_ADDR_3	mov rax CONST mov ecx [rbp+var_xxx] mov fs:xxx ecx mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_70	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	call sub_xxx mov rax cs:xxx mov rcx [rax] mov [rbp+var_xxx] rcx test rcx rcx jz JUMP_ADDR_69	lea rcx [rbp+var_xxx] mov [rbp+var_xxx] CONST mov r15 cs:xxx lea rbx [rbp+var_xxx] mov [rbp+var_xxx] rcx nop [rax+CONST]	mov rdx [rax+CONST] mov rsi [rbp+var_xxx] lea rax [rdx+CONST] mov [rbp+var_xxx] rdx and rax CONST sub rsp rax lea r12 [rsp+CONST+var_xxx] and r12 CONST mov rdi r12 call sub_xxx lea rcx GLOBAL_VAR mov rdi r12 lea rsi unk_xxx mov rdx [rcx] mov ecx cs:xxx mov [rax+CONST] ecx movzx ecx cs:xxx mov [rax] rdx mov [rax+CONST] cx call sub_xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov r12 rax test rax rax jz JUMP_ADDR_25	mov eax [rax] mov edx eax or dh CONST mov [r12] edx test al CONST jnz JUMP_ADDR_68	nop	mov rdi [rbp+var_xxx] mov rcx r12 mov edx CONST mov rsi rbx call sub_xxx mov r14 rax test rax rax js JUMP_ADDR_23	mov r13 [rbp+var_xxx] mov esi CONST mov rdi r13 call sub_xxx test rax rax jz JUMP_ADDR_39	mov [rax] CONST jmp JUMP_ADDR_12	add r13 CONST	movsx rdx [r13+CONST] test [r15+rdx*2+CONST] CONST jnz JUMP_ADDR_11	cmp rax r13 jz JUMP_ADDR_22	movsx rax [r13+CONST] mov rdi r13 test al al jnz JUMP_ADDR_17	jmp JUMP_ADDR_22	movsx rax [CONST_VAR+CONST] add rdi CONST test al al jz JUMP_ADDR_18	test [r15+rax*2+CONST] CONST jz JUMP_ADDR_16	mov rax rdi sub rax r13 cmp rax CONST jz JUMP_ADDR_41	cmp rax CONST jnz JUMP_ADDR_22	cmp [r13+CONST] CONST jz JUMP_ADDR_65	nop [rax+CONST]	test [r12] CONST jz JUMP_ADDR_8	mov rdi [rbp+var_xxx]	call sub_xxx mov rdi r12 call sub_xxx	mov rcx [rbp+var_xxx] mov rax cs:xxx add rax rcx add rcx CONST mov rsi [rax] mov [rbp+var_xxx] rcx mov [rbp+var_xxx] rsi test rsi rsi jnz JUMP_ADDR_5	lea r15 off_xxx lea r13 sub_xxx lea r14 [r15+CONST] lea r12 GLOBAL_VAR jmp JUMP_ADDR_28	add r15 CONST cmp r15 r14 jz JUMP_ADDR_30	mov rax [r15] mov rdx r13 mov rsi r12 mov rdi rbx mov [rbp+var_xxx] rax call sub_xxx test rax rax jnz JUMP_ADDR_27	mov rdi r15 xor esi esi add r15 CONST call sub_xxx cmp r15 r14 jnz JUMP_ADDR_28	lea r13 GLOBAL_VAR nop [rax]	mov rdi r13 xor esi esi mov r15 r13 call sub_xxx xor esi esi lea r14 [rax+CONST] mov rdi r14 call sub_xxx mov rbx cs:xxx mov r12 rax lea r13 [rax+CONST]	test rbx rbx jz JUMP_ADDR_36	mov rsi [rbx] mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_37	js JUMP_ADDR_67	mov rbx [rbx+CONST] test rbx rbx jnz JUMP_ADDR_33	mov rdx r13 mov rsi r14 mov rdi r15 call sub_xxx	cmp [r12+CONST] CONST jnz JUMP_ADDR_31	jmp JUMP_ADDR_1	lea rdx [r13+r14+CONST] cmp [rdx] CONST jnz JUMP_ADDR_12	mov [rdx] CONST jmp JUMP_ADDR_12	cmp [r13+CONST] CONST jnz JUMP_ADDR_22	cmp [r13+CONST] CONST jnz JUMP_ADDR_22	jmp JUMP_ADDR_45	add rdi CONST	movsx rax [CONST_VAR] test [r15+rax*2+CONST] CONST jnz JUMP_ADDR_44	test al al jz JUMP_ADDR_22	mov r13 rdi jmp JUMP_ADDR_49	mov rcx cs:xxx mov eax [rcx+rax*4] mov [r13+CONST] al movsx rax [r13+CONST] test al al jz JUMP_ADDR_22	mov rdx r13 add r13 CONST test [r15+rax*2+CONST] CONST jz JUMP_ADDR_48	movsx rax [rdx+CONST] mov [rdx] CONST mov rdx r13 mov rsi rax test [r15+rax*2+CONST] CONST jz JUMP_ADDR_52	movsx rax [rdx+CONST] add rdx CONST mov rsi rax test [r15+rax*2+CONST] CONST jnz JUMP_ADDR_51	mov rcx r13 test sil sil jnz JUMP_ADDR_55	jmp JUMP_ADDR_22	mov rsi cs:xxx add rdx CONST add rcx CONST mov eax [CONST_VAR+rax*4] mov [rcx+CONST] al movsx rax [rdx] test al al jz JUMP_ADDR_56	test [r15+rax*2+CONST] CONST jz JUMP_ADDR_54	cmp rcx r13 jz JUMP_ADDR_22	mov [rcx] CONST mov rdx cs:xxx test rdx rdx jz JUMP_ADDR_64	mov [rbp+CONST] r13 mov r14 rdi mov r13 rdx mov [rbp+var_xxx] rcx jmp JUMP_ADDR_60	mov r13 [r13+CONST] test r13 r13 jz JUMP_ADDR_63	mov rsi [r13+CONST] mov rdi r14 call sub_xxx test eax eax jz JUMP_ADDR_22	jns JUMP_ADDR_59	mov r13 [r13+CONST] test r13 r13 jnz JUMP_ADDR_60	mov rcx [rbp+var_xxx] mov r13 [rbp+CONST] mov rdi r14	lea rdx [rcx+CONST] mov rsi r13 call sub_xxx jmp JUMP_ADDR_22	cmp [r13+CONST] CONST jnz JUMP_ADDR_22	mov ecx cs:xxx mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] lea eax [rcx+CONST] mov cs:xxx eax call sub_xxx jmp JUMP_ADDR_22	mov rbx [rbx+CONST] jmp JUMP_ADDR_32	xor edi edi jmp JUMP_ADDR_24	lea rbx [rbp+var_xxx] jmp JUMP_ADDR_26	call sub_xxx
[ph]libcap-git-setcap___gconv_load_conf
endbr64 cmp cs:xxx CONST jz JUMP_ADDR_2	lea rsi sub_xxx lea rdi GLOBAL_VAR jmp UNK_ADDR	mov eax cs:xxx test eax eax jz JUMP_ADDR_4	retn	sub rsp CONST call sub_xxx or cs:xxx CONST add rsp CONST retn
[ph]libcap-git-setcap___gconv_get_builtin_trans
endbr64 push r13 mov r13 rdi push r12 mov r12 rsi lea rsi GLOBAL_VAR push rbp lea rbp off_xxx push rbx xor ebx ebx sub rsp CONST jmp JUMP_ADDR_2	mov rsi [rbp+CONST] add rbp CONST	mov rdi r13 call sub_xxx test eax eax jz JUMP_ADDR_5	add rbx CONST cmp rbx CONST jnz JUMP_ADDR_1	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	shl rbx CONST lea rax off_xxx mov [r12+CONST] CONST add rax rbx mov [r12+CONST] CONST mov rdx [rax+CONST] mov [r12] CONST mov [r12+CONST] CONST mov [r12+CONST] rdx mov rdx [rax+CONST] mov [r12+CONST] CONST mov [r12+CONST] rdx movsx edx [rax+CONST] mov [r12+CONST] edx movsx edx [rax+CONST] mov [r12+CONST] edx movsx edx [rax+CONST] movsx eax [rax+CONST] mov [r12+CONST] edx mov [r12+CONST] eax add rsp CONST pop rbx pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___gconv_btwoc_ascii
endbr64 movzx eax sil test sil sil mov edx CONST cmovs eax edx retn
[ph]libcap-git-setcap___gconv_transform_internal_ucs4
endbr64 push r15 mov rax rdi mov r11 rcx push r14 mov r14 rdx push r13 push r12 mov r12 rsi push rbp push rbx sub rsp CONST mov edi [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] edi mov edi [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx mov [rsp+CONST+var_xxx] rdi lea rdi [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] CONST test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST+var_xxx] rdi jz JUMP_ADDR_3	mov r15 rdi ror r15 CONST xor r15 fs:xxx mov [rsp+CONST+var_xxx] r15	mov r8d [rsp+CONST+var_xxx] test r8d r8d jnz JUMP_ADDR_54	mov rsi [rsp+CONST+var_xxx] mov edi [rsp+CONST+var_xxx] test rsi rsi mov rax rsi cmovz rax r12 mov rbx [rax] mov rax [r12+CONST] mov [rsp+CONST+var_xxx] rax test edi edi jz JUMP_ADDR_14	mov rcx [r12+CONST] mov edi [rcx] mov edx edi and edx CONST jz JUMP_ADDR_14	test rsi rsi jnz JUMP_ADDR_69	mov rax [r14] movsxd rdx edx cmp r11 rax jbe JUMP_ADDR_12	test dil CONST jnz JUMP_ADDR_13	add rax CONST jmp JUMP_ADDR_11	add rax CONST cmp rdx CONST jz JUMP_ADDR_13	mov [r14] rax movzx esi [rax+CONST] add rdx CONST mov [rcx+rdx+CONST] sil cmp r11 rax jnz JUMP_ADDR_10	cmp rdx CONST jbe JUMP_ADDR_58	movzx eax [rcx+CONST] mov [rsp+CONST+var_xxx] r14 add rbx CONST mov r15 r9 mov [rbx+CONST] al movzx eax [rcx+CONST] mov [rbx+CONST] al movzx eax [rcx+CONST] mov [rbx+CONST] al movzx eax [rcx+CONST] mov [rbx+CONST] al and [rcx] CONST jmp JUMP_ADDR_15	mov [rsp+CONST+var_xxx] r14 mov r15 r9 nop	mov [rsp+CONST+var_xxx] CONST mov rax [rsp+CONST+var_xxx] mov rbp [rax] test r15 r15 jz JUMP_ADDR_17	mov rax [r15] mov [rsp+CONST+var_xxx] rax	mov rax [rsp+CONST+var_xxx] mov r10 r11 sub r10 rbp sub rax rbx cmp rax r10 cmovg rax r10 test rax rax lea rcx [rax+CONST] cmovns rcx rax sar rcx CONST jz JUMP_ADDR_36	xor eax eax nop [rax+CONST]	mov edx [rbp+rax*4+CONST] bswap edx mov [rbx+rax*4] edx add rax CONST cmp rcx rax jnz JUMP_ADDR_19	shl rcx CONST lea rax [rbp+rcx+CONST] lea r14 [rbx+rcx]	mov rdi [rsp+CONST+var_xxx] mov r13d CONST mov [CONST_VAR] rax cmp rax r11 jz JUMP_ADDR_23	lea rax [r14+CONST] cmp [rsp+CONST+var_xxx] rax sbb r13d r13d and r13d CONST add r13d CONST	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_37	add [r12+CONST] CONST test [r12+CONST] CONST jnz JUMP_ADDR_38	mov [rsp+CONST+var_xxx] r10 cmp rbx r14 jnb JUMP_ADDR_31	mov rdi [rsp+CONST+var_xxx] mov rax [r12] mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] rax call sub_xxx mov esi [rsp+CONST+var_xxx] xor r8d r8d mov rcx r14 lea rdx [rsp+CONST+var_xxx] mov r9 r15 push rsi push CONST mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] call rax pop rdx pop rcx cmp eax CONST mov r11 [rsp+CONST+var_xxx] jz JUMP_ADDR_30	mov rsi [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] cmp rsi r14 jnz JUMP_ADDR_39	test eax eax jnz JUMP_ADDR_68	mov rbx [r12] jmp JUMP_ADDR_15	cmp r13d CONST jz JUMP_ADDR_29	mov r14 [rsp+CONST+var_xxx]	cmp r13d CONST jnz JUMP_ADDR_34	mov eax [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_59	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_70	add rsp CONST mov eax r13d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r14 rbx mov rax rbp jmp JUMP_ADDR_21	mov rax [rsp+CONST+var_xxx] mov [rax] r14 jmp JUMP_ADDR_34	mov r15 r14 mov r14 [rsp+CONST+var_xxx] mov [r12] r15 jmp JUMP_ADDR_32	xor edx edx test r15 r15 jz JUMP_ADDR_41	mov rdx [r15]	cmp rdx [rsp+CONST+var_xxx] jz JUMP_ADDR_51	mov rdx rsi sub rdx rbx cmp rdx r10 cmovg rdx r10 test rdx rdx lea rdi [rdx+CONST] cmovns rdi rdx sar rdi CONST jz JUMP_ADDR_64	xor edx edx nop [rax+CONST]	mov ecx [rbp+rdx*4+CONST] bswap ecx mov [rbx+rdx*4] ecx add rdx CONST cmp rdi rdx jnz JUMP_ADDR_44	lea rdx ds:xxx add rbp rdx add rdx rbx	mov rdi [rsp+CONST+var_xxx] mov [CONST_VAR] rbp cmp rbp r11 jz JUMP_ADDR_52	lea rcx [rdx+CONST] cmp rsi rcx jnb JUMP_ADDR_52	cmp rdx rsi jnz JUMP_ADDR_66	cmp rdx rbx jnz JUMP_ADDR_28	sub [r12+CONST] CONST jmp JUMP_ADDR_28	mov rdi [rsp+CONST+var_xxx] mov rcx r14 sub rcx rsi sub [CONST_VAR] rcx jmp JUMP_ADDR_28	cmp rdx rsi jnz JUMP_ADDR_66	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_65	mov rax [r12+CONST] xor r13d r13d mov [rax] CONST test [r12+CONST] CONST jnz JUMP_ADDR_34	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r9 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_70	mov eax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] xor r8d r8d xor ecx ecx mov rdi [rsp+CONST+var_xxx] xor edx edx mov [rsp+CONST+arg_xxx] eax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+arg_xxx] eax mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov eax edi mov r13d CONST and eax CONST or eax edx mov [rcx] eax jmp JUMP_ADDR_34	mov rsi [r14] mov rdx r11 sub rdx rsi cmp rdx CONST ja JUMP_ADDR_67	mov rcx [r12+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_63	movzx edi [CONST_VAR+rax] mov [rcx+rax+CONST] dil add rax CONST cmp rdx rax jnz JUMP_ADDR_61	mov [rsp+CONST+var_xxx] edx	mov eax [rcx] mov [r14] r11 mov r13d CONST and eax CONST or eax [rsp+CONST+var_xxx] mov [rcx] eax jmp JUMP_ADDR_34	mov rdx rbx jmp JUMP_ADDR_46	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r14 [rsp+CONST+var_xxx] mov r13d eax jmp JUMP_ADDR_32	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap___gconv_transform_ucs4_internal
endbr64 push r15 mov r11 rdx push r14 push r13 push r12 mov r12 rsi push rbp push rbx mov rbx rcx sub rsp CONST mov edx [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] edx mov edx [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] edx mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx lea rdx [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rdx lea rdx [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rdx mov edx [CONST_VAR+CONST] test dl CONST jnz JUMP_ADDR_3	mov rax rdi mov rdi [CONST_VAR+CONST] cmp [rax+CONST] CONST mov [rsp+CONST+var_xxx] rdi jz JUMP_ADDR_3	mov rax rdi ror rax CONST xor rax fs:xxx mov [rsp+CONST+var_xxx] rax	mov edi [rsp+CONST+var_xxx] test edi edi jnz JUMP_ADDR_69	mov rdi [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] mov esi [rsp+CONST+var_xxx] mov rbp [r12+CONST] test rdi rdi mov rax rdi cmovz rax r12 mov r13 [rax] xor eax eax test r9 r9 mov [rsp+CONST+var_xxx] CONST cmovnz rax rcx mov [rsp+CONST+var_xxx] rax test esi esi jnz JUMP_ADDR_40	lea rax [rsp+CONST+var_xxx] xor r10d r10d mov [rsp+CONST+var_xxx] rax	mov rax [r11] mov [rsp+CONST+var_xxx] rax test r9 r9 jz JUMP_ADDR_8	add r10 [r9]	mov rax [rsp+CONST+var_xxx] lea r14 [rax+CONST] cmp rbx r14 jb JUMP_ADDR_52	lea rdi [r13+CONST] cmp rdi rbp ja JUMP_ADDR_52	mov rsi r14 mov rcx r13 and edx CONST jmp JUMP_ADDR_14	mov [rcx] eax lea rax [CONST_VAR+CONST] mov rcx rdi cmp rbx rax jb JUMP_ADDR_19	lea rdi [rcx+CONST] cmp rbp rdi jb JUMP_ADDR_19	mov rsi rax	mov eax [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] bswap eax test eax eax jns JUMP_ADDR_11	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_68	test edx edx jz JUMP_ADDR_28	add [rax] CONST lea rax [CONST_VAR+CONST] cmp rbx rax jnb JUMP_ADDR_12	nop [rax+rax+CONST]	mov [r11] rsi mov r15d CONST cmp rsi rbx jz JUMP_ADDR_21	lea rax [rcx+CONST] cmp rbp rax sbb r15d r15d and r15d CONST add r15d CONST	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_29	add [r12+CONST] CONST test [r12+CONST] CONST jnz JUMP_ADDR_51	cmp r13 rcx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] rcx jnb JUMP_ADDR_33	mov rdi [rsp+CONST+var_xxx] mov rax [r12] mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] rax call sub_xxx mov edx [rsp+CONST+var_xxx] xor r8d r8d push rdx push CONST mov r9 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] call rax pop rdx pop rcx cmp eax CONST mov r9 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] jz JUMP_ADDR_32	mov rdx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] cmp rdx rcx jnz JUMP_ADDR_53	test eax eax jnz JUMP_ADDR_96	mov r13 [r12] mov r10 [rsp+CONST+var_xxx] mov edx [r12+CONST] jmp JUMP_ADDR_6	cmp [rsp+CONST+var_xxx] CONST mov [r11] r8 mov r15d CONST jz JUMP_ADDR_22	mov rax [rsp+CONST+var_xxx] mov [rax] rcx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_95	add rsp CONST mov eax r15d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp r15d CONST jz JUMP_ADDR_27	cmp r15d CONST jnz JUMP_ADDR_30	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_30	mov rsi [r11] mov rdx rbx sub rdx rsi cmp rdx CONST ja JUMP_ADDR_93	mov rcx [r12+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_39	movzx edi [CONST_VAR+rax] mov [rcx+rax+CONST] dil add rax CONST cmp rdx rax jnz JUMP_ADDR_37	mov [rsp+CONST+var_xxx] edx	mov eax [rcx] mov [r11] rbx and eax CONST or eax [rsp+CONST+var_xxx] mov [rcx] eax jmp JUMP_ADDR_30	mov rsi [r12+CONST] mov r8d [CONST_VAR] mov eax r8d and eax CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_94	mov rdi [r11] movsxd r10 eax cmp rbx rdi jbe JUMP_ADDR_88	test r8b CONST jnz JUMP_ADDR_89	lea rax [CONST_VAR+CONST] mov rcx r10 jmp JUMP_ADDR_46	add rax CONST cmp rcx CONST jz JUMP_ADDR_48	mov [r11] rax movzx r14d [rax+CONST] add rcx CONST mov rdi rax mov [CONST_VAR+rcx+CONST] r14b cmp rax rbx jnz JUMP_ADDR_45	cmp rcx CONST jbe JUMP_ADDR_77	cmp [CONST_VAR+CONST] CONST ja JUMP_ADDR_75	movzx eax [CONST_VAR+CONST] add r13 CONST mov [r13+CONST] al movzx eax [CONST_VAR+CONST] mov [r13+CONST] al movzx eax [CONST_VAR+CONST] mov [r13+CONST] al movzx eax [CONST_VAR+CONST] mov [r13+CONST] al mov r8d [CONST_VAR]	and r8d CONST mov edx [r12+CONST] mov [CONST_VAR] r8d jmp JUMP_ADDR_5	mov [r12] rcx mov rax [rsp+CONST+var_xxx] add [r9] rax jmp JUMP_ADDR_33	mov rsi [rsp+CONST+var_xxx] mov rcx r13 jmp JUMP_ADDR_19	xor esi esi test r9 r9 jz JUMP_ADDR_55	mov rsi [r9]	add rsi [rsp+CONST+var_xxx] cmp rsi r10 jz JUMP_ADDR_67	mov rdi [rsp+CONST+var_xxx] mov ecx [r12+CONST] mov [r11] rdi cmp rbx r14 jb JUMP_ADDR_78	lea rdi [r13+CONST] mov rsi r13 cmp rdx rdi jb JUMP_ADDR_83	and ecx CONST mov r15 [rsp+CONST+var_xxx] mov r10d ecx jmp JUMP_ADDR_63	mov [CONST_VAR] ecx mov rsi rdi	lea rcx [r14+CONST] cmp rbx rcx jb JUMP_ADDR_79	lea rdi [CONST_VAR+CONST] cmp rdx rdi jb JUMP_ADDR_84	mov r14 rcx	mov ecx [r14+CONST] lea r8 [r14+CONST] bswap ecx test ecx ecx jns JUMP_ADDR_59	test r15 r15 jz JUMP_ADDR_90	test r10d r10d jz JUMP_ADDR_73	add [r15] CONST jmp JUMP_ADDR_60	sub rcx rdx sub [r11] rcx jmp JUMP_ADDR_26	mov rcx r13 mov r15d CONST jmp JUMP_ADDR_21	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_92	mov rax [r12+CONST] xor r15d r15d mov [rax] CONST test [r12+CONST] CONST jnz JUMP_ADDR_30	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r9 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_95	mov eax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] xor r8d r8d xor ecx ecx mov rdi [rsp+CONST+var_xxx] xor edx edx mov [rsp+CONST+arg_xxx] eax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+arg_xxx] eax mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov [r11] r8 cmp rsi rdx jnz JUMP_ADDR_82	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	and edx CONST jnz JUMP_ADDR_50	sub r10 rcx mov r15d CONST add rdi r10 mov [r11] rdi jmp JUMP_ADDR_30	mov eax r8d mov r15d CONST and eax CONST or eax ecx mov [CONST_VAR] eax jmp JUMP_ADDR_30	mov r14 [rsp+CONST+var_xxx] mov rsi r13	mov [r11] r14 cmp r14 rbx jz JUMP_ADDR_81	lea rcx [CONST_VAR+CONST] cmp rdx rcx jb JUMP_ADDR_85	cmp rdx rsi jz JUMP_ADDR_74	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r14 [rsp+CONST+var_xxx]	mov [r11] r14 cmp rbx r14 jz JUMP_ADDR_81	cmp rdx rsi jnz JUMP_ADDR_82	cmp rdx r13 jnz JUMP_ADDR_26	sub [r12+CONST] CONST jmp JUMP_ADDR_26	mov rcx r10 jmp JUMP_ADDR_47	mov rcx r10 jmp JUMP_ADDR_48	cmp rdx r13 jz JUMP_ADDR_74	jmp JUMP_ADDR_82	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	mov r15d eax jmp JUMP_ADDR_33
[ph]libcap-git-setcap___gconv_transform_internal_ucs4le
endbr64 push r15 mov rax rdi push r14 push r13 push r12 push rbp mov rbp rdx push rbx mov rbx rsi sub rsp CONST mov edi [rsp+CONST] mov [rsp] rcx mov [rsp+CONST] r8 mov [rsp+CONST] edi mov edi [rsp+CONST] mov [rsp+CONST] r9 mov [rsp+CONST] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi lea rdi [CONST_VAR+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] CONST test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rdi jz JUMP_ADDR_3	mov rax rdi ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov r8d [rsp+CONST] test r8d r8d jnz JUMP_ADDR_43	mov rsi [rsp+CONST] mov edi [rsp+CONST] test rsi rsi mov rax rsi cmovz rax rbx mov r14 [rax] mov rax [rbx+CONST] mov [rsp+CONST] rax test edi edi jnz JUMP_ADDR_23	mov r15 rbp mov rbp r14 nop [rax+rax+CONST]	mov rax [rsp+CONST] mov r13 [r15] mov [rsp+CONST] CONST test rax rax jz JUMP_ADDR_8	mov rax [rax] mov [rsp+CONST] rax	mov rcx [rsp] mov rax [rsp+CONST] mov rsi r13 mov rdi rbp mov r12d CONST sub rcx r13 sub rax rbp cmp rax rcx mov [rsp+CONST] rcx cmovg rax rcx test rax rax lea rdx [rax+CONST] cmovns rdx rax and rdx CONST lea rax [r13+rdx+CONST] mov [r15] rax call sub_xxx mov rcx [rsp] mov r14 rax cmp rcx [r15] jz JUMP_ADDR_10	lea rax [rax+CONST] cmp [rsp+CONST] rax sbb r12d r12d and r12d CONST add r12d CONST	cmp [rsp+CONST] CONST jnz JUMP_ADDR_32	add [rbx+CONST] CONST test [rbx+CONST] CONST jnz JUMP_ADDR_33	cmp r14 rbp jbe JUMP_ADDR_18	mov rdi [rsp+CONST] mov rax [rbx] mov [rsp+CONST] rax call sub_xxx mov esi [rsp+CONST] xor r8d r8d mov rcx r14 lea rdx [rsp+CONST] push rsi push CONST mov r9 [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rdx pop rcx mov r8d eax cmp eax CONST jz JUMP_ADDR_17	mov r12 [rsp+CONST] cmp r12 r14 jnz JUMP_ADDR_34	test r8d r8d jnz JUMP_ADDR_61	mov rbp [rbx] jmp JUMP_ADDR_6	cmp r12d CONST jz JUMP_ADDR_16	mov rbp r15	cmp r12d CONST jnz JUMP_ADDR_21	mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_50	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_57	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rcx [rbx+CONST] mov edi [rcx] mov edx edi and edx CONST jz JUMP_ADDR_5	test rsi rsi jnz JUMP_ADDR_59	mov rax [rbp+CONST] mov r8 [rsp] movsxd rdx edx cmp rax r8 jnb JUMP_ADDR_30	test dil CONST jz JUMP_ADDR_29	jmp JUMP_ADDR_31	cmp rdx CONST jz JUMP_ADDR_31	add rax CONST add rdx CONST mov [rbp+CONST] rax movzx esi [rax+CONST] mov [rcx+rdx+CONST] sil cmp r8 rax jnz JUMP_ADDR_28	cmp rdx CONST jbe JUMP_ADDR_49	movzx eax [rcx+CONST] add r14 CONST mov r15 rbp mov [r14+CONST] al movzx eax [rcx+CONST] mov [r14+CONST] al movzx eax [rcx+CONST] mov [r14+CONST] al movzx eax [rcx+CONST] mov [r14+CONST] al mov rbp r14 and [rcx] CONST jmp JUMP_ADDR_6	mov rax [rsp+CONST] mov [rax] r14 jmp JUMP_ADDR_21	mov [rbx] r14 mov rbp r15 jmp JUMP_ADDR_19	mov rdi [rsp+CONST] xor eax eax test rdi rdi jz JUMP_ADDR_36	mov rax [CONST_VAR]	cmp rax [rsp+CONST] jz JUMP_ADDR_42	mov rdi [rsp+CONST] mov rax r12 mov rsi r13 mov [rsp+CONST] r8d sub rax rbp cmp rax rdi cmovg rax rdi mov rdi rbp test rax rax lea rdx [rax+CONST] cmovns rdx rax and rdx CONST lea rax [r13+rdx+CONST] mov [r15] rax call sub_xxx mov rdi [rsp] cmp rdi [r15] mov r8d [rsp+CONST] jz JUMP_ADDR_55	lea rcx [rax+CONST] mov rdx [rsp+CONST] cmp r12 rcx jnb JUMP_ADDR_47	cmp rdx rax jnz JUMP_ADDR_56	cmp rdx rbp jnz JUMP_ADDR_15	sub [rbx+CONST] CONST jmp JUMP_ADDR_15	mov rcx r14 sub rcx r12 sub [r15] rcx jmp JUMP_ADDR_15	cmp [rsp+CONST] CONST jnz JUMP_ADDR_58	mov rax [rbx+CONST] xor r12d r12d mov [rax] CONST test [rbx+CONST] CONST jnz JUMP_ADDR_21	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_57	mov eax [rsp+CONST] mov r9 [rsp+CONST] xor r8d r8d xor ecx ecx mov rsi [rsp+CONST] mov rdi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	cmp rdx rax jnz JUMP_ADDR_56	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	and edi CONST mov r12d CONST or edi edx mov [rcx] edi jmp JUMP_ADDR_21	mov rdi [rbp+CONST] mov rcx [rsp] sub rcx rdi cmp rcx CONST ja JUMP_ADDR_60	mov rsi [rbx+CONST] xor eax eax test rcx rcx jz JUMP_ADDR_54	movzx edx [CONST_VAR+rax] mov [CONST_VAR+rax+CONST] dl add rax CONST cmp rcx rax jnz JUMP_ADDR_52	mov [rsp+CONST] ecx	mov rax [rsp] mov r12d CONST mov [rbp+CONST] rax mov eax [CONST_VAR] and eax CONST or eax [rsp+CONST] mov [CONST_VAR] eax jmp JUMP_ADDR_21	cmp [rsp+CONST] rax jz JUMP_ADDR_48	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rbp r15 mov r12d r8d jmp JUMP_ADDR_19
[ph]libcap-git-setcap___gconv_transform_ucs4le_internal
endbr64 push r15 mov rax rdi mov r11 rdx mov r15 r9 push r14 push r13 push r12 mov r12 rsi push rbp push rbx mov rbx rcx sub rsp CONST mov edi [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] edi mov edi [rsp+CONST] mov [rsp+CONST] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi lea rdi [CONST_VAR+CONST] mov [rsp+CONST] rdi mov edi [CONST_VAR+CONST] mov [rsp+CONST] CONST test dil CONST jnz JUMP_ADDR_3	mov rcx [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rcx jz JUMP_ADDR_3	mov rax rcx ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov r8d [rsp+CONST] test r8d r8d jnz JUMP_ADDR_73	mov r9 [rsp+CONST] lea rdx [rsp+CONST] mov esi [rsp+CONST] mov rbp [r12+CONST] test r9 r9 mov rax r9 cmovz rax r12 mov r13 [rax] xor eax eax test r15 r15 mov [rsp+CONST] CONST cmovnz rax rdx mov [rsp+CONST] rax test esi esi jnz JUMP_ADDR_43	mov [rsp+CONST] CONST lea rax [rsp+CONST] mov [rsp+CONST] rax	mov rax [r11] mov [rsp] rax test r15 r15 jz JUMP_ADDR_8	mov rdx [r15] add [rsp+CONST] rdx	mov rax [rsp] lea r14 [rax+CONST] cmp rbx r14 jb JUMP_ADDR_71	lea rdx [r13+CONST] cmp rbp rdx jb JUMP_ADDR_31	mov rax r14 mov rcx r13 and edi CONST jmp JUMP_ADDR_14	mov [rcx] esi lea rsi [rax+CONST] mov rcx rdx cmp rbx rsi jb JUMP_ADDR_19	lea rdx [rcx+CONST] cmp rbp rdx jb JUMP_ADDR_32	mov rax rsi	mov esi [rax+CONST] lea r8 [rax+CONST] test esi esi jns JUMP_ADDR_11	mov rdx [rsp+CONST] test rdx rdx jz JUMP_ADDR_72	test edi edi jz JUMP_ADDR_23	lea rsi [rax+CONST] add [rdx] CONST cmp rbx rsi jnb JUMP_ADDR_12	nop [rax+rax+CONST]	xor r10d r10d cmp rbx rax mov [r11] rax setnz r10b cmp [rsp+CONST] CONST lea r10d [r10+r10*2+CONST] jz JUMP_ADDR_25	mov rax [rsp+CONST] mov [rax] rcx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_94	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [r11] r8 mov r10d CONST	cmp [rsp+CONST] CONST jnz JUMP_ADDR_20	add [r12+CONST] CONST test [r12+CONST] CONST jnz JUMP_ADDR_54	cmp r13 rcx mov [rsp+CONST] rcx jnb JUMP_ADDR_36	mov rdi [rsp+CONST] mov rax [r12] mov [rsp+CONST] r10d mov [rsp+CONST] r11 mov [rsp+CONST] rax call sub_xxx mov ecx [rsp+CONST] xor r8d r8d mov r9 r15 push rcx push CONST mov rcx [rsp+CONST] mov rdx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rdx pop rcx cmp eax CONST mov r11 [rsp+CONST] mov r10d [rsp+CONST] jz JUMP_ADDR_35	mov rdx [rsp+CONST] mov rcx [rsp+CONST] cmp rdx rcx jnz JUMP_ADDR_56	test eax eax jnz JUMP_ADDR_99	mov rax [rsp+CONST] mov r13 [r12] mov edi [r12+CONST] mov [rsp+CONST] rax jmp JUMP_ADDR_6	mov rax [rsp] mov rcx r13 nop [rax+CONST]	mov [r11] rax cmp rax rbx jz JUMP_ADDR_55	lea rax [rcx+CONST] cmp rbp rax jnb JUMP_ADDR_97	mov r10d CONST jmp JUMP_ADDR_24	cmp r10d CONST jz JUMP_ADDR_30	cmp r10d CONST jnz JUMP_ADDR_21	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_21	mov rsi [r11] mov rdx rbx sub rdx rsi cmp rdx CONST ja JUMP_ADDR_95	mov rcx [r12+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_42	movzx edi [CONST_VAR+rax] mov [rcx+rax+CONST] dil add rax CONST cmp rdx rax jnz JUMP_ADDR_40	mov [rsp+CONST] edx	mov eax [rcx] mov [r11] rbx and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_21	mov rcx [r12+CONST] mov esi [rcx] mov edx esi and edx CONST jz JUMP_ADDR_5	test r9 r9 jnz JUMP_ADDR_98	mov rax [r11] movsxd rdx edx cmp rbx rax jbe JUMP_ADDR_50	test sil CONST jnz JUMP_ADDR_51	add rax CONST jmp JUMP_ADDR_49	add rax CONST cmp rdx CONST jz JUMP_ADDR_51	mov [r11] rax movzx r8d [rax+CONST] add rdx CONST mov [rcx+rdx+CONST] r8b cmp rax rbx jnz JUMP_ADDR_48	cmp rdx CONST jbe JUMP_ADDR_82	cmp [rcx+CONST] CONST ja JUMP_ADDR_80	movzx eax [rcx+CONST] add r13 CONST mov [r13+CONST] al movzx eax [rcx+CONST] mov [r13+CONST] al movzx eax [rcx+CONST] mov [r13+CONST] al movzx eax [rcx+CONST] mov [r13+CONST] al mov esi [rcx]	and esi CONST mov edi [r12+CONST] mov [rcx] esi jmp JUMP_ADDR_5	mov [r12] rcx mov rax [rsp+CONST] add [r15] rax jmp JUMP_ADDR_36	mov r10d CONST jmp JUMP_ADDR_24	xor esi esi test r15 r15 jz JUMP_ADDR_58	mov rsi [r15]	add rsi [rsp+CONST] cmp [rsp+CONST] rsi jz JUMP_ADDR_70	mov rdi [rsp] mov [r11] rdi mov edi [r12+CONST] cmp rbx r14 jb JUMP_ADDR_83	lea rsi [r13+CONST] mov rcx r13 cmp rdx rsi jb JUMP_ADDR_87	and edi CONST mov r9 [rsp+CONST] mov r10d edi jmp JUMP_ADDR_66	mov [rcx] edi mov rcx rsi	lea rdi [r14+CONST] cmp rbx rdi jb JUMP_ADDR_84	lea rsi [rcx+CONST] cmp rdx rsi jb JUMP_ADDR_88	mov r14 rdi	mov edi [r14+CONST] lea r8 [r14+CONST] test edi edi jns JUMP_ADDR_62	test r9 r9 jz JUMP_ADDR_92	test r10d r10d jz JUMP_ADDR_77	add [r9] CONST jmp JUMP_ADDR_63	sub rcx rdx sub [r11] rcx jmp JUMP_ADDR_29	mov rax [rsp] mov rcx r13 jmp JUMP_ADDR_19	mov rcx r13 mov r10d CONST jmp JUMP_ADDR_24	cmp [rsp+CONST] CONST jnz JUMP_ADDR_96	mov rax [r12+CONST] xor r10d r10d mov [rax] CONST test [r12+CONST] CONST jnz JUMP_ADDR_21	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_94	mov eax [rsp+CONST] mov rsi [rsp+CONST] mov r9 r15 xor r8d r8d mov rdi [rsp+CONST] xor ecx ecx xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov [r11] r8	cmp rdx rcx jnz JUMP_ADDR_86	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	and edi CONST jnz JUMP_ADDR_53	mov r10d CONST jmp JUMP_ADDR_21	mov eax esi mov r10d CONST and eax CONST or eax edx mov [rcx] eax jmp JUMP_ADDR_21	mov r14 [rsp] mov rcx r13	mov [r11] r14 cmp r14 rbx jnz JUMP_ADDR_78	cmp rcx rdx jz JUMP_ADDR_79	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r14 [rsp]	mov [r11] r14 cmp r14 rbx jz JUMP_ADDR_85	cmp rcx rdx jnz JUMP_ADDR_86	cmp rcx r13 jnz JUMP_ADDR_29	sub [r12+CONST] CONST jmp JUMP_ADDR_29	cmp rdx r13 jz JUMP_ADDR_79	jmp JUMP_ADDR_86	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r10d eax jmp JUMP_ADDR_36
[ph]libcap-git-setcap___gconv_transform_ascii_internal
endbr64 push r15 mov rax rdi push r14 push r13 push r12 mov r12 rcx push rbp mov rbp rsi push rbx sub rsp CONST mov edi [rsp+CONST] mov [rsp+CONST] r8 mov r8d [CONST_VAR+CONST] mov ebx [rsp+CONST] mov [rsp+CONST] rdx mov [rsp+CONST] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi lea rdi [CONST_VAR+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] CONST test r8b CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rdi jz JUMP_ADDR_3	mov rax rdi ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	test ebx ebx jnz JUMP_ADDR_47	mov rax [rsp+CONST] lea rdx [rsp+CONST] mov r13 [rbp+CONST] test rax rax cmovz rax rbp mov r14 [rax] xor eax eax test r9 r9 mov [rsp+CONST] CONST cmovnz rax rdx xor r11d r11d mov [rsp+CONST] rax	mov rax [rsp+CONST] mov r15 [rax] test r9 r9 jz JUMP_ADDR_7	add r11 [r9]	cmp r12 r15 jz JUMP_ADDR_46	lea rcx [r14+CONST] cmp r13 rcx jb JUMP_ADDR_29	lea rax [r15+CONST] mov rbx r14 mov r10d CONST and r8d CONST jmp JUMP_ADDR_12	mov [rbx] edx mov rbx rcx cmp r12 rax jz JUMP_ADDR_16	lea rcx [rbx+CONST] add rax CONST cmp r13 rcx jb JUMP_ADDR_23	movzx edx [rax+CONST] lea rdi [rax+CONST] mov rsi rax test dl dl jns JUMP_ADDR_10	mov rcx [rsp+CONST] test rcx rcx jz JUMP_ADDR_25	test r8d r8d jz JUMP_ADDR_25	add [rcx] CONST mov r10d CONST cmp r12 rax jnz JUMP_ADDR_11	mov rax [rsp+CONST] cmp [rsp+CONST] CONST mov [rax] rsi jnz JUMP_ADDR_24	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_30	mov [rsp+CONST] r9 mov [rsp+CONST] r11 cmp rbx r14 jbe JUMP_ADDR_27	mov rdi [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r10d mov [rsp+CONST] rax call sub_xxx mov esi [rsp+CONST] xor r8d r8d mov rcx rbx lea rdx [rsp+CONST] push rsi push CONST mov r9 [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rdx pop rcx cmp eax CONST mov r9 [rsp+CONST] mov r10d [rsp+CONST] jz JUMP_ADDR_26	mov rdx [rsp+CONST] mov r11 [rsp+CONST] cmp rbx rdx jnz JUMP_ADDR_31	test eax eax jnz JUMP_ADDR_58	mov r14 [rbp+CONST] mov r11 [rsp+CONST] mov r8d [rbp+CONST] jmp JUMP_ADDR_5	mov rax [rsp+CONST] cmp [rsp+CONST] CONST mov r10d CONST mov [rax] rsi jz JUMP_ADDR_17	mov rax [rsp+CONST] mov [rax] rbx jmp JUMP_ADDR_27	mov rsi rdi mov r10d CONST jmp JUMP_ADDR_16	cmp r10d CONST jz JUMP_ADDR_22	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_59	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rsi r15 mov rbx r14 mov r10d CONST jmp JUMP_ADDR_16	mov [rbp+CONST] rbx mov rax [rsp+CONST] add [r9] rax jmp JUMP_ADDR_27	xor ecx ecx test r9 r9 jz JUMP_ADDR_33	mov rcx [r9]	add rcx [rsp+CONST] cmp rcx r11 jz JUMP_ADDR_45	mov rdi [rsp+CONST] mov esi [rbp+CONST] mov [CONST_VAR] r15 cmp r12 r15 jz JUMP_ADDR_57	lea r8 [r14+CONST] cmp rdx r8 jb JUMP_ADDR_51	and esi CONST lea rcx [r15+CONST] mov rdi r14 mov r10d esi jmp JUMP_ADDR_40	mov [CONST_VAR] esi mov rdi r8	cmp r12 rcx jz JUMP_ADDR_56	lea r8 [CONST_VAR+CONST] add rcx CONST cmp rdx r8 jb JUMP_ADDR_52	movzx esi [rcx+CONST] lea r11 [rcx+CONST] mov r15 rcx test sil sil jns JUMP_ADDR_37	mov rsi [rsp+CONST] test rsi rsi jz JUMP_ADDR_43	test r10d r10d jnz JUMP_ADDR_55	mov rax [rsp+CONST] mov [rax] r11 cmp rdi rdx jz JUMP_ADDR_61	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	sub rbx rdx mov rdi [rsp+CONST] lea rdx [rbx+CONST] cmovns rdx rbx sar rdx CONST sub [CONST_VAR] rdx jmp JUMP_ADDR_21	mov rsi r12 mov rbx r14 mov r10d CONST jmp JUMP_ADDR_16	cmp [rsp+CONST] CONST jnz JUMP_ADDR_60	mov rax [rbp+CONST] xor r10d r10d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_27	mov rdi [rsp+CONST] mov [rsp+CONST] r9 call sub_xxx mov r9 [rsp+CONST] mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_59	mov eax [rsp+CONST] mov [rsp+CONST] ebx xor r8d r8d xor ecx ecx mov rsi [rsp+CONST] mov rdi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rdi r14	mov rsi [rsp+CONST] mov [CONST_VAR] r15 cmp rdi rdx jnz JUMP_ADDR_44	cmp rdi r14 jnz JUMP_ADDR_21	sub [rbp+CONST] CONST jmp JUMP_ADDR_21	add [CONST_VAR] CONST jmp JUMP_ADDR_38	mov r11 r12 jmp JUMP_ADDR_43	mov r11 r12 mov rdi r14 jmp JUMP_ADDR_43	mov r10d eax jmp JUMP_ADDR_27	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transform_internal_ascii
endbr64 push r15 push r14 mov r14 r9 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov r15d [CONST_VAR+CONST] mov eax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp] rdx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] eax mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea rax [CONST_VAR+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax lea rax [CONST_VAR+CONST] mov [rsp+CONST] rax test r15b CONST jnz JUMP_ADDR_3	mov rax [CONST_VAR+CONST] cmp [CONST_VAR+CONST] CONST mov [rsp+CONST] rax jz JUMP_ADDR_3	ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_75	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] test rdi rdi mov r12 [rax] mov rax rdi cmovz rax rbp mov r13 [rax] mov rax [rbp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax xor eax eax test r14 r14 cmovnz rax rdx mov [rsp+CONST] rax mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_35	mov r10 [rsp+CONST] mov [rsp+CONST] r14 xor r11d r11d nop [rax+rax+CONST]	mov rax [rsp+CONST] test rax rax jz JUMP_ADDR_8	add r11 [rax]	mov [rsp+CONST] r12 mov rcx r13 mov [rsp+CONST] r13 cmp rbx r12 jz JUMP_ADDR_79	mov rax r12 mov r14d CONST and r15d CONST	lea rsi [rax+CONST] cmp rbx rsi jb JUMP_ADDR_23	cmp r10 rcx jbe JUMP_ADDR_27	mov edx [rax] cmp edx CONST ja JUMP_ADDR_28	lea rsi [rcx+CONST] mov [rsp+CONST] rsi mov [rcx] dl mov rax [rsp+CONST] mov rcx [rsp+CONST] add rax CONST mov [rsp+CONST] rax	cmp rbx rax jnz JUMP_ADDR_10	xchg ax ax	mov rdi [rsp] cmp [rsp+CONST] CONST mov [CONST_VAR] rax jnz JUMP_ADDR_24	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_50	cmp r13 rcx mov [rsp+CONST] r11 mov [rsp+CONST] rcx jnb JUMP_ADDR_61	mov r15 [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r10 mov rdi r15 mov [rsp+CONST] rax call sub_xxx mov eax [rsp+CONST] lea rdx [rsp+CONST] xor r8d r8d push rax push CONST mov r9 [rsp+CONST] mov rcx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] call r15 pop rdi pop r8 cmp eax CONST mov r10 [rsp+CONST] mov r15d eax jz JUMP_ADDR_33	mov r14 [rsp+CONST] mov rcx [rsp+CONST] mov r11 [rsp+CONST] cmp r14 rcx jnz JUMP_ADDR_63	test r15d r15d jnz JUMP_ADDR_80	mov rax [rsp] mov r13 [rbp+CONST] mov r11 [rsp+CONST] mov r15d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	mov rdi [rsp] mov rax [rsp+CONST] mov r14d CONST cmp [rsp+CONST] CONST mov [CONST_VAR] rax jz JUMP_ADDR_17	mov rax [rsp+CONST] mov r10d r14d mov [rax] rcx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_136	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST] mov r14d CONST jmp JUMP_ADDR_16	shr edx CONST cmp edx CONST jz JUMP_ADDR_62	cmp [rsp+CONST] CONST jz JUMP_ADDR_95	test [rbp+CONST] CONST jnz JUMP_ADDR_58	mov rax [rsp+CONST] test r15d r15d jnz JUMP_ADDR_49	mov r14d CONST jmp JUMP_ADDR_16	mov r15d r14d cmp r14d CONST jnz JUMP_ADDR_21	jmp JUMP_ADDR_22	mov rax [rbp+CONST] mov [rsp+CONST] rax mov eax [rax] mov [rsp+CONST] eax and eax CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_133	mov [rsp+CONST] r12 mov [rsp+CONST] r13 cmp eax CONST ja JUMP_ADDR_134	lea rcx [rsp+CONST] mov rdx [rsp+CONST] xor r11d r11d mov [rsp+CONST] rcx	movzx eax [rdx+r11+CONST] mov [rcx+r11] al mov eax [rdx] add r11 CONST and eax CONST cmp r11 rax jb JUMP_ADDR_39	mov rax r12 sub rax r11 add rax CONST cmp rbx rax jb JUMP_ADDR_96	lea rax [r12+CONST] lea rsi [rsp+CONST] mov r10d CONST cmp r13 [rsp+CONST] jnb JUMP_ADDR_25	mov [rsp+CONST] rax movzx edx [rax+CONST] mov rdi r11 add r11 CONST mov rcx rax add rax CONST mov [CONST_VAR+r11] dl cmp r11 CONST ja JUMP_ADDR_44	cmp rbx rcx ja JUMP_ADDR_42	mov rax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] rax mov eax [rsp+CONST] cmp eax CONST ja JUMP_ADDR_100	lea rdx [r13+CONST] mov rdi [rsp+CONST] mov [rsp+CONST] rdx mov [r13+CONST] al mov rax [rsp+CONST] add rax CONST mov [rsp+CONST] rax cmp rax rdi jz JUMP_ADDR_94	sub rax rdi	mov rdi [rsp+CONST] mov edx [CONST_VAR] mov ecx edx and ecx CONST cmp rcx rax jge JUMP_ADDR_132	mov rdi [rsp] sub rax rcx and edx CONST mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov r15d [rbp+CONST] mov [rsp+CONST] r14 add rax [CONST_VAR] mov r13 [rsp+CONST] mov [CONST_VAR] rax mov r12 rax mov rax [rsp+CONST] mov [rax] edx jmp JUMP_ADDR_6	mov rdi [rsp+CONST] add rax CONST mov r14d CONST mov [rsp+CONST] rax add [CONST_VAR] CONST jmp JUMP_ADDR_14	mov r10d r14d mov r14 [rsp+CONST] mov [rbp+CONST] rcx mov rax [rsp+CONST] add [r14] rax	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_25	cmp r10d CONST jnz JUMP_ADDR_25	mov rax [rsp] mov rdx rbx mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_137	mov rcx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_57	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_55	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbx mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_25	mov [rsp+CONST] r10 lea rcx [rsp+CONST] sub rsp CONST mov r8 rbx mov [rsp+CONST] r11 mov rsi rbp push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop r9 pop r10 cmp eax CONST mov r11 [rsp+CONST] mov r10 [rsp+CONST] mov r14d eax mov rcx [rsp+CONST] jz JUMP_ADDR_31	mov rax [rsp+CONST] mov rcx [rsp+CONST] cmp r14d CONST jnz JUMP_ADDR_14	jmp JUMP_ADDR_16	mov r15d r14d jmp JUMP_ADDR_21	mov [rsp+CONST] rsi mov rax rsi jmp JUMP_ADDR_14	mov rdi [rsp+CONST] xor eax eax test rdi rdi jz JUMP_ADDR_65	mov rax [CONST_VAR]	add rax [rsp+CONST] cmp r11 rax jz JUMP_ADDR_74	mov rax [rsp] mov edx [rbp+CONST] mov [rsp+CONST] r12 mov [rsp+CONST] r13 mov [rax] r12 cmp rbx r12 jz JUMP_ADDR_126	and edx CONST mov rax r13 mov r11d edx	lea rcx [r12+CONST] cmp rbx rcx jb JUMP_ADDR_81	cmp r14 rax jbe JUMP_ADDR_84	mov edx [r12] cmp edx CONST ja JUMP_ADDR_88	lea rcx [rax+CONST] mov [rsp+CONST] rcx mov [rax] dl mov rax [rsp+CONST] lea r12 [rax+CONST] mov rax [rsp+CONST] mov [rsp+CONST] r12	cmp rbx r12 jnz JUMP_ADDR_68	mov r10 [rsp+CONST] jmp JUMP_ADDR_82	mov rdi [rsp] sub rcx r14 lea rax ds:xxx sub [CONST_VAR] rax jmp JUMP_ADDR_21	cmp [rsp+CONST] CONST jnz JUMP_ADDR_131	mov rax [rbp+CONST] xor r10d r10d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_25	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_136	mov eax [rsp+CONST] mov rsi [rsp+CONST] mov r9 r14 xor r8d r8d mov rdi [rsp+CONST] xor ecx ecx xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rax rbx mov r14d CONST jmp JUMP_ADDR_16	mov r10d r15d jmp JUMP_ADDR_51	mov r12 [rsp+CONST] mov r10 [rsp+CONST]	mov rdi [rsp] mov [CONST_VAR] r12 cmp r10 rax jz JUMP_ADDR_127	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rdx [rsp+CONST]	mov rdi [rsp] mov [CONST_VAR] rdx cmp rax [rsp+CONST] jnz JUMP_ADDR_83	cmp r13 rax jnz JUMP_ADDR_21	sub [rbp+CONST] CONST jmp JUMP_ADDR_21	shr edx CONST cmp edx CONST jz JUMP_ADDR_109	cmp [rsp+CONST] CONST jz JUMP_ADDR_81	test [rbp+CONST] CONST jnz JUMP_ADDR_106	mov r12 [rsp+CONST] test r11d r11d jz JUMP_ADDR_73	mov rdi [rsp+CONST] add r12 CONST mov [rsp+CONST] r12 add [CONST_VAR] CONST jmp JUMP_ADDR_72	test r10d r10d jnz JUMP_ADDR_25	mov rax [rsp] mov r10 [rsp+CONST] mov [rsp+CONST] r14 mov r11 [rsp+CONST] mov r15d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	mov rax [rsp+CONST] mov r14d CONST jmp JUMP_ADDR_16	mov rax [rsp] mov [rax] rbx mov rax rbx sub rax r12 add rax r11 cmp rax CONST ja JUMP_ADDR_135	mov rcx [rsp+CONST] add r12 CONST cmp r11 rax jnb JUMP_ADDR_99	mov [rsp+CONST] r12 movzx edx [r12+CONST] add r12 CONST mov [rcx+r11+CONST] dl add r11 CONST cmp rax r11 jnz JUMP_ADDR_98	mov r10d CONST jmp JUMP_ADDR_25	shr eax CONST cmp eax CONST jz JUMP_ADDR_122	cmp [rsp+CONST] CONST jz JUMP_ADDR_121	test r15b CONST jnz JUMP_ADDR_110	and r15d CONST jz JUMP_ADDR_121	mov rax [rsp+CONST] add [rax] CONST lea rax [rsp+CONST] mov [rsp+CONST] rax	sub rax [rsp+CONST] jmp JUMP_ADDR_47	mov [rsp+CONST] r11d lea rcx [rsp+CONST] sub rsp CONST mov rsi rbp mov [rsp+CONST] r10 mov r8 rbx push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop rdx pop rsi mov ecx eax mov r10 [rsp+CONST] mov r11d [rsp+CONST] cmp ecx CONST mov rax [rsp+CONST] jz JUMP_ADDR_91	mov r12 [rsp+CONST] mov rax [rsp+CONST] mov rdx r12 cmp ecx CONST jnz JUMP_ADDR_72	jmp JUMP_ADDR_85	mov [rsp+CONST] rcx mov r12 rcx jmp JUMP_ADDR_72	mov rdi [rsp+CONST] mov [rsp+CONST] r11 mov rdx r12 mov rsi rbp lea rcx [rsp+CONST] sub rsp CONST push [rsp+CONST] lea r8 [CONST_VAR+r11] mov rdi [rsp+CONST] lea r9 [rsp+CONST] mov [rsp+CONST] r8 call sub_xxx pop r11 pop r12 mov r10d eax mov rax [rsp+CONST] cmp r10d CONST jz JUMP_ADDR_123	mov rdi [rsp+CONST] mov r8 [rsp+CONST] mov r11 [rsp+CONST] cmp rax rdi jnz JUMP_ADDR_46	cmp r10d CONST jnz JUMP_ADDR_93	lea rax [rsp+CONST] cmp r8 rax jz JUMP_ADDR_130	mov rax [rsp+CONST] mov rdi [rsp] mov rdx r11 mov eax [rax] mov ecx eax and eax CONST and ecx CONST sub rdx rcx add [CONST_VAR] rdx movsxd rdx eax cmp r11 rdx jle JUMP_ADDR_129	cmp r11 CONST ja JUMP_ADDR_128	mov rdi [rsp+CONST] or eax r11d mov [CONST_VAR] eax test r11 r11 jz JUMP_ADDR_99	mov rcx [rsp+CONST] xor eax eax	movzx edx [rcx+rax] mov rdi [rsp+CONST] mov [CONST_VAR+rax+CONST] dl mov rdx rax add rax CONST cmp [rsp+CONST] rdx jnz JUMP_ADDR_118	jmp JUMP_ADDR_99	mov rdi [rsp+CONST] add rax CONST mov [rsp+CONST] rax add [CONST_VAR] CONST cmp rax [rsp+CONST] jnz JUMP_ADDR_105	mov r10d CONST jmp JUMP_ADDR_25	lea rax [rsp+CONST] mov [rsp+CONST] rax mov eax CONST jmp JUMP_ADDR_47	and r15b CONST jnz JUMP_ADDR_120	mov rdi [rsp+CONST] cmp rax rdi jnz JUMP_ADDR_46	jmp JUMP_ADDR_121	mov r10 r14 mov rax r13 jmp JUMP_ADDR_82	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transform_internal_utf8
endbr64 push r15 push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov r15d [CONST_VAR+CONST] mov eax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp] rdx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] r9 mov [rsp+CONST] eax mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea rax [CONST_VAR+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax lea rax [CONST_VAR+CONST] mov [rsp+CONST] rax test r15b CONST jnz JUMP_ADDR_3	mov rax [CONST_VAR+CONST] cmp [CONST_VAR+CONST] CONST mov [rsp+CONST] rax jz JUMP_ADDR_3	ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov esi [rsp+CONST] test esi esi jnz JUMP_ADDR_75	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] mov ecx [rsp+CONST] mov r13 [rbp+CONST] test rdi rdi mov r12 [rax] mov rax rdi cmovz rax rbp mov r14 [rax] xor eax eax cmp [rsp+CONST] CONST mov [rsp+CONST] CONST cmovnz rax rdx mov [rsp+CONST] rax test ecx ecx jnz JUMP_ADDR_39	mov r11 r14 mov r14 r13 mov r13 r12 xchg ax ax	mov [rsp+CONST] r13 mov r12 r11 mov [rsp+CONST] r11 cmp rbx r13 jz JUMP_ADDR_86	mov rax r13 mov r10d CONST and r15d CONST	lea rdx [rax+CONST] cmp rbx rdx jb JUMP_ADDR_22	cmp r14 r12 jbe JUMP_ADDR_26	mov eax [rax] cmp eax CONST ja JUMP_ADDR_27	lea rdx [r12+CONST] mov [rsp+CONST] rdx	mov [r12] al mov rax [rsp+CONST] mov r12 [rsp+CONST] add rax CONST mov [rsp+CONST] rax	cmp rbx rax jnz JUMP_ADDR_8	nop [rax+CONST]	mov rsi [rsp] cmp [rsp+CONST] CONST mov [CONST_VAR] rax jnz JUMP_ADDR_23	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_53	cmp r12 r11 mov [rsp+CONST] r11 jbe JUMP_ADDR_61	mov r15 [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r10d mov rdi r15 mov [rsp+CONST] rax call sub_xxx mov eax [rsp+CONST] xor r8d r8d mov rcx r12 lea rdx [rsp+CONST] push rax push CONST mov r9 [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] call r15 pop rdi pop r8 cmp eax CONST mov r10d [rsp+CONST] mov r15d eax jz JUMP_ADDR_37	mov r10 [rsp+CONST] mov r11 [rsp+CONST] cmp r10 r12 jnz JUMP_ADDR_62	test r15d r15d jnz JUMP_ADDR_100	mov rax [rsp] mov r11 [rbp+CONST] mov r15d [rbp+CONST] mov r13 [rax] jmp JUMP_ADDR_6	mov rsi [rsp] mov rax [rsp+CONST] mov r10d CONST cmp [rsp+CONST] CONST mov [CONST_VAR] rax jz JUMP_ADDR_16	mov rax [rsp+CONST] mov [rax] r12	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_166	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST] mov r10d CONST jmp JUMP_ADDR_15	lea edx [rax+CONST] cmp edx CONST jbe JUMP_ADDR_71	test eax eax js JUMP_ADDR_71	test eax CONST jz JUMP_ADDR_87	test eax CONST jz JUMP_ADDR_88	test eax CONST jz JUMP_ADDR_99	xor ecx ecx test eax CONST setnz cl add rcx CONST	lea rdx [r12+rcx] cmp r14 rdx jb JUMP_ADDR_26	mov edx CONST sar edx cl mov [r12] dl add [rsp+CONST] rcx	mov edx eax sub rcx CONST shr eax CONST and edx CONST or edx CONST mov [r12+rcx] dl cmp rcx CONST jnz JUMP_ADDR_35	or al [r12] jmp JUMP_ADDR_12	mov r15d r10d cmp r10d CONST jnz JUMP_ADDR_20	jmp JUMP_ADDR_21	mov rax [rbp+CONST] mov [rsp+CONST] rax mov eax [rax] mov [rsp+CONST] eax and eax CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_142	mov [rsp+CONST] r12 mov [rsp+CONST] r14 cmp eax CONST ja JUMP_ADDR_165	lea rcx [rsp+CONST] mov rdx [rsp+CONST] xor r11d r11d mov [rsp+CONST] rcx	movzx eax [rdx+r11+CONST] mov [rcx+r11] al mov eax [rdx] add r11 CONST and eax CONST cmp r11 rax jb JUMP_ADDR_43	mov rax r12 sub rax r11 add rax CONST cmp rbx rax jb JUMP_ADDR_108	lea rax [r12+CONST] lea rsi [rsp+CONST] cmp r14 r13 jnb JUMP_ADDR_105	mov [rsp+CONST] rax movzx edx [rax+CONST] mov rdi r11 add r11 CONST mov rcx rax add rax CONST mov [CONST_VAR+r11] dl cmp r11 CONST ja JUMP_ADDR_48	cmp rbx rcx ja JUMP_ADDR_46	mov rax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] rax mov eax [rsp+CONST] cmp eax CONST ja JUMP_ADDR_112	lea rdx [r14+CONST] mov [rsp+CONST] rdx	mov [r14] al mov rax [rsp+CONST] add rax CONST mov [rsp+CONST] rax cmp rax [rsp+CONST] jz JUMP_ADDR_107	mov rsi [rsp+CONST] sub rax [rsp+CONST] mov edx [CONST_VAR] mov ecx edx and ecx CONST cmp rax rcx jle JUMP_ADDR_164	mov rsi [rsp] sub rax rcx and edx CONST mov r15d [rbp+CONST] mov r14 [rsp+CONST] add rax [CONST_VAR] mov [CONST_VAR] rax mov r12 rax mov rax [rsp+CONST] mov r11 r14 mov r14 r13 mov r13 r12 mov [rax] edx jmp JUMP_ADDR_6	mov rsi [rsp+CONST] mov rax [rsp+CONST] mov [rbp+CONST] r12 add [CONST_VAR] rax	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_24	cmp r10d CONST jnz JUMP_ADDR_24	mov rax [rsp] mov rdx rbx mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_163	mov rcx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_60	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_58	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbx mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_24	mov r15d r10d jmp JUMP_ADDR_20	mov rax [rsp] mov [rsp+CONST] r13 mov [rsp+CONST] r11 mov [rax] r13 mov eax [rbp+CONST] cmp rbx r13 jz JUMP_ADDR_127	and eax CONST mov rdx r11 mov r12d eax	lea rax [r13+CONST] cmp rbx rax jb JUMP_ADDR_79	cmp r10 rdx jbe JUMP_ADDR_82	mov eax [r13+CONST] cmp eax CONST ja JUMP_ADDR_89	lea rcx [rdx+CONST] mov [rsp+CONST] rcx	mov [rdx] al mov rax [rsp+CONST] mov rdx [rsp+CONST] lea r13 [rax+CONST] mov [rsp+CONST] r13	cmp rbx r13 jnz JUMP_ADDR_64	mov r10 [rsp+CONST] mov r12 r13 jmp JUMP_ADDR_80	cmp [rsp+CONST] CONST jz JUMP_ADDR_126	test [rbp+CONST] CONST jnz JUMP_ADDR_102	mov rax [rsp+CONST] test r15d r15d jz JUMP_ADDR_101	mov rsi [rsp+CONST] add rax CONST mov r10d CONST mov [rsp+CONST] rax add [CONST_VAR] CONST jmp JUMP_ADDR_13	cmp [rsp+CONST] CONST jnz JUMP_ADDR_160	mov rax [rbp+CONST] xor r10d r10d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_24	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_166	mov eax [rsp+CONST] mov r9 [rsp+CONST] xor r8d r8d xor ecx ecx mov rsi [rsp+CONST] mov rdi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov r12 [rsp+CONST] mov r10 [rsp+CONST]	mov rax [rsp] mov [rax] r12 cmp rdx r10 jz JUMP_ADDR_159	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rax [rsp+CONST]	mov rsi [rsp] mov [CONST_VAR] rax cmp rdx [rsp+CONST] jnz JUMP_ADDR_81	cmp r11 rdx jnz JUMP_ADDR_20	sub [rbp+CONST] CONST jmp JUMP_ADDR_20	mov rax rbx mov r10d CONST jmp JUMP_ADDR_15	mov ecx CONST jmp JUMP_ADDR_33	mov ecx CONST jmp JUMP_ADDR_33	lea ecx [rax+CONST] cmp ecx CONST jbe JUMP_ADDR_122	test eax eax js JUMP_ADDR_122	test eax CONST jz JUMP_ADDR_129	test eax CONST jz JUMP_ADDR_128	test eax CONST jz JUMP_ADDR_130	xor ecx ecx test eax CONST setnz cl add rcx CONST	lea rsi [rdx+rcx] cmp r10 rsi jb JUMP_ADDR_82	mov esi CONST sar esi cl mov [rdx] sil add [rsp+CONST] rcx	mov esi eax sub rcx CONST shr eax CONST and esi CONST or esi CONST mov [rdx+rcx] sil cmp rcx CONST jnz JUMP_ADDR_97	or al [rdx] jmp JUMP_ADDR_68	mov ecx CONST jmp JUMP_ADDR_33	mov r10d r15d jmp JUMP_ADDR_54	mov r10d CONST jmp JUMP_ADDR_15	mov [rsp+CONST] r11 lea rcx [rsp+CONST] sub rsp CONST mov r8 rbx push [rsp+CONST] mov rax [rsp+CONST] mov rsi rbp mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop r9 pop r11 cmp eax CONST mov r12 [rsp+CONST] mov r11 [rsp+CONST] mov r10d eax jz JUMP_ADDR_73	mov rax [rsp+CONST] mov r12 [rsp+CONST] cmp r10d CONST jnz JUMP_ADDR_13	jmp JUMP_ADDR_15	mov r10d CONST jmp JUMP_ADDR_24	test r10d r10d jnz JUMP_ADDR_24	mov rax [rsp] mov r11 r14 mov r15d [rbp+CONST] mov r14 r13 mov r12 [rax] mov r13 r12 jmp JUMP_ADDR_6	mov rax [rsp] mov [rax] rbx mov rax rbx sub rax r12 add rax r11 cmp rax CONST ja JUMP_ADDR_141	mov rcx [rsp+CONST] add r12 CONST cmp r11 rax jnb JUMP_ADDR_111	mov [rsp+CONST] r12 movzx edx [r12+CONST] add r12 CONST mov [rcx+r11+CONST] dl add r11 CONST cmp rax r11 jnz JUMP_ADDR_110	mov r10d CONST jmp JUMP_ADDR_24	lea edx [rax+CONST] cmp edx CONST jbe JUMP_ADDR_134	test eax eax js JUMP_ADDR_134	test eax CONST jz JUMP_ADDR_143	test eax CONST jz JUMP_ADDR_162	test eax CONST jz JUMP_ADDR_161	xor ecx ecx test eax CONST setnz cl add rcx CONST	lea rdx [r14+rcx] cmp r13 rdx jb JUMP_ADDR_105	mov edx CONST sar edx cl mov [r14] dl add [rsp+CONST] rcx	mov edx eax sub rcx CONST shr eax CONST and edx CONST or edx CONST mov [r14+rcx] dl cmp rcx CONST jnz JUMP_ADDR_120	or al [r14] jmp JUMP_ADDR_50	cmp [rsp+CONST] CONST jz JUMP_ADDR_79	test [rbp+CONST] CONST jnz JUMP_ADDR_131	mov r13 [rsp+CONST] test r12d r12d jz JUMP_ADDR_70	mov rax [rsp+CONST] add r13 CONST mov [rsp+CONST] r13 add [rax] CONST jmp JUMP_ADDR_69	mov rax [rsp+CONST] mov r10d CONST jmp JUMP_ADDR_15	mov r12 r13 mov rdx r11 jmp JUMP_ADDR_80	mov ecx CONST jmp JUMP_ADDR_95	mov ecx CONST jmp JUMP_ADDR_95	mov ecx CONST jmp JUMP_ADDR_95	mov [rsp+CONST] r10 lea rcx [rsp+CONST] sub rsp CONST mov rsi rbp mov [rsp+CONST] r11 mov r8 rbx push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop rdx pop rsi cmp eax CONST mov r11 [rsp+CONST] mov r10 [rsp+CONST] mov ecx eax mov rdx [rsp+CONST] jz JUMP_ADDR_124	mov rax [rsp+CONST] mov rdx [rsp+CONST] mov r13 rax cmp ecx CONST jnz JUMP_ADDR_69	jmp JUMP_ADDR_83	cmp [rsp+CONST] CONST jz JUMP_ADDR_140	test r15b CONST jnz JUMP_ADDR_144	and r15b CONST jz JUMP_ADDR_140	mov rdx [rsp+CONST]	mov rax [rsp+CONST] add [rax] CONST lea rax [rdx+CONST] mov [rsp+CONST] rax	cmp rax [rsp+CONST] jnz JUMP_ADDR_51	mov r10d CONST jmp JUMP_ADDR_24	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov ecx CONST jmp JUMP_ADDR_118	mov rax [rsp+CONST] mov [rsp+CONST] r11 mov rdx r12 mov rsi rbp lea rcx [rsp+CONST] lea r8 [rax+r11] push rax push [rsp+CONST] mov rdi [rsp+CONST] lea r9 [rsp+CONST] mov [rsp+CONST] r8 call sub_xxx mov r10d eax pop rax pop rdx mov rax [rsp+CONST] cmp r10d CONST jz JUMP_ADDR_154	cmp rax [rsp+CONST] mov r8 [rsp+CONST] mov r11 [rsp+CONST] jnz JUMP_ADDR_51	cmp r10d CONST jnz JUMP_ADDR_106	lea rax [rsp+CONST] cmp r8 rax jz JUMP_ADDR_158	mov rax [rsp+CONST] mov rsi [rsp] mov rdx r11 mov eax [rax] mov ecx eax and eax CONST and ecx CONST sub rdx rcx add [CONST_VAR] rdx movsxd rdx eax cmp rdx r11 jge JUMP_ADDR_157	cmp r11 CONST ja JUMP_ADDR_156	mov rsi [rsp+CONST] or eax r11d mov [CONST_VAR] eax test r11 r11 jz JUMP_ADDR_111	mov rcx [rsp+CONST] xor eax eax	movzx edx [rcx+rax] mov rsi [rsp+CONST] mov [CONST_VAR+rax+CONST] dl mov rdx rax add rax CONST cmp [rsp+CONST] rdx jnz JUMP_ADDR_152	jmp JUMP_ADDR_111	and r15b CONST mov rdx rax jz JUMP_ADDR_139	jmp JUMP_ADDR_138	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov ecx CONST jmp JUMP_ADDR_118	mov ecx CONST jmp JUMP_ADDR_118	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap___gconv_transform_utf8_internal
endbr64 push r15 mov rax rdi add rdi CONST push r14 push r13 push r12 mov r12 rsi push rbp mov rbp rcx push rbx sub rsp CONST mov esi [rsp+CONST] mov [rsp+CONST] r9 mov [rsp+CONST] rdx mov r9d [r12+CONST] mov [rsp+CONST] esi lea rsi [r12+CONST] mov ebx [rsp+CONST] mov [rsp+CONST] r8 mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi mov [rsp+CONST] rsi mov [rsp+CONST] CONST test r9b CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rdi jz JUMP_ADDR_3	mov rax rdi ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	test ebx ebx jnz JUMP_ADDR_110	mov rax [rsp+CONST] mov rsi [rsp+CONST] lea rdx [rsp+CONST] mov edi [rsp+CONST] mov r13 [r12+CONST] test rsi rsi mov r14 [rax] mov rax rsi cmovz rax r12 mov r10 [rax] xor eax eax cmp [rsp+CONST] CONST mov [rsp+CONST] CONST cmovnz rax rdx mov [rsp+CONST] rax test edi edi jnz JUMP_ADDR_63	mov r15 r10 nop [rax+rax+CONST]	cmp rbp r14 jz JUMP_ADDR_114	lea rdi [r15+CONST] mov rdx r14 mov rbx r15 cmp r13 rdi jb JUMP_ADDR_23	mov [rsp+CONST] CONST and r9d CONST jmp JUMP_ADDR_12	mov [rbx] eax mov rdx r11 mov rbx rdi	cmp rbp rdx jz JUMP_ADDR_24	lea rdi [rbx+CONST] cmp r13 rdi jb JUMP_ADDR_23	movzx eax [rdx] lea r11 [rdx+CONST] mov ecx eax test al al jns JUMP_ADDR_9	sub eax CONST cmp eax CONST ja JUMP_ADDR_39	mov eax ecx mov r10d CONST and eax CONST	lea r8 [rdx+r10] mov esi CONST cmp rbp r8 jb JUMP_ADDR_41	xchg ax ax	movzx ecx [rdx+CONST_VAR] mov r11d ecx and r11d CONST cmp r11b CONST jnz JUMP_ADDR_36	shl eax CONST and ecx CONST add rsi CONST or eax ecx cmp r10 rsi jnz JUMP_ADDR_17	cmp rsi CONST jz JUMP_ADDR_21	lea ecx [CONST_VAR+rsi*4+CONST] mov r10d eax shr r10d cl test r10d r10d jz JUMP_ADDR_36	lea ecx [rax+CONST] cmp ecx CONST jbe JUMP_ADDR_36	mov r11 r8 jmp JUMP_ADDR_9	mov [rsp+CONST] CONST	mov rax [rsp+CONST] cmp [rsp+CONST] CONST mov [rax] rdx jnz JUMP_ADDR_48	add [r12+CONST] CONST test [r12+CONST] CONST jnz JUMP_ADDR_77	cmp rbx r15 jbe JUMP_ADDR_52	mov rdi [rsp+CONST] mov rax [r12] mov [rsp+CONST] rax call sub_xxx mov esi [rsp+CONST] mov rcx rbx xor r8d r8d lea rdx [rsp+CONST] push rsi push CONST mov r9 [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rcx pop rsi cmp eax CONST jz JUMP_ADDR_51	mov rsi [rsp+CONST] cmp rbx rsi jnz JUMP_ADDR_78	test eax eax jnz JUMP_ADDR_188	mov rax [rsp+CONST] mov r15 [r12] mov r9d [r12+CONST] mov r14 [rax] jmp JUMP_ADDR_6	xor esi esi	add rsi CONST lea rax [rdx+CONST_VAR] cmp rbp rax jbe JUMP_ADDR_36	movzx eax [rdx+CONST_VAR] and eax CONST cmp al CONST jnz JUMP_ADDR_36	cmp rsi CONST jnz JUMP_ADDR_32	nop [rax+CONST]	mov rax [rsp+CONST] test rax rax jz JUMP_ADDR_62	test r9d r9d jz JUMP_ADDR_62	add [rax] CONST add rdx rsi mov [rsp+CONST] CONST jmp JUMP_ADDR_10	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_105	mov r10d CONST mov eax ecx mov esi CONST lea r8 [rdx+r10] and eax CONST cmp rbp r8 jnb JUMP_ADDR_17	cmp rbp r11 jbe JUMP_ADDR_45	mov rcx rbp sub rcx rdx jmp JUMP_ADDR_44	add rsi CONST add r11 CONST cmp rcx rsi jz JUMP_ADDR_45	movzx eax [r11] and eax CONST cmp al CONST jz JUMP_ADDR_43	cmp rbp r11 jnz JUMP_ADDR_36	mov rax [rsp+CONST] cmp [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rax] rdx jz JUMP_ADDR_25	nop [rax]	mov rax [rsp+CONST] mov r15d [rsp+CONST] mov [rax] rbx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_174	add rsp CONST mov eax r15d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rsp+CONST] CONST jz JUMP_ADDR_30	mov r15d [rsp+CONST]	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_49	cmp r15d CONST jnz JUMP_ADDR_49	mov rax [rsp+CONST] mov r8 [r12+CONST] mov r10 rbp mov r9 [rax] movzx edx [r9] sub r10 r9 mov [r8] r10d lea ecx [rdx+CONST] mov eax edx cmp ecx CONST jbe JUMP_ADDR_197	sub edx CONST cmp edx CONST ja JUMP_ADDR_143	and eax CONST mov esi CONST mov edi CONST	mov r11 [rsp+CONST] lea rdx [r9+CONST] mov [r11] rdx cmp rbp rdx jbe JUMP_ADDR_61	movzx ecx [rdx] shl eax CONST add rdx CONST mov [r11] rdx and ecx CONST or eax ecx cmp rdx rbp jnz JUMP_ADDR_59	sub r9 rdx lea rsi [CONST_VAR+r9+CONST]	lea ecx [CONST_VAR+rsi*2] or edi r10d add ecx ecx mov [r8] edi shl eax cl mov [r8+CONST] eax jmp JUMP_ADDR_49	mov [rsp+CONST] CONST jmp JUMP_ADDR_24	mov rdx [r12+CONST] mov eax [rdx] mov r8d eax and r8d CONST jz JUMP_ADDR_5	test rsi rsi jnz JUMP_ADDR_187	mov ecx eax lea rdi unk_xxx mov esi [rdx+CONST] movzx eax al sar ecx CONST movsxd rcx ecx movzx edi [CONST_VAR+rcx+CONST] mov [rsp+CONST] dil nop [rax+CONST]	sub rcx CONST cmp rax rcx jbe JUMP_ADDR_68	mov edi esi and edi CONST or edi CONST mov [rsp+rcx+CONST] dil	shr esi CONST cmp rcx CONST ja JUMP_ADDR_66	lea rbx [r10+CONST] or [rsp+CONST] sil cmp r13 rbx jb JUMP_ADDR_117	mov rcx r14 lea rsi [rsp+CONST] jmp JUMP_ADDR_72	cmp rbp rcx jbe JUMP_ADDR_73	movzx edi [rcx] add rax CONST add rcx CONST mov [CONST_VAR+rax] dil cmp rax CONST jbe JUMP_ADDR_71	movzx r15d [rsp+CONST] mov ecx r15d test r15b r15b js JUMP_ADDR_121	mov [r10] r15d mov r8d [rdx] mov r10 rbx mov esi CONST and r8d CONST	movsxd rax r8d cmp rax rsi jge JUMP_ADDR_173	sub rsi rax mov rax [rsp+CONST] mov r9d [r12+CONST] mov r15 r10 add r14 rsi mov [rax] r14 mov [rdx] CONST jmp JUMP_ADDR_6	mov rax [rsp+CONST] mov r15d [rsp+CONST] mov [r12] rbx mov rbx [rsp+CONST] add [rbx] rax jmp JUMP_ADDR_53	mov rbx [rsp+CONST] mov edx [r12+CONST] mov [rbx] r14 cmp rbp r14 jz JUMP_ADDR_103	lea r8 [r15+CONST] cmp rsi r8 jb JUMP_ADDR_119	and edx CONST mov r9 r15 mov [rsp+CONST] edx jmp JUMP_ADDR_84	mov [r9] edx mov r14 rbx mov r9 r8	cmp rbp r14 jz JUMP_ADDR_102	lea r8 [r9+CONST] cmp rsi r8 jb JUMP_ADDR_107	movzx edx [r14] lea rbx [r14+CONST] mov ecx edx test dl dl jns JUMP_ADDR_81	sub edx CONST cmp edx CONST ja JUMP_ADDR_115	mov edx ecx mov r11d CONST and edx CONST	lea r10 [r14+r11] mov edi CONST cmp rbp r10 jb JUMP_ADDR_95	nop [rax]	movzx ecx [r14+CONST_VAR] mov ebx ecx and ebx CONST cmp bl CONST jnz JUMP_ADDR_100	shl edx CONST and ecx CONST add rdi CONST or edx ecx cmp r11 rdi jnz JUMP_ADDR_89	cmp rdi CONST jz JUMP_ADDR_93	lea ecx [CONST_VAR+rdi*4+CONST] mov ebx edx shr ebx cl test ebx ebx jz JUMP_ADDR_100	lea ecx [rdx+CONST] cmp ecx CONST jbe JUMP_ADDR_100	mov rbx r10 jmp JUMP_ADDR_81	cmp rbx rbp jnb JUMP_ADDR_99	mov rcx rbp sub rcx r14 jmp JUMP_ADDR_98	add rdi CONST add rbx CONST cmp rcx rdi jz JUMP_ADDR_99	movzx edx [rbx] and edx CONST cmp dl CONST jz JUMP_ADDR_97	cmp rbx rbp jz JUMP_ADDR_102	mov rbx [rsp+CONST] test rbx rbx jz JUMP_ADDR_102	mov edx [rsp+CONST] test edx edx jnz JUMP_ADDR_118	mov r15 r9	mov rax [rsp+CONST] mov [rax] r14 cmp rsi r15 jz JUMP_ADDR_189	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_139	mov eax ecx mov r10d CONST and eax CONST jmp JUMP_ADDR_15	mov rbx [rsp+CONST] mov [rbx] r14 cmp rsi r9 jnz JUMP_ADDR_104	cmp r15 rsi jnz JUMP_ADDR_29	jmp JUMP_ADDR_120	cmp [rsp+CONST] CONST jnz JUMP_ADDR_192	mov rax [r12+CONST] xor r15d r15d mov [rax] CONST test [r12+CONST] CONST jnz JUMP_ADDR_49	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_174	mov eax [rsp+CONST] mov [rsp+CONST] ebx xor r8d r8d xor ecx ecx mov r9 [rsp+CONST] mov rsi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov rdi [rsp+CONST] mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov [rsp+CONST] CONST mov rdx rbp mov rbx r15 jmp JUMP_ADDR_24	mov edx ecx and edx CONST cmp dl CONST jnz JUMP_ADDR_145	mov edx ecx mov r11d CONST and edx CONST jmp JUMP_ADDR_87	mov r15d CONST jmp JUMP_ADDR_49	add [rbx] CONST add r14 rdi jmp JUMP_ADDR_82	cmp rsi r15 jnz JUMP_ADDR_104	sub [r12+CONST] CONST jmp JUMP_ADDR_29	lea rsi [rsp+CONST] mov [rsp+CONST] rsi add rsi rax mov [rsp+CONST] rsi lea esi [r15+CONST] mov [rsp+CONST] esi cmp esi CONST ja JUMP_ADDR_141	mov edi r15d mov esi CONST and edi CONST	mov [rsp+CONST] CONST mov r11 [rsp+CONST] add r11 rsi cmp [rsp+CONST] r11 jb JUMP_ADDR_149	mov rcx [rsp+CONST] mov r11d CONST	movzx eax [rcx+r11] mov r15d eax and r15d CONST cmp r15b CONST jnz JUMP_ADDR_135	shl edi CONST and eax CONST add r11 CONST or edi eax cmp rsi r11 jnz JUMP_ADDR_125	mov [rsp+CONST] r11 cmp rsi CONST jz JUMP_ADDR_147	lea ecx [CONST_VAR+rsi*4+CONST] mov eax edi shr eax cl test eax eax jz JUMP_ADDR_136	lea eax [CONST_VAR+CONST] cmp eax CONST jbe JUMP_ADDR_136	mov [r10] edi mov r8d [rdx] mov r10 rbx and r8d CONST jmp JUMP_ADDR_75	mov rcx [rsp+CONST] xor r11d r11d	add r11 CONST lea rax [rcx+r11] cmp [rsp+CONST] rax jbe JUMP_ADDR_135	movzx eax [rcx+r11] and eax CONST cmp al CONST jnz JUMP_ADDR_135	cmp r11 CONST jnz JUMP_ADDR_132	mov [rsp+CONST] r11	cmp [rsp+CONST] CONST mov r15d CONST jz JUMP_ADDR_49	and r9d CONST jz JUMP_ADDR_49	mov rax [rsp+CONST] mov rsi [rsp+CONST] add [rax] CONST jmp JUMP_ADDR_75	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_177	mov eax ecx mov r10d CONST and eax CONST jmp JUMP_ADDR_15	mov esi r15d and esi CONST cmp sil CONST jnz JUMP_ADDR_193	mov edi r15d mov esi CONST and edi CONST jmp JUMP_ADDR_123	mov edx eax and edx CONST cmp dl CONST jnz JUMP_ADDR_190	and eax CONST mov esi CONST mov edi CONST jmp JUMP_ADDR_58	mov edx ecx and edx CONST cmp dl CONST jnz JUMP_ADDR_175	mov edx ecx mov r11d CONST and edx CONST jmp JUMP_ADDR_87	lea eax [CONST_VAR+CONST] cmp eax CONST jbe JUMP_ADDR_136	mov [r10] edi mov r8d [rdx] mov esi CONST mov r10 rbx and r8d CONST jmp JUMP_ADDR_75	lea rbx [rsp+CONST] cmp [rsp+CONST] rbx jbe JUMP_ADDR_169	mov rsi rbx mov r11d CONST jmp JUMP_ADDR_152	add r11 CONST add rsi CONST cmp [rsp+CONST] rsi jbe JUMP_ADDR_153	movzx edi [CONST_VAR] and edi CONST cmp dil CONST jz JUMP_ADDR_151	mov [rsp+CONST] r11 cmp [rsp+CONST] rsi jnz JUMP_ADDR_136	lea rsi [rsp+CONST] cmp [rsp+CONST] rsi jz JUMP_ADDR_168	movsxd rdi r8d mov rsi rax mov r10d eax sub rsi rdi mov rdi [rsp+CONST] add rsi r14 mov [CONST_VAR] rsi mov [rdx] eax lea eax [r15+CONST] cmp eax CONST jbe JUMP_ADDR_165	cmp [rsp+CONST] CONST ja JUMP_ADDR_163	mov eax ecx mov edi CONST mov esi CONST and eax CONST	cmp [rsp+CONST] rbx jbe JUMP_ADDR_162	mov r9 rbx	movzx ecx [r9] shl eax CONST add r9 CONST and ecx CONST or eax ecx cmp [rsp+CONST] r9 jnz JUMP_ADDR_160	sub rbx [rsp+CONST] add rsi rbx	mov ecx r10d mov r15d CONST or ecx edi mov [rdx] ecx lea ecx [CONST_VAR+rsi*2] add ecx ecx shl eax cl mov [rdx+CONST] eax jmp JUMP_ADDR_49	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_166	mov eax ecx mov edi CONST mov esi CONST and eax CONST jmp JUMP_ADDR_158	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_171	mov eax ecx mov edi CONST mov esi CONST and eax CONST jmp JUMP_ADDR_158	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	jz JUMP_ADDR_155	jmp JUMP_ADDR_136	mov eax ecx and eax CONST cmp al CONST mov eax ecx jnz JUMP_ADDR_179	and eax CONST mov edi CONST mov esi CONST jmp JUMP_ADDR_158	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	mov edx ecx and edx CONST cmp dl CONST jnz JUMP_ADDR_180	mov edx ecx mov r11d CONST and edx CONST jmp JUMP_ADDR_87	mov eax ecx and eax CONST cmp al CONST jnz JUMP_ADDR_31	mov eax ecx mov r10d CONST and eax CONST jmp JUMP_ADDR_15	and eax CONST mov edi CONST mov esi CONST jmp JUMP_ADDR_158	mov edx ecx and edx CONST cmp dl CONST jnz JUMP_ADDR_182	mov edx ecx mov r11d CONST and edx CONST jmp JUMP_ADDR_87	xor edi edi	add rdi CONST lea rdx [r14+CONST_VAR] cmp rbp rdx jbe JUMP_ADDR_100	movzx edx [r14+CONST_VAR] and edx CONST cmp dl CONST jnz JUMP_ADDR_100	cmp rdi CONST jnz JUMP_ADDR_183	jmp JUMP_ADDR_100	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r15d eax jmp JUMP_ADDR_53	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov edx eax and edx CONST cmp dl CONST jnz JUMP_ADDR_198	and eax CONST mov esi CONST mov edi CONST jmp JUMP_ADDR_58	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov esi r15d and esi CONST cmp sil CONST jnz JUMP_ADDR_195	mov edi r15d mov esi CONST and edi CONST jmp JUMP_ADDR_123	mov esi r15d and esi CONST cmp sil CONST jnz JUMP_ADDR_200	mov edi r15d mov esi CONST and edi CONST jmp JUMP_ADDR_123	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov edx eax and edx CONST cmp dl CONST jnz JUMP_ADDR_202	and eax CONST mov esi CONST mov edi CONST jmp JUMP_ADDR_58	mov esi r15d and esi CONST cmp sil CONST jnz JUMP_ADDR_131	mov edi r15d mov esi CONST and edi CONST jmp JUMP_ADDR_123	and eax CONST mov esi CONST mov edi CONST jmp JUMP_ADDR_58
[ph]libcap-git-setcap___gconv_transform_ucs2_internal
endbr64 push r15 mov rax rdi push r14 push r13 push r12 mov r12 rsi add rsi CONST push rbp mov rbp rcx push rbx sub rsp CONST mov edi [rsp+CONST] mov [rsp+CONST] r8 mov [rsp] rdx mov r8d [r12+CONST] mov [rsp+CONST] edi mov edi [rsp+CONST] mov [rsp+CONST] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi mov [rsp+CONST] rsi mov [rsp+CONST] CONST test r8b CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rdi jz JUMP_ADDR_3	mov rax rdi ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov edi [rsp+CONST] test edi edi jnz JUMP_ADDR_71	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] mov esi [rsp+CONST] mov r14 [r12+CONST] test rdi rdi mov r15 [rax] mov rax rdi cmovz rax r12 mov r13 [rax] xor eax eax test r9 r9 mov [rsp+CONST] CONST cmovnz rax rdx mov [rsp+CONST] rax test esi esi jnz JUMP_ADDR_42	xor r10d r10d nop [rax]	test r9 r9 jz JUMP_ADDR_8	add r10 [r9]	cmp rbp r15 jz JUMP_ADDR_75	lea rax [r15+CONST] cmp rbp rax jb JUMP_ADDR_53	lea rcx [r13+CONST] mov rbx r13 cmp r14 rcx jb JUMP_ADDR_55	mov r11d CONST and r8d CONST	movzx edx [rax+CONST] lea rdi [rax+CONST] lea esi [rdx+CONST] cmp si CONST jbe JUMP_ADDR_26	mov [rbx] edx mov rbx rcx	cmp rax rbp jz JUMP_ADDR_19	lea rdx [rax+CONST] cmp rbp rdx jb JUMP_ADDR_18	lea rcx [rbx+CONST] cmp r14 rcx jb JUMP_ADDR_29	mov rax rdx jmp JUMP_ADDR_12	mov r11d CONST	mov rdi [rsp] cmp [rsp+CONST] CONST mov [CONST_VAR] rax jnz JUMP_ADDR_30	add [r12+CONST] CONST test [r12+CONST] CONST jnz JUMP_ADDR_54	mov [rsp+CONST] r9 mov [rsp+CONST] r10 cmp rbx r13 jbe JUMP_ADDR_34	mov rdi [rsp+CONST] mov rax [r12] mov [rsp+CONST] r11d mov [rsp+CONST] rax call sub_xxx mov esi [rsp+CONST] xor r8d r8d mov rcx rbx lea rdx [rsp+CONST] push rsi push CONST mov r9 [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rdx pop rcx cmp eax CONST mov r9 [rsp+CONST] mov r11d [rsp+CONST] jz JUMP_ADDR_33	mov rdx [rsp+CONST] mov r10 [rsp+CONST] cmp rdx rbx jnz JUMP_ADDR_56	test eax eax jnz JUMP_ADDR_104	mov rax [rsp] mov r13 [r12] mov r10 [rsp+CONST] mov r8d [r12+CONST] mov r15 [rax] jmp JUMP_ADDR_6	mov rsi [rsp+CONST] test rsi rsi jz JUMP_ADDR_41	test r8d r8d jz JUMP_ADDR_41	add [CONST_VAR] CONST mov r11d CONST jmp JUMP_ADDR_14	mov rdi [rsp] cmp [rsp+CONST] CONST mov r11d CONST mov [CONST_VAR] rax jz JUMP_ADDR_20	mov rax [rsp+CONST] mov [rax] rbx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_101	add rsp CONST mov eax r11d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp r11d CONST jz JUMP_ADDR_25	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_31	cmp r11d CONST jnz JUMP_ADDR_31	mov rax [rsp] mov rdx rbp mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_105	mov rcx [r12+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_40	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_38	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbp mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_31	mov rax rdi mov r11d CONST jmp JUMP_ADDR_19	mov rdx [r12+CONST] mov eax [rdx] mov r10d eax and r10d CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_99	cmp r10d CONST ja JUMP_ADDR_100	movzx ecx [rdx+CONST] mov [rsp+CONST] cl cmp r10d CONST jz JUMP_ADDR_70	movzx ecx [rdx+CONST] mov rsi r15 mov [rsp+CONST] cl mov ecx CONST	cmp rbp rsi jb JUMP_ADDR_86	lea rsi [r13+CONST] cmp r14 rsi jb JUMP_ADDR_79	movzx edi [r15] mov [rsp+rcx+CONST] dil movzx ecx [rsp+CONST] lea edi [rcx+CONST] cmp di CONST jbe JUMP_ADDR_90	mov [r13+CONST] ecx mov eax [rdx] mov r13 rsi mov r10d eax and r10d CONST	movsxd rcx r10d cmp r10d CONST jg JUMP_ADDR_98	mov rsi [rsp] sub r15 rcx and eax CONST mov r10 [rsp+CONST] add r15 CONST mov r8d [r12+CONST] mov [CONST_VAR] r15 mov [rdx] eax jmp JUMP_ADDR_6	mov rbx r13 mov rax r15 mov r11d CONST jmp JUMP_ADDR_19	mov [r12] rbx mov rax [rsp+CONST] add [r9] rax jmp JUMP_ADDR_34	mov rax r15 mov r11d CONST jmp JUMP_ADDR_19	xor ecx ecx test r9 r9 jz JUMP_ADDR_58	mov rcx [r9]	add rcx [rsp+CONST] cmp rcx r10 jz JUMP_ADDR_69	mov esi [r12+CONST] cmp rbp r15 jz JUMP_ADDR_97	lea rcx [r15+CONST] cmp rbp rcx jb JUMP_ADDR_93	lea rdi [r13+CONST] cmp rdx rdi jb JUMP_ADDR_94	and esi CONST mov rbx r13 mov r11d esi	movzx esi [rcx+CONST] lea r10 [rcx+CONST] lea r8d [CONST_VAR+CONST] cmp r8w CONST jbe JUMP_ADDR_80	mov [rbx] esi mov rbx rdi	cmp rbp rcx jz JUMP_ADDR_77	lea rsi [rcx+CONST] cmp rbp rsi jb JUMP_ADDR_77	lea rdi [rbx+CONST] cmp rdx rdi jb JUMP_ADDR_83	mov rcx rsi jmp JUMP_ADDR_63	sub rbx rdx mov rsi [rsp] mov rdx rbx shr rdx CONST add rdx rbx sar rdx CONST sub [CONST_VAR] rdx jmp JUMP_ADDR_24	lea rsi [r15+CONST] mov ecx CONST jmp JUMP_ADDR_47	cmp [rsp+CONST] CONST jnz JUMP_ADDR_106	mov rax [r12+CONST] xor r11d r11d mov [rax] CONST test [r12+CONST] CONST jnz JUMP_ADDR_31	mov rdi [rsp+CONST] mov [rsp] r9 call sub_xxx mov r9 [rsp] mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_101	mov eax [rsp+CONST] mov rsi [rsp+CONST] xor r8d r8d xor ecx ecx mov rdi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rbx r13 mov rax rbp mov r11d CONST jmp JUMP_ADDR_19	mov rcx r10	mov rax [rsp] mov [rax] rcx cmp rdx rbx jz JUMP_ADDR_102	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r11d CONST jmp JUMP_ADDR_31	mov rsi [rsp+CONST] test rsi rsi jz JUMP_ADDR_76	test r11d r11d jz JUMP_ADDR_76	add [CONST_VAR] CONST jmp JUMP_ADDR_65	mov rsi [rsp] mov [CONST_VAR] rcx cmp rdx rbx jnz JUMP_ADDR_78	cmp r13 rdx jnz JUMP_ADDR_24	sub [r12+CONST] CONST jmp JUMP_ADDR_24	mov rax [rsp] mov [rax] rbp mov rax rbp sub rax r15 add rax rcx cmp rax CONST ja JUMP_ADDR_103	sub r15 rcx cmp rcx rax jnb JUMP_ADDR_89	movzx esi [r15+rcx] mov [rdx+rcx+CONST] sil add rcx CONST cmp rax rcx jnz JUMP_ADDR_88	mov r11d CONST jmp JUMP_ADDR_31	cmp [rsp+CONST] CONST jz JUMP_ADDR_92	and r8d CONST jnz JUMP_ADDR_96	mov r11d CONST jmp JUMP_ADDR_31	mov rbx r13 mov rcx r15 jmp JUMP_ADDR_77	mov rsi [rsp] mov [CONST_VAR] r15 cmp rdx r13 jz JUMP_ADDR_85	jmp JUMP_ADDR_78	mov rsi [rsp+CONST] add [CONST_VAR] CONST jmp JUMP_ADDR_51	mov rbx r13 mov rcx rbp jmp JUMP_ADDR_77	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r11d eax jmp JUMP_ADDR_34	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transform_internal_ucs2
endbr64 push r15 mov r15 r9 push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov r14d [CONST_VAR+CONST] mov eax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp] rdx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] eax mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea rax [CONST_VAR+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax lea rax [CONST_VAR+CONST] mov [rsp+CONST] rax test r14b CONST jnz JUMP_ADDR_3	mov rax [CONST_VAR+CONST] cmp [CONST_VAR+CONST] CONST mov [rsp+CONST] rax jz JUMP_ADDR_3	ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_84	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] test rdi rdi mov r12 [rax] mov rax rdi cmovz rax rbp mov r13 [rax] mov rax [rbp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax xor eax eax test r15 r15 cmovnz rax rdx mov [rsp+CONST] rax mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_40	mov r10 [rsp+CONST] mov [rsp+CONST] r15 xor r11d r11d nop [rax+rax+CONST]	mov rax [rsp+CONST] test rax rax jz JUMP_ADDR_8	add r11 [rax]	mov [rsp+CONST] r12 mov rcx r13 mov [rsp+CONST] r13 cmp rbx r12 jz JUMP_ADDR_88	mov rax r12 mov r15d CONST and r14d CONST	lea rdx [rax+CONST] cmp rbx rdx jb JUMP_ADDR_24	lea rdi [rcx+CONST] cmp r10 rdi jb JUMP_ADDR_28	mov esi [rax] cmp esi CONST ja JUMP_ADDR_29	lea r8d [CONST_VAR+CONST] cmp r8d CONST jbe JUMP_ADDR_34	mov [rcx] si mov rax rdx mov rcx rdi mov [rsp+CONST] rdi mov [rsp+CONST] rdx	cmp rbx rax jnz JUMP_ADDR_10	nop [rax+rax+CONST]	mov rsi [rsp] cmp [rsp+CONST] CONST mov [CONST_VAR] rax jnz JUMP_ADDR_25	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_56	cmp rcx r13 mov [rsp+CONST] r11 mov [rsp+CONST] rcx jbe JUMP_ADDR_64	mov r14 [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r10 mov rdi r14 mov [rsp+CONST] rax call sub_xxx mov eax [rsp+CONST] lea rdx [rsp+CONST] xor r8d r8d push rax push CONST mov r9 [rsp+CONST] mov rcx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] call r14 pop rdi pop r8 cmp eax CONST mov r10 [rsp+CONST] mov r14d eax jz JUMP_ADDR_37	mov r15 [rsp+CONST] mov rcx [rsp+CONST] mov r11 [rsp+CONST] cmp r15 rcx jnz JUMP_ADDR_69	test r14d r14d jnz JUMP_ADDR_89	mov rax [rsp] mov r13 [rbp+CONST] mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	mov rsi [rsp] mov rax [rsp+CONST] mov r15d CONST cmp [rsp+CONST] CONST mov [CONST_VAR] rax jz JUMP_ADDR_18	mov rax [rsp+CONST] mov r10d r15d mov [rax] rcx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_144	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST] mov r15d CONST jmp JUMP_ADDR_17	shr esi CONST cmp esi CONST jz JUMP_ADDR_68	cmp [rsp+CONST] CONST jz JUMP_ADDR_39	test [rbp+CONST] CONST jnz JUMP_ADDR_65	mov rax [rsp+CONST] test r14d r14d jnz JUMP_ADDR_55	mov r15d CONST jmp JUMP_ADDR_17	cmp [rsp+CONST] CONST jz JUMP_ADDR_39	test r14d r14d jz JUMP_ADDR_39	mov rax [rsp+CONST] mov [rsp+CONST] rdx mov r15d CONST add [rax] CONST mov rax rdx jmp JUMP_ADDR_15	mov r14d r15d cmp r15d CONST jnz JUMP_ADDR_22	jmp JUMP_ADDR_23	mov rax [rsp+CONST] mov r15d CONST jmp JUMP_ADDR_17	mov rax [rbp+CONST] mov [rsp+CONST] rax mov eax [rax] mov [rsp+CONST] eax and eax CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_145	mov [rsp+CONST] r12 mov [rsp+CONST] r13 cmp eax CONST ja JUMP_ADDR_143	lea rcx [rsp+CONST] mov rdx [rsp+CONST] xor r11d r11d mov [rsp+CONST] rcx	movzx eax [rdx+r11+CONST] mov [rcx+r11] al mov eax [rdx] add r11 CONST and eax CONST cmp r11 rax jb JUMP_ADDR_44	mov rax r12 sub rax r11 add rax CONST cmp rbx rax jb JUMP_ADDR_103	lea rdi [r13+CONST] lea rax [r12+CONST] mov r10d CONST lea rsi [rsp+CONST] cmp [rsp+CONST] rdi jb JUMP_ADDR_26	mov [rsp+CONST] rax movzx edx [rax+CONST] mov r8 r11 add r11 CONST mov rcx rax add rax CONST mov [CONST_VAR+r11] dl cmp r11 CONST ja JUMP_ADDR_49	cmp rbx rcx ja JUMP_ADDR_47	mov rax [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] rax mov eax [rsp+CONST] cmp eax CONST ja JUMP_ADDR_107	lea edx [rax+CONST] cmp edx CONST jbe JUMP_ADDR_115	mov [r13+CONST] ax mov [rsp+CONST] rdi	lea rax [rsp+CONST] mov r12d CONST mov [rsp+CONST] rax	mov rax [rsp+CONST] mov eax [rax] mov edx eax and edx CONST cmp rdx r12 jge JUMP_ADDR_147	mov rsi [rsp] sub r12 rdx and eax CONST mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov [rsp+CONST] r15 add r12 [CONST_VAR] mov r13 [rsp+CONST] mov [CONST_VAR] r12 mov rsi [rsp+CONST] mov [CONST_VAR] eax jmp JUMP_ADDR_6	mov rsi [rsp+CONST] add rax CONST mov r15d CONST mov [rsp+CONST] rax add [CONST_VAR] CONST jmp JUMP_ADDR_15	mov r10d r15d mov r15 [rsp+CONST] mov [rbp+CONST] rcx mov rax [rsp+CONST] add [r15] rax	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_26	cmp r10d CONST jnz JUMP_ADDR_26	mov rax [rsp] mov rdx rbx mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_146	mov rcx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_63	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_61	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbx mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_26	mov r14d r15d jmp JUMP_ADDR_22	mov [rsp+CONST] r10 lea rcx [rsp+CONST] sub rsp CONST mov r8 rbx mov [rsp+CONST] r11 mov rsi rbp push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop r9 pop r10 cmp eax CONST mov r11 [rsp+CONST] mov r10 [rsp+CONST] mov r15d eax mov rcx [rsp+CONST] jz JUMP_ADDR_32	mov rax [rsp+CONST] mov rcx [rsp+CONST] cmp r15d CONST jnz JUMP_ADDR_15	jmp JUMP_ADDR_17	mov [rsp+CONST] rdx mov rax rdx jmp JUMP_ADDR_15	mov rsi [rsp+CONST] xor eax eax test rsi rsi jz JUMP_ADDR_71	mov rax [CONST_VAR]	add rax [rsp+CONST] cmp r11 rax jz JUMP_ADDR_83	mov rax [rsp] mov [rsp+CONST] r12 mov [rsp+CONST] r13 mov [rax] r12 mov eax [rbp+CONST] cmp rbx r12 jz JUMP_ADDR_125	and eax CONST mov rcx r13 mov r11d eax	lea rax [r12+CONST] cmp rbx rax jb JUMP_ADDR_90	lea rsi [rcx+CONST] cmp r15 rsi jb JUMP_ADDR_91	mov edx [r12] cmp edx CONST ja JUMP_ADDR_95	lea edi [rdx+CONST] cmp edi CONST jbe JUMP_ADDR_100	mov [rcx] dx mov r12 rax mov rcx rsi mov [rsp+CONST] rsi mov [rsp+CONST] rax	cmp r12 rbx jnz JUMP_ADDR_74	mov r10 [rsp+CONST]	mov rax [rsp] mov [rax] r12 cmp rcx r10 jz JUMP_ADDR_149	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi [rsp] sub rcx r15 lea rax [rcx+rcx] sub [CONST_VAR] rax jmp JUMP_ADDR_22	cmp [rsp+CONST] CONST jnz JUMP_ADDR_148	mov rax [rbp+CONST] xor r10d r10d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_26	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_144	mov eax [rsp+CONST] mov rsi [rsp+CONST] mov r9 r15 xor r8d r8d mov rdi [rsp+CONST] xor ecx ecx xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rax rbx mov r15d CONST jmp JUMP_ADDR_17	mov r10d r14d jmp JUMP_ADDR_57	mov r12 [rsp+CONST] jmp JUMP_ADDR_80	mov rax [rsp+CONST]	mov rsi [rsp] mov [CONST_VAR] rax cmp rcx [rsp+CONST] jnz JUMP_ADDR_82	cmp rcx r13 jnz JUMP_ADDR_22	sub [rbp+CONST] CONST jmp JUMP_ADDR_22	shr edx CONST cmp edx CONST jz JUMP_ADDR_121	cmp [rsp+CONST] CONST jz JUMP_ADDR_90	test [rbp+CONST] CONST jnz JUMP_ADDR_118	mov r12 [rsp+CONST] test r11d r11d jz JUMP_ADDR_80	mov rax [rsp+CONST] add r12 CONST mov [rsp+CONST] r12 add [rax] CONST jmp JUMP_ADDR_79	cmp [rsp+CONST] CONST jz JUMP_ADDR_90	test r11d r11d jz JUMP_ADDR_90	mov rsi [rsp+CONST] mov [rsp+CONST] rax mov r12 rax add [CONST_VAR] CONST jmp JUMP_ADDR_79	mov rax [rsp] mov [rax] rbx mov rax rbx sub rax r12 add rax r11 cmp rax CONST ja JUMP_ADDR_142	mov rcx [rsp+CONST] add r12 CONST cmp r11 rax jnb JUMP_ADDR_106	mov [rsp+CONST] r12 movzx edx [r12+CONST] add r12 CONST mov [rcx+r11+CONST] dl add r11 CONST cmp rax r11 jnz JUMP_ADDR_105	mov r10d CONST jmp JUMP_ADDR_26	shr eax CONST cmp eax CONST jz JUMP_ADDR_52	cmp [rsp+CONST] CONST jz JUMP_ADDR_114	test r14b CONST jnz JUMP_ADDR_122	and r14d CONST jz JUMP_ADDR_114	mov rax [rsp+CONST] lea r12 [rsp+CONST] mov [rsp+CONST] r12 add [rax] CONST	sub r12 [rsp+CONST] jmp JUMP_ADDR_53	mov rax [rsp+CONST] add r12 CONST mov [rsp+CONST] r12 add [rax] CONST cmp r12 [rsp+CONST] jnz JUMP_ADDR_112	mov r10d CONST jmp JUMP_ADDR_26	cmp [rsp+CONST] CONST jz JUMP_ADDR_114	and r14d CONST jz JUMP_ADDR_114	lea rax [rsp+CONST] mov r12d CONST mov [rsp+CONST] rax mov rax [rsp+CONST] add [rax] CONST jmp JUMP_ADDR_53	mov [rsp+CONST] r11d lea rcx [rsp+CONST] sub rsp CONST mov rsi rbp mov [rsp+CONST] r10 mov r8 rbx push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop rcx pop rsi cmp eax CONST mov r10 [rsp+CONST] mov r11d [rsp+CONST] mov edx eax mov rcx [rsp+CONST] jz JUMP_ADDR_98	mov r12 [rsp+CONST] mov rcx [rsp+CONST] mov rax r12 cmp edx CONST jnz JUMP_ADDR_79	jmp JUMP_ADDR_92	mov [rsp+CONST] rax mov r12 rax jmp JUMP_ADDR_79	mov rax [rsp+CONST] mov [rsp+CONST] r11 mov rdx r12 mov rsi rbp lea rcx [rsp+CONST] sub rsp CONST push [rsp+CONST] mov rdi [rsp+CONST] lea r8 [rax+r11] lea r9 [rsp+CONST] mov [rsp+CONST] r8 call sub_xxx pop r11 pop r12 mov r10d eax mov r12 [rsp+CONST] cmp eax CONST jz JUMP_ADDR_126	mov rax [rsp+CONST] mov r8 [rsp+CONST] mov r11 [rsp+CONST] cmp r12 rax jz JUMP_ADDR_129	sub r12 rax jmp JUMP_ADDR_53	mov r10 r15 mov rcx r13 jmp JUMP_ADDR_81	and r14b CONST jnz JUMP_ADDR_113	mov rax [rsp+CONST] cmp r12 rax jnz JUMP_ADDR_124	jmp JUMP_ADDR_114	cmp r10d CONST jnz JUMP_ADDR_137	lea rax [rsp+CONST] cmp r8 rax jz JUMP_ADDR_141	mov rax [rsp+CONST] mov rbx [rsp] mov rdx r11 mov eax [rax] mov ecx eax and eax CONST and ecx CONST sub rdx rcx add [rbx] rdx movsxd rdx eax cmp r11 rdx jle JUMP_ADDR_140	cmp r11 CONST ja JUMP_ADDR_139	mov rbx [rsp+CONST] or eax r11d mov [rbx] eax test r11 r11 jz JUMP_ADDR_106	mov rcx [rsp+CONST] xor eax eax	movzx edx [rcx+rax] mov rbx [rsp+CONST] mov [rbx+rax+CONST] dl mov rdx rax add rax CONST cmp [rsp+CONST] rdx jnz JUMP_ADDR_135	jmp JUMP_ADDR_106	test r10d r10d jnz JUMP_ADDR_26	mov rax [rsp] mov r10 [rsp+CONST] mov [rsp+CONST] r15 mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transform_ucs2reverse_internal
endbr64 push r15 mov rax rdi push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov r11d [CONST_VAR+CONST] mov edi [rsp+CONST] mov [rsp] rdx mov [rsp+CONST] r8 mov [rsp+CONST] edi mov edi [rsp+CONST] mov [rsp+CONST] edi lea rdi [rax+CONST] mov rdx fs:xxx mov [rsp+CONST] rdx xor edx edx mov [rsp+CONST] rdi lea rdi [CONST_VAR+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] CONST test r11b CONST jnz JUMP_ADDR_3	mov rdi [rax+CONST] cmp [rax+CONST] CONST mov [rsp+CONST] rdi jz JUMP_ADDR_3	mov r15 rdi ror r15 CONST xor r15 fs:xxx mov [rsp+CONST] r15	mov edi [rsp+CONST] test edi edi jnz JUMP_ADDR_72	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] mov esi [rsp+CONST] mov r13 [rbp+CONST] test rdi rdi mov r14 [rax] mov rax rdi cmovz rax rbp mov r12 [rax] xor eax eax test r9 r9 mov [rsp+CONST] CONST cmovnz rax rdx mov [rsp+CONST] rax test esi esi jnz JUMP_ADDR_40	xor r10d r10d mov r15 r9 xchg ax ax	test r15 r15 jz JUMP_ADDR_8	add r10 [r15]	cmp rbx r14 jz JUMP_ADDR_76	lea rdx [r14+CONST] cmp rbx rdx jb JUMP_ADDR_51	lea rsi [r12+CONST] mov rcx r12 cmp r13 rsi jb JUMP_ADDR_56	and r11d CONST	movzx eax [rdx+CONST] lea r8 [rdx+CONST] rol ax CONST lea edi [rax+CONST] cmp di CONST jbe JUMP_ADDR_17	movzx eax ax mov [rcx] eax mov rcx rsi cmp rbx rdx jz JUMP_ADDR_54	lea rax [rdx+CONST] cmp rbx rax jb JUMP_ADDR_27	lea rsi [rcx+CONST] cmp r13 rsi jb JUMP_ADDR_31	mov rdx rax jmp JUMP_ADDR_12	cmp [rsp+CONST] CONST jz JUMP_ADDR_19	test r11d r11d jnz JUMP_ADDR_52	mov rdx r8 mov r11d CONST	mov rax [rsp] cmp [rsp+CONST] CONST mov [rax] rdx jnz JUMP_ADDR_28	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_55	cmp rcx r12 mov [rsp+CONST] r10 mov [rsp+CONST] rcx jbe JUMP_ADDR_33	mov rdi [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r11d mov [rsp+CONST] rax call sub_xxx mov esi [rsp+CONST] xor r8d r8d mov r9 r15 lea rdx [rsp+CONST] push rsi push CONST mov rcx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov rax [rsp+CONST] call rax pop rdx pop rcx cmp eax CONST mov r11d [rsp+CONST] jz JUMP_ADDR_32	mov rdx [rsp+CONST] mov rcx [rsp+CONST] mov r10 [rsp+CONST] cmp rcx rdx jnz JUMP_ADDR_57	test eax eax jnz JUMP_ADDR_105	mov rax [rsp] mov r12 [rbp+CONST] mov r10 [rsp+CONST] mov r11d [rbp+CONST] mov r14 [rax] jmp JUMP_ADDR_6	mov rax [rsp] cmp [rsp+CONST] CONST mov r11d CONST mov [rax] rdx jz JUMP_ADDR_21	mov rax [rsp+CONST] mov [rax] rcx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_102	add rsp CONST mov eax r11d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r11d CONST jmp JUMP_ADDR_20	cmp r11d CONST jz JUMP_ADDR_26	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_29	cmp r11d CONST jnz JUMP_ADDR_29	mov rax [rsp] mov rdx rbx mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_106	mov rcx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_39	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_37	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbx mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_29	mov rdx [rbp+CONST] mov eax [rdx] mov r8d eax and r8d CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_100	cmp r8d CONST ja JUMP_ADDR_101	movzx ecx [rdx+CONST] mov [rsp+CONST] cl cmp r8d CONST jz JUMP_ADDR_71	movzx ecx [rdx+CONST] mov rsi r14 mov [rsp+CONST] cl mov ecx CONST	cmp rbx rsi jb JUMP_ADDR_86	lea rsi [r12+CONST] cmp r13 rsi jb JUMP_ADDR_82	movzx edi [r14] mov [rsp+rcx+CONST] dil movzx ecx [rsp+CONST] rol cx CONST lea edi [rcx+CONST] cmp di CONST jbe JUMP_ADDR_90	movzx ecx cx mov [r12] ecx mov eax [rdx] mov r12 rsi mov r8d eax and r8d CONST	movsxd rcx r8d cmp r8d CONST jg JUMP_ADDR_99	mov rdi [rsp] sub r14 rcx and eax CONST mov r10 [rsp+CONST] add r14 CONST mov r11d [rbp+CONST] mov r15 r9 mov [CONST_VAR] r14 mov [rdx] eax jmp JUMP_ADDR_6	mov rcx r12 mov rdx r14 mov r11d CONST jmp JUMP_ADDR_20	mov rax [rsp+CONST] add [rax] CONST cmp rbx rdx jnz JUMP_ADDR_14	nop [rax+rax+CONST]	mov r11d CONST jmp JUMP_ADDR_20	mov [rbp+CONST] rcx mov rax [rsp+CONST] add [r15] rax jmp JUMP_ADDR_33	mov rdx r14 mov r11d CONST jmp JUMP_ADDR_20	xor esi esi test r15 r15 jz JUMP_ADDR_59	mov rsi [r15]	add rsi [rsp+CONST] cmp rsi r10 jz JUMP_ADDR_70	mov ecx [rbp+CONST] cmp rbx r14 jz JUMP_ADDR_98	lea rsi [r14+CONST] cmp rbx rsi jb JUMP_ADDR_94	lea rdi [r12+CONST] cmp rdx rdi jb JUMP_ADDR_95	and ecx CONST mov r11 r12 mov r10d ecx	movzx ecx [CONST_VAR+CONST] lea r14 [CONST_VAR+CONST] rol cx CONST lea r8d [rcx+CONST] cmp r8w CONST jbe JUMP_ADDR_77	movzx ecx cx mov [r11] ecx mov r11 rdi	cmp rsi rbx jz JUMP_ADDR_80	lea rcx [CONST_VAR+CONST] cmp rbx rcx jb JUMP_ADDR_80	lea rdi [r11+CONST] cmp rdx rdi jb JUMP_ADDR_83	mov rsi rcx jmp JUMP_ADDR_64	sub rcx rdx mov rdi [rsp] mov rdx rcx shr rdx CONST add rdx rcx sar rdx CONST sub [CONST_VAR] rdx jmp JUMP_ADDR_25	lea rsi [r14+CONST] mov ecx CONST jmp JUMP_ADDR_45	cmp [rsp+CONST] CONST jnz JUMP_ADDR_107	mov rax [rbp+CONST] xor r11d r11d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_29	mov rdi [rsp+CONST] mov [rsp] r9 call sub_xxx mov r9 [rsp] mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_102	mov eax [rsp+CONST] mov rsi [rsp+CONST] xor r8d r8d xor ecx ecx mov rdi [rsp+CONST] xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rcx r12 mov rdx rbx jmp JUMP_ADDR_54	cmp [rsp+CONST] CONST jz JUMP_ADDR_79	test r10d r10d jnz JUMP_ADDR_93	mov rsi r14	mov rax [rsp] mov [rax] rsi cmp rdx r11 jz JUMP_ADDR_103	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r11d CONST jmp JUMP_ADDR_29	mov rdi [rsp] mov [CONST_VAR] rsi cmp rdx r11 jnz JUMP_ADDR_81	cmp r12 rdx jnz JUMP_ADDR_25	sub [rbp+CONST] CONST jmp JUMP_ADDR_25	mov rax [rsp] mov [rax] rbx mov rax rbx sub rax r14 add rax rcx cmp rax CONST ja JUMP_ADDR_104	sub r14 rcx cmp rcx rax jnb JUMP_ADDR_89	movzx esi [r14+rcx] mov [rdx+rcx+CONST] sil add rcx CONST cmp rax rcx jnz JUMP_ADDR_88	mov r11d CONST jmp JUMP_ADDR_29	cmp [rsp+CONST] CONST jz JUMP_ADDR_92	and r11d CONST jnz JUMP_ADDR_97	mov r11d CONST jmp JUMP_ADDR_29	mov rdi [rsp+CONST] add [CONST_VAR] CONST jmp JUMP_ADDR_66	mov r11 r12 mov rsi r14 jmp JUMP_ADDR_80	mov rdi [rsp] mov [CONST_VAR] r14 cmp rdx r12 jz JUMP_ADDR_85	jmp JUMP_ADDR_81	mov rdi [rsp+CONST] add [CONST_VAR] CONST jmp JUMP_ADDR_49	mov r11 r12 mov rsi rbx jmp JUMP_ADDR_80	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov r11d eax jmp JUMP_ADDR_33	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transform_internal_ucs2reverse
endbr64 push r15 mov r15 r9 push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov r14d [CONST_VAR+CONST] mov eax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp] rdx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] eax mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea rax [CONST_VAR+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax lea rax [CONST_VAR+CONST] mov [rsp+CONST] rax test r14b CONST jnz JUMP_ADDR_3	mov rax [CONST_VAR+CONST] cmp [CONST_VAR+CONST] CONST mov [rsp+CONST] rax jz JUMP_ADDR_3	ror rax CONST xor rax fs:xxx mov [rsp+CONST] rax	mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_84	mov rax [rsp] mov rdi [rsp+CONST] lea rdx [rsp+CONST] test rdi rdi mov r12 [rax] mov rax rdi cmovz rax rbp mov r13 [rax] mov rax [rbp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] rax xor eax eax test r15 r15 cmovnz rax rdx mov [rsp+CONST] rax mov eax [rsp+CONST] test eax eax jnz JUMP_ADDR_40	mov r10 [rsp+CONST] mov [rsp+CONST] r15 xor r11d r11d nop [rax+rax+CONST]	mov rax [rsp+CONST] test rax rax jz JUMP_ADDR_8	add r11 [rax]	mov [rsp+CONST] r12 mov rcx r13 mov [rsp+CONST] r13 cmp rbx r12 jz JUMP_ADDR_88	mov rax r12 mov r15d CONST and r14d CONST	lea rdx [rax+CONST] cmp rbx rdx jb JUMP_ADDR_24	lea rsi [rcx+CONST] cmp r10 rsi jb JUMP_ADDR_28	mov eax [rax] cmp eax CONST ja JUMP_ADDR_29	lea edi [rax+CONST] cmp edi CONST jbe JUMP_ADDR_34	rol ax CONST mov [rcx] ax mov rcx rsi mov rax rdx mov [rsp+CONST] rsi mov [rsp+CONST] rdx	cmp rax rbx jnz JUMP_ADDR_10	nop [rax+CONST]	mov rdi [rsp] cmp [rsp+CONST] CONST mov [CONST_VAR] rax jnz JUMP_ADDR_25	add [rbp+CONST] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_56	cmp rcx r13 mov [rsp+CONST] r11 mov [rsp+CONST] rcx jbe JUMP_ADDR_64	mov r14 [rsp+CONST] mov rax [rbp+CONST] mov [rsp+CONST] r10 mov rdi r14 mov [rsp+CONST] rax call sub_xxx mov eax [rsp+CONST] lea rdx [rsp+CONST] xor r8d r8d push rax push CONST mov r9 [rsp+CONST] mov rcx [rsp+CONST] mov rsi [rsp+CONST] mov rdi [rsp+CONST] call r14 pop rdi pop r8 cmp eax CONST mov r10 [rsp+CONST] mov r14d eax jz JUMP_ADDR_37	mov r15 [rsp+CONST] mov rcx [rsp+CONST] mov r11 [rsp+CONST] cmp r15 rcx jnz JUMP_ADDR_69	test r14d r14d jnz JUMP_ADDR_89	mov rax [rsp] mov r13 [rbp+CONST] mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	mov rdi [rsp] mov rax [rsp+CONST] mov r15d CONST cmp [rsp+CONST] CONST mov [CONST_VAR] rax jz JUMP_ADDR_18	mov rax [rsp+CONST] mov r10d r15d mov [rax] rcx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_144	add rsp CONST mov eax r10d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST] mov r15d CONST jmp JUMP_ADDR_17	shr eax CONST cmp eax CONST jz JUMP_ADDR_68	cmp [rsp+CONST] CONST jz JUMP_ADDR_39	test [rbp+CONST] CONST jnz JUMP_ADDR_65	mov rax [rsp+CONST] test r14d r14d jnz JUMP_ADDR_55	mov r15d CONST jmp JUMP_ADDR_17	cmp [rsp+CONST] CONST jz JUMP_ADDR_39	test r14d r14d jz JUMP_ADDR_39	mov rax [rsp+CONST] mov [rsp+CONST] rdx add [rax] CONST mov rax rdx jmp JUMP_ADDR_15	mov r14d r15d cmp r15d CONST jnz JUMP_ADDR_22	jmp JUMP_ADDR_23	mov rax [rsp+CONST] mov r15d CONST jmp JUMP_ADDR_17	mov rax [rbp+CONST] mov [rsp+CONST] rax mov eax [rax] mov [rsp+CONST] eax and eax CONST jz JUMP_ADDR_5	test rdi rdi jnz JUMP_ADDR_145	mov [rsp+CONST] r12 mov [rsp+CONST] r13 cmp eax CONST ja JUMP_ADDR_143	lea rcx [rsp+CONST] mov rdx [rsp+CONST] xor r11d r11d mov [rsp+CONST] rcx	movzx eax [rdx+r11+CONST] mov [rcx+r11] al mov eax [rdx] add r11 CONST and eax CONST cmp r11 rax jb JUMP_ADDR_44	mov rax r12 sub rax r11 add rax CONST cmp rbx rax jb JUMP_ADDR_103	lea rsi [r13+CONST] mov rax r12 lea rcx [rsp+CONST] mov r10d CONST cmp [rsp+CONST] rsi jb JUMP_ADDR_26	add rax CONST mov rdi r11 add r11 CONST mov [rsp+CONST] rax movzx edx [rax+CONST] mov [rcx+r11] dl cmp r11 CONST ja JUMP_ADDR_49	cmp rbx rax ja JUMP_ADDR_47	mov rax [rsp+CONST] mov [rsp+CONST] rdi mov [rsp+CONST] rax mov eax [rsp+CONST] cmp eax CONST ja JUMP_ADDR_107	lea edx [rax+CONST] cmp edx CONST jbe JUMP_ADDR_115	rol ax CONST mov [r13+CONST] ax mov [rsp+CONST] rsi	lea rax [rsp+CONST] mov r12d CONST mov [rsp+CONST] rax	mov rax [rsp+CONST] mov eax [rax] mov edx eax and edx CONST cmp r12 rdx jle JUMP_ADDR_147	mov rsi [rsp] sub r12 rdx and eax CONST mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov [rsp+CONST] r15 add r12 [CONST_VAR] mov r13 [rsp+CONST] mov [CONST_VAR] r12 mov rsi [rsp+CONST] mov [CONST_VAR] eax jmp JUMP_ADDR_6	mov rsi [rsp+CONST] add rax CONST mov r15d CONST mov [rsp+CONST] rax add [CONST_VAR] CONST jmp JUMP_ADDR_15	mov r10d r15d mov r15 [rsp+CONST] mov [rbp+CONST] rcx mov rax [rsp+CONST] add [r15] rax	mov eax [rsp+CONST] test eax eax jz JUMP_ADDR_26	cmp r10d CONST jnz JUMP_ADDR_26	mov rax [rsp] mov rdx rbx mov rdi [rax] sub rdx rdi cmp rdx CONST ja JUMP_ADDR_146	mov rcx [rbp+CONST] xor eax eax test rdx rdx jz JUMP_ADDR_63	movzx esi [CONST_VAR+rax] mov [rcx+rax+CONST] sil add rax CONST cmp rdx rax jnz JUMP_ADDR_61	mov [rsp+CONST] edx	mov rax [rsp] mov [rax] rbx mov eax [rcx] and eax CONST or eax [rsp+CONST] mov [rcx] eax jmp JUMP_ADDR_26	mov r14d r15d jmp JUMP_ADDR_22	mov [rsp+CONST] r11 lea rcx [rsp+CONST] sub rsp CONST mov r8 rbx mov [rsp+CONST] r10 mov rsi rbp push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop r9 pop r10 cmp eax CONST mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov r15d eax mov rcx [rsp+CONST] jz JUMP_ADDR_32	mov rax [rsp+CONST] mov rcx [rsp+CONST] cmp r15d CONST jnz JUMP_ADDR_15	jmp JUMP_ADDR_17	mov [rsp+CONST] rdx mov rax rdx jmp JUMP_ADDR_15	mov rsi [rsp+CONST] xor eax eax test rsi rsi jz JUMP_ADDR_71	mov rax [CONST_VAR]	add rax [rsp+CONST] cmp rax r11 jz JUMP_ADDR_83	mov rax [rsp] mov [rsp+CONST] r12 mov [rsp+CONST] r13 mov [rax] r12 mov eax [rbp+CONST] cmp rbx r12 jz JUMP_ADDR_125	and eax CONST mov rcx r13 mov r11d eax	lea rdx [r12+CONST] cmp rbx rdx jb JUMP_ADDR_90	lea rsi [rcx+CONST] cmp r15 rsi jb JUMP_ADDR_91	mov eax [r12] cmp eax CONST ja JUMP_ADDR_95	lea edi [rax+CONST] cmp edi CONST jbe JUMP_ADDR_100	rol ax CONST mov r12 rdx mov [rcx] ax mov rcx rsi mov [rsp+CONST] rsi mov [rsp+CONST] rdx	cmp rbx r12 jnz JUMP_ADDR_74	mov r10 [rsp+CONST]	mov rax [rsp] mov [rax] r12 cmp rcx r10 jz JUMP_ADDR_149	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi [rsp] sub rcx r15 lea rax [rcx+rcx] sub [CONST_VAR] rax jmp JUMP_ADDR_22	cmp [rsp+CONST] CONST jnz JUMP_ADDR_148	mov rax [rbp+CONST] xor r10d r10d mov [rax] CONST test [rbp+CONST] CONST jnz JUMP_ADDR_26	mov rdi [rsp+CONST] call sub_xxx mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_144	mov eax [rsp+CONST] mov rsi [rsp+CONST] mov r9 r15 xor r8d r8d mov rdi [rsp+CONST] xor ecx ecx xor edx edx mov [rsp+CONST] eax mov eax [rsp+CONST] mov [rsp+CONST] eax mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp rax	mov rax rbx mov r15d CONST jmp JUMP_ADDR_17	mov r10d r14d jmp JUMP_ADDR_57	mov r12 [rsp+CONST] jmp JUMP_ADDR_80	mov rax [rsp+CONST]	mov rsi [rsp] mov [CONST_VAR] rax cmp rcx [rsp+CONST] jnz JUMP_ADDR_82	cmp rcx r13 jnz JUMP_ADDR_22	sub [rbp+CONST] CONST jmp JUMP_ADDR_22	shr eax CONST cmp eax CONST jz JUMP_ADDR_121	cmp [rsp+CONST] CONST jz JUMP_ADDR_90	test [rbp+CONST] CONST jnz JUMP_ADDR_118	mov r12 [rsp+CONST] test r11d r11d jz JUMP_ADDR_80	mov rax [rsp+CONST] add r12 CONST mov [rsp+CONST] r12 add [rax] CONST jmp JUMP_ADDR_79	cmp [rsp+CONST] CONST jz JUMP_ADDR_90	test r11d r11d jz JUMP_ADDR_90	mov rax [rsp+CONST] mov [rsp+CONST] rdx mov r12 rdx add [rax] CONST jmp JUMP_ADDR_79	mov rax [rsp] mov [rax] rbx mov rax rbx sub rax r12 add rax r11 cmp rax CONST ja JUMP_ADDR_142	mov rcx [rsp+CONST] add r12 CONST cmp r11 rax jnb JUMP_ADDR_106	mov [rsp+CONST] r12 movzx edx [r12+CONST] add r12 CONST mov [rcx+r11+CONST] dl add r11 CONST cmp rax r11 jnz JUMP_ADDR_105	mov r10d CONST jmp JUMP_ADDR_26	shr eax CONST cmp eax CONST jz JUMP_ADDR_52	cmp [rsp+CONST] CONST jz JUMP_ADDR_114	test r14b CONST jnz JUMP_ADDR_122	and r14d CONST jz JUMP_ADDR_114	mov rax [rsp+CONST] lea r12 [rsp+CONST] mov [rsp+CONST] r12 add [rax] CONST	sub r12 [rsp+CONST] jmp JUMP_ADDR_53	mov rax [rsp+CONST] add r12 CONST mov [rsp+CONST] r12 add [rax] CONST cmp r12 [rsp+CONST] jnz JUMP_ADDR_112	mov r10d CONST jmp JUMP_ADDR_26	cmp [rsp+CONST] CONST jz JUMP_ADDR_114	and r14d CONST jz JUMP_ADDR_114	lea rax [rsp+CONST] mov r12d CONST mov [rsp+CONST] rax mov rax [rsp+CONST] add [rax] CONST jmp JUMP_ADDR_53	mov [rsp+CONST] r11d lea rcx [rsp+CONST] sub rsp CONST mov rsi rbp mov [rsp+CONST] r10 mov r8 rbx push [rsp+CONST] mov rax [rsp+CONST] mov rdi [rsp+CONST] mov rdx [rax] lea r9 [rsp+CONST] call sub_xxx pop rcx pop rsi cmp eax CONST mov r10 [rsp+CONST] mov r11d [rsp+CONST] mov edx eax mov rcx [rsp+CONST] jz JUMP_ADDR_98	mov r12 [rsp+CONST] mov rcx [rsp+CONST] mov rax r12 cmp edx CONST jnz JUMP_ADDR_79	jmp JUMP_ADDR_92	mov [rsp+CONST] rdx mov r12 rdx jmp JUMP_ADDR_79	mov rax [rsp+CONST] mov [rsp+CONST] r11 mov rdx r12 mov rsi rbp lea rcx [rsp+CONST] sub rsp CONST push [rsp+CONST] mov rdi [rsp+CONST] lea r8 [rax+r11] lea r9 [rsp+CONST] mov [rsp+CONST] r8 call sub_xxx pop r11 pop r12 mov r10d eax mov r12 [rsp+CONST] cmp eax CONST jz JUMP_ADDR_126	mov rax [rsp+CONST] mov r8 [rsp+CONST] mov r11 [rsp+CONST] cmp r12 rax jz JUMP_ADDR_129	sub r12 rax jmp JUMP_ADDR_53	mov r10 r15 mov rcx r13 jmp JUMP_ADDR_81	and r14b CONST jnz JUMP_ADDR_113	mov rax [rsp+CONST] cmp r12 rax jnz JUMP_ADDR_124	jmp JUMP_ADDR_114	cmp r10d CONST jnz JUMP_ADDR_137	lea rax [rsp+CONST] cmp r8 rax jz JUMP_ADDR_141	mov rax [rsp+CONST] mov rbx [rsp] mov rdx r11 mov eax [rax] mov ecx eax and eax CONST and ecx CONST sub rdx rcx add [rbx] rdx movsxd rdx eax cmp rdx r11 jge JUMP_ADDR_140	cmp r11 CONST ja JUMP_ADDR_139	mov rbx [rsp+CONST] or eax r11d mov [rbx] eax test r11 r11 jz JUMP_ADDR_106	mov rcx [rsp+CONST] xor eax eax	movzx edx [rcx+rax] mov rbx [rsp+CONST] mov [rbx+rax+CONST] dl mov rdx rax add rax CONST cmp rdx [rsp+CONST] jnz JUMP_ADDR_135	jmp JUMP_ADDR_106	test r10d r10d jnz JUMP_ADDR_26	mov rax [rsp] mov r10 [rsp+CONST] mov [rsp+CONST] r15 mov r11 [rsp+CONST] mov r14d [rbp+CONST] mov r12 [rax] jmp JUMP_ADDR_6	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_transliterate
endbr64 push r15 push r14 push r13 mov r13 r8 push r12 push rbp push rbx sub rsp CONST mov r15 [CONST_VAR+CONST] mov rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rax mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax [rcx] cmp [CONST_VAR] CONST mov [rsp+CONST+var_xxx] rax jz JUMP_ADDR_2	mov rax r15 ror rax CONST xor rax fs:xxx mov r15 rax	mov rax CONST mov rax fs:xxx mov rsi [rax] mov eax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_33	mov rax [CONST_VAR+CONST] lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rdi mov r14 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax mov rax [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] add rax CONST cmp r13 rax jb JUMP_ADDR_18	xchg ax ax	mov rax [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] xor ebx ebx add rax [rsp+CONST+var_xxx] shr rax CONST mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR+rax*4] mov edx [r14+rax*4] mov r12 rax mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_8	add ebx CONST lea edx [rbx+r12] mov edx [r14+rdx*4] test edx edx jz JUMP_ADDR_25	add rax CONST cmp r13 rax jbe JUMP_ADDR_20	cmp [rax] edx jz JUMP_ADDR_6	test ebx ebx jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx]	cmp r13 rax jbe JUMP_ADDR_17	lea edx [rbx+r12] mov eax [rax] cmp [r14+rdx*4] eax jb JUMP_ADDR_17	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax	mov rdi [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rdi ja JUMP_ADDR_5	mov rax CONST mov rax fs:xxx mov rsi [rax] movsxd rax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_38	mov rdi [rsp+CONST+var_xxx] mov rcx [CONST_VAR+CONST] mov rdi [CONST_VAR] mov [rsp+CONST+var_xxx] rdi mov edi [CONST_VAR] jmp JUMP_ADDR_35	mov rax [rsp+CONST+var_xxx] add rax CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_14	mov eax CONST cmp [rsp+CONST+var_xxx] r13 jz JUMP_ADDR_21	nop [rax+rax+CONST]	mov eax CONST	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_56	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test edx edx jnz JUMP_ADDR_20	nop [rax+rax+CONST]	mov rax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ebx lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r12d mov r12 [rsp+CONST+var_xxx] mov eax [rax+rsi*4] mov [rsp+CONST+var_xxx] r14 mov r14 r11 mov [rsp+CONST+var_xxx] r13 mov r13 rdi mov edx [r11+rax*4] mov ebp eax nop [rax+CONST]	lea rsi [r14+rax*4] test edx edx jz JUMP_ADDR_32	lea rax [r14+rax*4+CONST] xor ebx ebx nop [rax+rax+CONST]	mov rcx rax mov r8d [rax] add rax CONST add rbx CONST test r8d r8d jnz JUMP_ADDR_28	mov rax [r12] mov rdi r15 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rax call sub_xxx push CONST xor r9d r9d mov rdx r13 push CONST mov r8 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call r15 pop rsi pop rdi cmp eax CONST jnz JUMP_ADDR_40	lea eax [rbp+rbx+CONST] mov edx [r14+rax*4] mov rbp rax test edx edx jnz JUMP_ADDR_26	movsxd rax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov r11 r14 mov r12d [rsp+CONST+var_xxx] mov r14 [rsp+CONST+var_xxx] mov rbx rax mov r13 [rsp+CONST+var_xxx] lea rax [CONST_VAR+rax*4] jmp JUMP_ADDR_11	mov rcx rsi xor ebx ebx jmp JUMP_ADDR_29	movsxd rax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_52	mov rbx [rsp+CONST+var_xxx] mov rcx [CONST_VAR+CONST] lea rdx [rbx+CONST] mov edi [rbx] cmp r13 rdx jb JUMP_ADDR_18	test eax eax jle JUMP_ADDR_38	lea rax [rax+rax*2] lea r8 [rcx+rax*4] nop [rax+rax+CONST]	mov edx [rcx] cmp edx edi jbe JUMP_ADDR_44	mov ebx [CONST_VAR+CONST] test ebx ebx jnz JUMP_ADDR_48	mov eax CONST jmp JUMP_ADDR_21	mov ebx [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_43	cmp eax CONST jz JUMP_ADDR_21	mov rdx [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov [CONST_VAR] rdx jmp JUMP_ADDR_21	mov rdi [rsp+CONST+var_xxx] movsxd rax ebx shl rax CONST add [CONST_VAR] rax mov rax [rsp+CONST+var_xxx] add [rax] CONST xor eax eax jmp JUMP_ADDR_42	cmp [rcx+CONST] edi jb JUMP_ADDR_46	mov eax edi sub eax edx xor edx edx div [rcx+CONST] test edx edx jz JUMP_ADDR_55	add rcx CONST cmp rcx r8 jnz JUMP_ADDR_37	jmp JUMP_ADDR_38	mov rbp [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rbp	mov rax [rsp+CONST+var_xxx] mov rdi r15 mov rax [rax] mov [rsp+CONST+var_xxx] rax call sub_xxx lea rdx [rsp+CONST+var_xxx] push CONST lea rcx [rbp+rbx*4+CONST] push CONST xor r9d r9d mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call r15 pop rdx pop rcx cmp eax CONST jz JUMP_ADDR_21	cmp eax CONST jnz JUMP_ADDR_42	mov rax [rsp+CONST+var_xxx] add [rax] CONST mov rax [rsp+CONST+var_xxx] add [rax] CONST xor eax eax jmp JUMP_ADDR_42	mov ebx [CONST_VAR+CONST] test ebx ebx jz JUMP_ADDR_39	mov rbp [CONST_VAR+CONST] mov rsi [rsp+CONST+var_xxx] lea rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rbp cmp r13 rax jnb JUMP_ADDR_49	xor eax eax cmp rsi r13 setnz al lea eax [rax+rax*2+CONST] jmp JUMP_ADDR_21	mov rax [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] add rax CONST mov [CONST_VAR] rax mov rax [rsp+CONST+var_xxx] add [rax] CONST xor eax eax jmp JUMP_ADDR_21	call sub_xxx
[ph]libcap-git-setcap_find_module_idx
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r14 cs:xxx mov [rsp+CONST+var_xxx] rdi movzx eax [r14+CONST] movzx r12d [r14+CONST] mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rax call sub_xxx movzx r13d [r14+CONST] xor edx edx mov edi cs:xxx mov ecx eax div r13d lea esi [r13+CONST] mov eax ecx mov ebx edx xor edx edx div esi movzx eax [r14+CONST] sub edi eax mov [rsp+CONST+var_xxx] edi lea ebp [rdx+CONST] jmp JUMP_ADDR_4	movzx eax si cmp eax [rsp+CONST+var_xxx] jnb JUMP_ADDR_3	add rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] add rsi r14 call sub_xxx test eax eax jz JUMP_ADDR_6	add ebx ebp mov ecx ebx mov eax ebx sub ecx r13d cmp r13d ebx cmovbe eax ecx mov ebx eax	mov eax ebx lea rcx [r12+rax*4] lea r15 [r14+rcx] movzx esi [r15] test si si jnz JUMP_ADDR_1	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	movzx edx [r15+CONST] mov rdi [rsp+CONST+var_xxx] mov [CONST_VAR] rdx add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn
[ph]libcap-git-setcap_find_module.constprop.0
push rbp mov rbp rsp push r15 push r14 push r13 mov r13 rdi push r12 mov r12 rsi push rbx mov rbx rdx sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov rdi r12 mov r14 rax call sub_xxx mov rdx r14 mov rsi r13 lea r15 [rax+CONST] lea rax [r14+rax+CONST] and rax CONST sub rsp rax mov rdi rsp call sub_xxx mov rdx r15 mov rsi r12 mov rdi rax call sub_xxx mov rdi rsp call sub_xxx mov r8d CONST mov [rbx] rax test rax rax jz JUMP_ADDR_3	mov rdx [rax+CONST] mov r12 [rax+CONST] mov [rbx+CONST] CONST xor r8d r8d mov rax [rax+CONST] mov [rbx+CONST] CONST mov [rbx+CONST] r12 mov [rbx+CONST] rdx mov [rbx+CONST] rax mov [rbx+CONST] CONST ror r12 CONST xor r12 fs:xxx test r12 r12 jz JUMP_ADDR_3	mov rdi r12 call sub_xxx mov rdi rbx call r12 mov r8d eax mov rax [rbx+CONST] xor rax fs:xxx rol rax CONST mov [rbx+CONST] rax	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_5	lea rsp [rbp+CONST] mov eax r8d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	call sub_xxx
[ph]libcap-git-setcap___gconv_get_cache
endbr64 mov rax cs:xxx retn
[ph]libcap-git-setcap___gconv_load_cache
endbr64 push r12 lea rdi GLOBAL_VAR push rbp sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx mov cs:xxx rax test rax rax jnz JUMP_ADDR_16	xor edx edx xor esi esi lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov ebp eax cmp eax CONST jz JUMP_ADDR_16	lea rsi [rsp+CONST+var_xxx] mov edi eax call sub_xxx test eax eax js JUMP_ADDR_26	mov rsi [rsp+CONST+var_xxx] cmp rsi CONST jbe JUMP_ADDR_26	xor r9d r9d mov r8d ebp mov ecx CONST mov edx CONST xor edi edi mov cs:xxx rsi call sub_xxx mov cs:xxx rax cmp rax CONST jz JUMP_ADDR_20	mov edi ebp call sub_xxx mov rdi cs:xxx cmp [CONST_VAR] CONST jnz JUMP_ADDR_13	mov rax cs:xxx movzx edx [CONST_VAR+CONST] cmp rdx rax jnb JUMP_ADDR_13	movzx ecx [CONST_VAR+CONST] cmp rax rcx jbe JUMP_ADDR_13	movzx edx [CONST_VAR+CONST] test dx dx jz JUMP_ADDR_13	lea rdx [rcx+rdx*4] cmp rax rdx jb JUMP_ADDR_13	movzx edx [CONST_VAR+CONST] cmp rax rdx jbe JUMP_ADDR_13	movzx edx [CONST_VAR+CONST] xor r8d r8d cmp rax rdx jnb JUMP_ADDR_17	nop [rax+rax+CONST]	mov eax cs:xxx test eax eax jnz JUMP_ADDR_19	mov rsi cs:xxx call sub_xxx	mov cs:xxx CONST	mov r8d CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_28	add rsp CONST mov eax r8d pop rbp pop r12 retn	call sub_xxx mov cs:xxx CONST jmp JUMP_ADDR_15	mov rdx cs:xxx mov rdi rdx mov [rsp+CONST+var_xxx] rdx call sub_xxx mov cs:xxx rax test rax rax jz JUMP_ADDR_26	mov rdx [rsp+CONST+var_xxx] xor r12d r12d jmp JUMP_ADDR_24	mov rdx cs:xxx add r12 rax cmp rdx r12 jbe JUMP_ADDR_27	mov rax cs:xxx	sub rdx r12 lea rsi [rax+r12] mov edi ebp call sub_xxx cmp rax CONST jnz JUMP_ADDR_22	mov rdi cs:xxx call sub_xxx mov cs:xxx CONST	mov edi ebp call sub_xxx mov r8d CONST jmp JUMP_ADDR_17	mov cs:xxx CONST jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___gconv_compare_alias_cache
endbr64 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_7	mov r12 rsi lea rsi [rsp+CONST+var_xxx] mov rbp rdi mov rbx rdx call sub_xxx test eax eax jz JUMP_ADDR_5	mov rsi r12 mov rdi rbp call sub_xxx mov [rbx] eax xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST pop rbx pop rbp pop r12 retn	lea rsi [rsp+CONST+var_xxx] mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_2	mov rdx [rsp+CONST+var_xxx] sub edx [rsp+CONST+var_xxx] mov [rbx] edx jmp JUMP_ADDR_3	mov eax CONST jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap___gconv_lookup_cache
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r12 cs:xxx mov [rsp+CONST+var_xxx] rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test r12 r12 jz JUMP_ADDR_18	mov rbp rdi mov rdi rsi lea rsi [rsp+CONST+var_xxx] mov rbx rcx movzx r14d [r12+CONST] movzx r15d [r12+CONST] mov r13d r8d call sub_xxx test eax eax jnz JUMP_ADDR_3	mov r9 [rsp+CONST+var_xxx] movzx eax [r12+CONST] lea rcx [r9+r9*2+CONST] mov [rsp+CONST+var_xxx] r9 shl rcx CONST add rax rcx cmp rax cs:xxx mov [rsp+CONST+var_xxx] rcx jbe JUMP_ADDR_6	mov r8d CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_48	add rsp CONST mov eax r8d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rsi [rsp+CONST+var_xxx] mov rdi rbp call sub_xxx mov r8d eax test eax eax jnz JUMP_ADDR_3	mov rbp [rsp+CONST+var_xxx] movzx esi [r12+CONST] lea rax [rbp+rbp*2+CONST] shl rax CONST add rsi rax cmp rsi cs:xxx ja JUMP_ADDR_3	mov r9 [rsp+CONST+var_xxx] add r15 r12 mov rcx [rsp+CONST+var_xxx] lea r10 [r15+rax+CONST] cmp r9 rbp jnz JUMP_ADDR_10	and r13d CONST jnz JUMP_ADDR_49	add r14 r12 lea r13 [r15+rcx+CONST] test r9 r9 jz JUMP_ADDR_19	test rbp rbp jnz JUMP_ADDR_26	cmp [r13+CONST] CONST jz JUMP_ADDR_3	mov edi CONST mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] test rax rax mov r15 rax jz JUMP_ADDR_32	mov rax [rsp+CONST+var_xxx] movzx edi [r13+CONST] lea r12 GLOBAL_VAR mov [rax] r15 movzx eax [r13+CONST] add rdi r14 mov [rbx] CONST add rax r14 mov [r15+CONST] r12 mov [r15+CONST] rax movzx eax [r13+CONST] mov [r15+CONST] CONST mov [r15+CONST] CONST cmp [CONST_VAR] CONST lea r9 [r14+rax] jz JUMP_ADDR_30	mov rdx r15 mov rsi r9 mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_35	mov rax [rbx] add rax CONST mov [rbx] rax test rbp rbp jz JUMP_ADDR_4	movsxd rdx eax mov ebp eax imul rdx CONST add rdx r15 jmp JUMP_ADDR_23	mov r8d CONST jmp JUMP_ADDR_4	test rbp rbp jz JUMP_ADDR_3	cmp [r10+CONST] CONST jz JUMP_ADDR_3	mov edi CONST mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] test rax rax mov r15 rax jz JUMP_ADDR_32	mov rax [rsp+CONST+var_xxx] mov rdx r15 xor ebp ebp lea r12 GLOBAL_VAR mov [rax] r15 mov [rbx] CONST	movzx eax [r10] movzx edi [r10+CONST] mov [rdx+CONST] r12 movzx r9d [r10+CONST] mov [rdx+CONST] CONST add rax r14 add rdi r14 mov [rdx+CONST] CONST mov [rdx+CONST] rax add r9 r14 cmp [CONST_VAR] CONST mov [rsp+CONST+var_xxx] r8d jz JUMP_ADDR_31	mov rsi r9 call sub_xxx mov r8d [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_33	add [rbx] CONST jmp JUMP_ADDR_4	movzx eax [r13+CONST] test ax ax jnz JUMP_ADDR_36	cmp [r13+CONST] CONST jz JUMP_ADDR_3	cmp [r10+CONST] CONST jz JUMP_ADDR_3	jmp JUMP_ADDR_13	mov rsi r15 mov rdi r9 mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r8d [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_16	mov rsi rdx mov rdi r9 call sub_xxx mov r8d [rsp+CONST+var_xxx] jmp JUMP_ADDR_25	mov r8d CONST jmp JUMP_ADDR_4	test ebp ebp jz JUMP_ADDR_35	mov rdi r15 mov [rsp+CONST+var_xxx] eax call sub_xxx mov eax [rsp+CONST+var_xxx]	mov rdi r15 mov [rsp+CONST+var_xxx] eax call sub_xxx mov r8d [rsp+CONST+var_xxx] jmp JUMP_ADDR_4	movzx edx [r12+CONST] lea rcx [rdx+rax+CONST] add rcx cs:xxx movzx eax [rcx] test ax ax jnz JUMP_ADDR_39	jmp JUMP_ADDR_27	lea rax [rdx+rdx*2] lea rcx [rcx+rax*2+CONST] movzx eax [rcx] test ax ax jz JUMP_ADDR_27	movzx edx ax sub eax CONST cdqe lea rax [rax+rax*2] movzx eax [rcx+rax*2+CONST] cmp rbp rax jnz JUMP_ADDR_38	imul rdi rdx rdx mov [rbx] rdx mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rdx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] test rax rax mov [rsp+CONST+var_xxx] rax mov r10 [rsp+CONST+var_xxx] mov [rdx] rax mov r8d [rsp+CONST+var_xxx] jz JUMP_ADDR_32	movzx r9d [r13+CONST] mov rdx [rsp+CONST+var_xxx] lea r11 [rcx+CONST] xor eax eax mov [rsp+CONST+var_xxx] rbp mov ebp eax add r9 r14 mov [rsp+CONST+var_xxx] r13 mov r12 rdx mov r13 r14 mov [rsp+CONST+var_xxx] rbx mov r14 r11 mov rbx r9 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r8d jmp JUMP_ADDR_44	mov rdx r12 mov rsi r10 call sub_xxx test eax eax jnz JUMP_ADDR_47	mov rax [rsp+CONST+var_xxx] add ebp CONST add r12 CONST add r14 CONST movzx eax [rax] cmp eax ebp jle JUMP_ADDR_46	movzx eax [r14] movzx edi [r14+CONST] mov [r12+CONST] rbx lea rax [rax+rax*2] add rdi r13 movzx r9d [r15+rax*4] movzx eax [r14+CONST] mov [r12+CONST] CONST mov [r12+CONST] CONST lea rbx [r13+r9+CONST] lea r10 [r13+rax+CONST] mov [r12+CONST] rbx cmp [CONST_VAR] CONST jnz JUMP_ADDR_42	mov rsi r12 mov rdi r10 call sub_xxx jmp JUMP_ADDR_43	mov r8d [rsp+CONST+var_xxx] jmp JUMP_ADDR_4	mov r10 [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] mov r14 r13 mov rdi [rsp+CONST+var_xxx] mov rbp [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r8d call sub_xxx mov r8d [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_27	call sub_xxx	or r8d CONST jmp JUMP_ADDR_4
[ph]libcap-git-setcap___gconv_release_cache
endbr64 cmp cs:xxx CONST jz JUMP_ADDR_2	jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap_known_compare
endbr64 mov rsi [CONST_VAR] mov rdi [CONST_VAR] jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_do_release_shlib
endbr64 push rbx mov rbx [CONST_VAR] test esi esi jz JUMP_ADDR_3	cmp esi CONST jz JUMP_ADDR_3	pop rbx retn	mov eax [rbx+CONST] cmp rdx rbx jz JUMP_ADDR_8	lea edx [rax+CONST] cmp edx CONST ja JUMP_ADDR_2	sub eax CONST mov [rbx+CONST] eax cmp eax CONST jnz JUMP_ADDR_2	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_2	call sub_xxx mov [rbx+CONST] CONST pop rbx retn	test eax eax jle JUMP_ADDR_10	sub eax CONST mov [rdx+CONST] eax pop rbx retn	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_find_shlib
endbr64 push r15 push r14 push r13 lea r13 sub_xxx push r12 mov rdx r13 push rbp lea rbp GLOBAL_VAR mov rsi rbp sub rsp CONST mov [rsp+CONST+var_xxx] rdi lea rdi [rsp+CONST+var_xxx] call sub_xxx test rax rax jz JUMP_ADDR_10	mov r12 [rax] test r12 r12 jz JUMP_ADDR_13	mov eax [r12+CONST] mov rdx [r12+CONST] cmp eax CONST jge JUMP_ADDR_7	test rdx rdx jnz JUMP_ADDR_15	mov rdi [r12] mov esi CONST call sub_xxx mov [r12+CONST] rax mov rdi rax test rax rax jz JUMP_ADDR_13	lea rsi GLOBAL_VAR call sub_xxx mov [r12+CONST] rax test rax rax jz JUMP_ADDR_14	mov rdi [r12+CONST] lea rsi GLOBAL_VAR call sub_xxx mov rdi [r12+CONST] lea rsi GLOBAL_VAR mov [r12+CONST] rax call sub_xxx mov rdx [r12+CONST] mov [r12+CONST] CONST xor rdx fs:xxx rol rdx CONST xor rax fs:xxx rol rax CONST mov [r12+CONST] rdx mov rdx [r12+CONST] mov [r12+CONST] rax xor rdx fs:xxx rol rdx CONST mov [r12+CONST] rdx jmp JUMP_ADDR_9	test rdx rdx jz JUMP_ADDR_9	xor edx edx test eax eax cmovs eax edx add eax CONST mov [r12+CONST] eax	add rsp CONST mov rax r12 pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r14 [rsp+CONST+var_xxx] mov rdi r14 call sub_xxx lea rdi [rax+CONST] lea r15 [rax+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_13	lea rdi [rax+CONST] mov rdx r15 mov rsi r14 call sub_xxx mov rdx r13 mov rsi rbp mov rdi r12 mov [r12] rax mov [r12+CONST] CONST mov [r12+CONST] CONST call sub_xxx test rax rax jnz JUMP_ADDR_2	mov rdi r12 call sub_xxx xchg ax ax	xor r12d r12d jmp JUMP_ADDR_9	mov rdi cs:xxx mov rdx r12 lea rsi sub_xxx xor r12d r12d call sub_xxx jmp JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___gconv_release_shlib
endbr64 mov rdx rdi mov rdi cs:xxx lea rsi sub_xxx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_gconv_parse_code
push r15 xor eax eax push r14 lea r14 GLOBAL_VAR push r13 lea r13 GLOBAL_VAR push r12 push rbp lea rbp off_xxx push rbx mov rbx rdi sub rsp CONST mov [CONST_VAR+CONST] ax mov r12 CONST nop [rax+rax+CONST]	mov r15 [rbx] mov rdi r15 call sub_xxx mov r8 fs:xxx jmp JUMP_ADDR_5	movsx rcx [r15+rax+CONST] lea rsi [rax+CONST] mov rdx rcx test [r8+rcx*2+CONST] CONST jnz JUMP_ADDR_4	cmp cl CONST setz cl cmp dl CONST setz dl or cl dl jz JUMP_ADDR_8	mov rax rsi	test rax rax jnz JUMP_ADDR_2	mov [r15] CONST	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [r15+rax] CONST mov rdx [rbx] movzx eax [rdx] test al al jz JUMP_ADDR_7	xor r15d r15d xor esi esi jmp JUMP_ADDR_13	cmp al CONST jnz JUMP_ADDR_12	add esi CONST mov r15 rdx	movzx eax [rdx+CONST] add rdx CONST test al al jz JUMP_ADDR_15	cmp al CONST jnz JUMP_ADDR_10	mov r15 rdx movzx eax [rdx+CONST] add rdx CONST test al al jnz JUMP_ADDR_13	cmp esi CONST jle JUMP_ADDR_7	test r15 r15 jz JUMP_ADDR_7	mov rdx rbp mov rsi r14 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_22	mov [rbx+CONST] CONST	mov rdx rbp mov rsi r13 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_24	mov [rbx+CONST] CONST	mov [r15] CONST jmp JUMP_ADDR_1	mov rdx rbp lea rsi unk_xxx mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_18	jmp JUMP_ADDR_19	mov rdx rbp lea rsi GLOBAL_VAR mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_20	jmp JUMP_ADDR_21
[ph]libcap-git-setcap___gconv_create_spec
endbr64 push r15 push r14 mov r14 rsi push r13 push r12 push rbp mov rbp rdx push rbx mov rbx rdi mov rdi rsi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx mov rdi rbp mov [rsp+CONST+var_xxx] rax mov r13 rax call sub_xxx mov [rsp+CONST+var_xxx] rax mov r12 rax test r13 r13 jz JUMP_ADDR_37	test rax rax jz JUMP_ADDR_37	mov rdi rsp call sub_xxx lea rdi [rsp+CONST+var_xxx] call sub_xxx movzx eax [rsp+CONST+var_xxx] mov rdi r14 mov [rbx+CONST] ax call sub_xxx lea rdi [rax+CONST] call sub_xxx mov [rbx] rax mov r14 rax test rax rax jz JUMP_ADDR_36	mov rdi rbp call sub_xxx lea rdi [rax+CONST] call sub_xxx mov r13 [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] mov [rbx+CONST] rax mov rbp rax test rax rax jz JUMP_ADDR_38	movzx edx [r13+CONST] test dl dl jz JUMP_ADDR_34	mov r8 cs:xxx mov r9 cs:xxx mov rsi r13 xor r11d r11d mov r10 CONST jmp JUMP_ADDR_8	mov eax [r9+rdi*4] add r14 CONST mov [r14+CONST] al	movzx edx [CONST_VAR+CONST] add rsi CONST test dl dl jz JUMP_ADDR_15	movsx rdi dl lea ecx [rdx+CONST] movzx eax [r8+rdi*2] shr ax CONST and eax CONST cmp cl CONST ja JUMP_ADDR_10	mov r15 r10 sar r15 cl mov rcx r15 and ecx CONST xor ecx CONST or eax ecx	test al al jnz JUMP_ADDR_6	cmp dl CONST jnz JUMP_ADDR_7	add r11d CONST cmp r11d CONST jz JUMP_ADDR_17	add rsi CONST mov [r14] CONST add r14 CONST movzx edx [CONST_VAR] test dl dl jnz JUMP_ADDR_8	nop [rax+rax+CONST]	lea eax [r11+CONST] cmp r11d CONST jg JUMP_ADDR_17	mov r15d CONST mov rdi r14 mov esi CONST sub r15d eax add r15 CONST cmp eax CONST mov eax CONST cmovg r15 rax mov rdx r15 add r14 r15 call sub_xxx	mov [r14] CONST movzx edx [r12] test dl dl jz JUMP_ADDR_33	mov r8 cs:xxx mov r9 cs:xxx mov rsi r12 xor r11d r11d mov r10 CONST jmp JUMP_ADDR_21	mov eax [r9+rdi*4] add rbp CONST mov [rbp+CONST] al	movzx edx [CONST_VAR+CONST] add rsi CONST test dl dl jz JUMP_ADDR_28	movsx rdi dl lea ecx [rdx+CONST] movzx eax [r8+rdi*2] shr ax CONST and eax CONST cmp cl CONST ja JUMP_ADDR_23	mov r15 r10 sar r15 cl mov rcx r15 and ecx CONST xor ecx CONST or eax ecx	test al al jnz JUMP_ADDR_19	cmp dl CONST jnz JUMP_ADDR_20	add r11d CONST cmp r11d CONST jz JUMP_ADDR_30	add rsi CONST mov [rbp+CONST] CONST add rbp CONST movzx edx [CONST_VAR] test dl dl jnz JUMP_ADDR_21	nop [rax+rax+CONST]	lea eax [r11+CONST] cmp r11d CONST jg JUMP_ADDR_30	mov r14d CONST mov rdi rbp mov esi CONST sub r14d eax add r14 CONST cmp eax CONST mov eax CONST cmovg r14 rax mov rdx r14 add rbp r14 call sub_xxx	mov [rbp+CONST] CONST mov r14 rbx	mov rdi r13 call sub_xxx mov rdi r12 call sub_xxx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_35	add rsp CONST mov rax r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax CONST jmp JUMP_ADDR_29	mov eax CONST jmp JUMP_ADDR_16	call sub_xxx	mov r13 [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_31	xor r14d r14d jmp JUMP_ADDR_31	mov rdi r14 xor r14d r14d call sub_xxx mov [rbx] CONST jmp JUMP_ADDR_31
[ph]libcap-git-setcap___gconv_destroy_spec
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR] call sub_xxx mov rdi [rbx+CONST] pop rbx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_new_composite_name
push r15 push r14 xor r14d r14d push r13 push r12 mov r12d CONST push rbp xor ebp ebp push rbx mov ebx edi sub rsp CONST mov [rsp] rsi jmp JUMP_ADDR_8	cmp r14d ebx jz JUMP_ADDR_11	lea rax off_xxx mov r13 [rax+r14*8]	mov rdi r13 call sub_xxx mov r15 rax lea rax unk_xxx movzx eax [rax+r14] lea rbp [rbp+rax+CONST] add rbp r15 test r12d r12d jz JUMP_ADDR_6	mov rax [rsp] mov rsi [rax] cmp rsi r13 jz JUMP_ADDR_6	mov rdi r13 xor r12d r12d call sub_xxx test eax eax setz r12b	cmp r14 CONST jz JUMP_ADDR_12	add r14 CONST	cmp r14 CONST jz JUMP_ADDR_7	cmp ebx CONST jnz JUMP_ADDR_1	mov rax [rsp] mov r13 [rax+r14*8] jmp JUMP_ADDR_3	mov rax [rsp] mov r13 [rax] jmp JUMP_ADDR_3	test r12d r12d jz JUMP_ADDR_17	mov rax [rsp] lea r12 GLOBAL_VAR mov rsi r12 mov rbp [rax] mov rdi rbp call sub_xxx test eax eax jz JUMP_ADDR_16	lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx mov [rsp+CONST] r12 test eax eax jnz JUMP_ADDR_28	mov rax [rsp+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST] r12 jmp JUMP_ADDR_15	mov rdi rbp call sub_xxx mov [rsp+CONST] rax mov rdi rax test rax rax jz JUMP_ADDR_30	xor r15d r15d lea r14 GLOBAL_VAR lea rbp GLOBAL_VAR lea r13 off_xxx jmp JUMP_ADDR_23	cmp ebx r15d jz JUMP_ADDR_26	mov r12 [r13+r15*8+CONST]	movzx esi [r14+r15] add rsi rbp call sub_xxx mov rsi r12 mov [rax] CONST lea rdi [rax+CONST] call sub_xxx mov [rax] CONST lea rdi [rax+CONST] cmp r15 CONST jz JUMP_ADDR_27	add r15 CONST	cmp r15 CONST jz JUMP_ADDR_22	cmp ebx CONST jnz JUMP_ADDR_19	mov rax [rsp] mov r12 [rax+r15*8] jmp JUMP_ADDR_21	mov rax [rsp] mov r12 [rax] jmp JUMP_ADDR_21	mov [rax] CONST jmp JUMP_ADDR_15	lea r12 [r15+CONST] mov rdi r12 call sub_xxx mov rdi rax test rax rax jz JUMP_ADDR_30	add rsp CONST mov rdx r12 mov rsi rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	mov [rsp+CONST] CONST jmp JUMP_ADDR_15
[ph]libcap-git-setcap_setlocale
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx movsxd rbx edi sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax cmp rbx CONST ja JUMP_ADDR_65	mov r14 rsi test rsi rsi jz JUMP_ADDR_55	cmp cs:xxx CONST mov r12 rbx jz JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx	lea rbp off_xxx lea r13 [rbx+CONST] mov rdi r14 mov r15 [rbp+r13*8+CONST] mov rsi r15 call sub_xxx test eax eax jnz JUMP_ADDR_9	cmp cs:xxx CONST jz JUMP_ADDR_7	lea rdi unk_xxx call callfunc_xxx mov r15 [rbp+r13*8+CONST]	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_117	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST] CONST lea rdi GLOBAL_VAR mov [rsp+CONST] CONST call sub_xxx test rax rax jz JUMP_ADDR_11	cmp [rax] CONST jnz JUMP_ADDR_50	cmp r12d CONST jnz JUMP_ADDR_27	xor eax eax lea rbx [rsp+CONST] jmp JUMP_ADDR_14	add rax CONST	cmp rax CONST jz JUMP_ADDR_13	mov [rbx+rax*8] r14 cmp rax CONST jnz JUMP_ADDR_13	mov esi CONST mov rdi r14 call sub_xxx mov [rsp+CONST] rax test rax rax jnz JUMP_ADDR_103	mov r15d CONST mov r12d CONST lea r13 GLOBAL_VAR	movsxd r14 r15d mov rsi [rsp+CONST] mov rdi [rsp+CONST] mov edx r15d lea rcx [rbx+r14*8] call sub_xxx mov [rsp+r14*8+CONST] rax test rax rax jz JUMP_ADDR_84	cmp [rax+CONST] CONST jz JUMP_ADDR_21	mov [rax+CONST] CONST	mov rdi [rsp+r14*8+CONST] cmp rdi r13 jz JUMP_ADDR_24	mov rdx [rbp+r14*8+CONST] mov [rsp+CONST] rdi mov rsi rdx mov [rsp+CONST] rdx call sub_xxx mov rdi [rsp+CONST] test eax eax jnz JUMP_ADDR_70	mov rdx [rsp+CONST] mov [rsp+r14*8+CONST] rdx	lea r12d [r15+CONST] test r15d r15d jz JUMP_ADDR_86	cmp r12d CONST jnz JUMP_ADDR_118	mov r15d CONST jmp JUMP_ADDR_18	lea rax unk_xxx mov [rsp+CONST] r14 mov r15 [rax+rbx*8] test r15 r15 jz JUMP_ADDR_66	mov rsi [rsp+CONST] mov rdi [rsp+CONST] lea rcx [rsp+CONST] mov edx r12d call sub_xxx mov [rsp+CONST] rax test rax rax jz JUMP_ADDR_69	cmp [rax+CONST] CONST jz JUMP_ADDR_31	mov rax [rsp+CONST] mov [rax+CONST] CONST	mov r14 [rsp+CONST]	lea r13 GLOBAL_VAR cmp r14 r13 jz JUMP_ADDR_34	mov rdi r14 call sub_xxx mov [rsp+CONST] rax test rax rax jz JUMP_ADDR_69	mov edi r12d lea rsi [rsp+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_67	test r15 r15 jz JUMP_ADDR_38	mov rax [rsp+CONST] mov [rbp+rbx*8+CONST] rax lea rax GLOBAL_VAR mov rax ds:xxx test rax rax jz JUMP_ADDR_38	call rax	mov r14 [rsp+CONST] mov rdi [rbp+rbx*8+CONST] cmp r14 rdi jz JUMP_ADDR_42	cmp rdi r13 jz JUMP_ADDR_41	call sub_xxx	mov [rbp+rbx*8+CONST] r14	mov rdi cs:xxx cmp r12 rdi jz JUMP_ADDR_46	cmp rdi r13 jz JUMP_ADDR_45	call sub_xxx	mov cs:xxx r12	add cs:xxx CONST	cmp cs:xxx CONST jz JUMP_ADDR_49	lea rdi unk_xxx call callfunc_xxx	mov rdi [rsp+CONST] call sub_xxx mov r15 [rsp+CONST] jmp JUMP_ADDR_7	lea r15 [rsp+CONST] lea r13 [rsp+CONST] mov esi CONST mov rdi rax mov rcx r15 mov rdx r13 call loc_xxx test eax eax jnz JUMP_ADDR_52	mov ecx CONST lea rdx GLOBAL_VAR mov rsi r15 mov rdi r13 call sub_xxx test eax eax jz JUMP_ADDR_11	cmp cs:xxx CONST jz JUMP_ADDR_54	lea rdi unk_xxx call callfunc_xxx	xor r15d r15d jmp JUMP_ADDR_7	lea rax off_xxx mov r15 [rax+rbx*8+CONST] jmp JUMP_ADDR_7	mov r14 [rsp+CONST] mov rbx [rsp+CONST] mov edx CONST xor eax eax jmp JUMP_ADDR_59	cmp edx CONST jz JUMP_ADDR_17	add rax CONST add edx CONST	cmp rax CONST jz JUMP_ADDR_58	cmp [rbx+rax*8] r14 jnz JUMP_ADDR_57	nop [rax+CONST]	cmp cs:xxx CONST jz JUMP_ADDR_64	lea rdi unk_xxx call callfunc_xxx nop [rax+rax+CONST]	mov rdi [rsp+CONST] call sub_xxx nop [rax+rax+CONST]	mov rax CONST xor r15d r15d mov fs:xxx CONST jmp JUMP_ADDR_7	mov [rsp+CONST] CONST jmp JUMP_ADDR_32	mov rdi [rsp+CONST] cmp rdi r13 jz JUMP_ADDR_69	call sub_xxx	mov [rsp+CONST] CONST jmp JUMP_ADDR_47	call sub_xxx mov [rsp+r14*8+CONST] rax test rax rax jnz JUMP_ADDR_24	nop [rax+rax+CONST]	cmp r12d CONST jz JUMP_ADDR_80	movsxd rbp r12d lea r12 off_xxx jmp JUMP_ADDR_75	add rbp CONST	cmp ebp CONST jz JUMP_ADDR_74	mov rdi [rbx+rbp*8] cmp rdi r13 jz JUMP_ADDR_79	cmp rdi [r12+rbp*8] jz JUMP_ADDR_79	call sub_xxx	cmp ebp CONST jnz JUMP_ADDR_74	xor r15d r15d	cmp cs:xxx CONST jz JUMP_ADDR_83	lea rdi unk_xxx call callfunc_xxx	mov rdi [rsp+CONST] call sub_xxx mov rdi [rsp+CONST] call sub_xxx jmp JUMP_ADDR_7	cmp [rsp+r14*8+CONST] r13 jnz JUMP_ADDR_72	jmp JUMP_ADDR_24	mov rsi rbx mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_114	mov [rsp+CONST] rax lea rbp off_xxx xor r14d r14d lea r12 [rsp+CONST] jmp JUMP_ADDR_89	add r14 CONST add rbp CONST	cmp r14 CONST jz JUMP_ADDR_88	lea rcx unk_xxx mov rax [r12+r14*8] cmp [rcx+r14*8] CONST jz JUMP_ADDR_93	mov [rbp+CONST] rax lea rax GLOBAL_VAR mov rax [rax+r14*8] test rax rax jz JUMP_ADDR_93	call rax	mov r15 [rbx+r14*8] mov rdi [rbp+CONST] cmp r15 rdi jz JUMP_ADDR_97	cmp rdi r13 jz JUMP_ADDR_96	call sub_xxx	mov [rbp+CONST] r15	cmp r14 CONST jnz JUMP_ADDR_88	mov r15 [rsp+CONST] mov rdi cs:xxx cmp r15 rdi jz JUMP_ADDR_102	cmp rdi r13 jz JUMP_ADDR_101	call sub_xxx	mov cs:xxx r15	add cs:xxx CONST jmp JUMP_ADDR_81	mov rdi r14 lea r13 GLOBAL_VAR call sub_xxx mov [rsp+CONST] rax test rax rax jz JUMP_ADDR_115	mov [rsp+CONST] r14 mov [rsp+CONST] rbx mov rbx rax nop	mov esi CONST mov rdi rbx call sub_xxx mov [rsp+CONST] rax test rax rax jz JUMP_ADDR_56	sub rax rbx mov [rsp+CONST] rbx mov r15d CONST xor r12d r12d mov r14 rax jmp JUMP_ADDR_109	cmp r15d CONST jz JUMP_ADDR_62	add r12 CONST add r15d CONST	cmp r12 CONST jz JUMP_ADDR_108	movzx eax [r13+r12+CONST] cmp rax r14 jnz JUMP_ADDR_107	lea rax GLOBAL_VAR mov rdi [rsp+CONST] mov rdx r14 movzx esi [rax+r12] lea rax GLOBAL_VAR add rsi rax call sub_xxx test eax eax jnz JUMP_ADDR_107	mov rdi [rsp+CONST] movsxd r8 r12d mov esi CONST add rdi CONST mov [rsp+r8*8+CONST] rdi call sub_xxx test rax rax jz JUMP_ADDR_56	mov [rax] CONST lea rbx [rax+CONST] jmp JUMP_ADDR_105	xor r12d r12d jmp JUMP_ADDR_73	xor r15d r15d cmp cs:xxx CONST jz JUMP_ADDR_7	lea rdi unk_xxx call callfunc_xxx jmp JUMP_ADDR_7	call sub_xxx	xchg r15d r12d jmp JUMP_ADDR_18
[ph]libcap-git-setcap__nl_find_locale
endbr64 push rbp mov rbp rsp push r15 push r14 lea r14 GLOBAL_VAR push r13 mov r13 rdi push r12 movsxd r12 edx push rbx mov rbx rcx sub rsp CONST mov [rbp+var_xxx] rsi mov r15 [rcx] mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [rbp+var_xxx] r15 cmp [r15] CONST jz JUMP_ADDR_19	mov rsi r14 mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_25	lea rsi GLOBAL_VAR mov rdi r15 call sub_xxx test eax eax jz JUMP_ADDR_25	mov rdi r15 call sub_xxx mov r14 rax cmp rax CONST ja JUMP_ADDR_18	mov ecx CONST lea rdx GLOBAL_VAR mov rsi rax mov rdi r15 call sub_xxx test rax rax jnz JUMP_ADDR_18	cmp r14 CONST jz JUMP_ADDR_14	jbe JUMP_ADDR_9	cmp [r15] CONST jz JUMP_ADDR_91	cmp [r15+r14+CONST] CONST jz JUMP_ADDR_94	mov rdx r14 mov esi CONST mov rdi r15 call sub_xxx test rax rax jnz JUMP_ADDR_63	mov rdi [rbp+var_xxx] mov [rbx] rdi test r13 r13 jnz JUMP_ADDR_30	mov rsi rbx mov edi r12d call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_65	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_110	lea rsp [rbp+CONST] mov rax r13 pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp [r15] CONST jnz JUMP_ADDR_9	cmp [r15+CONST] CONST jz JUMP_ADDR_18	mov edx CONST mov esi CONST mov rdi r15 call sub_xxx test rax rax jz JUMP_ADDR_10	nop [rax+CONST]	mov rax CONST xor r13d r13d mov fs:xxx CONST jmp JUMP_ADDR_12	lea rdi GLOBAL_VAR call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_26	cmp [rax] CONST jz JUMP_ADDR_26	mov rax [rbp+var_xxx]	cmp [rax] CONST jz JUMP_ADDR_29	mov r15 [rbp+var_xxx] lea r14 GLOBAL_VAR mov rsi r14 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_2	nop [rax]	lea rax off_xxx mov [rbx] r14 mov r13 [rax+r12*8] jmp JUMP_ADDR_12	movsxd rax r12d lea rdx GLOBAL_VAR movzx edi [rdx+rax] lea rax GLOBAL_VAR add rdi rax call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_28	cmp [rax] CONST jnz JUMP_ADDR_21	lea rdi GLOBAL_VAR call sub_xxx mov [rbp+var_xxx] rax test rax rax jnz JUMP_ADDR_22	lea r14 GLOBAL_VAR mov [rbp+var_xxx] r14 mov r15 r14 jmp JUMP_ADDR_1	call sub_xxx mov [rbp+var_xxx] rax mov r14 rax	test r14 r14 jz JUMP_ADDR_82	mov rdi r14 call sub_xxx mov rsi r14 lea rdx [rax+CONST] add rax CONST and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST call sub_xxx lea rcx [rbp+var_xxx] lea rdx [rbp+var_xxx] mov rdi rax lea rsi [rbp+var_xxx] lea r9 [rbp+var_xxx] lea r8 [rbp+var_xxx] call sub_xxx mov r15d eax cmp eax CONST jz JUMP_ADDR_90	movsxd r14 r12d sub rsp CONST mov r9 [rbp+var_xxx] mov r8 [rbp+var_xxx] lea rax GLOBAL_VAR push CONST mov rdx [rbp+var_xxx] mov ecx r15d movzx r10d [rax+r14] lea rax GLOBAL_VAR mov rsi r13 add r10 rax lea rax unk_xxx push r10 lea rdi [rax+r14*8] push [rbp+var_xxx] push [rbp+var_xxx] push [rbp+var_xxx] mov [rbp+CONST] r10 mov [rbp+var_xxx] rdi call sub_xxx add rsp CONST mov rdi [rbp+var_xxx] mov r10 [rbp+CONST] test rax rax mov rbx rax jz JUMP_ADDR_88	and r15d CONST jnz JUMP_ADDR_97	mov edx [rbx+CONST] test edx edx jz JUMP_ADDR_98	mov r13 [rbx+CONST] test r13 r13 jz JUMP_ADDR_99	mov r15 [rbp+var_xxx] test r15 r15 jz JUMP_ADDR_57	lea rax unk_xxx movsxd rax [rax+r14*4] mov r14 [r13+rax*8+CONST] test r14 r14 jz JUMP_ADDR_111	mov rdi r14 call sub_xxx movzx edx [r14] mov r13 cs:xxx add rax CONST and rax CONST sub rsp rax lea r12 [rsp+CONST+var_xxx] and r12 CONST test dl dl jz JUMP_ADDR_107	mov r8 cs:xxx mov rdi r12 xor r10d r10d mov r9 CONST jmp JUMP_ADDR_43	mov eax [r13+rsi*4+CONST] add rdi CONST mov [CONST_VAR+CONST] al	movzx edx [r14+CONST] add r14 CONST test dl dl jz JUMP_ADDR_68	movsx rsi dl lea ecx [rdx+CONST] movzx eax [r8+rsi*2] shr ax CONST and eax CONST cmp cl CONST ja JUMP_ADDR_45	mov r11 r9 sar r11 cl mov rcx r11 and ecx CONST xor ecx CONST or eax ecx	test al al jnz JUMP_ADDR_41	cmp dl CONST jnz JUMP_ADDR_42	add r10d CONST cmp r10d CONST jz JUMP_ADDR_70	mov [CONST_VAR] CONST add rdi CONST jmp JUMP_ADDR_42	lea eax [r10+CONST] cmp r10d CONST jg JUMP_ADDR_51	mov r15d CONST mov esi CONST sub r15d eax add r15 CONST cmp eax CONST mov eax CONST cmovg r15 rax mov rdx r15 call sub_xxx mov rdi rax add rdi r15	mov [CONST_VAR] CONST mov rax r12 nop [rax+CONST]	movsx rdx [rax] add rax CONST mov edx [r13+rdx*4+CONST] mov [rax+CONST] dl test dl dl jnz JUMP_ADDR_52	mov rax r14 nop [rax+rax+CONST]	movsx rdx [rax] add rax CONST mov edx [r13+rdx*4+CONST] mov [rax+CONST] dl test dl dl jnz JUMP_ADDR_54	mov rsi r12 mov rdi r14 call sub_xxx test eax eax jnz JUMP_ADDR_90	mov r13 [rbx+CONST]	cmp [r13+CONST] CONST jz JUMP_ADDR_83	mov rdi [rbp+var_xxx] test rdi rdi jz JUMP_ADDR_80	lea rdx off_xxx lea rsi GLOBAL_VAR call sub_xxx mov r13 [rbx+CONST] test eax eax jnz JUMP_ADDR_61	mov [r13+CONST] CONST	mov eax [r13+CONST] cmp eax CONST ja JUMP_ADDR_12	add eax CONST mov [r13+CONST] eax jmp JUMP_ADDR_12	cmp [r15] CONST jz JUMP_ADDR_10	jmp JUMP_ADDR_18	mov rdi [rbx] call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_81	lea rsi [rbp+var_xxx] mov edi r12d call sub_xxx mov r13 rax test rax rax jnz JUMP_ADDR_12	mov [rbp+var_xxx] CONST mov r14 [rbp+var_xxx] lea r13 GLOBAL_VAR jmp JUMP_ADDR_31	lea eax [r10+CONST] cmp r10d CONST jg JUMP_ADDR_70	mov r14d CONST mov esi CONST sub r14d eax add r14 CONST cmp eax CONST mov eax CONST cmovg r14 rax mov rdx r14 call sub_xxx mov rdi rax add rdi r14	mov [CONST_VAR] CONST mov rdi r15 call sub_xxx movzx edx [r15] add rax CONST and rax CONST sub rsp rax lea r14 [rsp+CONST+var_xxx] and r14 CONST test dl dl jz JUMP_ADDR_106	mov r8 cs:xxx mov rdi r14 xor r10d r10d mov r9 CONST jmp JUMP_ADDR_74	mov eax [r13+rsi*4+CONST] add rdi CONST mov [CONST_VAR+CONST] al	movzx edx [r15+CONST] add r15 CONST test dl dl jz JUMP_ADDR_49	movsx rsi dl lea ecx [rdx+CONST] movzx eax [r8+rsi*2] shr ax CONST and eax CONST cmp cl CONST ja JUMP_ADDR_76	mov r11 r9 sar r11 cl mov rcx r11 and ecx CONST xor ecx CONST or eax ecx	test al al jnz JUMP_ADDR_72	cmp dl CONST jnz JUMP_ADDR_73	add r10d CONST cmp r10d CONST jz JUMP_ADDR_51	mov [CONST_VAR] CONST add rdi CONST jmp JUMP_ADDR_73	mov r13 [rbx+CONST] jmp JUMP_ADDR_61	mov [rbp+var_xxx] CONST lea r13 GLOBAL_VAR	mov r14 [rbx] mov [rbp+var_xxx] r14 jmp JUMP_ADDR_32	mov rdi [rbx] mov esi CONST call sub_xxx cmp [rax+CONST] CONST lea rdi [rax+CONST] jz JUMP_ADDR_108	nop [rax+rax+CONST]	sub rdi CONST cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_85	sub rax rdi mov rsi rax	call sub_xxx mov [r13+CONST] rax jmp JUMP_ADDR_58	sub rsp CONST mov r9 [rbp+var_xxx] mov r8 [rbp+var_xxx] mov ecx r15d push CONST mov rdx [rbp+var_xxx] mov rsi r13 push r10 push [rbp+var_xxx] push [rbp+var_xxx] push [rbp+var_xxx] call sub_xxx add rsp CONST mov rbx rax test rax rax jnz JUMP_ADDR_34	nop [rax+rax+CONST]	xor r13d r13d jmp JUMP_ADDR_12	cmp [r15+CONST] CONST jnz JUMP_ADDR_8	cmp [r15+CONST] CONST jnz JUMP_ADDR_8	jmp JUMP_ADDR_18	cmp [r15+r14+CONST] CONST jnz JUMP_ADDR_9	cmp [r15+r14+CONST] CONST jnz JUMP_ADDR_9	jmp JUMP_ADDR_18	mov rdi [rbp+var_xxx] call sub_xxx jmp JUMP_ADDR_35	mov esi r12d mov rdi rbx call sub_xxx jmp JUMP_ADDR_36	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_109	lea r15 [rbx+CONST] jmp JUMP_ADDR_103	mov rax [r15] mov rdx [rax+CONST] test rdx rdx jnz JUMP_ADDR_105	mov rdi [r15+CONST] add r15 CONST test rdi rdi jz JUMP_ADDR_109	mov eax [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_101	mov esi r12d call sub_xxx jmp JUMP_ADDR_101	mov [rbx+CONST] rax mov r13 rdx mov rbx rax jmp JUMP_ADDR_37	mov rdi r14 mov eax CONST jmp JUMP_ADDR_50	mov rdi r12 mov eax CONST jmp JUMP_ADDR_69	mov esi CONST jmp JUMP_ADDR_87	mov [rbx+CONST] CONST jmp JUMP_ADDR_12	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__nl_remove_locale
endbr64 sub [CONST_VAR+CONST] CONST movsxd rdx edi mov rdi rsi jnz JUMP_ADDR_7	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_6	lea rax unk_xxx mov rax [rax+rdx*8] cmp rsi [rax+CONST] jz JUMP_ADDR_5	nop [rax+rax+CONST]	mov rax [rax+CONST] cmp [rax+CONST] rdi jnz JUMP_ADDR_4	mov [rax+CONST] CONST mov [rax+CONST] CONST	jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap__nl_intern_locale_data
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST cmp rdx CONST jbe JUMP_ADDR_15	mov r12 rdx mov ebp edi mov edx [CONST_VAR] mov rbx rsi mov eax CONST cmp edi CONST jz JUMP_ADDR_3	mov eax edi mov ecx CONST xor eax CONST test edi edi cmovz eax ecx	cmp edx eax jnz JUMP_ADDR_15	movsxd r14 ebp lea rax unk_xxx mov r13d [rbx+CONST] cmp r13 [rax+r14*8] jb JUMP_ADDR_15	lea rax ds:xxx cmp rax r12 jnb JUMP_ADDR_15	lea rdi ds:xxx call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_16	mov [rax+CONST] rbx mov [rax+CONST] r12 mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] r13d test r13 r13 jz JUMP_ADDR_16	xor eax eax lea r10 off_xxx mov r9d ebp lea rdi unk_xxx	mov edx [rbx+rax*4+CONST] mov rsi rdx cmp r12 rdx jb JUMP_ADDR_14	cmp ebp CONST ja JUMP_ADDR_42	movsxd rcx [CONST_VAR+r9*4] add rcx rdi jmp rcx	cmp rax CONST jbe JUMP_ADDR_19	nop [rax+rax+CONST]	mov rdi r8 call sub_xxx	mov rax CONST xor r8d r8d mov fs:xxx CONST	add rsp CONST mov rax r8 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp rax CONST ja JUMP_ADDR_14	nop [rax+rax+CONST]	mov rcx [r10+r14*8] cmp [rcx+rax*4] CONST jz JUMP_ADDR_26	add rdx rbx mov [r8+rax*8+CONST] rdx	add rax CONST cmp r13 rax jnz JUMP_ADDR_9	jmp JUMP_ADDR_16	cmp rax CONST ja JUMP_ADDR_14	mov rcx [r10+r14*8] cmp [rcx+rax*4] CONST jnz JUMP_ADDR_20	nop [rax+rax+CONST]	and esi CONST jnz JUMP_ADDR_14	mov edx [rbx+rdx] mov [r8+rax*8+CONST] edx jmp JUMP_ADDR_21	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	cmp rax CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_14	test ebp ebp jnz JUMP_ADDR_45	cmp rax CONST ja JUMP_ADDR_20	jmp JUMP_ADDR_19	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__nl_load_locale
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 mov r12d esi mov esi CONST push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov rdi [CONST_VAR] call sub_xxx test eax eax js JUMP_ADDR_8	lea r13 [rbp+var_xxx] mov edi eax mov r14d eax mov rsi r13 call sub_xxx test eax eax js JUMP_ADDR_18	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_19	mov rax CONST xor r9d r9d mov r8d r14d xor edi edi mov rsi [rbp+var_xxx] mov ecx CONST mov edx CONST mov eax fs:xxx mov [rbp+var_xxx] eax call sub_xxx mov r15 rax cmp rax CONST jz JUMP_ADDR_10	mov edi r14d call sub_xxx test r15 r15 jz JUMP_ADDR_8	mov rdx [rbp+var_xxx] mov rsi r15 mov edi r12d call sub_xxx test rax rax jz JUMP_ADDR_29	mov edx CONST	mov [rax] CONST mov [rax+CONST] edx mov [rbx+CONST] rax	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_32	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rax CONST cmp fs:xxx CONST jnz JUMP_ADDR_18	mov r15 [rbp+var_xxx] mov rdi r15 call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_18	mov r13 rax test r15 r15 jg JUMP_ADDR_15	jmp JUMP_ADDR_27	sub r15 rax add r13 rax test r15 r15 jle JUMP_ADDR_27	mov rdx r15 mov rsi r13 mov edi r14d call sub_xxx test rax rax jg JUMP_ADDR_14	mov rdi [rbp+var_xxx] mov [rbp+var_xxx] rax call sub_xxx mov rax [rbp+var_xxx] test rax rax jnz JUMP_ADDR_18	mov rax CONST mov fs:xxx CONST nop	mov edi r14d call sub_xxx jmp JUMP_ADDR_8	mov edi r14d call sub_xxx mov rsi [rbx] mov rdi rsi mov [rbp+var_xxx] rsi call sub_xxx lea rdx GLOBAL_VAR mov rsi [rbp+var_xxx] mov r8 rax movsxd rax r12d movzx edx [rdx+rax] mov r14 rdx lea rdx [r8+rdx+CONST] and rdx CONST sub rsp rdx lea rdx GLOBAL_VAR movzx ecx [rdx+rax] lea r15 [rsp+CONST+var_xxx+CONST] lea rax GLOBAL_VAR mov rdx r8 and r15 CONST add rcx rax mov rdi r15 mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] mov [rax] CONST mov rdi rax lea rdx [rax+CONST] mov [rax+CONST] CONST movzx eax r14b add eax CONST cmp eax CONST jnb JUMP_ADDR_26	test al CONST jnz JUMP_ADDR_30	test eax eax jz JUMP_ADDR_23	movzx esi [rcx] mov [CONST_VAR+CONST] sil test al CONST jnz JUMP_ADDR_31	mov esi CONST mov rdi r15 xor eax eax call sub_xxx mov r14d eax test eax eax js JUMP_ADDR_8	mov rsi r13 mov edi eax call sub_xxx test eax eax jns JUMP_ADDR_3	jmp JUMP_ADDR_18	mov rsi [rcx] add rdi CONST mov [CONST_VAR+CONST] rsi mov esi eax and rdi CONST mov r8 [rcx+CONST_VAR+CONST] mov [rdx+CONST_VAR+CONST] r8 sub rdx rdi sub rcx rdx mov rsi rcx lea ecx [rax+rdx] mov eax ecx shr eax CONST mov ecx eax rep CONST jmp JUMP_ADDR_23	mov rax CONST mov ecx [rbp+var_xxx] mov edi r14d mov fs:xxx ecx call sub_xxx mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov edi r12d call sub_xxx test rax rax jz JUMP_ADDR_8	xor edx edx jmp JUMP_ADDR_7	mov rsi [rbp+var_xxx] mov rdi r15 call sub_xxx jmp JUMP_ADDR_8	mov esi [rcx] mov [CONST_VAR+CONST] esi mov ecx [rcx+rax+CONST] mov [rdx+rax+CONST] ecx jmp JUMP_ADDR_23	movzx ecx [rcx+rax+CONST] mov [rdx+rax+CONST] cx jmp JUMP_ADDR_23	call sub_xxx
[ph]libcap-git-setcap__nl_unload_locale
endbr64 push rbp mov rax [CONST_VAR+CONST] mov rbp rdi test rax rax jz JUMP_ADDR_2	call rax	mov eax [rbp+CONST] test eax eax jz JUMP_ADDR_8	cmp eax CONST jnz JUMP_ADDR_5	mov rsi [rbp+CONST] mov rdi [rbp+CONST] call sub_xxx mov eax [rbp+CONST]	cmp eax CONST jz JUMP_ADDR_7	mov rdi [rbp+CONST] call sub_xxx	mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	mov rdi [rbp+CONST] call sub_xxx mov eax [rbp+CONST] jmp JUMP_ADDR_5
[ph]libcap-git-setcap__nl_load_locale_from_archive
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov [rbp+var_xxx] edi mov edi CONST mov r13 [CONST_VAR] mov [rbp+var_xxx] rsi mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov rbx cs:xxx test rbx rbx jnz JUMP_ADDR_4	jmp JUMP_ADDR_8	mov rsi r12 mov rdi r13 call sub_xxx test eax eax jz JUMP_ADDR_5	mov rbx [rbx] test rbx rbx jz JUMP_ADDR_8	mov r12 [rbx+CONST] cmp r12 r13 jnz JUMP_ADDR_2	mov rax [rbp+var_xxx] movsxd r14 [rbp+var_xxx] mov [rax] r12 mov r10 [rbx+r14*8+CONST]	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_56	lea rsp [rbp+CONST] mov rax r10 pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov esi CONST mov rdi r13 call sub_xxx test rax rax jz JUMP_ADDR_10	test [rax+CONST] CONST jnz JUMP_ADDR_43	mov r10 cs:xxx test r10 r10 jz JUMP_ADDR_39	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_41	mov rdi r13 call sub_xxx mov r9d eax test rax rax jz JUMP_ADDR_42	mov rdx r13 lea rcx [rax+r13] nop [rax+rax+CONST]	movzx eax [rdx] rol r9d CONST add rdx CONST add r9d eax cmp rdx rcx jnz JUMP_ADDR_14	mov ecx r9d test r9d r9d jz JUMP_ADDR_42	mov eax [r12+CONST] mov esi [r12+CONST] mov [rbp+var_xxx] rax cmp esi CONST jbe JUMP_ADDR_41	mov r10d esi mov rax rcx xor edx edx sub esi CONST div r10 mov rax rcx mov r8 rdx xor edx edx div rsi lea r15 [rdx+CONST] lea r11 [r15+r15*2] lea r14 ds:xxx	mov rcx [rbp+var_xxx] lea rax [r8+r8*2] lea rcx [rcx+rax*4] lea rbx [r12+rcx] jmp JUMP_ADDR_20	add r8 r15 add rbx r14 cmp r10 r8 jbe JUMP_ADDR_48	mov esi [rbx+CONST] test esi esi jz JUMP_ADDR_41	cmp [rbx] r9d jnz JUMP_ADDR_19	add rsi r12 mov rdi r13 mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r9d call sub_xxx mov r9d [rbp+var_xxx] mov r10 [rbp+var_xxx] test eax eax mov r8 [rbp+var_xxx] jnz JUMP_ADDR_19	mov eax [rbx+CONST] test eax eax jz JUMP_ADDR_41	lea r9 [r12+rax] mov eax cs:xxx cmp rax cs:xxx mov r10 rax jnz JUMP_ADDR_57	lea rbx [rbp+var_xxx] mov esi CONST xor edx edx mov rcx rbx jmp JUMP_ADDR_27	add rdx CONST add esi CONST add rcx CONST	cmp rdx CONST jz JUMP_ADDR_26	mov eax [r9+rdx*8+CONST] mov edi [r9+rdx*8+CONST] lea r8d [rax+CONST_VAR] cmp r10d r8d jb JUMP_ADDR_41	add rax r12 mov [rcx] rax mov eax edi mov [rcx+CONST] rax cmp esi CONST jnz JUMP_ADDR_26	mov edi CONST call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_41	mov rax [rbp+var_xxx] mov rdi [rax] call sub_xxx mov [r13+CONST] rax test rax rax jz JUMP_ADDR_55	mov rax cs:xxx xor r12d r12d mov cs:xxx r13 lea r14 [rbp+var_xxx] mov [r13+CONST] rax jmp JUMP_ADDR_34	add r12 CONST	mov edi r12d cmp r12 CONST jz JUMP_ADDR_33	mov rax r12 shl rax CONST mov rsi [rbx+rax] mov rdx [r14+rax] call sub_xxx mov [r13+r12*8+CONST] rax test rax rax jz JUMP_ADDR_37	mov rdx [r13+CONST] mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax] rdx	cmp r12 CONST jnz JUMP_ADDR_33	mov rax [r13+CONST] mov rcx [rbp+var_xxx] movsxd r14 [rbp+var_xxx] mov [rcx] rax mov r10 [r13+r14*8+CONST] jmp JUMP_ADDR_6	lea rax GLOBAL_VAR mov esi CONST lea rdi GLOBAL_VAR mov [rbp+var_xxx] r10 mov cs:xxx rax xor eax eax call sub_xxx mov r15d eax test eax eax jns JUMP_ADDR_49	nop [rax+rax+CONST]	xor r10d r10d jmp JUMP_ADDR_6	mov ecx CONST mov r9d CONST jmp JUMP_ADDR_16	lea r15 [rax+CONST] mov esi CONST mov rdi r15 call sub_xxx mov rdi r15 mov rbx rax mov r12 rax sub rbx r15 mov rsi rbx call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_41	mov rdx rbx mov rsi r15 mov rdi rax call sub_xxx test eax eax jnz JUMP_ADDR_46	cmp [r14+rbx] CONST jz JUMP_ADDR_47	mov rdi r14 call sub_xxx mov rdi r12 mov rbx rax call sub_xxx mov rdx r15 mov rsi r13 sub rdx r13 lea r9 [rax+CONST] lea rcx [rdx+rbx] mov [rbp+var_xxx] r9 lea rax [rcx+rax+CONST] and rax CONST sub rsp rax lea rcx [rsp+CONST+var_xxx+CONST] and rcx CONST mov rdi rcx mov r15 rcx call sub_xxx mov rdx rbx mov rsi r14 mov r13 r15 mov rdi rax call sub_xxx mov rdx [rbp+var_xxx] mov rsi r12 mov rdi rax call sub_xxx	mov rdi r14 call sub_xxx jmp JUMP_ADDR_10	sub r8 r10 jmp JUMP_ADDR_18	lea rsi unk_xxx mov edi eax call sub_xxx mov r10 [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_54	mov r14 cs:xxx xor r9d r9d xor edi edi mov r8d r15d mov ecx CONST mov edx CONST mov [rbp+var_xxx] r10 mov rsi r14 call sub_xxx mov r10 [rbp+var_xxx] cmp rax CONST mov r12 rax jz JUMP_ADDR_54	mov eax [rax+CONST] lea rdx [rax+rax*2] mov eax [r12+CONST] lea rax [rax+rdx*4] mov edx [r12+CONST] lea rdx [rdx+rdx*2] lea rcx [rdx+rdx*8] mov edx [r12+CONST] lea rdx [rdx+rcx*4] cmp rax rdx cmovl rax rdx mov edx [r12+CONST] add edx [r12+CONST] cmp rax rdx cmovl rax rdx cmp r14 rax jb JUMP_ADDR_53	mov edi r15d call sub_xxx mov cs:xxx r12 mov cs:xxx r14d jmp JUMP_ADDR_12	mov rsi r14 mov rdi r12 call sub_xxx mov r10 [rbp+var_xxx]	mov edi r15d mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] jmp JUMP_ADDR_6	mov rdi r13 mov [rbp+var_xxx] rax call sub_xxx mov r10 [rbp+var_xxx] jmp JUMP_ADDR_6	call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_uselocale
endbr64 mov rdx CONST mov rax rdi lea rcx off_xxx mov r8 fs:xxx test rdi rdi jz JUMP_ADDR_26	cmp rdi CONST cmovz rax rcx cmp cs:xxx CONST mov fs:xxx rax jz JUMP_ADDR_3	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_5	mov rdx CONST mov fs:xxx rax	cmp cs:xxx CONST jz JUMP_ADDR_7	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_9	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_11	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_13	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_15	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_17	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_19	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_21	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_23	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	cmp cs:xxx CONST jz JUMP_ADDR_25	mov rdx CONST lea rsi [rax+CONST] mov fs:xxx rsi	mov rsi [rax+CONST] mov rdx CONST mov fs:xxx rsi mov rdx CONST mov rsi [rax+CONST] mov fs:xxx rsi mov rdx [rax+CONST] mov rax CONST mov fs:xxx rdx	cmp r8 rcx mov rax CONST cmovz r8 rax mov rax r8 retn
[ph]libcap-git-setcap__nl_postload_ctype
endbr64 mov rdx cs:xxx mov rdi CONST lea rsi off_xxx mov rax [rdx+CONST] lea rcx [rax+CONST] mov rax [rdx+CONST] mov rdx [rdx+CONST] mov cs:xxx rcx add rax CONST add rdx CONST mov cs:xxx rax mov cs:xxx rdx cmp fs:xxx rsi jz JUMP_ADDR_2	retn	mov rsi CONST mov fs:xxx rcx mov rcx CONST mov fs:xxx rdx mov rdx CONST mov fs:xxx rax retn
[ph]libcap-git-setcap___current_locale_name
endbr64 mov rax CONST movsxd rdi edi mov rax fs:xxx mov rax [rax+rdi*8+CONST] retn
[ph]libcap-git-setcap___sigsetjmp
endbr64 mov [CONST_VAR] rbx mov rax rbp xor rax fs:xxx rol rax CONST mov [CONST_VAR+CONST] rax mov [CONST_VAR+CONST] r12 mov [CONST_VAR+CONST] r13 mov [CONST_VAR+CONST] r14 mov [CONST_VAR+CONST] r15 lea rdx [rsp+arg_xxx] xor rdx fs:xxx rol rdx CONST mov [CONST_VAR+CONST] rdx mov rax [rsp+CONST] nop xor rax fs:xxx rol rax CONST mov [CONST_VAR+CONST] rax xor eax eax rdsspq rax mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_1	endbr64 push rbx mov rbx rdi test esi esi jnz JUMP_ADDR_3	mov [rbx+CONST] esi xor eax eax pop rbx retn	xor esi esi lea rdx [CONST_VAR+CONST] xor edi edi call sub_xxx xor esi esi test eax eax setz sil xor eax eax mov [rbx+CONST] esi pop rbx retn
[ph]libcap-git-setcap___longjmp
endbr64 mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] ror r8 CONST xor r8 fs:xxx ror r9 CONST xor r9 fs:xxx ror rdx CONST xor rdx fs:xxx xor eax eax rdsspq rax sub rax [CONST_VAR+CONST] jz JUMP_ADDR_3	neg rax shr rax CONST add rax CONST mov ebx CONST	cmp rax rbx cmovb rbx rax incsspq rbx sub rax rbx ja JUMP_ADDR_2	nop mov rbx [CONST_VAR] mov r12 [CONST_VAR+CONST] mov r13 [CONST_VAR+CONST] mov r14 [CONST_VAR+CONST] mov r15 [CONST_VAR+CONST] mov eax esi mov rsp r8 mov rbp r9 nop jmp rdx
[ph]libcap-git-setcap___restore_rt
mov rax CONST syscall nop [rax+CONST]
[ph]libcap-git-setcap___sigaction
endbr64 sub rsp CONST mov r8 rdx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rsi rsi jz JUMP_ADDR_8	mov rax [CONST_VAR] movdqu xmm0 [CONST_VAR+CONST] lea rdx [rsp+CONST+var_xxx] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movups [rsp+CONST+var_xxx] xmm0 movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movups [rsp+CONST+var_xxx] xmm1 mov rsi rsp or eax CONST movups [rsp+CONST+var_xxx] xmm2 cdqe movups [rsp+CONST+var_xxx] xmm3 mov [rsp+CONST+var_xxx] rax lea rax sub_xxx mov [rsp+CONST+var_xxx] rax xor eax eax test r8 r8 cmovz rdx rax movups [rsp+CONST+var_xxx] xmm4 movups [rsp+CONST+var_xxx] xmm5 movups [rsp+CONST+var_xxx] xmm6 movups [rsp+CONST+var_xxx] xmm7	mov r10d CONST mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_9	mov r9d eax test r8 r8 jz JUMP_ADDR_6	test eax eax js JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] movdqu xmm0 [rsp+CONST+var_xxx] movdqu xmm1 [rsp+CONST+var_xxx] movdqu xmm2 [rsp+CONST+var_xxx] movdqu xmm3 [rsp+CONST+var_xxx] mov [r8] rax mov rax [rsp+CONST+var_xxx] movups [r8+CONST] xmm0 movdqu xmm4 [rsp+CONST+var_xxx] movdqu xmm5 [rsp+CONST+var_xxx] movups [r8+CONST] xmm1 movdqu xmm6 [rsp+CONST+var_xxx] movdqu xmm7 [rsp+CONST+var_xxx] mov [r8+CONST] eax mov rax [rsp+CONST+var_xxx] movups [r8+CONST] xmm2 movups [r8+CONST] xmm3 mov [r8+CONST] rax movups [r8+CONST] xmm4 movups [r8+CONST] xmm5 movups [r8+CONST] xmm6 movups [r8+CONST] xmm7	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_10	mov eax r9d add rsp CONST retn	xor esi esi lea rdx [rsp+CONST+var_xxx] test r8 r8 cmovz rdx rsi jmp JUMP_ADDR_2	mov rdx CONST neg eax mov r9d CONST mov fs:xxx eax jmp JUMP_ADDR_6	call sub_xxx	endbr64 lea eax [CONST_VAR+CONST] cmp eax CONST ja JUMP_ADDR_14	lea eax [CONST_VAR+CONST] cmp eax CONST jbe JUMP_ADDR_14	jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST mov eax CONST retn
[ph]libcap-git-setcap_sigprocmask
endbr64 sub rsp CONST call sub_xxx test eax eax jnz JUMP_ADDR_2	add rsp CONST retn	mov rdx CONST mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_1
[ph]libcap-git-setcap__quicksort
endbr64 push r15 push r14 mov r14 rdx push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx test rsi rsi jz JUMP_ADDR_31	lea rdx [CONST_VAR+CONST] mov rbx rcx lea rcx ds:xxx mov rbp r8 imul rdx r14 mov [rsp+CONST+var_xxx] rcx mov rcx rdx add rcx rdi mov [rsp+CONST+var_xxx] rcx cmp rsi CONST jbe JUMP_ADDR_18	lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rcx mov r13 r14 mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] neg r13 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] r14 nop [rax+rax+CONST]	mov rcx [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] xor edx edx mov rdi [rsp+CONST+var_xxx] sub rax rcx mov rsi rcx div rdi mov rdx rbp shr rax CONST imul rax rdi lea r12 [rcx+rax] mov rdi r12 call rbx test eax eax js JUMP_ADDR_60	mov rdi [rsp+CONST+var_xxx] mov rdx rbp mov rsi r12 call rbx test eax eax js JUMP_ADDR_53	mov rax [rsp+CONST+var_xxx] mov r15 [rsp+CONST+var_xxx] add r15 [rsp+CONST+var_xxx] lea r14 [rax+r13] nop [rax+rax+CONST]	mov rdx rbp mov rsi r12 mov rdi r15 call rbx test eax eax jns JUMP_ADDR_9	jmp JUMP_ADDR_42	add r14 r13	mov rdx rbp mov rsi r14 mov rdi r12 call rbx test eax eax js JUMP_ADDR_8	cmp r15 r14 jb JUMP_ADDR_43	jz JUMP_ADDR_52	cmp r15 r14 jbe JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rdx r14 sub rdx [rsp+CONST+var_xxx] sub rax r15 cmp rdx rcx ja JUMP_ADDR_49	mov [rsp+CONST+var_xxx] r15 cmp rcx rax jb JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] mov rcx [rax+CONST] sub rax CONST mov [rsp+CONST+var_xxx] rcx mov rcx [rax+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rcx	mov rcx [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rcx ja JUMP_ADDR_3	mov r14 [rsp+CONST+var_xxx]	mov r15 [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] add r13 r15 cmp rax r13 cmovbe r13 rax lea rax [r15+r14] mov [rsp+CONST+var_xxx] rax mov r12 rax cmp r13 rax jb JUMP_ADDR_24	nop [rax+rax+CONST]	mov rsi r15 mov rdi r12 mov rdx rbp call rbx test eax eax cmovs r15 r12 add r12 r14 cmp r13 r12 jnb JUMP_ADDR_20	mov rax [rsp+CONST+var_xxx] cmp r15 rax jz JUMP_ADDR_24	lea rcx [r15+r14] nop [rax+rax+CONST]	movzx edx [r15] movzx esi [rax] add r15 CONST add rax CONST mov [r15+CONST] sil mov [rax+CONST] dl cmp rcx r15 jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] lea rdi [rax+r14] cmp rdi [rsp+CONST+var_xxx] ja JUMP_ADDR_31	lea rax [CONST_VAR+r14+CONST] mov r15 r14 mov r13 rdi mov [rsp+CONST+var_xxx] rax neg r15 nop [rax]	mov r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_28	add r12 r15	mov rdx rbp mov rsi r12 mov rdi r13 call rbx test eax eax js JUMP_ADDR_27	lea rcx [r12+r14] cmp rcx r13 jnz JUMP_ADDR_33	add [rsp+CONST+var_xxx] r14 add r13 r14 add [rsp+CONST+var_xxx] r14 cmp [rsp+CONST+var_xxx] r13 jnb JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_64	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST+var_xxx] mov rdi rax cmp rax r13 jb JUMP_ADDR_30	mov r9 rax movzx r8d [CONST_VAR] lea r11 [r13+CONST] sub r9 r14 mov rax r9 cmp r9 rcx jb JUMP_ADDR_40	nop [rax+rax+CONST]	mov rdx rdi nop [rax+rax+CONST]	movzx esi [rax] mov [rdx] sil mov rsi rax add rax r15 sub rdx r14 cmp rcx rax jbe JUMP_ADDR_37	sub rdi CONST mov [CONST_VAR] r8b sub r9 CONST cmp rdi r11 jz JUMP_ADDR_30	movzx r8d [CONST_VAR] mov rax r9 cmp r9 rcx jnb JUMP_ADDR_36	mov rsi rdi sub rdi CONST sub r9 CONST mov [CONST_VAR] r8b cmp rdi r11 jnz JUMP_ADDR_39	jmp JUMP_ADDR_30	add r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] mov rdx r14 lea rdi [r15+rax] mov rax r15 nop [rax+rax+CONST]	movzx ecx [rax] movzx esi [rdx] add rax CONST add rdx CONST mov [rax+CONST] sil mov [rdx+CONST] cl cmp rdi rax jnz JUMP_ADDR_44	cmp r15 r12 jz JUMP_ADDR_48	cmp r14 r12 cmovz r12 r15	add r14 r13 mov r15 rdi jmp JUMP_ADDR_12	mov r12 r14 jmp JUMP_ADDR_47	cmp [rsp+CONST+var_xxx] rax jnb JUMP_ADDR_59	mov rcx [rsp+CONST+var_xxx] lea rsi [rcx+CONST] cmp rdx rax jle JUMP_ADDR_63	mov rax rcx mov rcx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rsi mov [rax+CONST] r14 mov [rax] rcx mov [rsp+CONST+var_xxx] r15 jmp JUMP_ADDR_16	add r15 [rsp+CONST+var_xxx] add r14 r13 jmp JUMP_ADDR_13	mov rax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] lea r15 [r12+rax] mov rax r12 nop [rax]	movzx ecx [rax] movzx esi [rdx] add rax CONST add rdx CONST mov [rax+CONST] sil mov [rdx+CONST] cl cmp r15 rax jnz JUMP_ADDR_54	mov rsi [rsp+CONST+var_xxx] mov rdx rbp mov rdi r12 call rbx test eax eax jns JUMP_ADDR_5	mov rdx [rsp+CONST+var_xxx] mov rax r12	movzx ecx [rax] movzx esi [rdx] add rax CONST add rdx CONST mov [rax+CONST] sil mov [rdx+CONST] cl cmp r15 rax jnz JUMP_ADDR_57	jmp JUMP_ADDR_5	mov [rsp+CONST+var_xxx] r14 jmp JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] lea rdi [r12+rax] mov rax r12	movzx ecx [rax] movzx esi [rdx] add rax CONST add rdx CONST mov [rax+CONST] sil mov [rdx+CONST] cl cmp rdi rax jnz JUMP_ADDR_61	jmp JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] r14 mov [rax] r15 mov [rax+CONST] rcx jmp JUMP_ADDR_16	call sub_xxx
[ph]libcap-git-setcap___add_to_environ
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 mov r12 rdi push rbx mov rbx rdx sub rsp CONST mov [rbp+var_xxx] rsi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] ecx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax call sub_xxx mov r14 rax test rbx rbx jz JUMP_ADDR_26	mov eax fs:xxx test eax eax jnz JUMP_ADDR_34	mov edx CONST cmpxchg cs:xxx edx	mov r13 cs:xxx test r13 r13 jz JUMP_ADDR_25	mov r15 [r13+CONST] test r15 r15 jz JUMP_ADDR_25	xor ebx ebx jmp JUMP_ADDR_7	mov rbx rdx	mov rdx r14 mov rsi r12 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_9	cmp [r15+r14] CONST jz JUMP_ADDR_21	mov r15 [r13+CONST] add r13 CONST lea rdx [rbx+CONST] test r15 r15 jnz JUMP_ADDR_6	lea rsi ds:xxx	mov rbx cs:xxx mov [rbp+var_xxx] rdx mov rdi rbx call sub_xxx mov rdx [rbp+var_xxx] test rax rax mov rcx rax jz JUMP_ADDR_42	mov rsi cs:xxx lea r15 ds:xxx cmp rbx rsi jz JUMP_ADDR_14	mov rdx r15 mov rdi rax call sub_xxx mov rcx rax	lea r13 [rcx+r15] mov cs:xxx rcx mov [r13+CONST] CONST mov [rcx+r15+CONST] CONST mov cs:xxx rcx	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_27	mov rax [rbp+var_xxx] mov [r13+CONST] rax	mov r8d fs:xxx test r8d r8d jnz JUMP_ADDR_36	sub cs:xxx CONST	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_46	lea rsp [rbp+CONST] mov eax r8d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp [r13+CONST] CONST jnz JUMP_ADDR_23	lea rsi ds:xxx mov rdx rbx jmp JUMP_ADDR_11	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_17	jmp JUMP_ADDR_15	mov esi CONST xor edx edx jmp JUMP_ADDR_11	mov rdi [rbp+var_xxx] call sub_xxx add rax CONST mov [rbp+var_xxx] rax jmp JUMP_ADDR_1	mov rax [rbp+var_xxx] lea r15 [rax+r14+CONST] mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_29	cmp r15 CONST ja JUMP_ADDR_38	lea rax [r15+CONST] mov rdx r14 mov rsi r12 and rax CONST lea r14 sub_xxx lea r12 GLOBAL_VAR sub rsp rax lea rbx [rsp+CONST+var_xxx+CONST] and rbx CONST mov rdi rbx call sub_xxx mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov [rax] CONST lea rdi [rax+CONST] call sub_xxx mov rdx r14 mov rsi r12 mov rdi rbx call sub_xxx test rax rax jz JUMP_ADDR_31	mov rax [rax] mov [rbp+var_xxx] rax test rax rax jnz JUMP_ADDR_16	mov rdi r15 call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_42	mov rdi [rbp+var_xxx] mov rdx r15 mov rsi rbx call sub_xxx	mov rdi [rbp+var_xxx] mov rdx r14 mov rsi r12 call sub_xxx jmp JUMP_ADDR_16	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	xor eax eax xchg eax cs:xxx xor r8d r8d cmp eax CONST jle JUMP_ADDR_19	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_19	mov rdi r15 call sub_xxx mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_42	mov rbx [rbp+var_xxx] mov rdx r14 mov rsi r12 lea r14 sub_xxx lea r12 GLOBAL_VAR mov rdi rbx call sub_xxx mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov [rax] CONST lea rdi [rax+CONST] call sub_xxx mov rdx r14 mov rsi r12 mov rdi rbx call sub_xxx test rax rax jz JUMP_ADDR_33	mov rbx [rax] test rbx rbx jz JUMP_ADDR_33	mov rdi [rbp+var_xxx] call sub_xxx mov [rbp+var_xxx] rbx jmp JUMP_ADDR_16	mov eax fs:xxx test eax eax jnz JUMP_ADDR_44	sub cs:xxx CONST mov r8d CONST jmp JUMP_ADDR_19	xor eax eax xchg eax cs:xxx cmp eax CONST jg JUMP_ADDR_47	mov r8d CONST jmp JUMP_ADDR_19	call sub_xxx	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_45
[ph]libcap-git-setcap___setenv
endbr64 push r13 push r12 push rbp test rdi rdi jz JUMP_ADDR_4	cmp [CONST_VAR] CONST mov rbp rdi jz JUMP_ADDR_4	mov r12 rsi mov esi CONST mov r13d edx call sub_xxx test rax rax jnz JUMP_ADDR_4	mov ecx r13d mov rsi r12 mov rdi rbp xor edx edx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST mov eax CONST pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___unsetenv
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST test rdi rdi jz JUMP_ADDR_21	cmp [CONST_VAR] CONST mov r12 rdi jz JUMP_ADDR_21	mov esi CONST call sub_xxx test rax rax jnz JUMP_ADDR_21	mov rdi r12 call sub_xxx mov r13 rax mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	mov edx CONST cmpxchg cs:xxx edx	mov rbp cs:xxx test rbp rbp jnz JUMP_ADDR_10	jmp JUMP_ADDR_11	mov rdx r13 mov rsi r12 mov rdi rbx call sub_xxx test eax eax jnz JUMP_ADDR_9	cmp [rbx+r13] CONST jz JUMP_ADDR_14	add rbp CONST	mov rbx [rbp+CONST] test rbx rbx jnz JUMP_ADDR_7	mov r8d fs:xxx test r8d r8d jnz JUMP_ADDR_19	sub cs:xxx CONST	add rsp CONST mov eax r8d pop rbx pop rbp pop r12 pop r13 retn	mov rax rbp nop [rax+rax+CONST]	mov rdx [rax+CONST] add rax CONST mov [rax+CONST] rdx test rdx rdx jnz JUMP_ADDR_15	jmp JUMP_ADDR_10	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_5	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx xor r8d r8d cmp eax CONST jle JUMP_ADDR_13	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_13	mov rax CONST mov r8d CONST mov fs:xxx CONST jmp JUMP_ADDR_13
[ph]libcap-git-setcap___clearenv
endbr64 sub rsp CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_10	mov edx CONST cmpxchg cs:xxx edx	mov rdi cs:xxx cmp cs:xxx rdi jnz JUMP_ADDR_4	test rdi rdi jnz JUMP_ADDR_7	mov cs:xxx CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_8	sub cs:xxx CONST	xor eax eax add rsp CONST retn	call sub_xxx mov cs:xxx CONST jmp JUMP_ADDR_4	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_6	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap___libc_secure_getenv
endbr64 mov eax cs:xxx test eax eax jnz JUMP_ADDR_2	jmp UNK_JUMP_ADDR	xor eax eax retn
[ph]libcap-git-setcap__itoa_word
endbr64 mov r8 rsi test ecx ecx lea rsi GLOBAL_VAR lea rax GLOBAL_VAR cmovz rsi rax cmp edx CONST jz JUMP_ADDR_9	cmp edx CONST jz JUMP_ADDR_5	mov ecx edx cmp edx CONST jz JUMP_ADDR_7	mov rax rdi xor edx edx sub r8 CONST div rcx movzx edx [CONST_VAR+rdx] mov [r8] dl mov rdx rdi mov rdi rax cmp rdx rcx jnb JUMP_ADDR_3	mov rax r8 retn	mov rax rdi sub r8 CONST and eax CONST movzx eax [CONST_VAR+rax] mov [r8] al mov rax rdi shr rdi CONST cmp rax CONST ja JUMP_ADDR_5	jmp JUMP_ADDR_4	mov rax rdi sub r8 CONST and eax CONST movzx eax [CONST_VAR+rax] mov [r8] al mov rax rdi shr rdi CONST cmp rax CONST ja JUMP_ADDR_7	jmp JUMP_ADDR_4	mov r9 CONST nop [rax+rax+CONST]	mov rax rdi mov rcx rdi sub r8 CONST mul r9 shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub rcx rax movzx eax [CONST_VAR+rcx] mov [r8] al mov rax rdi mov rdi rdx cmp rax CONST ja JUMP_ADDR_10	mov rax r8 retn
[ph]libcap-git-setcap__fitoa_word
endbr64 sub rsp CONST mov r11 rsi mov rax fs:xxx mov [rsp+CONST] rax xor eax eax lea r10 [rsp+CONST] mov rsi r10 call sub_xxx cmp rax r10 jnb JUMP_ADDR_6	mov rsi rax mov rdi r11 nop [rax+rax+CONST]	movsb cmp rsi r10 jnz JUMP_ADDR_2	sub rsi rax lea rax [r11+CONST_VAR]	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST retn	mov rax r11 jmp JUMP_ADDR_4	call sub_xxx
[ph]libcap-git-setcap_hack_digit
push r12 push rbx mov rbx rdi sub rsp CONST mov eax [CONST_VAR] test eax eax jz JUMP_ADDR_2	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_14	mov r9 [rbx+CONST] mov rdx [rbx+CONST] mov rdi [rbx+CONST] test r9 r9 jz JUMP_ADDR_13	cmp r9 rdx jle JUMP_ADDR_8	mov r12d CONST	mov ecx CONST mov rsi rdi call sub_xxx test rax rax jz JUMP_ADDR_7	mov rdx [rbx+CONST] mov rcx [rbx+CONST] lea rsi [rdx+CONST] mov [rbx+CONST] rsi mov [rcx+rdx*8] rax	add rsp CONST mov eax r12d pop rbx pop r12 retn	mov r10 [rbx+CONST] mov r8 [rbx+CONST] mov rcx rdx xor esi esi mov rdx rdi mov rdi r10 call sub_xxx mov rdx [rbx+CONST] mov r8 rax mov rax [rbx+CONST] sub rax [rbx+CONST] mov [rdx+rax*8] r8 mov rax [rbx+CONST] mov r12 [rdx] mov [rbx+CONST] rax test rax rax jz JUMP_ADDR_16	mov rdi [rbx+CONST] jmp JUMP_ADDR_11	sub rax CONST mov [rbx+CONST] rax jz JUMP_ADDR_16	cmp [CONST_VAR+rax*8+CONST] CONST jz JUMP_ADDR_10	mov rdx [rbx+CONST] add r12d CONST jmp JUMP_ADDR_5	lea rbx [CONST_VAR+rdx*8+CONST] mov ecx CONST sub rdx CONST mov rsi rdi mov r12 [rbx] call sub_xxx mov [rbx] rax add r12d CONST add rsp CONST mov eax r12d pop rbx pop r12 retn	mov eax [CONST_VAR+CONST] mov r12d CONST lea edx [rax+CONST] mov [CONST_VAR+CONST] edx test eax eax jle JUMP_ADDR_2	add rsp CONST mov eax r12d pop rbx pop r12 retn	mov [rbx+CONST] CONST add r12d CONST add rsp CONST mov eax r12d pop rbx pop r12 retn
[ph]libcap-git-setcap__i18n_number_rewrite
push r15 push r14 mov r14 rdi lea rdi GLOBAL_VAR push r13 mov r13 rsi push r12 mov r12 rdx push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx mov edi CONST mov rbx rax mov rsi rax call sub_xxx mov rsi rbx mov edi CONST mov ebp eax call sub_xxx lea r8 [rsp+CONST+var_xxx] test rbx rbx jnz JUMP_ADDR_23	sub r13 r14 lea rbp [rsp+CONST+var_xxx] mov edx CONST mov rdi r8 mov rsi r13 mov [rsp+CONST+var_xxx] rbp mov [rsp+CONST+var_xxx] CONST call sub_xxx test al al jz JUMP_ADDR_27	mov rcx [rsp+CONST+var_xxx] mov rdx r13 mov rsi r14 mov rdi rcx mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] lea r15 [rax+CONST] cmp rcx r15 ja JUMP_ADDR_12	lea rax [rsp+CONST+var_xxx] lea r13 [rcx+CONST] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_7	test rbx rbx jnz JUMP_ADDR_16	mov [r12+CONST] al sub r12 CONST	sub r15 CONST cmp r15 r13 jz JUMP_ADDR_12	movzx eax [r15] lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_4	mov rdx CONST sub eax CONST movsx rax al mov rdx fs:xxx mov rdx [rdx] mov r14 [rdx+rax*8+CONST] mov rdi r14 call sub_xxx sub r12 rax lea rdx [rax+CONST] test rax rax jz JUMP_ADDR_6	nop [rax]	movzx eax [r14+rdx] mov [r12+rdx] al sub rdx CONST jnb JUMP_ADDR_10	sub r15 CONST cmp r15 r13 jnz JUMP_ADDR_7	mov rdi [rsp+CONST+var_xxx] cmp rdi rbp jz JUMP_ADDR_14	call sub_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_35	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edx eax and edx CONST cmp dl CONST jnz JUMP_ADDR_5	cmp al CONST mov rdi [rsp+CONST+var_xxx] cmovz rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi call sub_xxx sub r12 rax test rax rax jz JUMP_ADDR_6	cmp eax CONST mov rdi [rsp+CONST+var_xxx] jnb JUMP_ADDR_28	test al CONST jnz JUMP_ADDR_34	test eax eax jz JUMP_ADDR_6	movzx ecx [CONST_VAR] mov [r12] cl test al CONST jz JUMP_ADDR_6	mov eax eax movzx edx [CONST_VAR+rax+CONST] mov [r12+rax+CONST] dx jmp JUMP_ADDR_6	mov rdx r8 lea rdi [rsp+CONST+var_xxx] mov esi ebp mov r15d eax mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp rax CONST jz JUMP_ADDR_33	mov [rsp+rax+CONST+var_xxx] CONST	mov rdx r8 lea rdi [rsp+CONST+var_xxx] mov esi r15d mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp rax CONST jz JUMP_ADDR_32	mov [rsp+rax+CONST+var_xxx] CONST jmp JUMP_ADDR_1	mov r12 r14 jmp JUMP_ADDR_14	mov rcx [CONST_VAR] lea r8 [r12+CONST] and r8 CONST mov [r12] rcx mov ecx eax mov rdx [CONST_VAR+rcx+CONST] mov [r12+rcx+CONST] rdx mov rcx r12 sub rcx r8 add eax ecx sub rdi rcx and eax CONST cmp eax CONST jb JUMP_ADDR_6	and eax CONST xor edx edx	mov ecx edx add edx CONST mov r9 [CONST_VAR+rcx] mov [r8+rcx] r9 cmp edx eax jb JUMP_ADDR_30	jmp JUMP_ADDR_6	mov eax CONST mov [rsp+CONST+var_xxx] ax jmp JUMP_ADDR_1	mov edx CONST mov [rsp+CONST+var_xxx] dx jmp JUMP_ADDR_25	mov ecx [CONST_VAR] mov eax eax mov [r12] ecx mov edx [CONST_VAR+rax+CONST] mov [r12+rax+CONST] edx jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap___printf_fp
call sub_xxx	endbr64 push rbp mov r11 rsi mov rbp rsp push r15 push r14 push r13 push r12 mov r12 rdi mov rdi rdx push rbx sub rsp CONST mov [rbp+CONST] rsi movzx r14d [CONST_VAR+CONST] mov [rbp+CONST] rdx mov rdx rcx mov rax fs:xxx mov [rbp+CONST] rax xor eax eax movzx eax [CONST_VAR+CONST] mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov ecx eax mov edi eax shr cl CONST mov ebx ecx and ebx CONST and edi CONST mov [rbp+CONST] ebx mov esi edi jnz JUMP_ADDR_18	mov rcx [r11+CONST] mov rbx [rcx+CONST] mov [rbp+CONST] rbx mov ebx [rcx+CONST] mov [rbp+CONST] ebx test r14b r14b js JUMP_ADDR_37	mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST	mov rdx [rdx] test al CONST jz JUMP_ADDR_30	movdqa xmm2 [rdx] movdqa xmm1 xmm2 movdqa xmm0 xmm2 movaps [rbp+CONST] xmm2 call sub_xxx movdqa xmm2 [rbp+CONST] test rax rax jnz JUMP_ADDR_383	movdqa xmm0 xmm2 movdqa xmm1 cs:xxx pand xmm0 cs:xxx movaps [rbp+CONST] xmm2 movaps [rbp+CONST] xmm0 call sub_xxx movdqa xmm2 [rbp+CONST] test rax rax jnz JUMP_ADDR_159	movdqa xmm1 cs:xxx movdqa xmm0 [rbp+CONST] call sub_xxx movdqa xmm2 [rbp+CONST] test rax rax jle JUMP_ADDR_159	movmskps ebx xmm2 and ebx CONST	mov rax [rbp+CONST] mov [rbp+CONST] ebx lea r13 unk_xxx lea rcx off_xxx movsxd rdx [rax+CONST] mov rax CONST mov rax fs:xxx test [rax+rdx*2+CONST] CONST lea rax unk_xxx cmovz r13 rax lea rax unk_xxx cmovz rcx rax	mov rax [rbp+CONST] mov r15d [rax+CONST] mov eax r14d shr al CONST xor eax CONST and eax CONST test ebx ebx jz JUMP_ADDR_48	sub r15d CONST test r15d r15d setnle dl test al al jz JUMP_ADDR_13	test dl dl jnz JUMP_ADDR_38	xor ebx ebx	mov eax [rbp+CONST] test eax eax jz JUMP_ADDR_73	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_452	mov rsi [rax+CONST] cmp rsi [rax+CONST] jnb JUMP_ADDR_452	lea rdi [CONST_VAR+CONST] mov [rax+CONST] rdi mov [CONST_VAR] CONST jmp JUMP_ADDR_56	mov rdi [rbp+CONST] mov rcx [CONST_VAR+CONST] mov rbx [rcx+CONST] cmp [rbx] CONST mov [rbp+CONST] rbx jnz JUMP_ADDR_20	mov rdi [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] mov [rbp+CONST] rdi	mov edi [rcx+CONST] mov [rbp+CONST] edi test edi edi jnz JUMP_ADDR_22	mov rdi [rbp+CONST] mov rdi [CONST_VAR+CONST] mov edi [CONST_VAR+CONST] mov [rbp+CONST] edi	test r14b r14b jns JUMP_ADDR_3	mov rdi [rcx+CONST] mov [rbp+CONST] rdi	mov rcx [rbp+CONST] movzx ecx [rcx] mov [rbp+CONST] cl sub ecx CONST cmp cl CONST ja JUMP_ADDR_3	mov edi [rbp+CONST] test edi edi jz JUMP_ADDR_76	test sil sil jnz JUMP_ADDR_380	mov rbx [rbp+CONST] mov rcx [rbx+CONST] mov esi [rcx+CONST] mov [rbp+CONST] esi	mov esi [rbp+CONST] xor ecx ecx mov rdx [rdx] mov [rbp+CONST] CONST test esi esi cmovnz rcx [rbp+CONST] mov [rbp+CONST] rcx test al CONST jnz JUMP_ADDR_5	nop [rax+rax+CONST]	test r14b CONST jz JUMP_ADDR_34	fld CONST fucomi st st jp JUMP_ADDR_469	fld st fabs fld cs:xxx fxch CONST fucomip st CONST fstp st jbe JUMP_ADDR_131	fxam fnstsw ax fstp st mov ebx eax and ebx CONST jmp JUMP_ADDR_9	movsd xmm0 [rdx] ucomisd xmm0 xmm0 jp JUMP_ADDR_468	movapd xmm1 xmm0 andpd xmm1 cs:xxx ucomisd xmm1 cs:xxx jbe JUMP_ADDR_79	movmskpd ebx xmm0 and ebx CONST jmp JUMP_ADDR_9	mov rcx [rcx+CONST] mov [rbp+CONST] rcx jmp JUMP_ADDR_24	mov eax [rbp+CONST] movsxd rbx r15d mov esi CONST mov rdi r12 mov [rbp+CONST] rcx mov rdx rbx test eax eax jz JUMP_ADDR_75	call sub_xxx mov rcx [rbp+CONST]	cmp rbx rax jnz JUMP_ADDR_146	mov eax [rbp+CONST] mov ebx r15d mov edx CONST test eax eax jnz JUMP_ADDR_14	mov rax [rbp+CONST] movzx r14d [rax+CONST] test r14b CONST jnz JUMP_ADDR_52	and r14d CONST jz JUMP_ADDR_57	mov eax [rbp+CONST] test eax eax jz JUMP_ADDR_386	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_508	mov rsi [rax+CONST] cmp rsi [rax+CONST] jnb JUMP_ADDR_508	lea rdi [CONST_VAR+CONST] mov [rax+CONST] rdi mov [CONST_VAR] CONST jmp JUMP_ADDR_56	test r14b CONST jnz JUMP_ADDR_71	sub r15d CONST test r15d r15d setnle dl jle JUMP_ADDR_51	test al al jnz JUMP_ADDR_38	test r14b CONST jz JUMP_ADDR_43	mov eax [rbp+CONST] test eax eax jz JUMP_ADDR_264	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_487	mov rsi [rax+CONST] cmp rsi [rax+CONST] jnb JUMP_ADDR_487	lea rdi [CONST_VAR+CONST] mov [rax+CONST] rdi mov [CONST_VAR] CONST	add ebx CONST	mov r14d [rbp+CONST] test r14d r14d jz JUMP_ADDR_147	lea r14 [r13+CONST]	mov rax [r12+CONST] add r13 CONST mov esi [r13+CONST] test rax rax jz JUMP_ADDR_155	mov rcx [rax+CONST] cmp rcx [rax+CONST] jnb JUMP_ADDR_155	lea rdi [rcx+CONST] cmp esi CONST mov [rax+CONST] rdi setz al mov [rcx] esi	test al al jnz JUMP_ADDR_146	add ebx CONST cmp r13 r14 jnz JUMP_ADDR_59	mov rax [rbp+CONST] test [rax+CONST] CONST jz JUMP_ADDR_379	test dl dl jz JUMP_ADDR_379	movsxd r13 r15d mov esi CONST mov rdi r12 mov rdx r13 call sub_xxx	cmp r13 rax jnz JUMP_ADDR_146	lea r14d [r15+rbx]	mov rax [rbp+CONST] sub rax fs:xxx jnz JUMP_ADDR_EXCEEDED	lea rsp [rbp+CONST] mov eax r14d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	sub r15d CONST test r15d r15d setnle dl jg JUMP_ADDR_50	jmp JUMP_ADDR_51	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_481	lea rsi [rax+CONST] mov [r12+CONST] rsi mov [rax] CONST jmp JUMP_ADDR_56	call sub_xxx mov rcx [rbp+CONST] jmp JUMP_ADDR_40	test sil sil jnz JUMP_ADDR_381	mov rbx [rbp+CONST] mov rcx [rbx+CONST] mov rsi [rcx+CONST] mov [rbp+CONST] rsi	mov rbx [rbp+CONST] movzx esi [rbx] neg sil sbb edi edi xor ecx ecx and edi CONST cmp [rbx] CONST cmovnz rcx [rbp+CONST] mov [rbp+CONST] edi mov [rbp+CONST] rcx jmp JUMP_ADDR_4	lea r15 [rbp+CONST] lea rcx [rbp+CONST] mov esi CONST lea rdx [rbp+CONST] mov rdi r15 call sub_xxx mov r14d eax mov r13 rax shl r14d CONST sub r14d CONST	mov ecx [rbp+CONST] mov [rbp+CONST] r13 mov [rbp+CONST] CONST mov eax ecx neg eax cmovs eax ecx add eax CONST sar eax CONST add eax CONST cdqe lea rax ds:xxx shr rax CONST shl rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] sub rsp rax lea rdx [rsp+CONST+var_xxx] sub rsp rax and rdi CONST lea rax [rsp+CONST+var_xxx] and rdx CONST mov [rbp+CONST] rdi and rax CONST mov [rbp+CONST] rdx mov [rbp+CONST] rax cmp ecx CONST jle JUMP_ADDR_157	lea eax [r14+rcx] test eax eax lea edx [rax+CONST] cmovns edx eax sar edx CONST test al CONST jnz JUMP_ADDR_419	test r13 r13 jle JUMP_ADDR_451	movsxd rbx edx mov rsi r15 mov [rbp+CONST] ecx lea rdx ds:xxx lea rdi [CONST_VAR+rbx*8] call sub_xxx mov ecx [rbp+CONST]	add r13 rbx mov rdx rbx mov [rbp+CONST] r13	test rdx rdx jle JUMP_ADDR_87	mov rdi [rbp+CONST] shl rdx CONST xor esi esi mov [rbp+CONST] ecx call sub_xxx mov ecx [rbp+CONST]	mov r13d CONST xor r14d r14d xor eax eax mov rdx [rbp+CONST] lea r15 unk_xxx mov [rbp+CONST] r12 mov r12d r14d mov r14d r13d lea rbx [r15+CONST] mov r13d eax jmp JUMP_ADDR_95	mov rax [rbp+CONST] test [rax+CONST] CONST jnz JUMP_ADDR_154	mov rdx [r15+CONST] mov rax [r15] lea rsi unk_xxx mov [rbp+CONST] rdx lea rsi [CONST_VAR+rax*8] shl rdx CONST call sub_xxx mov rdx [rbp+CONST]	cmp [rbp+CONST] rdx jg JUMP_ADDR_100	jz JUMP_ADDR_160	mov rdx [rbp+CONST]	sub r14d CONST cmp r15 rbx jz JUMP_ADDR_101	mov ecx [rbp+CONST]	mov eax [r15+CONST] sub r15 CONST add eax r12d sub eax CONST cmp eax ecx jg JUMP_ADDR_93	mov rdi [rbp+CONST] test rdx rdx jz JUMP_ADDR_88	mov rcx [r15] mov rax [r15+CONST] lea rsi unk_xxx lea rcx [CONST_VAR+rcx*8+CONST] mov rsi [rbp+CONST] lea r8 [rax+CONST] call sub_xxx mov rdx [r15+CONST] add rdx [rbp+CONST] test rax rax jz JUMP_ADDR_156	sub rdx CONST mov [rbp+CONST] rdx cmp [rbp+CONST] rdx jle JUMP_ADDR_91	nop	mov rsi [rbp+CONST] mov rdi [rbp+CONST] mov [rbp+CONST] rdx shl rdx CONST call sub_xxx mov rdx [rbp+CONST] mov rax [rbp+CONST] bsr rax [rax+rdx*8+CONST] mov ecx edx shl ecx CONST lea r10d [rcx+CONST] mov ecx r14d sub r14d CONST xor rax CONST sub r10d eax mov eax CONST shl eax cl mov r12d r10d or r13d eax cmp r15 rbx jnz JUMP_ADDR_94	mov [rbp+CONST] r13d mov r12 [rbp+CONST] test rdx rdx jle JUMP_ADDR_115	mov rdi [rbp+CONST] bsr rsi [CONST_VAR+rdx*8+CONST] mov rax [CONST_VAR] xor rsi CONST mov ecx esi test rax rax jnz JUMP_ADDR_EXCEEDED	mov r9 [rbp+CONST] mov rsi rdi xor r13d r13d jmp JUMP_ADDR_105	mov r8 [CONST_VAR+CONST] lea r14d [rax+CONST] add rsi CONST add rax CONST add r13 CONST test r8 r8 jnz JUMP_ADDR_431	mov r8 [r9+r13] mov r14d eax test r8 r8 jz JUMP_ADDR_104	test ecx ecx jnz JUMP_ADDR_474	test r14d r14d jz JUMP_ADDR_115	movsxd r14 r14d sub rdx r14 test rdx rdx jle JUMP_ADDR_111	lea rsi [CONST_VAR+rax*8] xor ecx ecx nop	mov rdx [CONST_VAR+rcx*8] mov [CONST_VAR+rcx*8] rdx mov rdx [rbp+CONST] add rcx CONST sub rdx r14 cmp rdx rcx jg JUMP_ADDR_110	mov [rbp+CONST] rdx mov rdx [rbp+CONST] sub rdx r14 test rdx rdx jle JUMP_ADDR_114	lea rcx [r9+rax*8] xor eax eax nop [rax+CONST]	mov rdx [rcx+rax*8] mov [r9+rax*8] rdx mov rdx [rbp+CONST] add rax CONST sub rdx r14 cmp rdx rax jg JUMP_ADDR_113	mov [rbp+CONST] rdx nop [rax+rax+CONST]	mov rbx [rbp+CONST] mov rdx CONST mov eax [rbx+CONST] movsxd rcx [rbx+CONST] mov esi [rbx] mov [rbp+CONST] eax mov rdx fs:xxx mov rax rcx mov [rbp+CONST] esi mov ecx [rdx+rcx*4] mov [rbp+CONST] ecx cmp cl CONST jz JUMP_ADDR_261	cmp [rbp+CONST] CONST jz JUMP_ADDR_273	mov [rbp+CONST] CONST mov ebx [rbp+CONST] test ebx ebx js JUMP_ADDR_119	mov edx CONST cmovnz edx ebx mov [rbp+CONST] edx	mov r13d [rbp+CONST] mov edx [rbp+CONST] test r13d r13d jz JUMP_ADDR_277	cmp edx CONST jle JUMP_ADDR_411	mov [rbp+CONST] CONST sub eax CONST mov [rbp+CONST] eax mov eax [rbp+CONST] sub eax CONST mov [rbp+CONST] eax cdqe add rax CONST mov [rbp+CONST] rax	mov rax [rbp+CONST] xor esi esi test [rax+CONST] CONST mov eax [rbp+CONST] cmovz eax esi mov [rbp+CONST] eax	cmp [rbp+CONST] CONST jz JUMP_ADDR_162	mov rax [rbp+CONST] movzx eax [rax] lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_375	mov edx [rbp+CONST] mov r8 [rbp+CONST] xor r9d r9d jmp JUMP_ADDR_129	movzx eax [r8+CONST] add r8 CONST lea edi [r9+CONST] sub edx ecx cmp al CONST ja JUMP_ADDR_449	test al al jz JUMP_ADDR_450	mov r9d edi	movsx ecx al cmp edx ecx ja JUMP_ADDR_126	mov eax r9d mov [rbp+CONST] r9d add eax CONST cdqe jmp JUMP_ADDR_376	lea r15 [rbp+CONST] sub rsp CONST lea rcx [rbp+CONST] mov esi CONST lea rdx [rbp+CONST] mov rdi r15 fstp [rsp+CONST+var_xxx] call sub_xxx pop rdx pop rcx mov r14d eax mov r13 rax shl r14d CONST sub r14d CONST jmp JUMP_ADDR_80	mov esi [rbp+CONST] mov rdx rbx sar rdx CONST sub esi CONST sub esi edx and r14d CONST mov [rbp+CONST] esi mov ecx esi jnz JUMP_ADDR_136	mov rdi [rbp+CONST] mov esi [CONST_VAR+CONST] test ecx ecx jle JUMP_ADDR_136	cmp esi CONST jnz JUMP_ADDR_397	nop [rax+rax+CONST]	xor r9d r9d	test eax eax jz JUMP_ADDR_267	mov r11d [rbp+CONST] test r11d r11d jz JUMP_ADDR_309	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_141	mov rdx [rax+CONST] cmp rdx [rax+CONST] jb JUMP_ADDR_385	mov [rbp+CONST] r9d mov esi CONST	mov rdi r12 call sub_xxx mov r9d [rbp+CONST] cmp eax CONST setz al	test al al jz JUMP_ADDR_311	mov ebx [rbp+CONST] test ebx ebx jnz JUMP_ADDR_146	mov rdi [rbp+CONST] call sub_xxx	mov r14d CONST jmp JUMP_ADDR_69	lea r8 [rcx+CONST] mov r13 rcx	add r13 CONST mov rax [r12+CONST] movzx esi [r13+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_259	lea rdi [rax+CONST] mov [r12+CONST] rdi mov [rax] sil	mov r14d r13d sub r14d ecx add r14d ebx cmp r8 r13 jnz JUMP_ADDR_148	mov rax [rbp+CONST] test [rax+CONST] CONST jz JUMP_ADDR_69	test dl dl jz JUMP_ADDR_69	movsxd r13 r15d mov esi CONST mov rdi r12 mov ebx r14d mov rdx r13 call sub_xxx jmp JUMP_ADDR_67	mov rax [r15+CONST] lea rsi unk_xxx add rdi CONST lea rdx [rax+CONST] mov rax [r15] mov [rbp+CONST] rdx shl rdx CONST lea rsi [CONST_VAR+rax*8] call sub_xxx mov rax [rbp+CONST] mov [rax] CONST mov rdx [rbp+CONST] add [rbp+CONST] CONST jmp JUMP_ADDR_90	mov rdi r12 mov [rbp+CONST] dl call sub_xxx movzx edx [rbp+CONST] cmp eax CONST setz al jmp JUMP_ADDR_62	sub rdx CONST mov [rbp+CONST] rdx jmp JUMP_ADDR_90	test ecx ecx js JUMP_ADDR_280	mov rdx r13 add ecx r14d mov rsi r15 call sub_xxx mov r8 rax mov rax [rbp+CONST] lea rdx [rax+CONST] mov [rbp+CONST] rdx mov rdx [rbp+CONST] mov [rdx+rax*8] r8 mov [rbp+CONST] CONST jmp JUMP_ADDR_115	lea r15 [rbp+CONST] lea rcx [rbp+CONST] movdqa xmm0 xmm2 mov esi CONST lea rdx [rbp+CONST] mov rdi r15 call sub_xxx mov r14d eax mov r13 rax shl r14d CONST sub r14d CONST jmp JUMP_ADDR_80	mov rsi [rbp+CONST] mov rdi [rbp+CONST] call sub_xxx mov rdx [rbp+CONST] test eax eax jns JUMP_ADDR_100	jmp JUMP_ADDR_92	mov [rbp+CONST] CONST	mov [rbp+CONST] esi movsxd rax [rbp+CONST] mov rsi [rbp+CONST] cmp rax rsi ja JUMP_ADDR_378	lea r13 ds:xxx mov rdi r13 call sub_xxx mov esi [rbp+CONST] test eax eax jnz JUMP_ADDR_166	cmp r13 CONST ja JUMP_ADDR_470	mov [rbp+CONST] CONST add r13 CONST mov [rbp+CONST] CONST and r13 CONST sub rsp r13 lea rax [rsp+CONST+var_xxx] and rax CONST mov [rbp+CONST] rax	mov rax [rbp+CONST] mov ebx [rbp+CONST] lea r13 [rax+CONST] test ebx ebx jz JUMP_ADDR_169	cmp [rbp+CONST] CONST jz JUMP_ADDR_438	mov eax [rbp+CONST] test eax eax jle JUMP_ADDR_478	mov rsi [rbp+CONST] sub eax CONST mov r15 r13 lea r14 [rbp+CONST] lea rbx [CONST_VAR+rax*4+CONST] xchg ax ax	mov rdi r14 add r15 CONST call sub_xxx mov [r15+CONST] eax cmp r15 rbx jnz JUMP_ADDR_171	mov eax [rbp+CONST] mov rbx rax lea rax [r13+rax*4+CONST] mov [rbp+CONST] ebx	mov rsi [rbp+CONST] test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_175	mov r11d [rbp+CONST] test r11d r11d jle JUMP_ADDR_427	mov esi [rbp+CONST] lea r15 [rax+CONST] mov [rax] esi mov esi CONST	mov eax [rbp+CONST] mov [rbp+CONST] r12 xor ebx ebx mov r12 r14 mov [rbp+CONST] CONST mov r14d esi mov [rbp+CONST] eax	cmp [rbp+CONST] ebx jg JUMP_ADDR_180	cmp [rbp+CONST] ebx jle JUMP_ADDR_184	cmp [rbp+CONST] CONST jle JUMP_ADDR_236	mov rdi r12 add ebx CONST add r15 CONST call sub_xxx mov [r15+CONST] eax test r14d r14d jnz JUMP_ADDR_182	cmp eax CONST jz JUMP_ADDR_238	mov r14d CONST cmp [rbp+CONST] ebx jg JUMP_ADDR_180	cmp [rbp+CONST] ebx jg JUMP_ADDR_179	mov r14 r12 mov r12 [rbp+CONST]	mov edx [r15+CONST] cmp edx [rbp+CONST] jnz JUMP_ADDR_187	mov edx [r15+CONST]	mov rdi r14 mov [rbp+CONST] edx call sub_xxx mov edx [rbp+CONST] cmp eax CONST mov esi eax setnz dil cmp eax CONST setnz al and dil al jnz JUMP_ADDR_191	mov rax [rbp+CONST] cmp rax CONST jz JUMP_ADDR_439	cmp [rbp+CONST] CONST jz JUMP_ADDR_390	mov edi CONST	fnstcw [rbp+CONST] movzx eax [rbp+CONST] and ax CONST cmp ax CONST jz JUMP_ADDR_354	ja JUMP_ADDR_256	test ax ax jnz JUMP_ADDR_240	cmp esi CONST jg JUMP_ADDR_408	nop [rax+rax+CONST]	mov eax [rbp+CONST] add eax [rbp+CONST] cmp eax ebx jl JUMP_ADDR_199	jmp JUMP_ADDR_200	sub ebx CONST sub r15 CONST cmp ebx eax jle JUMP_ADDR_200	cmp [r15+CONST] CONST jz JUMP_ADDR_198	test ebx ebx jnz JUMP_ADDR_204	mov rax [rbp+CONST] test [rax+CONST] CONST jnz JUMP_ADDR_204	mov eax [rbp+CONST] cmp [r15+CONST] eax jz JUMP_ADDR_416	nop [rax+rax+CONST]	mov r9 [rbp+CONST] test r9 r9 jz JUMP_ADDR_223	mov ecx [rbp+CONST] mov esi [rbp+CONST] mov ebx ecx cmp ecx esi jz JUMP_ADDR_212	mov [rbp+CONST] CONST movzx eax [r9] lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_223	mov edx ecx xor esi esi jmp JUMP_ADDR_210	movzx eax [r9+CONST] add r9 CONST add esi CONST sub edx edi cmp al CONST ja JUMP_ADDR_211	test al al jz JUMP_ADDR_480	movsx edi al cmp edx edi ja JUMP_ADDR_208	mov [rbp+CONST] esi	mov edi [rbp+CONST] test edi edi jz JUMP_ADDR_223	movsxd rax [rbp+CONST] movsxd rcx edi mov rdx r15 mov [rbp+CONST] rcx lea rsi [r13+rax*4+CONST] add rax rcx lea r14 ds:xxx sub rdx rsi lea rdi [r13+r14+CONST] sar rdx CONST call sub_xxx mov r8 [rbp+CONST] lea r9 [r13+r14+CONST] mov r10d [rbp+CONST] mov rcx [rbp+CONST] movsx edi [r8]	mov eax ebx mov rdx r9 sub ebx edi nop [rax+rax+CONST]	lea esi [rax+CONST] sub rdx CONST mov rax rsi mov esi [r13+rsi*4+CONST] mov [rdx+CONST] esi cmp eax ebx jnz JUMP_ADDR_215	lea eax [CONST_VAR+CONST] mov rdx rax neg rax not rdx lea rdx [r9+rdx*4] lea r9 [r9+rax*4+CONST] mov [rdx] r10d movzx eax [r8+CONST] cmp al CONST ja JUMP_ADDR_221	test al al jz JUMP_ADDR_258	add r8 CONST	movsx edi al cmp edi ebx jb JUMP_ADDR_214	nop [rax+rax+CONST]	lea eax [rbx+CONST] sub r9 CONST mov rbx rax mov eax [r13+rax*4+CONST] mov [r9+CONST] eax cmp r9 r13 ja JUMP_ADDR_221	lea r15 [r15+rcx*4]	mov edx [rbp+CONST] cmp edx CONST jz JUMP_ADDR_232	mov ecx [rbp+CONST] mov eax [rbp+CONST] mov edi CONST test ecx ecx jnz JUMP_ADDR_484	mov [r15] edx lea rsi [r15+CONST] mov [r15+CONST] edi cmp eax CONST jle JUMP_ADDR_266	mov ecx CONST nop [rax]	lea ecx [rcx+rcx*4] add ecx ecx cmp eax ecx jge JUMP_ADDR_227	nop [rax+CONST]	movsxd rcx ecx add rsi CONST mov rdi rcx imul rcx CONST mov edx edi sar edx CONST sar rcx CONST sub ecx edx cdq idiv ecx add eax CONST mov [CONST_VAR+CONST] eax mov eax edx cmp edi CONST jg JUMP_ADDR_229	mov [rbp+CONST] edx	add eax CONST lea r15 [CONST_VAR+CONST] mov [CONST_VAR] eax	mov rcx [rbp+CONST] mov eax [rbp+CONST] mov rbx r15 sub rbx r13 movzx r14d [rcx+CONST] test eax eax jnz JUMP_ADDR_132	test r14b CONST jnz JUMP_ADDR_132	mov esi [rbp+CONST] mov rax rbx sar rax CONST sub esi eax mov [rbp+CONST] esi test r14b CONST jz JUMP_ADDR_395	xor r9d r9d jmp JUMP_ADDR_268	mov rax [rbp+CONST] cmp [rax] CONST jnz JUMP_ADDR_180	jmp JUMP_ADDR_184	mov eax [rbp+CONST] add [rbp+CONST] CONST test eax eax jle JUMP_ADDR_177	add [rbp+CONST] CONST mov edi [rbp+CONST] add eax edi mov [rbp+CONST] eax jmp JUMP_ADDR_177	cmp ax CONST jnz JUMP_ADDR_EXCEEDED	mov r8d [rbp+CONST] test r8d r8d jz JUMP_ADDR_196	cmp esi CONST jg JUMP_ADDR_244	test dil dil jz JUMP_ADDR_196	mov esi [r15+CONST] test ebx ebx jz JUMP_ADDR_356	mov edx [rbp+CONST] lea rax [r15+CONST] xor edi edi cmp esi [rbp+CONST] jnz JUMP_ADDR_248	jmp JUMP_ADDR_456	mov [rax] CONST mov esi [rax+CONST] sub rax CONST add edi CONST cmp esi edx jz JUMP_ADDR_456	cmp esi CONST jz JUMP_ADDR_247	cmp edi [rbp+CONST] jnz JUMP_ADDR_252	mov edi [rbp+CONST] test edi edi jle JUMP_ADDR_252	sub [rbp+CONST] CONST cmp esi [rbp+CONST] jz JUMP_ADDR_458	add esi CONST mov [rax] esi	cmp esi [rbp+CONST] jz JUMP_ADDR_357	mov eax [rbp+CONST] add eax [rbp+CONST] cmp eax ebx jl JUMP_ADDR_199	jmp JUMP_ADDR_204	cmp ax CONST jz JUMP_ADDR_196	jmp UNK_JUMP_ADDR	movzx eax [r8] jmp JUMP_ADDR_219	mov rdi r12 mov [rbp+CONST] rcx mov [rbp+CONST] dl mov [rbp+CONST] r8 call sub_xxx mov r8 [rbp+CONST] movzx edx [rbp+CONST] cmp eax CONST mov rcx [rbp+CONST] jnz JUMP_ADDR_150	jmp JUMP_ADDR_146	mov [rbp+CONST] eax movsxd rax esi test eax eax js JUMP_ADDR_426	add rax CONST mov [rbp+CONST] rax	mov eax [rbp+CONST] mov esi CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] eax jmp JUMP_ADDR_123	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_507	lea rsi [rax+CONST] mov [r12+CONST] rsi mov [rax] CONST jmp JUMP_ADDR_56	mov [r15+CONST] CONST lea rsi [r15+CONST] jmp JUMP_ADDR_231	mov rax [rbp+CONST] movzx r14d [rax+CONST]	mov eax r14d test r14b CONST jz JUMP_ADDR_304	mov r10d [rbp+CONST] test r10d r10d jz JUMP_ADDR_405	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_EXCEEDED	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_EXCEEDED	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_311	mov [rbp+CONST] CONST mov eax [rbp+CONST] movsxd rdx eax test eax eax js JUMP_ADDR_410	mov eax [rbp+CONST] mov [rbp+CONST] eax test eax eax jnz JUMP_ADDR_401	movsxd rax [rbp+CONST] cmp [rbp+CONST] CONST mov [rbp+CONST] CONST lea esi [rax+CONST] lea rax [rdx+rax+CONST] mov [rbp+CONST] rax mov eax [rbp+CONST] mov [rbp+CONST] esi mov esi CONST mov [rbp+CONST] eax jnz JUMP_ADDR_124	jmp JUMP_ADDR_377	cmp edx [rbp+CONST] jge JUMP_ADDR_121	mov edi [rbp+CONST] lea eax [rdx+CONST] mov [rbp+CONST] eax sub edi eax mov [rbp+CONST] edi	movsxd rax [rbp+CONST] mov [rbp+CONST] CONST add rax CONST mov [rbp+CONST] rax jmp JUMP_ADDR_122	mov rsi r15 mov rdx r13 mov ecx r14d mov r15d CONST call sub_xxx mov esi [rbp+CONST] mov [rbp+CONST] CONST lea rbx unk_xxx mov r8 rax mov rax [rbp+CONST] mov [rbp+CONST] r12 neg esi lea rdx [rax+CONST] mov [rbp+CONST] rdx mov rdx [rbp+CONST] mov [rdx+rax*8] r8 mov [rbp+CONST] CONST mov [rbp+CONST] esi jmp JUMP_ADDR_288	lea r10 [rcx+rax*8+CONST] mov r8 r9 mov rcx rsi mov rsi r10 call sub_xxx	mov rsi [rbp+CONST] mov r8 [rbx+CONST] add r8 rsi test rax rax jz JUMP_ADDR_291	sub r8 CONST mov [rbp+CONST] r8	mov r10 [rbp+CONST] mov r13 r8 lea rdx ds:xxx mov edi [rbp+CONST] sub r13 rsi lea rax [r10+rdx+CONST] add r13 CONST lea r9d [CONST_VAR+CONST] mov esi edi bsr rcx [rax] shl r13d CONST xor rcx CONST sub r13d ecx mov r12d ecx sub r13d CONST cmp r9d r13d jz JUMP_ADDR_292	lea eax [CONST_VAR+CONST] cmp r13d eax jle JUMP_ADDR_296	lea rax unk_xxx sub r15d CONST cmp rbx rax jz JUMP_ADDR_442	test esi esi jle JUMP_ADDR_473	sub rbx CONST cmp [rbx+CONST] esi jg JUMP_ADDR_286	mov rax [rbx+CONST] mov rdi [rbp+CONST] lea rcx unk_xxx mov r9 [rbp+CONST] mov rsi [rbp+CONST] lea rdx [rax+CONST] mov rax [rbx] cmp r9 rdx jl JUMP_ADDR_281	mov r8 rdx lea rcx [rcx+rax*8+CONST] mov rdx r9 call sub_xxx jmp JUMP_ADDR_282	sub r8 CONST mov [rbp+CONST] r8 jmp JUMP_ADDR_284	cmp ecx CONST jg JUMP_ADDR_465	mov ecx CONST mov esi CONST mov [rbp+CONST] CONST sub ecx r12d shl rsi cl mov [rbp+CONST] rsi mov rcx rsi lea esi [CONST_VAR+CONST] cmp r13d esi jle JUMP_ADDR_296	cmp [rax] rcx jnb JUMP_ADDR_388	nop [rax+CONST]	mov esi edi mov eax CONST mov ecx r15d sub esi r13d shl eax cl or [rbp+CONST] eax mov eax r12d sub eax esi test esi esi mov [rbp+CONST] esi cmovs r12d eax mov rax [r10] test rax rax jnz JUMP_ADDR_502	lea rdx [r10+CONST] mov eax CONST nop [rax+rax+CONST]	mov rcx [rdx] lea r9d [rax+CONST] movsxd rdi eax mov r14 rdx lea r11 ds:xxx mov r13 rax add rdx CONST add rax CONST test rcx rcx jz JUMP_ADDR_298	cmp r12d CONST jnz JUMP_ADDR_402	sub r8 rdi test r8 r8 jle JUMP_ADDR_303	mov r9 [rbp+CONST] lea rcx [r10+r13*8] xor eax eax nop [rax+CONST]	mov rdx [rcx+rax*8] mov [r9+rax*8] rdx mov r8 [rbp+CONST] add rax CONST sub r8 rdi cmp r8 rax jg JUMP_ADDR_302	mov [rbp+CONST] r8 jmp JUMP_ADDR_286	and r14d CONST jz JUMP_ADDR_312	mov r8d [rbp+CONST] test r8d r8d jz JUMP_ADDR_488	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_EXCEEDED	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_EXCEEDED	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_311	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_EXCEEDED	lea rdx [rax+CONST] mov [r12+CONST] rdx mov [rax] CONST	mov rax [rbp+CONST] add r9d CONST movzx eax [rax+CONST]	test al CONST jnz JUMP_ADDR_315	mov rax [rbp+CONST] cmp [rax+CONST] CONST jnz JUMP_ADDR_315	mov edi [rbp+CONST] test edi edi jg JUMP_ADDR_412	mov ecx [rbp+CONST] mov rax [rbp+CONST] test ecx ecx jnz JUMP_ADDR_344	test [rax+CONST] CONST jz JUMP_ADDR_318	mov rax [rbp+CONST] mov rax [rax] mov eax [rax+CONST] imul rax [rbp+CONST] mov [rbp+CONST] rax	mov rdi [rbp+CONST] mov [rbp+CONST] r9d call sub_xxx mov rdi [rbp+CONST] mov r9d [rbp+CONST] mov rbx rax test rdi rdi jz JUMP_ADDR_448	call sub_xxx mov r9d [rbp+CONST] mov r14 rax movsxd rax [rbp+CONST] imul rax r14	mov rsi [rbp+CONST] lea rdx [CONST_VAR+rbx+CONST] add rax rdx mov edx [rbp+CONST] mov [rbp+CONST] rax test edx edx jnz JUMP_ADDR_498	mov rax [rbp+CONST] add rax CONST and rax CONST sub rsp rax lea rax [rsp+CONST+var_xxx] and rax CONST mov [rbp+CONST] rax	cmp r15 r13 jbe JUMP_ADDR_492	mov [rbp+CONST] r14 mov rdi [rbp+CONST] mov r14 rbx mov [rbp+CONST] r12 mov ebx [rbp+CONST] mov r12 r15 mov r15 r13 mov [rbp+CONST] r9d mov r13d [rbp+CONST] jmp JUMP_ADDR_327	cmp r13d edx jz JUMP_ADDR_343	mov [CONST_VAR] dl add rdi CONST	add r15 CONST cmp r12 r15 jbe JUMP_ADDR_329	mov edx [r15] cmp edx ebx jnz JUMP_ADDR_324	mov rsi [rbp+CONST] mov rdx r14 add r15 CONST call sub_xxx mov rdi rax cmp r12 r15 ja JUMP_ADDR_327	mov rax [rbp+CONST] mov r9d [rbp+CONST] mov r12 [rbp+CONST] test [rax+CONST] CONST jnz JUMP_ADDR_496	mov r13 [rbp+CONST]	mov rbx rdi sub rbx r13 mov r8 rbx cmp rbx CONST jle JUMP_ADDR_367	mov rbx [r12+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_EXCEEDED	mov rax [rbx+CONST]	mov [rbp+CONST] r9d mov rdx r8 mov rsi r13 mov rdi r12 mov [rbp+CONST] r8 call rax mov r8 [rbp+CONST] mov r9d [rbp+CONST] cmp rax r8 jnz JUMP_ADDR_EXCEEDED	lea r14d [r9+r8]	mov r10d [rbp+CONST] test r10d r10d jnz JUMP_ADDR_479	mov rax [rbp+CONST] test [rax+CONST] CONST jz JUMP_ADDR_69	mov ecx [rbp+CONST] test ecx ecx jle JUMP_ADDR_69	mov r9d [rbp+CONST] movsxd rbx ecx mov esi [rax+CONST] mov rdi r12 mov rdx rbx test r9d r9d jnz JUMP_ADDR_407	call sub_xxx	cmp rax rbx jnz JUMP_ADDR_EXCEEDED	add r14d [rbp+CONST] jmp JUMP_ADDR_69	mov rdx [rbp+CONST] mov rsi [rbp+CONST] call sub_xxx mov rdi rax jmp JUMP_ADDR_326	test [rax+CONST] CONST jnz JUMP_ADDR_497	sar rbx CONST mov r8 rbx cmp r15 r13 jnz JUMP_ADDR_365	lea r15d [rbx+CONST] test rbx rbx jz JUMP_ADDR_EXCEEDED	mov rdi r12 mov r12d r15d mov r15d r9d jmp JUMP_ADDR_352	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_353	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_144	lea r14d [r12+r15] sub r14d ebx sub rbx CONST jz JUMP_ADDR_464	mov rax [CONST_VAR+CONST] add r13 CONST mov esi [r13+CONST] test rax rax jnz JUMP_ADDR_348	mov [rbp+CONST] rdi call sub_xxx mov rdi [rbp+CONST] cmp eax CONST setz al jmp JUMP_ADDR_350	mov r9d [rbp+CONST] test r9d r9d jnz JUMP_ADDR_196	jmp JUMP_ADDR_242	mov rax r15	mov edi [rbp+CONST] cmp [rax+CONST] edi jnz JUMP_ADDR_359	sub rax CONST	sub rax CONST cmp rax r13 jnb JUMP_ADDR_362	jmp JUMP_ADDR_421	mov [rax] CONST sub rax CONST cmp r13 rax ja JUMP_ADDR_421	mov esi [rax] cmp esi CONST jz JUMP_ADDR_361	cmp rax r13 jb JUMP_ADDR_421	add esi CONST mov [rax] esi jmp JUMP_ADDR_196	mov rbx [r12+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_EXCEEDED	mov [rbp+CONST] CONST mov rax [rbx+CONST] jmp JUMP_ADDR_334	mov r15 r13 mov r14d r9d test rbx rbx jnz JUMP_ADDR_371	jmp JUMP_ADDR_493	lea rcx [rax+CONST] mov [r12+CONST] rcx mov [rax] dl	mov rdx r13 lea eax [r14+r15] sub rdx r15 sub eax r13d add rdx rbx jz JUMP_ADDR_382	add r15 CONST mov rax [r12+CONST] movzx edx [r15+CONST] cmp rax [r12+CONST] jb JUMP_ADDR_369	movzx esi dl mov rdi r12 call sub_xxx cmp eax CONST jnz JUMP_ADDR_370	mov r11d [rbp+CONST] mov r14d eax test r11d r11d jnz JUMP_ADDR_146	mov rdi [rbp+CONST] call sub_xxx mov rdi [rbp+CONST] call sub_xxx jmp JUMP_ADDR_69	mov [rbp+CONST] CONST mov eax CONST	add [rbp+CONST] rax	mov rax CONST cmp [rbp+CONST] rax jbe JUMP_ADDR_163	mov rax CONST mov r14d CONST mov fs:xxx CONST jmp JUMP_ADDR_69	mov r14d ebx jmp JUMP_ADDR_69	mov rcx [rbp+CONST] mov rcx [rcx+CONST] mov edi [rcx+CONST] mov [rbp+CONST] edi jmp JUMP_ADDR_28	mov rcx [rbp+CONST] mov rcx [rcx+CONST] mov rdi [rcx+CONST] mov [rbp+CONST] rdi jmp JUMP_ADDR_78	mov r14d eax jmp JUMP_ADDR_336	movmskps ebx xmm2 and ebx CONST	mov rax [rbp+CONST] mov [rbp+CONST] ebx lea r13 unk_xxx lea rcx GLOBAL_VAR movsxd rdx [rax+CONST] mov rax CONST mov rax fs:xxx test [rax+rdx*2+CONST] CONST lea rax unk_xxx cmovz r13 rax lea rax unk_xxx cmovz rcx rax jmp JUMP_ADDR_10	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_311	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_EXCEEDED	lea rsi [rax+CONST] mov [r12+CONST] rsi mov [rax] CONST jmp JUMP_ADDR_56	jz JUMP_ADDR_417	mov esi edi jmp JUMP_ADDR_286	mov r9 [rbp+CONST] test rax rax jnz JUMP_ADDR_393	jmp JUMP_ADDR_191	sub rax CONST jz JUMP_ADDR_191	cmp [r9+rax*8+CONST] CONST jz JUMP_ADDR_392	jmp JUMP_ADDR_190	mov rax [rbp+CONST] mov esi [rax+CONST] mov eax [rbp+CONST] test eax eax jle JUMP_ADDR_235	cmp esi CONST jz JUMP_ADDR_235	movsxd r14 [rbp+CONST] mov eax [rbp+CONST] mov rdi r12 mov rdx r14 test eax eax jz JUMP_ADDR_472	call sub_xxx	cmp r14 rax jnz JUMP_ADDR_144	mov eax [rbp+CONST] mov r9d [rbp+CONST] jmp JUMP_ADDR_137	lea rax [rdx+CONST] mov [rbp+CONST] rax jmp JUMP_ADDR_263	xor eax eax tzcnt rax rcx mov ecx CONST sub ecx r12d mov r12 [rbp+CONST] cmp eax ecx jge JUMP_ADDR_EXCEEDED	movsxd r13 r9d mov rdx r8 lea rsi [r10+r11+CONST] sub rdx r13	mov rdi r12 call sub_xxx mov rax [rbp+CONST] mov esi [rbp+CONST] sub rax r13 mov [rbp+CONST] rax jmp JUMP_ADDR_286	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_EXCEEDED	lea rdx [rax+CONST] mov [r12+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_311	call sub_xxx jmp JUMP_ADDR_341	and edx CONST jz JUMP_ADDR_243	jmp JUMP_ADDR_244	mov [rbp+CONST] CONST mov edx CONST jmp JUMP_ADDR_274	mov [rbp+CONST] CONST mov eax [rbp+CONST] mov [rbp+CONST] eax jmp JUMP_ADDR_279	mov esi [rbp+CONST] movsxd r14 [rbp+CONST] mov [rbp+CONST] r9d mov rdi r12 test esi esi mov rdx r14 mov esi CONST jz JUMP_ADDR_500	call sub_xxx mov r9d [rbp+CONST]	cmp rax r14 jnz JUMP_ADDR_144	add r9d [rbp+CONST] jmp JUMP_ADDR_315	sub r15 CONST jmp JUMP_ADDR_204	mov rax [rbp+CONST] cmp [r10+rdx+CONST] rax jb JUMP_ADDR_296	mov esi edi jmp JUMP_ADDR_286	mov esi eax movsxd rdx edx sar esi CONST lea rdi [CONST_VAR+rdx*8] mov rdx r13 shr esi CONST lea ecx [rax+CONST_VAR] and ecx CONST sub ecx esi mov rsi r15 call sub_xxx mov ecx [rbp+CONST] mov rsi [rbp+CONST] add r14d ecx lea edx [r14+CONST] cmovns edx r14d sar edx CONST movsxd rdx edx add rsi rdx mov [rbp+CONST] rsi test rax rax jz JUMP_ADDR_85	lea rdi [CONST_VAR+CONST] mov [rbp+CONST] rdi mov rdi [rbp+CONST] mov [CONST_VAR+rsi*8] rax jmp JUMP_ADDR_85	cmp [rbp+CONST] CONST jz JUMP_ADDR_490	mov rax [rbp+CONST] cmp [rbp+CONST] CONST mov [rax+CONST] CONST sbb eax eax and eax CONST sub eax CONST add [rbp+CONST] eax jnz JUMP_ADDR_424	mov [rbp+CONST] CONST	mov eax [rbp+CONST] mov ecx [rbp+CONST] add eax ebx cmp eax ecx jle JUMP_ADDR_196	sub eax ecx movsxd rsi eax sub ebx eax shl rsi CONST sub r15 rsi jmp JUMP_ADDR_196	mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_263	mov r10d [rbp+CONST] test r10d r10d jle JUMP_ADDR_483	cmp [rbp+CONST] CONST jg JUMP_ADDR_175	mov rdx [rbp+CONST] cmp [rdx] CONST jnz JUMP_ADDR_175	mov r15 rax mov esi CONST jmp JUMP_ADDR_176	test ecx ecx jz JUMP_ADDR_108	xor eax eax mov r9 [r9+r13] tzcnt rax r8 mov r8d eax test r9 r9 jz JUMP_ADDR_501	xor r8d r8d mov r15d CONST tzcnt r8 r9 cmp eax r8d cmovle r8d eax sub r15d ecx	movsxd rbx r14d cmp r15d r8d jle JUMP_ADDR_476	sub r14d CONST sub r13 CONST mov ecx r15d movsxd r14 r14d lea rsi [CONST_VAR+r13] sub rdx r14 call sub_xxx mov rdi [rbp+CONST] mov ecx r15d sub [rbp+CONST] rbx mov rdx [rbp+CONST] lea rsi [CONST_VAR+r13] sub rdx r14 call sub_xxx mov rdx [rbp+CONST] mov rcx [rbp+CONST] mov rax rdx sub rax r14 cmp [rcx+rax*8+CONST] CONST jnz JUMP_ADDR_437	mov rax rdx sub rax rbx	mov [rbp+CONST] rax jmp JUMP_ADDR_115	mov rax [rbp+CONST] mov ebx [rbp+CONST] mov [rbp+CONST] CONST lea r14 [rbp+CONST] sub [rbp+CONST] CONST mov [rax+CONST] CONST lea r15 [rax+CONST] mov [rax+CONST] ebx jmp JUMP_ADDR_176	mov r9 [rbp+CONST] cmp [r9] CONST jz JUMP_ADDR_191	cmp [rbp+CONST] CONST mov eax CONST jz JUMP_ADDR_393	jmp JUMP_ADDR_190	mov r12 [rbp+CONST] test esi esi jle JUMP_ADDR_447	mov rdx [rbp+CONST] mov rdi [rbp+CONST] mov ecx CONST mov rsi [rbp+CONST] call sub_xxx mov rsi [rbp+CONST] xor edi edi mov edx CONST mov r8 [rbp+CONST] mov eax [rbp+CONST] mov ecx edx mov [rbp+CONST] r8 tzcnt rdi [CONST_VAR] cmp eax edx cmovle ecx eax cmp ecx edi jle JUMP_ADDR_494	mov r9d CONST mov rdi [rbp+CONST] mov rdx r8 sub r9d ecx mov ecx r9d call sub_xxx test rax rax jz JUMP_ADDR_446	mov rdx [rbp+CONST] lea rcx [rdx+CONST] mov [rbp+CONST] rcx mov rcx [rbp+CONST] mov [rcx+rdx*8] rax	mov rax [rbp+CONST] or [rbp+CONST] CONST mov [rbp+CONST] rax	mov eax [rbp+CONST] mov [rbp+CONST] eax jmp JUMP_ADDR_115	xor eax eax xor r14d r14d jmp JUMP_ADDR_320	lea eax [r9+CONST] mov [rbp+CONST] edi cdqe jmp JUMP_ADDR_376	lea eax [rdx+CONST] xor edx edx div ecx add eax edi mov [rbp+CONST] eax add eax CONST cdqe jmp JUMP_ADDR_376	movsxd rbx edx jmp JUMP_ADDR_84	mov [rbp+CONST] rcx mov esi CONST mov [rbp+CONST] dl	mov rdi r12 call sub_xxx movzx edx [rbp+CONST] mov rcx [rbp+CONST] cmp eax CONST setz al	test al al jz JUMP_ADDR_56	mov r14d CONST jmp JUMP_ADDR_69	cmp edi [rbp+CONST] jnz JUMP_ADDR_458	mov edi [rbp+CONST] test edi edi setnle sil cmp sil CONST adc edi CONST mov [rbp+CONST] edi	cmp [rbp+CONST] CONST mov esi [rax] jnz JUMP_ADDR_253	cmp [rbp+CONST] CONST jnz JUMP_ADDR_253	mov rdi [rbp+CONST] test [CONST_VAR+CONST] CONST jz JUMP_ADDR_253	mov rdi [rbp+CONST] add rdi CONST cmp rax rdi jnz JUMP_ADDR_253	mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_253	sub [rbp+CONST] CONST jmp JUMP_ADDR_253	mov [rbp+CONST] CONST mov r12 rdi jmp JUMP_ADDR_336	lea rdi [rbp+CONST] mov ecx CONST mov rax CONST mov edx CONST mov rsi rdi sub ecx r12d mov [rbp+CONST] rax mov [rbp+CONST] CONST call sub_xxx mov edi [rbp+CONST] lea eax [CONST_VAR+CONST] mov esi edi cmp eax r13d jge JUMP_ADDR_EXCEEDED	lea eax [CONST_VAR+CONST] cmp eax r13d jnz JUMP_ADDR_286	mov r8 [rbp+CONST] mov r10 [rbp+CONST] mov rcx [rbp+CONST] lea rdx ds:xxx lea rax [r10+rdx+CONST] jmp JUMP_ADDR_294	movmskpd ebx xmm0 and ebx CONST jmp JUMP_ADDR_384	fxam fnstsw ax fstp st mov ebx eax and ebx CONST jmp JUMP_ADDR_384	mov rdi r13 mov [rbp+CONST] esi call sub_xxx mov [rbp+CONST] rax test rax rax jz JUMP_ADDR_146	mov [rbp+CONST] CONST mov esi [rbp+CONST] mov [rbp+CONST] CONST jmp JUMP_ADDR_167	call sub_xxx jmp JUMP_ADDR_399	mov r12 [rbp+CONST] jmp JUMP_ADDR_447	mov r15d CONST tzcnt r8 r8 sub r15d ecx test r14d r14d jnz JUMP_ADDR_434	xor r14d r14d xor ebx ebx cmp r15d r8d jg JUMP_ADDR_510	sub rdx rbx mov ecx r15d add r14d CONST call sub_xxx mov rdi [rbp+CONST] mov ecx r15d movsxd r14 r14d mov rdx [rbp+CONST] sub [rbp+CONST] r14 lea rsi [CONST_VAR+r13] sub rdx rbx call sub_xxx mov rdx [rbp+CONST] mov rcx [rbp+CONST] mov rax rdx sub rax rbx cmp [rcx+rax*8+CONST] CONST jnz JUMP_ADDR_437	mov rax rdx sub rax r14 jmp JUMP_ADDR_437	mov [rbp+CONST] CONST mov rax r13 lea r14 [rbp+CONST] jmp JUMP_ADDR_173	mov rdi [rbp+CONST] call sub_xxx mov rdi [rbp+CONST] call sub_xxx mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_337	lea eax [rdx+CONST] xor edx edx div edi add eax esi mov [rbp+CONST] eax jmp JUMP_ADDR_212	mov [rbp+CONST] rcx mov esi CONST mov [rbp+CONST] dl	mov rdi r12 call sub_xxx movzx edx [rbp+CONST] mov rcx [rbp+CONST] cmp eax CONST setz al jmp JUMP_ADDR_454	mov [rbp+CONST] CONST mov r15 rax xor ebx ebx jmp JUMP_ADDR_185	cmp [rbp+CONST] CONST jnz JUMP_ADDR_486	cmp eax CONST jz JUMP_ADDR_EXCEEDED	mov edi CONST jmp JUMP_ADDR_225	mov [rbp+CONST] rcx mov esi CONST mov [rbp+CONST] dl jmp JUMP_ADDR_453	mov rax [r12+CONST] cmp rax [r12+CONST] jnb JUMP_ADDR_EXCEEDED	lea rdx [rax+CONST] mov [r12+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_311	mov esi [rbp+CONST] mov rax [rbp+CONST] cmp [rbp+CONST] esi jz JUMP_ADDR_EXCEEDED	add [rbp+CONST] CONST lea r13 [rax+CONST] mov [rax+CONST] CONST jmp JUMP_ADDR_424	mov rax [rbp+CONST] test [rax+CONST] CONST jnz JUMP_ADDR_495	mov r14d r9d jmp JUMP_ADDR_336	mov rdi [rbp+CONST] mov rdx r8 call sub_xxx jmp JUMP_ADDR_446	mov rdi [rbp+CONST]	mov rax [rbp+CONST] mov rbx [rbp+CONST] mov rsi rdi mov [rbp+CONST] r9d add rbx rax mov rdi rax mov rdx rbx call sub_xxx mov r9d [rbp+CONST] mov rdi rbx mov r13 rax jmp JUMP_ADDR_331	xor edx edx xor esi esi xor edi edi mov [rbp+CONST] r9d call sub_xxx mov r9d [rbp+CONST] jmp JUMP_ADDR_345	mov rdi rax mov [rbp+CONST] r9d call sub_xxx mov r9d [rbp+CONST] test rax rax mov [rbp+CONST] rax jnz JUMP_ADDR_322	jmp JUMP_ADDR_145	call sub_xxx mov r9d [rbp+CONST] jmp JUMP_ADDR_414	mov r15d CONST sub r15d ecx jmp JUMP_ADDR_434	cmp r12d CONST jz JUMP_ADDR_EXCEEDED	mov ecx CONST tzcnt rax rax sub ecx r12d cmp ecx eax jg JUMP_ADDR_506	mov r12 [rbp+CONST] xor r13d r13d	mov rdx r8 mov rsi r10 jmp JUMP_ADDR_404	mov rdi [rbp+CONST] mov rdx r8 mov rsi r10 lea ecx [r12+CONST] call sub_xxx mov rdx [rbp+CONST] mov esi [rbp+CONST] mov r8 rax mov rax [rbp+CONST] add rax CONST mov [rbp+CONST] rax mov [rdx+rax*8+CONST] r8 jmp JUMP_ADDR_286	mov [rbp+CONST] rcx mov esi CONST mov [rbp+CONST] dl jmp JUMP_ADDR_482	mov esi CONST mov rdi r12 mov [rbp+CONST] rcx mov [rbp+CONST] dl call sub_xxx movzx edx [rbp+CONST] mov rcx [rbp+CONST] cmp eax CONST jnz JUMP_ADDR_56	jmp JUMP_ADDR_146	mov rsi rdi mov [rbp+CONST] ecx call sub_xxx mov rdi [rbp+CONST] mov ecx [rbp+CONST] mov rdx [rbp+CONST] mov rsi rdi call sub_xxx test rax rax jz JUMP_ADDR_115	mov rdx [rbp+CONST] lea rcx [rdx+CONST] mov [rbp+CONST] rcx mov rcx [rbp+CONST] mov [rcx+rdx*8] rax jmp JUMP_ADDR_115	mov r10 [rbp+CONST] mov r8 [rbp+CONST] jmp JUMP_ADDR_296	mov [rbp+CONST] r8 mov [rbp+CONST] r9d call sub_xxx mov rax [rbx+CONST] mov r9d [rbp+CONST] mov r8 [rbp+CONST] jmp JUMP_ADDR_334	mov [rbp+CONST] r9d mov esi CONST	mov rdi r12 call sub_xxx mov r9d [rbp+CONST] cmp eax CONST setz al jmp JUMP_ADDR_143	mov [rbp+CONST] r8 mov [rbp+CONST] r9d call sub_xxx mov rax [rbx+CONST] mov [rbp+CONST] CONST mov r9d [rbp+CONST] mov r8 [rbp+CONST] jmp JUMP_ADDR_334	movsxd r13 edi mov r10 r14 sub r8 r13 jmp JUMP_ADDR_505	mov [rbp+CONST] r9d mov esi CONST jmp JUMP_ADDR_142	mov esi [rbp+CONST] mov [rax] CONST mov [rax+CONST] esi mov rax [rbp+CONST] test [rax+CONST] CONST jnz JUMP_ADDR_EXCEEDED	test ebx ebx jz JUMP_ADDR_EXCEEDED	movsxd rax [rbp+CONST] mov rdi [rbp+CONST] mov [CONST_VAR+rax*4+CONST] CONST lea ebx [rbx+rax+CONST]	mov rax [rbp+CONST] add [rbp+CONST] CONST mov r13 [rbp+CONST] movsxd rsi [rax+CONST] mov rax CONST mov rax fs:xxx mov [rbp+CONST] CONST movzx eax [rax+rsi*2] and ax CONST cmp ax CONST sbb eax eax and eax CONST add eax CONST mov [rbp+CONST] eax jmp JUMP_ADDR_424	test esi esi jz JUMP_ADDR_115	mov rsi [rbp+CONST] tzcnt rax rax mov r8d eax mov r13 [CONST_VAR] test r13 r13 jz JUMP_ADDR_EXCEEDED	xor r8d r8d mov r15d CONST mov rsi rdi tzcnt r8 r13 cmp eax r8d cmovle r8d eax sub r15d ecx xor r13d r13d jmp JUMP_ADDR_475	mov esi CONST mov rdi r12 mov [rbp+CONST] rcx mov [rbp+CONST] dl call sub_xxx movzx edx [rbp+CONST] mov rcx [rbp+CONST] cmp eax CONST jnz JUMP_ADDR_56	jmp JUMP_ADDR_146	mov [rbp+CONST] CONST mov r14d r9d jmp JUMP_ADDR_336	mov r8d [rbp+CONST] test r8d r8d jnz JUMP_ADDR_146	mov rdi [rbp+CONST] call sub_xxx jmp JUMP_ADDR_145	mov [rbp+CONST] r9d mov esi CONST jmp JUMP_ADDR_142	mov [rbp+CONST] r9d mov esi CONST jmp JUMP_ADDR_EXCEEDED	mov [rbp+CONST] r9d mov esi CONST jmp JUMP_ADDR_EXCEEDED	mov r15d CONST mov rsi rdi sub r15d ecx jmp JUMP_ADDR_475	mov ebx [rbp+CONST] jmp JUMP_ADDR_EXCEEDED	call sub_xxx	mov edx CONST lea rsi unk_xxx mov rdi r13 call sub_xxx mov eax [rbp+CONST] mov [r13+CONST] eax lea rax [r13+CONST] cmp rax r15 jbe JUMP_ADDR_EXCEEDED	add r15 CONST jmp JUMP_ADDR_232	jmp UNK_JUMP_ADDR	xor r13d r13d xor edi edi jmp JUMP_ADDR_300	mov rdx r15 lea rdi [r13+CONST] mov esi CONST add r15 CONST sub rdx rax sar rdx CONST call sub_xxx jmp JUMP_ADDR_232	endbr64 mov rax CONST mov r8 rsi mov rcx rdx mov rdx r8 mov rsi fs:xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap___guess_grouping
endbr64 movzx edx [CONST_VAR] xor r8d r8d lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_4	jmp JUMP_ADDR_5	movzx edx [CONST_VAR+CONST] add rsi CONST add r8d CONST sub edi ecx cmp dl CONST ja JUMP_ADDR_5	test dl dl jz JUMP_ADDR_6	movsx ecx dl cmp edi ecx ja JUMP_ADDR_2	mov eax r8d retn	lea eax [CONST_VAR+CONST] xor edx edx div ecx add r8d eax mov eax r8d retn
[ph]libcap-git-setcap_register_printf_specifier
endbr64 push r12 push rbp push rbx movsxd rbx edi cmp ebx CONST ja JUMP_ADDR_15	mov r12 rsi mov rbp rdx mov eax fs:xxx test eax eax jnz JUMP_ADDR_13	mov edx CONST cmpxchg cs:xxx edx	mov rdx cs:xxx test rdx rdx jz JUMP_ADDR_9	mov rax cs:xxx	mov [rdx+rbx*8] r12 xor r8d r8d mov [rax+rbx*8] rbp	mov eax fs:xxx test eax eax jnz JUMP_ADDR_11	sub cs:xxx CONST	pop rbx mov eax r8d pop rbp pop r12 retn	mov esi CONST mov edi CONST call sub_xxx mov cs:xxx rax test rax rax jz JUMP_ADDR_16	lea rdx [rax+CONST] mov cs:xxx rdx jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_8	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_8	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_3	mov rax CONST mov r8d CONST mov fs:xxx CONST jmp JUMP_ADDR_8	or r8d CONST jmp JUMP_ADDR_6
[ph]libcap-git-setcap_register_printf_function
endbr64
[ph]libcap-git-setcap___printf_fphex
call sub_xxx	endbr64 push r15 mov rcx rdx mov r8 rdi push r14 push r13 push r12 push rbp push rbx mov rbx rsi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov eax [CONST_VAR] mov [rsp+CONST+var_xxx] eax mov eax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] eax movzx eax [CONST_VAR+CONST] mov edx eax shr dl CONST mov edi edx and edi CONST mov [rsp+CONST+var_xxx] edi test al CONST jnz JUMP_ADDR_97	mov rdx CONST mov rdx fs:xxx mov rdx [rdx] mov r12 [rdx+CONST] mov r13d [rdx+CONST]	cmp [r12] CONST jz JUMP_ADDR_373	test r13d r13d jz JUMP_ADDR_373	mov rcx [rcx] movsxd rbp [rbx+CONST] test al CONST jz JUMP_ADDR_73	movdqa xmm2 [rcx] mov [rsp+CONST+var_xxx] r8 movdqa xmm1 xmm2 movdqa xmm0 xmm2 movaps [rsp+CONST+var_xxx] xmm2 call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax jnz JUMP_ADDR_288	movdqa xmm0 [rsp+CONST+var_xxx] movdqa xmm1 cs:xxx mov [rsp+CONST+var_xxx] r8 pand xmm0 cs:xxx movaps [rsp+CONST+var_xxx] xmm0 call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax jnz JUMP_ADDR_9	movdqa xmm1 cs:xxx movdqa xmm0 [rsp+CONST+var_xxx] call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax jg JUMP_ADDR_120	mov r14 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx+CONST] xor ecx ecx lea r15 [rsp+CONST+var_xxx] cmp ebp CONST mov rsi r15 mov edx CONST mov [rsp+CONST+var_xxx] r8 setz cl mov rdi r14 mov [rsp+CONST+var_xxx] rax lea rbp [rsp+CONST+var_xxx] call sub_xxx mov ecx [rbx+CONST] mov r8 [rsp+CONST+var_xxx] mov r9 rbp mov r11 rax lea rsi unk_xxx lea rax unk_xxx cmp ecx CONST cmovz rsi rax mov rax r14	mov rdx rax sub r9 CONST and edx CONST mov edx [CONST_VAR+rdx*4] mov [r9] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_10	lea rdi [rsp+CONST+var_xxx] cmp r11 rdi jbe JUMP_ADDR_15	mov rdx r11 mov esi CONST mov [rsp+CONST+var_xxx] r8 sub rdx rdi mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r11 [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] mov rsi rax mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rdi rax mov r8 [rsp+CONST+var_xxx] sub rsi r11 xor eax eax nop	mov [r9+rax*4+CONST] CONST sub rax CONST cmp rsi rax jnz JUMP_ADDR_13	neg rdx mov r11 rdi lea r9 [r9+rdx*4]	mov r10 [rsp+CONST+var_xxx+CONST] mov edx CONST mov rsi r11 mov [rsp+CONST+var_xxx] r8 mov rax CONST mov [rsp+CONST+var_xxx] r9 and r10 rax cmp ecx CONST setz cl mov rdi r10 mov [rsp+CONST+var_xxx] r10 movzx ecx cl call sub_xxx mov r10 [rsp+CONST+var_xxx] cmp [rbx+CONST] CONST lea rcx unk_xxx mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax unk_xxx cmovnz rcx rax mov rax r10 nop [rax+rax+CONST]	mov rdx rax sub r9 CONST and edx CONST mov edx [rcx+rdx*4] mov [r9] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] lea rcx [rsp+CONST+var_xxx] cmp rax rcx jbe JUMP_ADDR_21	mov rdx rax mov esi CONST mov rdi rcx mov [rsp+CONST+var_xxx] r8 sub rdx rcx mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r9 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov rsi rax mov rcx rax sub rsi [rsp+CONST+var_xxx] xor eax eax nop	mov [r9+rax*4+CONST] CONST sub rax CONST cmp rsi rax jnz JUMP_ADDR_19	mov [rsp+CONST+var_xxx] rcx neg rdx lea r9 [r9+rdx*4]	mov rax [rsp+CONST+var_xxx+CONST] shr rax CONST and eax CONST cmp rax CONST mov eax CONST sbb al CONST or r10 r14 mov [rsp+CONST+var_xxx] al mov rax [rsp+CONST+var_xxx] shr rax CONST and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_191	mov eax [rsp+CONST+var_xxx] cmp eax CONST jle JUMP_ADDR_329	mov [rsp+CONST+var_xxx] CONST sub eax CONST mov r11d eax	movaps xmm4 [rsp+CONST+var_xxx] xor eax eax movmskps r14d xmm4 and r14d CONST test r10 r10 setz al	test eax eax jz JUMP_ADDR_165	mov rax [rsp+CONST+var_xxx] movsxd r10 r11d mov [rsp+CONST+var_xxx] rax	mov edi [rsp+CONST+var_xxx] xor eax eax cmp edi CONST cmovnz eax edi mov [rsp+CONST+var_xxx] eax	xor ecx ecx mov rdi r10 mov edx CONST mov [rsp+CONST+var_xxx] r8 lea r15 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 lea rbp [rsp+CONST+var_xxx] mov rsi r15 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r9 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] lea rsi unk_xxx mov [rsp+CONST+var_xxx] rax mov r8 [rsp+CONST+var_xxx] mov rcx CONST nop [rax]	mov rax r10 mov rdi r10 sub rbp CONST mul rcx shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub rdi rax mov eax [CONST_VAR+rdi*4] mov [rbp+CONST] eax mov rax r10 mov r10 rdx cmp rax CONST ja JUMP_ADDR_29	movzx edx [rbx+CONST] mov eax CONST test r14d r14d jnz JUMP_ADDR_32	mov eax edx and eax CONST cmp al CONST mov eax CONST sbb eax CONST	mov rdi r15 mov r15d [rsp+CONST+var_xxx] sub rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi sub r15d CONST sub r15d edi mov edi [rsp+CONST+var_xxx] add eax edi sub r15d eax test edi edi jle JUMP_ADDR_227	mov r10d [rsp+CONST+var_xxx] mov eax CONST test r10d r10d jnz JUMP_ADDR_35	mov rdi r12 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] dl mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r8 [rsp+CONST+var_xxx] movzx edx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx]	sub r15d eax	and edx CONST mov [rsp+CONST+var_xxx] r15d jnz JUMP_ADDR_197	cmp [rbx+CONST] CONST jz JUMP_ADDR_197	mov eax [rsp+CONST+var_xxx] test eax eax jle JUMP_ADDR_197	mov edi [rsp+CONST+var_xxx] movsxd r15 eax mov [rsp+CONST+var_xxx] r9 mov esi CONST mov [rsp+CONST+var_xxx] r8 mov rdx r15 test edi edi mov rdi r8 jz JUMP_ADDR_312	call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx]	cmp rax r15 jnz JUMP_ADDR_72	mov r15d [rsp+CONST+var_xxx] test r14d r14d jz JUMP_ADDR_198	nop [rax+CONST]	mov esi [rsp+CONST+var_xxx] test esi esi jz JUMP_ADDR_274	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_346	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_346	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	add r15d CONST	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_203	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_314	mov rsi [rax+CONST] mov rcx [rax+CONST] cmp rsi rcx jnb JUMP_ADDR_314	lea rdx [CONST_VAR+CONST] mov [rax+CONST] rdx mov [CONST_VAR] CONST mov edi [rbx+CONST] lea esi [CONST_VAR+CONST]	cmp rdx rcx jnb JUMP_ADDR_313	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_72	add r15d CONST test [rbx+CONST] CONST jnz JUMP_ADDR_59	cmp [rbx+CONST] CONST jnz JUMP_ADDR_59	mov eax [rsp+CONST+var_xxx] test eax eax jg JUMP_ADDR_308	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_207	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_319	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_319	movsx ecx [rsp+CONST+var_xxx] lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] ecx cmp ecx CONST setz al	test al al jnz JUMP_ADDR_72	mov r14d [rsp+CONST+var_xxx] add r15d CONST test r14d r14d jle JUMP_ADDR_209	mov r11d [rsp+CONST+var_xxx] test r11d r11d jnz JUMP_ADDR_229	mov rdi r12 mov [rsp+CONST+var_xxx] r8 mov r14 r12 mov r13d r15d call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax lea rdx [r12+rax] jz JUMP_ADDR_254	mov [rsp+CONST+var_xxx] rbx mov r13 r8 mov rbx rdx jmp JUMP_ADDR_70	lea rcx [rax+CONST] mov [r13+CONST] rcx mov [rax] sil	mov eax r14d sub eax r12d add eax r15d cmp r14 rbx jz JUMP_ADDR_253	add r14 CONST mov rax [r13+CONST] movzx esi [r14+CONST] cmp rax [r13+CONST] jb JUMP_ADDR_68	mov rdi r13 call sub_xxx cmp eax CONST jnz JUMP_ADDR_69	mov r12d CONST jmp JUMP_ADDR_95	movzx edx [rbx+CONST] test dl CONST jz JUMP_ADDR_109	fld CONST fld st fstp CONST fxam fnstsw ax mov r14d eax and r14d CONST fucomip st st jp JUMP_ADDR_287	fld CONST fabs fld cs:xxx fxch CONST fucomip st CONST fstp st jbe JUMP_ADDR_127	mov rax CONST lea r15 off_xxx mov rax fs:xxx test [rax+rbp*2+CONST] CONST lea rax unk_xxx lea rbp unk_xxx cmovz rbp rax lea rax unk_xxx cmovz r15 rax	mov eax edx and eax CONST test r14d r14d jz JUMP_ADDR_98	mov r13d [rsp+CONST+var_xxx] sub r13d CONST test al al jz JUMP_ADDR_125	mov eax [rsp+CONST+var_xxx] xor r14d r14d test eax eax jnz JUMP_ADDR_106	mov rax [r8+CONST] mov esi CONST cmp rax [r8+CONST] jnb JUMP_ADDR_307	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST	add r14d CONST	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_144	lea r12 [rbp+CONST] mov r15 r8	mov rax [r15+CONST] add rbp CONST mov esi [rbp+CONST] test rax rax jz JUMP_ADDR_156	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_156	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_72	add r14d CONST cmp r12 rbp jnz JUMP_ADDR_85	mov r8 r15 test [rbx+CONST] CONST jz JUMP_ADDR_190	test r13d r13d jle JUMP_ADDR_190	movsxd rbx r13d mov esi CONST mov rdi r8 mov rdx rbx call sub_xxx	cmp rax rbx jnz JUMP_ADDR_72	lea r12d [r14+r13]	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_374	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx CONST mov rdx fs:xxx mov rdx [rdx] mov r12 [rdx+CONST] mov r13d [rdx+CONST] jmp JUMP_ADDR_3	test dl CONST jnz JUMP_ADDR_122	mov r13d [rsp+CONST+var_xxx] sub r13d CONST test al al jnz JUMP_ADDR_139	test r13d r13d jle JUMP_ADDR_139	mov eax [rsp+CONST+var_xxx] movsxd r12 r13d mov [rsp+CONST+var_xxx] r8 mov rdi r8 mov rdx r12 mov esi CONST test eax eax jz JUMP_ADDR_157	call sub_xxx mov r8 [rsp+CONST+var_xxx]	cmp rax r12 jnz JUMP_ADDR_72	test r14d r14d jz JUMP_ADDR_137	mov eax [rsp+CONST+var_xxx] mov r14d r13d test eax eax jz JUMP_ADDR_80	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_302	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_302	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_82	movsd xmm0 [rcx] movsd [rsp+CONST+var_xxx] xmm0 movmskpd r14d xmm0 and r14d CONST ucomisd xmm0 xmm0 jp JUMP_ADDR_287	movapd xmm1 xmm0 andpd xmm1 cs:xxx ucomisd xmm1 cs:xxx ja JUMP_ADDR_76	mov r10d [rsp+CONST+var_xxx+CONST] movq rax xmm0 xor r11d r11d lea rcx unk_xxx mov eax eax and r10d CONST shl r10 CONST or r10 rax cmp ebp CONST lea rax unk_xxx lea rbp [rsp+CONST+var_xxx] cmovz rcx rax setz r11b mov rax r10 mov r9 rbp nop [rax+CONST]	mov rdx rax sub r9 CONST and edx CONST mov edx [rcx+rdx*4] mov [r9] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_112	mov edx CONST mov rdi r10 mov ecx r11d mov [rsp+CONST+var_xxx] r9 lea r15 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8 mov rsi r15 mov [rsp+CONST+var_xxx] r10 movsd [rsp+CONST+var_xxx] xmm0 call sub_xxx mov r9 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] movsd xmm0 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax cmp r9 rdx jbe JUMP_ADDR_117	mov rax r9 nop	sub rax CONST mov [rax] CONST cmp rax rdx ja JUMP_ADDR_115	mov rax r9 mov esi CONST mov [rsp+CONST+var_xxx] r10 sub rax rdx mov [rsp+CONST+var_xxx] r8 sub rax CONST mov [rsp+CONST+var_xxx] r9 shr rax CONST movsd [rsp+CONST+var_xxx] xmm0 lea rdx [rax+CONST] not rax add [rsp+CONST+var_xxx] rax mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] movsd xmm0 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] neg rdx mov r8 [rsp+CONST+var_xxx] lea r9 [r9+rdx*4]	movq rax xmm0 shr rax CONST and eax CONST cmp rax CONST mov eax CONST sbb al CONST mov [rsp+CONST+var_xxx] al movzx eax [rsp+CONST+var_xxx+CONST] shr ax CONST and eax CONST mov [rsp+CONST+var_xxx] eax jnz JUMP_ADDR_162	test r10 r10 jnz JUMP_ADDR_195	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_27	mov rax CONST lea r15 off_xxx mov rax fs:xxx test [rax+rbp*2+CONST] CONST lea rax unk_xxx lea rbp unk_xxx cmovz rbp rax lea rax unk_xxx cmovz r15 rax	movaps xmm3 [rsp+CONST+var_xxx] movzx edx [rbx+CONST] movmskps r14d xmm3 and r14d CONST jmp JUMP_ADDR_77	mov r13d [rsp+CONST+var_xxx] sub r13d CONST test al al jnz JUMP_ADDR_139	test r13d r13d jg JUMP_ADDR_101	mov eax r13d xor r13d r13d jmp JUMP_ADDR_138	test r13d r13d jg JUMP_ADDR_101	jmp JUMP_ADDR_79	mov r10 [rsp+CONST+var_xxx] fld CONST xor ecx ecx cmp ebp CONST lea r15 [rsp+CONST+var_xxx] setz cl mov edx CONST mov [rsp+CONST+var_xxx] r8 mov rsi r15 mov rdi r10 lea rbp [rsp+CONST+var_xxx] fstp [rsp+CONST+var_xxx] call sub_xxx mov r10 [rsp+CONST+var_xxx] cmp [rbx+CONST] CONST mov rcx rbp mov r11 rax lea rsi unk_xxx mov r8 [rsp+CONST+var_xxx] lea rax unk_xxx cmovnz rsi rax mov rax r10 nop [rax+rax+CONST]	mov rdx rax mov r9 rcx sub rcx CONST and edx CONST mov edx [CONST_VAR+rdx*4] mov [rcx] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_128	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rcx cmp r11 rdi jbe JUMP_ADDR_361	mov rdx r11 mov esi CONST mov [rsp+CONST+var_xxx] r8 sub rdx rdi mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r11 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] mov rsi rax mov r10 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rdi rax mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] sub rsi r11 xor eax eax nop [rax+rax+CONST]	mov [rcx+rax*4+CONST] CONST sub rax CONST cmp rsi rax jnz JUMP_ADDR_131	lea rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] CONST neg rdx mov [rsp+CONST+var_xxx] rax lea r9 [r9+rdx*4]	movzx eax [rsp+CONST+var_xxx+CONST] and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_196	mov eax [rsp+CONST+var_xxx] cmp eax CONST jle JUMP_ADDR_340	mov [rsp+CONST+var_xxx] CONST sub eax CONST mov r11d eax	xor eax eax test r10 r10 setz al jmp JUMP_ADDR_25	movzx edx [rbx+CONST] mov eax r13d	mov r14d r13d mov r13d eax	test dl CONST jz JUMP_ADDR_151	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_160	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_339	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_339	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_82	lea rcx [r15+CONST] mov rbp r15	add rbp CONST mov rax [r8+CONST] movzx esi [rbp+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_158	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] sil	mov r12d ebp sub r12d r15d add r12d r14d cmp rcx rbp jnz JUMP_ADDR_145	test [rbx+CONST] CONST jz JUMP_ADDR_95	test r13d r13d jle JUMP_ADDR_95	movsxd rbx r13d mov esi CONST mov rdi r8 mov r14d r12d mov rdx rbx call sub_xxx jmp JUMP_ADDR_93	and edx CONST jz JUMP_ADDR_83	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_192	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_358	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_358	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_82	mov rdi r15 call sub_xxx cmp eax CONST setz al jmp JUMP_ADDR_88	call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_103	mov rdi r8 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_147	jmp JUMP_ADDR_72	mov rax [r8+CONST] mov esi CONST cmp rax [r8+CONST] jnb JUMP_ADDR_307	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_82	mov eax [rsp+CONST+var_xxx] cmp eax CONST jg JUMP_ADDR_194	mov eax CONST sub eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r11d eax	test r10 r10 jz JUMP_ADDR_26	cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r15 mov rax [rsp+CONST+var_xxx] jnz JUMP_ADDR_169	nop [rax+rax+CONST]	sub rbp CONST sub rax CONST cmp [rbp+CONST] CONST jz JUMP_ADDR_167	mov [rsp+CONST+var_xxx] rax	movsxd rdi [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] sub rax [rsp+CONST+var_xxx] cmp edi CONST jz JUMP_ADDR_286	cmp rdi rax jge JUMP_ADDR_189	mov r15d [rsp+CONST+var_xxx] movsx edx [rsp+CONST+var_xxx] test r15d r15d jle JUMP_ADDR_173	mov rsi [rsp+CONST+var_xxx] movsx edx [CONST_VAR+CONST_VAR+CONST]	mov rsi [rsp+CONST+var_xxx] movsx ecx [CONST_VAR+CONST_VAR] lea esi [rdx+CONST] cmp sil CONST ja JUMP_ADDR_325	sub edx CONST movsx esi dl	lea edx [rcx+CONST] cmp dl CONST ja JUMP_ADDR_323	lea edx [rcx+CONST] movsx edx dl	mov ecx CONST	fnstcw [rsp+CONST+var_xxx] movzx eax [rsp+CONST+var_xxx] and ax CONST cmp ax CONST jz JUMP_ADDR_351	ja JUMP_ADDR_294	test ax ax jnz JUMP_ADDR_289	cmp edx CONST jle JUMP_ADDR_189	or ecx esi and ecx CONST jz JUMP_ADDR_189	mov edx [rsp+CONST+var_xxx] sub edx CONST js JUMP_ADDR_331	movsxd rcx edx mov rsi [rsp+CONST+var_xxx] lea r10 [CONST_VAR+CONST] mov edx edx sub r10 rdx lea rax [CONST_VAR+rcx] add r10 rsi lea rcx [r9+rcx*4] jmp JUMP_ADDR_187	mov rdi CONST movsx rdx sil mov rdi fs:xxx cmp [CONST_VAR+rdx*4] CONST jle JUMP_ADDR_341	mov [rax] CONST sub rax CONST sub rcx CONST mov [rcx+CONST] CONST cmp r10 rax jz JUMP_ADDR_331	movzx esi [rax] cmp sil CONST jnz JUMP_ADDR_185	mov edx [rbx+CONST] mov [rcx] edx mov [rax] dl nop [rax+CONST]	movsxd r10 r11d jmp JUMP_ADDR_28	mov r12d r14d jmp JUMP_ADDR_95	mov rax r10 neg rax sbb r11d r11d xor eax eax and r11d CONST test r10 r10 setnz al mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_24	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_306	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_82	mov r11d eax mov [rsp+CONST+var_xxx] CONST sub r11d CONST jmp JUMP_ADDR_164	mov [rsp+CONST+var_xxx] CONST mov r11d CONST jmp JUMP_ADDR_165	mov rax r10 neg rax sbb r11d r11d xor eax eax and r11d CONST test r10 r10 setnz al mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_136	xor r15d r15d test r14d r14d jnz JUMP_ADDR_44	movzx eax [rbx+CONST] test al CONST jz JUMP_ADDR_276	mov ecx [rsp+CONST+var_xxx] test ecx ecx jz JUMP_ADDR_297	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_362	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_362	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_48	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_343	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST mov eax [rbx+CONST] lea esi [rax+CONST]	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_342	lea rdx [rax+CONST] add r15d CONST mov [r8+CONST] rdx mov [rax] sil test [rbx+CONST] CONST jz JUMP_ADDR_57	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_345	movzx edi [rsp+CONST+var_xxx] mov r14d [rsp+CONST+var_xxx] lea rdx [rax+CONST] add r15d CONST mov [r8+CONST] rdx mov [rax] dil test r14d r14d jg JUMP_ADDR_65	test [rbx+CONST] CONST jnz JUMP_ADDR_65	mov eax [rbx+CONST] mov r9d [rsp+CONST+var_xxx] lea esi [rax+CONST] test r9d r9d jz JUMP_ADDR_263	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_338	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_338	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_72	cmp [rsp+CONST+var_xxx] CONST mov edi [rsp+CONST+var_xxx] sbb esi esi and esi CONST add esi CONST test edi edi jz JUMP_ADDR_265	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_336	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_336	lea rcx [rdx+CONST] lea r12d [r15+CONST] mov [rax+CONST] rcx mov [rdx] esi	mov rax [rsp+CONST+var_xxx] mov r14 r8 lea r13 [rax+CONST] test rax rax jnz JUMP_ADDR_225	jmp JUMP_ADDR_246	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_226	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_72	add r12d CONST sub r13 CONST jb JUMP_ADDR_296	mov rax [r14+CONST] add rbp CONST mov esi [rbp+CONST] test rax rax jnz JUMP_ADDR_221	mov rdi r14 call sub_xxx cmp eax CONST setz al jmp JUMP_ADDR_223	test dl CONST jnz JUMP_ADDR_33	jmp JUMP_ADDR_36	mov rdx [r8+CONST] test rdx rdx jz JUMP_ADDR_241	mov rax [rdx+CONST] cmp rax [rdx+CONST] jnb JUMP_ADDR_241	lea rcx [rax+CONST] mov [rdx+CONST] rcx mov [rax] r13d cmp r13d CONST jz JUMP_ADDR_72	mov r10d [rsp+CONST+var_xxx] lea r14d [r15+CONST] test r10d r10d jle JUMP_ADDR_244	movsxd rax [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] sub r13 [rsp+CONST+var_xxx] cmp rax r13 mov [rsp+CONST+var_xxx] r13 cmovle r13 rax mov [rsp+CONST+var_xxx] rax lea r12d [r13+CONST] test r13 r13 jz JUMP_ADDR_300	mov [rsp+CONST+var_xxx] rbx mov r14 r9 mov rbx r8 jmp JUMP_ADDR_239	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_240	lea rcx [rdx+CONST] cmp esi CONST mov [rax+CONST] rcx setz al mov [rdx] esi	test al al jnz JUMP_ADDR_72	lea eax [r12+r15] sub eax r13d sub r13 CONST jz JUMP_ADDR_299	mov rax [rbx+CONST] add r14 CONST mov esi [r14+CONST] test rax rax jnz JUMP_ADDR_235	mov rdi rbx call sub_xxx cmp eax CONST setz al jmp JUMP_ADDR_237	mov rdi r8 mov esi r13d mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_72	mov r10d [rsp+CONST+var_xxx] lea r14d [r15+CONST] test r10d r10d jg JUMP_ADDR_233	nop [rax+rax+CONST]	mov eax [rbx+CONST] mov r15d r14d lea esi [rax+CONST] jmp JUMP_ADDR_211	mov rbx [rsp+CONST+var_xxx] mov r8 r15	test [rbx+CONST] CONST jz JUMP_ADDR_95	mov eax [rsp+CONST+var_xxx] mov esi [rbx+CONST] test eax eax jle JUMP_ADDR_95	cmp esi CONST jz JUMP_ADDR_95	mov ecx [rsp+CONST+var_xxx] movsxd rbx eax mov rdi r8 mov rdx rbx test ecx ecx jz JUMP_ADDR_350	call sub_xxx	cmp rax rbx jnz JUMP_ADDR_72	add r12d [rsp+CONST+var_xxx] jmp JUMP_ADDR_95	mov rbx [rsp+CONST+var_xxx] mov r8 r13 mov r13d eax	mov edx [rsp+CONST+var_xxx] test edx edx jle JUMP_ADDR_330	movsxd rdx [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov r14d r13d mov r15 [rsp+CONST+var_xxx] mov r12 rdx sub rax r15 sub r12 rax cmp rdx rax cmovg rdx rax test rdx rdx jz JUMP_ADDR_282	mov [rsp+CONST+var_xxx] rbp mov r14 r8 mov ebp r13d mov r13 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx mov rbx rdx jmp JUMP_ADDR_259	lea rcx [rax+CONST] mov [r14+CONST] rcx mov [rax] sil	mov eax r15d mov rcx r13 sub eax r13d sub rcx r15 add eax ebp add rcx rbx jz JUMP_ADDR_281	add r15 CONST mov rax [r14+CONST] movzx esi [r15+CONST] cmp rax [r14+CONST] jb JUMP_ADDR_257	mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_258	jmp JUMP_ADDR_72	mov eax [rbx+CONST] mov r15d r14d lea esi [rax+CONST]	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_356	cmp [rsp+CONST+var_xxx] CONST lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] sil sbb esi esi and esi CONST add esi CONST	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_354	lea rdx [rax+CONST] lea r13d [r15+CONST] mov [r8+CONST] rdx mov [rax] sil	mov rbp [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov r14 rbp add r14 rax test rax rax jz JUMP_ADDR_367	mov [rsp+CONST+var_xxx] rbx mov r15 r8 mov ebx r13d mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_271	lea rdx [rax+CONST] mov [r15+CONST] rdx mov [rax] sil	mov r12d ebp sub r12d r13d add r12d ebx cmp r14 rbp jz JUMP_ADDR_245	add rbp CONST mov rax [r15+CONST] movzx esi [rbp+CONST] cmp rax [r15+CONST] jb JUMP_ADDR_269	mov rdi r15 call sub_xxx cmp eax CONST jnz JUMP_ADDR_270	jmp JUMP_ADDR_72	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_359	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_48	test al CONST jz JUMP_ADDR_49	mov edx [rsp+CONST+var_xxx] test edx edx jz JUMP_ADDR_334	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_369	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_369	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_48	mov rbp [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov r8 r14 mov r14d eax	test r12 r12 jle JUMP_ADDR_262	mov rdi r8 mov rdx r12 mov esi CONST mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx]	cmp rax r12 jnz JUMP_ADDR_72	lea r15d [r14+rax] jmp JUMP_ADDR_210	mov [rsp+CONST+var_xxx] eax movsxd r10 r11d jmp JUMP_ADDR_28	mov rax CONST lea r15 GLOBAL_VAR mov rax fs:xxx test [rax+rbp*2+CONST] CONST lea rax unk_xxx lea rbp unk_xxx cmovz rbp rax lea rax unk_xxx cmovz r15 rax jmp JUMP_ADDR_77	mov rax CONST lea r15 GLOBAL_VAR mov rax fs:xxx test [rax+rbp*2+CONST] CONST lea rax unk_xxx lea rbp unk_xxx cmovz rbp rax lea rax unk_xxx cmovz r15 rax jmp JUMP_ADDR_121	cmp ax CONST jnz JUMP_ADDR_375	test r14d r14d jz JUMP_ADDR_189	cmp edx CONST jg JUMP_ADDR_183	test ecx ecx jz JUMP_ADDR_189	jmp JUMP_ADDR_183	cmp ax CONST jz JUMP_ADDR_189	jmp UNK_JUMP_ADDR	mov r8 r14 jmp JUMP_ADDR_246	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_368	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_48	mov r8 rbx mov rbx [rsp+CONST+var_xxx] mov r14d eax	mov r12 [rsp+CONST+var_xxx] sub r12 [rsp+CONST+var_xxx] test r12 r12 jle JUMP_ADDR_244	mov rdi r8 mov rdx r12 mov esi CONST mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_284	mov esi CONST	mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST setz al	test al al jz JUMP_ADDR_82	mov r12d CONST jmp JUMP_ADDR_95	mov esi CONST nop [rax]	mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_304	mov eax [rsp+CONST+var_xxx] movsxd r14 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r9 mov rdi r8 mov [rsp+CONST+var_xxx] r8 mov esi CONST test eax eax mov rdx r14 jz JUMP_ADDR_344	call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx]	cmp rax r14 jnz JUMP_ADDR_72	add r15d [rsp+CONST+var_xxx] jmp JUMP_ADDR_59	call sub_xxx mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_41	mov rdi r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_55	mov rdi r8 mov esi CONST mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al	test al al jnz JUMP_ADDR_72	mov eax [rbx+CONST] lea esi [rax+CONST] mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_205	mov rax [r8+CONST] test rax rax jz JUMP_ADDR_313	mov rdx [rax+CONST] mov rcx [rax+CONST] jmp JUMP_ADDR_53	movsx esi [rsp+CONST+var_xxx] mov rdi r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_72	mov eax [rsp+CONST+var_xxx] add r15d CONST test eax eax jg JUMP_ADDR_229	test [rbx+CONST] CONST jnz JUMP_ADDR_229	mov eax [rbx+CONST] lea esi [rax+CONST] jmp JUMP_ADDR_211	lea edx [rcx+CONST] cmp dl CONST ja JUMP_ADDR_327	lea edx [rcx+CONST] movsx edx dl jmp JUMP_ADDR_177	lea esi [rdx+CONST] cmp sil CONST ja JUMP_ADDR_353	sub edx CONST movsx esi dl jmp JUMP_ADDR_175	lea edx [rcx+CONST] and ecx CONST jnz JUMP_ADDR_177	mov ecx [rsp+CONST+var_xxx] add ecx CONST movsxd rcx ecx cmp rcx rax setl cl movzx ecx cl jmp JUMP_ADDR_178	mov eax CONST sub eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r11d eax jmp JUMP_ADDR_24	mov eax [rbx+CONST] mov r15d r13d lea esi [rax+CONST] jmp JUMP_ADDR_263	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_366	mov rdx CONST movsx rax [rsp+CONST+var_xxx] mov rdx fs:xxx mov rdi rax cmp [rdx+rax*4] CONST jg JUMP_ADDR_363	add edi CONST movsxd r10 r11d mov [rsp+CONST+var_xxx] dil jmp JUMP_ADDR_28	mov rax [r8+CONST] cmp rax [r8+CONST] jnb JUMP_ADDR_371	lea rdx [rax+CONST] mov [r8+CONST] rdx mov [rax] CONST jmp JUMP_ADDR_48	mov rdi r8 mov [rsp+CONST+var_xxx] r8 lea r12d [r15+CONST] call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_219	jmp JUMP_ADDR_72	mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_214	mov esi CONST jmp JUMP_ADDR_303	mov eax CONST sub eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r11d eax jmp JUMP_ADDR_136	add esi CONST add [rcx] CONST movsxd r10 r11d mov [rax] sil jmp JUMP_ADDR_28	mov rdi r8 movzx esi sil mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_55	mov rdi r8 mov esi CONST mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_315	call sub_xxx mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_310	movzx esi [rsp+CONST+var_xxx] mov rdi r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_63	mov [rsp+CONST+var_xxx] r9 mov esi CONST	mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al	test al al jz JUMP_ADDR_48	mov r12d CONST jmp JUMP_ADDR_95	call sub_xxx jmp JUMP_ADDR_251	test r14d r14d jnz JUMP_ADDR_189	jmp JUMP_ADDR_291	lea esi [rdx+CONST] jmp JUMP_ADDR_175	mov rdi r8 mov [rsp+CONST+var_xxx] r8 lea r13d [r15+CONST] call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_267	jmp JUMP_ADDR_72	mov rdi r8 movzx esi sil mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_215	jmp JUMP_ADDR_72	mov esi CONST jmp JUMP_ADDR_303	mov [rsp+CONST+var_xxx] r9 mov esi CONST	mov rdi r8 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] cmp eax CONST setz al jmp JUMP_ADDR_348	lea rax [r11+CONST] mov [rsp+CONST+var_xxx] rax movzx eax [r11] mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_133	mov [rsp+CONST+var_xxx] r9 mov esi CONST jmp JUMP_ADDR_347	mov ebp [rsp+CONST+var_xxx] test ebp ebp jz JUMP_ADDR_370	lea r10d [r11+CONST] test r10d r10d jle JUMP_ADDR_372	mov [rsp+CONST+var_xxx] CONST movsxd r10 r10d jmp JUMP_ADDR_28	movzx eax [rbx+CONST] movsxd r10 r11d mov [rsp+CONST+var_xxx] al jmp JUMP_ADDR_28	mov r12d r13d jmp JUMP_ADDR_246	mov [rsp+CONST+var_xxx] r9 mov esi CONST jmp JUMP_ADDR_360	mov [rsp+CONST+var_xxx] r9 mov esi CONST jmp JUMP_ADDR_347	lea r10d [r11+CONST] jmp JUMP_ADDR_365	mov [rsp+CONST+var_xxx] r9 mov esi CONST jmp JUMP_ADDR_360	mov r10d CONST mov [rsp+CONST+var_xxx] CONST sub r10d r11d mov [rsp+CONST+var_xxx] CONST movsxd r10 r10d jmp JUMP_ADDR_28	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_register_printf_modifier
endbr64 push r12 push rbp push rbx mov eax [CONST_VAR] test eax eax jz JUMP_ADDR_4	mov rbp rdi mov rbx rdi jmp JUMP_ADDR_3	mov eax [rbx+CONST] add rbx CONST test eax eax jz JUMP_ADDR_6	cmp eax CONST jbe JUMP_ADDR_2	mov rax CONST mov r8d CONST mov fs:xxx CONST	pop rbx mov eax r8d pop rbp pop r12 retn	mov ecx cs:xxx lea edx [rcx+CONST] cmp edx CONST jbe JUMP_ADDR_20	mov edx fs:xxx test edx edx mov edx CONST jnz JUMP_ADDR_14	cmpxchg cs:xxx edx	cmp cs:xxx CONST jz JUMP_ADDR_16	sub rbx rbp lea rdi [rbx+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_17	movzx edx [rbp+CONST] mov rax cs:xxx lea rsi [rbp+CONST] lea rdi [r12+CONST] mov ecx cs:xxx mov rax [rax+rdx*8] mov rdx rbx sar rdx CONST mov [r12] rax lea eax [rcx+CONST] mov cs:xxx eax mov eax CONST shl eax cl mov [r12+CONST] eax call sub_xxx movzx edx [rbp+CONST] mov r8d [r12+CONST] mov rax cs:xxx mov [rax+rdx*8] r12	mov eax fs:xxx test eax eax jnz JUMP_ADDR_18	pop rbx mov eax r8d pop rbp sub cs:xxx CONST pop r12 retn	lock CONST edx jz JUMP_ADDR_9	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_9	mov esi CONST mov edi CONST call sub_xxx mov cs:xxx rax test rax rax jnz JUMP_ADDR_10	or r8d CONST jmp JUMP_ADDR_12	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_5	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_5	mov rax CONST mov r8d CONST mov fs:xxx CONST jmp JUMP_ADDR_5
[ph]libcap-git-setcap___handle_registered_modifier_mb
endbr64 push r13 mov rax cs:xxx push r12 push rbp push rbx mov r10 [CONST_VAR] mov rbx rdi movzx edx [r10] mov rdi [rax+rdx*8] test rdi rdi jz JUMP_ADDR_15	movzx r8d [r10+CONST] mov r12 rsi lea r9 [r10+CONST] xor r13d r13d xor r11d r11d xor ebp ebp nop [rax+CONST]	lea rdx [CONST_VAR+CONST] mov rcx r9 movzx eax r8b test r8b r8b jnz JUMP_ADDR_6	jmp JUMP_ADDR_13	cmp eax esi jnz JUMP_ADDR_9	movzx eax [rcx+CONST] add rcx CONST add rdx CONST test al al jz JUMP_ADDR_13	mov esi [rdx] test esi esi jnz JUMP_ADDR_4	mov rax rcx movsxd rdx r11d sub rax r10 cmp rax rdx jle JUMP_ADDR_9	mov ebp [CONST_VAR+CONST] mov r11d eax mov r13 rcx	mov rdi [CONST_VAR] test rdi rdi jnz JUMP_ADDR_2	mov eax CONST test ebp ebp jz JUMP_ADDR_12	or [r12+CONST] bp xor eax eax mov [rbx] r13	pop rbx pop rbp pop r12 pop r13 retn	mov eax [rdx] test eax eax jnz JUMP_ADDR_9	jmp JUMP_ADDR_7	pop rbx mov eax CONST pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___handle_registered_modifier_wc
endbr64 push r13 mov rax cs:xxx push r12 push rbp push rbx mov r10 [CONST_VAR] mov rbx rdi mov edx [r10] mov rdi [rax+rdx*8] test rdi rdi jz JUMP_ADDR_15	mov r8d [r10+CONST] mov r12 rsi lea r9 [r10+CONST] xor r13d r13d xor r11d r11d xor ebp ebp nop [rax+rax+CONST]	lea rax [CONST_VAR+CONST] mov rdx r9 mov esi r8d test r8d r8d jnz JUMP_ADDR_6	jmp JUMP_ADDR_13	cmp ecx esi jnz JUMP_ADDR_9	mov esi [rdx+CONST] add rdx CONST add rax CONST test esi esi jz JUMP_ADDR_13	mov ecx [rax] test ecx ecx jnz JUMP_ADDR_4	mov rax rdx movsxd rcx r11d sub rax r10 sar rax CONST cmp rax rcx jle JUMP_ADDR_9	mov ebp [CONST_VAR+CONST] mov r11d eax mov r13 rdx	mov rdi [CONST_VAR] test rdi rdi jnz JUMP_ADDR_2	mov eax CONST test ebp ebp jz JUMP_ADDR_12	or [r12+CONST] bp xor eax eax mov [rbx] r13	pop rbx pop rbp pop r12 pop r13 retn	mov eax [rax] test eax eax jnz JUMP_ADDR_9	jmp JUMP_ADDR_7	pop rbx mov eax CONST pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap_register_printf_type
endbr64 push rbx mov rbx rdi mov eax fs:xxx test eax eax jnz JUMP_ADDR_12	mov edx CONST cmpxchg cs:xxx edx	cmp cs:xxx CONST jz JUMP_ADDR_8	mov r8d cs:xxx cmp r8d CONST jz JUMP_ADDR_14	lea eax [r8+CONST] mov rdx cs:xxx mov cs:xxx eax movsxd rax r8d mov [rdx+rax*8+CONST] rbx	mov eax fs:xxx test eax eax jnz JUMP_ADDR_10	sub cs:xxx CONST	mov eax r8d pop rbx retn	mov esi CONST mov edi CONST call sub_xxx mov cs:xxx rax test rax rax jnz JUMP_ADDR_3	or r8d CONST jmp JUMP_ADDR_5	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_7	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_7	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2	mov rax CONST mov r8d CONST mov fs:xxx CONST jmp JUMP_ADDR_5
[ph]libcap-git-setcap___snprintf
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rax [rsp+CONST+arg_xxx] xor r8d r8d mov rcx rsp mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap___funlockfile
endbr64 mov rdi [CONST_VAR+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_4	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_3	sub [CONST_VAR] CONST retn	xchg eax [CONST_VAR] cmp eax CONST jg JUMP_ADDR_5	retn	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall retn
[ph]libcap-git-setcap_read_int_1
mov rdx [CONST_VAR] lea rcx [rdx+CONST] mov eax [rdx] mov [CONST_VAR] rcx mov ecx [rdx+CONST] sub eax CONST sub ecx CONST cmp ecx CONST ja JUMP_ADDR_9	add rdx CONST mov r8d CONST jmp JUMP_ADDR_5	lea eax [rax+rax*4] mov esi r8d add eax eax sub esi ecx cmp esi eax jl JUMP_ADDR_7	add eax ecx	mov ecx [rdx] mov rsi rdx add rdx CONST sub ecx CONST cmp ecx CONST ja JUMP_ADDR_8	test eax eax js JUMP_ADDR_4	cmp eax CONST jle JUMP_ADDR_2	mov rsi rdx lea rdx [rdx+CONST] mov eax [CONST_VAR] sub eax CONST cmp eax CONST mov eax CONST jbe JUMP_ADDR_4	mov [CONST_VAR] rsi	retn
[ph]libcap-git-setcap__IO_helper_overflow_0
endbr64 push r13 push r12 mov r12 rdi push rbp mov ebp esi push rbx sub rsp CONST mov rax [r12+CONST] mov rdi [CONST_VAR+CONST] mov rdx [rax+CONST] mov rsi [rax+CONST] mov rbx rdx sub rbx rsi sar rbx CONST test ebx ebx jz JUMP_ADDR_5	mov r13 [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_8	movsxd rbx ebx mov rdx rbx call callfunc_xxx test rax rax jz JUMP_ADDR_10	mov edx CONST cmp rax rdx jz JUMP_ADDR_10	mov rdx [r12+CONST] lea r13 ds:xxx sub rbx rax mov rdi [rdx+CONST] mov rdx rbx lea rsi [CONST_VAR+r13] call sub_xxx mov rax [r12+CONST] mov rdx [rax+CONST] sub rdx r13 mov [rax+CONST] rdx	cmp [rax+CONST] rdx jbe JUMP_ADDR_9	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov eax ebp mov [rdx] ebp	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov [rsp+CONST] rdi call sub_xxx mov rax [r12+CONST] mov rdi [rsp+CONST] mov rsi [rax+CONST] jmp JUMP_ADDR_2	add rsp CONST mov esi ebp mov rdi r12 pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	mov eax CONST jmp JUMP_ADDR_7
[ph]libcap-git-setcap_group_number_0
push r14 mov r9 rsi push r13 push r12 push rbp movsx ebp [rcx] push rbx lea eax [rbp+CONST] cmp al CONST jbe JUMP_ADDR_2	pop rbx mov rax r9 pop rbp pop r12 pop r13 pop r14 retn	mov rbx rdx mov r12 rdx lea r13 [rcx+CONST] mov r14d r8d sub rbx rsi mov rdx rbx call sub_xxx lea rsi [rax+rbx] mov rdi rax cmp rax rsi jb JUMP_ADDR_10	jmp JUMP_ADDR_15	cmp rdi rsi jnb JUMP_ADDR_1	cmp rsi r9 jz JUMP_ADDR_14	mov [r12+CONST] r14d movsx ebp [r13+CONST] lea r9 [r12+CONST] cmp bpl CONST ja JUMP_ADDR_14	test bpl bpl jz JUMP_ADDR_13	add r13 CONST nop [rax+rax+CONST]	mov r12 r9	mov eax [CONST_VAR+CONST] sub rsi CONST lea r9 [r12+CONST] mov [r12+CONST] eax sub ebp CONST jz JUMP_ADDR_4	cmp rdi rsi jb JUMP_ADDR_9	jmp JUMP_ADDR_1	movsx ebp [r13+CONST] jmp JUMP_ADDR_9	mov rdx rdi mov rdi r9 sub rdx rsi call sub_xxx pop rbx pop rbp mov r9 rax pop r12 pop r13 mov rax r9 pop r14 retn	mov r9 r12 jmp JUMP_ADDR_1
[ph]libcap-git-setcap__i18n_number_rewrite_1
push r15 push r14 mov r14 rdi lea rdi GLOBAL_VAR push r13 push r12 mov r12 rsi push rbp sub r12 r14 push rbx mov rbx rdx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea r13 [rsp+CONST+var_xxx] call sub_xxx mov edi CONST mov rbp rax mov rsi rax call sub_xxx mov rsi rbp mov edi CONST mov [rsp+CONST+var_xxx] eax call sub_xxx mov rsi r12 lea rdi [rsp+CONST+var_xxx] mov edx CONST sar rsi CONST mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] r13 mov [rsp+CONST+var_xxx] CONST call sub_xxx test al al jz JUMP_ADDR_10	mov r15 [rsp+CONST+var_xxx] mov rdx r12 mov rsi r14 mov rdi r15 call sub_xxx lea rdx [rax+CONST] mov r8 rax cmp rdx r15 jb JUMP_ADDR_14	mov rax CONST mov rsi rbx mov r9 fs:xxx jmp JUMP_ADDR_5	test rbp rbp jnz JUMP_ADDR_12	sub rdx CONST mov [CONST_VAR] eax cmp r15 rdx ja JUMP_ADDR_7	mov eax [rdx] sub rsi CONST lea edi [rax+CONST] cmp edi CONST ja JUMP_ADDR_3	mov rdi [r9] add eax CONST sub rdx CONST cdqe mov eax [CONST_VAR+rax*8+CONST] mov [CONST_VAR] eax cmp r15 rdx jbe JUMP_ADDR_5	sub r8 r15 lea r14 [r8+CONST] not r14 and r14 CONST add r14 rbx	mov rdi [rsp+CONST+var_xxx] cmp rdi r13 jz JUMP_ADDR_10	call sub_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_15	add rsp CONST mov rax r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edi eax and edi CONST cmp edi CONST jnz JUMP_ADDR_4	cmp eax CONST mov eax [rsp+CONST+var_xxx] cmovnz eax [rsp+CONST+var_xxx] jmp JUMP_ADDR_4	mov r14 rbx jmp JUMP_ADDR_8	call sub_xxx
[ph]libcap-git-setcap_outstring_func.part.0_0
sub rsp CONST lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_outstring_converted_wide_string_0
push r15 mov rax rsi push r14 push r13 push r12 push rbp mov rbp rdi push rbx mov ebx r9d sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov esi edx mov [rsp+CONST+var_xxx] edx mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] r8d mov rdx fs:xxx mov [rsp+CONST+var_xxx] rdx xor edx edx test ecx ecx setnle [rsp+CONST+var_xxx] movzx edi [rsp+CONST+var_xxx] cmp r8b CONST jz JUMP_ADDR_11	test dil dil jz JUMP_ADDR_11	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax test esi esi js JUMP_ADDR_44	movsxd r14 [rsp+CONST+var_xxx] mov r12d CONST mov r13d CONST jnz JUMP_ADDR_9	jmp JUMP_ADDR_26	cmp r14 CONST mov rdx r13 lea rcx [rsp+CONST+var_xxx] cmovbe rdx r14 lea rsi [rsp+CONST+var_xxx] lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp rax CONST jz JUMP_ADDR_31	test rax rax jz JUMP_ADDR_10	add r12 rax sub r14 rax jz JUMP_ADDR_10	mov rax [rsp+CONST+var_xxx]	test rax rax jnz JUMP_ADDR_5	movsxd rax [rsp+CONST+var_xxx] cmp rax r12 ja JUMP_ADDR_45	mov [rsp+CONST+var_xxx] CONST mov eax [rsp+CONST+var_xxx] test eax eax js JUMP_ADDR_43	movsxd r13 eax test r13 r13 setnz al	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_49	test al al jz JUMP_ADDR_49	lea rax [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] mov r15 r13 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_21	mov rdx r13 mov rsi r12 mov rdi rbp call callfunc_xxx cmp r13 rax jnz JUMP_ADDR_31	movsxd rax ebx mov rbx CONST add rax r13 lea rcx [rax+rbx] movsxd rsi eax mov ebx eax cmp rcx r13 setb cl cmp rax rsi mov esi CONST movzx ecx cl cmovnz ecx esi test ecx ecx jnz JUMP_ADDR_30	test eax eax js JUMP_ADDR_48	mov edx [rsp+CONST+var_xxx] mov rax r15 add [rsp+CONST+var_xxx] r13 sub rax r13 test edx edx cmovns r15 rax cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_34	test r15 r15 jz JUMP_ADDR_34	cmp r15 CONST mov edx CONST mov rsi [rsp+CONST+var_xxx] mov rcx r14 cmovbe rdx r15 mov rdi r12 call sub_xxx mov r13 rax cmp rax CONST jz JUMP_ADDR_31	test rax rax jz JUMP_ADDR_34	test ebx ebx js JUMP_ADDR_52	mov rcx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rsi rcx sub rsi unk_xxx cmp rax rsi ja JUMP_ADDR_16	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_16	mov eax [rsp+CONST+var_xxx]	movsxd r12 eax mov esi CONST mov rdi rbp mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_31	test ebx ebx js JUMP_ADDR_47	mov eax ebx add eax r12d mov ebx eax jno JUMP_ADDR_46	mov rax CONST mov fs:xxx CONST nop [rax+CONST]	mov r12d CONST	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_53	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rsp+CONST+var_xxx] CONST mov r12d ebx jz JUMP_ADDR_32	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_32	movsxd rax [rsp+CONST+var_xxx] cmp rax [rsp+CONST+var_xxx] jbe JUMP_ADDR_32	mov r13d [rsp+CONST+var_xxx]	mov eax [rsp+CONST+var_xxx] sub eax r13d test eax eax jle JUMP_ADDR_32	movsxd r13 eax mov esi CONST mov rdi rbp mov rdx r13 call sub_xxx cmp r13 rax jnz JUMP_ADDR_31	test ebx ebx js JUMP_ADDR_32	mov eax ebx add eax r13d mov r12d eax jno JUMP_ADDR_32	jmp JUMP_ADDR_30	mov eax CONST mov r13 CONST jmp JUMP_ADDR_13	lea r14 [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] xor edi edi mov rcx r14 call sub_xxx mov r12 rax movsxd rax [rsp+CONST+var_xxx] cmp rax r12 jbe JUMP_ADDR_11	mov eax [rsp+CONST+var_xxx] sub eax r12d test eax eax jg JUMP_ADDR_27	test ebx ebx jns JUMP_ADDR_11	mov r12d ebx jmp JUMP_ADDR_32	mov r12d eax jmp JUMP_ADDR_32	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_47	xor r13d r13d cmp [rsp+CONST+var_xxx] CONST mov r12d ebx jnz JUMP_ADDR_38	jmp JUMP_ADDR_47	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx
[ph]libcap-git-setcap_printf_positional_0
push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rax [rbp+arg_xxx] mov rbx [rbp+arg_xxx] mov [rbp+var_xxx] r8 mov [rbp+var_xxx] rdi mov r8 [rbp+arg_xxx] mov [rbp+var_xxx] rsi mov [rbp+var_xxx] edx mov [rbp+var_xxx] r9d mov [rbp+var_xxx] rax mov [rbp+var_xxx] rbx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax lea rax [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST cmp rbx CONST jz JUMP_ADDR_115	mov edi [r8] test edi edi jz JUMP_ADDR_387	mov r12 [rbp+var_xxx] mov rbx r8 xor r15d r15d xor r14d r14d mov [rbp+var_xxx] CONST lea r13 [rbp+var_xxx] mov r8 r12 nop [rax+CONST]	lea rax [r14+r14*8] mov rsi r15 mov rdi rbx mov rcx r13 lea r12 [r8+rax*8] mov [rbp+var_xxx] r8 add r14 CONST mov rdx r12 call sub_xxx mov rbx [r12+CONST] mov r8 [rbp+var_xxx] add r15 rax mov esi [rbx] test esi esi jz JUMP_ADDR_23	cmp [rbp+var_xxx] r14 jnz JUMP_ADDR_3	lea rdi [rbp+var_xxx] call sub_xxx test al al jz JUMP_ADDR_16	mov rax CONST mul [rbp+var_xxx] mov r8 [rbp+var_xxx] shr rdx CONST mov [rbp+var_xxx] rdx jmp JUMP_ADDR_3	cmp r13d CONST jz JUMP_ADDR_427	movsxd rsi r13d mov rdi r14 call sub_xxx mov rcx rax	sub r12d eax js JUMP_ADDR_382	mov r11d [rbp+var_xxx] test r11d r11d jnz JUMP_ADDR_365	test r12d r12d jz JUMP_ADDR_327	movsxd rbx r12d mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] rcx mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add ebx eax mov rcx [rbp+var_xxx] mov [rbp+var_xxx] ebx jno JUMP_ADDR_327	mov rax CONST mov fs:xxx CONST nop [rax+CONST]	mov [rbp+var_xxx] CONST	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_19	call sub_xxx	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_21	call sub_xxx	mov rax [rbp+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_508	mov eax [rbp+var_xxx] lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rax [rbp+var_xxx] mov r12 r8 cmp r15 rax cmovnb rax r15 mov rbx rax	lea rdi [rbp+var_xxx] mov edx CONST mov rsi rbx call sub_xxx test al al jz JUMP_ADDR_16	mov rax [rbp+var_xxx] mov r13 rbx lea rdx ds:xxx shl r13 CONST add r13 rax mov [rbp+var_xxx] rax mov eax [rbp+arg_xxx] mov [rbp+var_xxx] r13 add r13 rdx and eax CONST mov rdi r13 setnz sil mov [rbp+var_xxx] eax movzx esi sil	neg esi call sub_xxx test r14 r14 jz JUMP_ADDR_380	xor r8d r8d mov [rbp+var_xxx] r12 mov r15 r12 mov r12 r14 mov [rbp+var_xxx] rbx mov r14 r8 mov rbx [rbp+var_xxx] jmp JUMP_ADDR_30	mov edx [r15+CONST] movsxd rax [r15+CONST] mov [r13+rax*4+CONST] edx mov edx [r15+CONST] movsxd rax [r15+CONST] mov [rbx+rax*4] edx	add r14 CONST add r15 CONST cmp r14 r12 jz JUMP_ADDR_37	movsxd rax [r15+CONST] cmp eax CONST jz JUMP_ADDR_32	mov [r13+rax*4+CONST] CONST	movsxd rax [r15+CONST] cmp eax CONST jz JUMP_ADDR_34	mov [r13+rax*4+CONST] CONST	mov rsi [r15+CONST] test rsi rsi jz JUMP_ADDR_29	cmp rsi CONST jz JUMP_ADDR_28	movsxd rdx [r15+CONST] movsxd rax [r15+CONST] add r14 CONST mov rdi r15 mov r10 cs:xxx add r15 CONST shl rdx CONST lea rcx [rbx+rdx] add rdx r13 call callfunc_xxx cmp r14 r12 jnz JUMP_ADDR_30	mov rbx [rbp+var_xxx] mov r14 r12 mov r12 [rbp+var_xxx] test rbx rbx jz JUMP_ADDR_48	mov rax [rbp+var_xxx] mov rsi [rbp+var_xxx] xor r15d r15d lea rdx unk_xxx nop [rax+CONST]	mov ecx [r13+r15*4+CONST] cmp ecx CONST jg JUMP_ADDR_96	cmp ecx CONST jl JUMP_ADDR_118	cmp ecx CONST ja JUMP_ADDR_113	movsxd rcx [rdx+rcx*4] add rcx rdx jmp rcx	cmp ecx CONST jnz JUMP_ADDR_120	mov ecx [CONST_VAR] cmp ecx CONST ja JUMP_ADDR_106	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR] ecx	mov rcx [CONST_VAR] mov [rax] rcx	add r15 CONST add rax CONST cmp r15 rbx jb JUMP_ADDR_39	movsxd rax [rbp+arg_xxx] mov [rbp+var_xxx] rax cmp r14 rax jbe JUMP_ADDR_381	mov rax [rbp+var_xxx] mov rdi [rbp+var_xxx] mov edx CONST mov [rbp+var_xxx] r14 lea rax [rax+rax*8] lea rbx [CONST_VAR+CONST] lea r15 [r12+rax*8] lea rax [CONST_VAR+CONST] mov [rbp+var_xxx] rbx sub rbx rax mov [rbp+var_xxx] rax mov rax rbx mov [rbp+var_xxx] rbx sar rax CONST neg rax cmovns rdx rax mov eax [rbp+var_xxx] mov [rbp+var_xxx] rdx mov [rbp+var_xxx] edx mov [rbp+var_xxx] eax nop [rax+rax+CONST]	movzx eax [r15+CONST] mov r12d [r15+CONST] movsxd r13 [r15] mov r11d [r15+CONST] mov edx eax mov r14d eax mov r9d eax mov r8d eax shr dl CONST shr r14b CONST and r8d CONST mov edi edx mov edx eax and r14d CONST shr r9b CONST and edi CONST shr dl CONST mov [rbp+var_xxx] edi mov edi edx mov edx eax and edi CONST shr dl CONST mov [rbp+var_xxx] edi mov edi edx mov edx eax shr dl CONST and edi CONST mov ebx edx mov [rbp+var_xxx] edi and ebx CONST mov [rbp+var_xxx] ebx movzx ebx [r15+CONST] mov edx ebx shr bl CONST shr dl CONST and ebx CONST mov esi edx mov edx eax and esi CONST shr dl CONST mov edi edx mov [rbp+var_xxx] esi movsxd rdx [r15+CONST] movzx esi [r15+CONST] and edi CONST mov [rbp+var_xxx] edi mov [rbp+var_xxx] sil cmp edx CONST jz JUMP_ADDR_53	mov rdi [rbp+var_xxx] shl rdx CONST mov r12d [CONST_VAR+rdx] test r12d r12d js JUMP_ADDR_206	mov [r15+CONST] r12d	movsxd rax [r15+CONST] cmp eax CONST jz JUMP_ADDR_55	mov rsi [rbp+var_xxx] shl rax CONST movsxd r13 [CONST_VAR+rax] mov rax CONST test r13d r13d cmovs r13 rax mov [r15] r13d	cmp r11d CONST jg JUMP_ADDR_58	mov rax cs:xxx test rax rax jz JUMP_ADDR_58	movsxd rdi r11d mov rax [rax+rdi*8] mov [rbp+var_xxx] rdi test rax rax jnz JUMP_ADDR_207	lea eax [r11+CONST] cmp eax CONST jbe JUMP_ADDR_125	endbr64 mov rsi [r15+CONST] lea rax ds:xxx and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST test rsi rsi jz JUMP_ADDR_62	mov r8d [r15+CONST] mov r9 [rbp+var_xxx] xor edx edx xor ecx ecx nop [rax+CONST]	lea eax [r8+rdx] shl rax CONST add rax r9 mov [CONST_VAR+rcx*8] rax lea ecx [rdx+CONST] mov rdx rcx cmp rsi rcx ja JUMP_ADDR_61	mov rax [rbp+var_xxx] mov rdx [rax+CONST] test rdx rdx jz JUMP_ADDR_453	mov rax [rdx+CONST] mov rsi [rdx+CONST] cmp rax rsi jnb JUMP_ADDR_453	lea rcx [rax+CONST] mov [rdx+CONST] rcx mov [rax] CONST movzx eax [r15+CONST] test al CONST jz JUMP_ADDR_394	cmp rcx rsi jnb JUMP_ADDR_456	lea rax [rcx+CONST] mov ebx CONST mov [rdx+CONST] rax mov [rcx] CONST movzx eax [r15+CONST] test al al js JUMP_ADDR_395	test al CONST jz JUMP_ADDR_374	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_490	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_490	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	movzx eax [r15+CONST] add ebx CONST	test al CONST jz JUMP_ADDR_77	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_495	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_495	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	add ebx CONST	cmp [r15+CONST] CONST jz JUMP_ADDR_428	test [r15+CONST] CONST jz JUMP_ADDR_83	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_492	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_492	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	add ebx CONST	movsxd rcx [r15+CONST] test ecx ecx jz JUMP_ADDR_348	lea r13 [rbp+var_xxx] mov r12 r13 nop [rax+CONST]	mov rax CONST mov rsi rcx sub r12 CONST mul rcx shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub rsi rax lea rax GLOBAL_VAR mov esi [rax+rsi*4] mov rax rcx mov rcx rdx mov [r12] esi cmp rax CONST ja JUMP_ADDR_85	cmp r12 r13 jnb JUMP_ADDR_348	mov r14 [rbp+var_xxx] jmp JUMP_ADDR_93	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_94	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_16	cmp ebx CONST jz JUMP_ADDR_16	add ebx CONST cmp r12 r13 jnb JUMP_ADDR_348	mov esi [r12]	mov rax [r14+CONST] add r12 CONST test rax rax jnz JUMP_ADDR_88	mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_90	jmp JUMP_ADDR_16	cmp ecx CONST jz JUMP_ADDR_108	jle JUMP_ADDR_43	cmp ecx CONST jz JUMP_ADDR_44	cmp ecx CONST jnz JUMP_ADDR_118	mov ecx [CONST_VAR] cmp ecx CONST ja JUMP_ADDR_107	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR] ecx	mov ecx [CONST_VAR] mov [rax] ecx jmp JUMP_ADDR_47	mov ecx [CONST_VAR+CONST] cmp ecx CONST ja JUMP_ADDR_123	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR+CONST] ecx	movsd xmm0 [CONST_VAR] movsd [rax] xmm0 jmp JUMP_ADDR_47	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_46	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_102	test [rbp+arg_xxx] CONST jnz JUMP_ADDR_432	test [rbp+arg_xxx] CONST jz JUMP_ADDR_124	mov edi [CONST_VAR+CONST] cmp edi CONST ja JUMP_ADDR_341	mov ecx edi add edi CONST add rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] edi	movdqa xmm1 [rcx] movaps [rax] xmm1 jmp JUMP_ADDR_47	mov ecx [rbp+var_xxx] test ecx ecx jz JUMP_ADDR_122	lea rdi GLOBAL_VAR call sub_xxx	mov rax CONST mov rax fs:xxx mov rax [rax] mov ebx [rax+CONST] mov rax [rax+CONST] mov [rbp+var_xxx] rax movzx eax [rax] mov [rbp+arg_xxx] ebx test al al jz JUMP_ADDR_117	cmp al CONST jnz JUMP_ADDR_1	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_1	test ch CONST jnz JUMP_ADDR_44	nop [rax+CONST]	mov rdi cs:xxx test rdi rdi jnz JUMP_ADDR_462	pxor xmm0 xmm0 movups [rax] xmm0 jmp JUMP_ADDR_47	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_105	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] and rcx CONST lea rdi [rcx+CONST] mov [CONST_VAR+CONST] rdi fld CONST fstp CONST jmp JUMP_ADDR_47	lea rdi GLOBAL_VAR lea rsi GLOBAL_VAR movzx eax ds:xxx jmp ds:xxx	endbr64 mov eax [rbp+var_xxx] sub r12d CONST test eax eax jz JUMP_ADDR_384	movsxd rax [r15+CONST] mov rbx [rbp+var_xxx] shl rax CONST mov esi [rbx+rax] mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_442	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_442	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov eax [rbp+var_xxx] add [rbp+var_xxx] CONST test eax eax jnz JUMP_ADDR_388	mov rsi [r15+CONST] mov r14 [r15+CONST] mov edi [rbp+var_xxx] sub r14 rsi sar r14 CONST test edi edi js JUMP_ADDR_366	mov rbx unk_xxx mov r13 off_xxx sub r13 rbx	mov rax [rbp+var_xxx] mov r12 [rax+CONST] mov rax r12 sub rax rbx cmp rax r13 jnb JUMP_ADDR_282	mov rdi [rbp+var_xxx] mov rdx r14 call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_16	movsxd rax [rbp+var_xxx] xor edx edx add rax r14 js JUMP_ADDR_506	cmp rax r14 jb JUMP_ADDR_506	movsxd rcx eax mov [rbp+var_xxx] eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_15	test eax eax js JUMP_ADDR_17	add [rbp+var_xxx] CONST add r15 CONST mov rax [rbp+var_xxx] cmp rax [rbp+var_xxx] jb JUMP_ADDR_50	jmp JUMP_ADDR_17	endbr64 mov edi [rbp+var_xxx] test edi edi jnz JUMP_ADDR_126	mov esi [rbp+var_xxx] lea ebx [r12+CONST] test esi esi jz JUMP_ADDR_399	movsxd rax [r15+CONST] mov rdi [rbp+var_xxx] shl rax CONST movzx edi [CONST_VAR+rax] call sub_xxx mov esi eax mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_477	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_477	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov edx [rbp+var_xxx] add [rbp+var_xxx] CONST test edx edx jz JUMP_ADDR_132	test ebx ebx jle JUMP_ADDR_171	movsxd rbx ebx mov rdi [rbp+var_xxx] mov esi CONST mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add ebx eax mov [rbp+var_xxx] ebx jno JUMP_ADDR_171	jmp JUMP_ADDR_15	endbr64 mov rsi [rbp+var_xxx] mov edi [rbp+arg_xxx] mov edx CONST mov [rbp+var_xxx] r11d call sub_xxx mov r11d [rbp+var_xxx] mov [rbp+var_xxx] CONST mov r14 rax	test r14 r14 jz JUMP_ADDR_342	mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_7	cmp r11d CONST jz JUMP_ADDR_7	mov r9d [rbp+var_xxx] mov ecx r12d mov edx r13d mov rsi r14 mov r8d [rbp+var_xxx] mov rdi [rbp+var_xxx] call sub_xxx mov [rbp+var_xxx] eax test eax eax js JUMP_ADDR_17	nop [rax]	mov rbx unk_xxx mov r13 off_xxx sub r13 rbx	mov rsi [r15+CONST] mov r14 [r15+CONST] sub r14 rsi sar r14 CONST jmp JUMP_ADDR_134	endbr64 movsxd rax [r15+CONST] mov rdi [rbp+var_xxx] shl rax CONST mov rcx [CONST_VAR+rax] test rcx rcx jz JUMP_ADDR_435	test r13d r13d js JUMP_ADDR_440	mov eax CONST jnz JUMP_ADDR_283	mov [rbp+var_xxx] CONST mov r10d CONST mov r11d CONST mov [rbp+var_xxx] CONST	mov r9d eax mov [rbp+var_xxx] CONST xor r13d r13d and r9d CONST jmp JUMP_ADDR_214	endbr64 movsxd rax [r15+CONST] shl rax CONST add rax [rbp+var_xxx] mov [rbp+var_xxx] rax test [rbp+arg_xxx] CONST jnz JUMP_ADDR_489	xor eax eax test [rbp+arg_xxx] CONST lea rdx [rbp+var_xxx] mov rsi r15 cmovz r8d eax movzx eax [r15+CONST] and r8d CONST and eax CONST shl r8d CONST or eax r8d mov [r15+CONST] al mov rdi [rbp+var_xxx] call sub_xxx test eax eax js JUMP_ADDR_16	mov esi [rbp+var_xxx] test esi esi js JUMP_ADDR_17	cdqe add eax esi mov [rbp+var_xxx] eax jo JUMP_ADDR_15	mov eax [rbp+var_xxx] test eax eax jns JUMP_ADDR_160	jmp JUMP_ADDR_17	endbr64 mov r12d [rbp+var_xxx] test r12d r12d jz JUMP_ADDR_176	mov ebx [rbp+var_xxx] test ebx ebx jz JUMP_ADDR_414	mov r11d [rbp+var_xxx] test r11d r11d js JUMP_ADDR_507	movsxd rax [r15+CONST] mov rbx [rbp+var_xxx] mov r10d [rbp+var_xxx] shl rax CONST mov rax [rbx+rax] test r10d r10d jz JUMP_ADDR_371	movsxd rdx [rbp+var_xxx] mov [rax] rdx jmp JUMP_ADDR_132	endbr64 movsxd rax [r15+CONST] shl rax CONST add rax [rbp+var_xxx] mov [rbp+var_xxx] rax test [rbp+arg_xxx] CONST jnz JUMP_ADDR_488	xor eax eax test [rbp+arg_xxx] CONST lea rdx [rbp+var_xxx] mov rsi r15 cmovz r8d eax movzx eax [r15+CONST] and r8d CONST and eax CONST shl r8d CONST or eax r8d mov [r15+CONST] al mov rdi [rbp+var_xxx] call sub_xxx	test eax eax js JUMP_ADDR_16	mov ebx [rbp+var_xxx] test ebx ebx js JUMP_ADDR_17	cdqe add eax ebx mov [rbp+var_xxx] eax jno JUMP_ADDR_171	jmp JUMP_ADDR_15	endbr64 mov r10d CONST	movsxd rax [r15+CONST] mov r8d [rbp+var_xxx] shl rax CONST add rax [rbp+var_xxx] test r8d r8d jz JUMP_ADDR_280	mov [rbp+var_xxx] CONST mov rcx [rax] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST	movzx eax r14b mov [rbp+var_xxx] eax movzx eax r9b test r13d r13d js JUMP_ADDR_213	jnz JUMP_ADDR_284	test rcx rcx jnz JUMP_ADDR_166	cmp r10d CONST jnz JUMP_ADDR_412	test r14b r14b jz JUMP_ADDR_412	mov rax [rbp+var_xxx] mov rcx [rbp+var_xxx] mov [rax+CONST] CONST test rcx rcx jns JUMP_ADDR_464	mov [rbp+var_xxx] CONST mov r14 [rbp+var_xxx] xor r9d r9d xor r13d r13d jmp JUMP_ADDR_222	endbr64 mov r10d CONST jmp JUMP_ADDR_185	endbr64 mov r10d CONST jmp JUMP_ADDR_185	endbr64 movsxd rax [r15+CONST] mov edx [rbp+var_xxx] shl rax CONST test edx edx jz JUMP_ADDR_378	mov rsi [rbp+var_xxx] mov rcx [CONST_VAR+rax]	test rcx rcx js JUMP_ADDR_393	mov [rbp+var_xxx] CONST mov r10d CONST jmp JUMP_ADDR_187	endbr64 mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_451	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_451	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	add eax CONST mov [rbp+var_xxx] eax jmp JUMP_ADDR_132	endbr64 movsxd rax [r15+CONST] mov rsi [rbp+var_xxx] shl rax CONST mov r14 [CONST_VAR+rax] jmp JUMP_ADDR_155	mov [rbp+var_xxx] CONST neg r12d or eax CONST mov [r15+CONST] r12d mov [r15+CONST] al jmp JUMP_ADDR_53	mov rsi [r15+CONST] lea rdx ds:xxx and rdx CONST sub rsp rdx lea r10 [rsp+CONST+var_xxx+CONST] and r10 CONST test rsi rsi jz JUMP_ADDR_211	mov [rbp+var_xxx] r11d mov edi [r15+CONST] xor edx edx xor ecx ecx mov r11 [rbp+var_xxx] nop [rax+rax+CONST]	lea eax [CONST_VAR+rdx] shl rax CONST add rax r11 mov [r10+rcx*8] rax lea ecx [rdx+CONST] mov rdx rcx cmp rsi rcx ja JUMP_ADDR_209	mov rax cs:xxx mov rsi [rbp+var_xxx] mov r11d [rbp+var_xxx] mov rax [rax+rsi*8]	mov [rbp+var_xxx] r8b mov rdx r10 mov rsi r15 mov rdi [rbp+var_xxx] mov [rbp+var_xxx] r9b mov [rbp+var_xxx] r11d call rax mov r11d [rbp+var_xxx] movzx r9d [rbp+var_xxx] cmp eax CONST movzx r8d [rbp+var_xxx] jnz JUMP_ADDR_180	jmp JUMP_ADDR_58	mov r13d CONST	cmp [rbp+var_xxx] CONST lea rsi unk_xxx lea rax GLOBAL_VAR setnz r8b and r8d r9d cmp r11d CONST cmovnz rsi rax cmp r10d CONST jz JUMP_ADDR_288	cmp r10d CONST jz JUMP_ADDR_303	cmp r10d CONST jz JUMP_ADDR_285	mov r14 [rbp+var_xxx] movsxd r9 r10d mov rdi rcx nop [rax+rax+CONST]	mov rax rdi xor edx edx sub r14 CONST div r9 mov edx [CONST_VAR+rdx*4] mov [r14] edx mov rdx rdi mov rdi rax cmp r9 rdx jbe JUMP_ADDR_218	mov r9 rcx	test r8b r8b jnz JUMP_ADDR_291	mov rcx [rbp+var_xxx] sub rcx r14 mov rax rcx sar rax CONST cmp rax r13 jge JUMP_ADDR_274	mov rax rcx mov rbx r13 mov edx CONST sar rax CONST sub rbx rax cmovs rbx rdx mov edx [rbp+var_xxx] movsxd r13 ebx test edx edx jnz JUMP_ADDR_252	sub r12d eax mov rcx rax sub r12d ebx test r9 r9 jz JUMP_ADDR_227	movzx eax [rbp+var_xxx] and eax CONST	cmp r10d CONST jnz JUMP_ADDR_227	lea edx [r12+CONST] test al al cmovnz r12d edx	mov eax [rbp+var_xxx] or eax [rbp+var_xxx] or eax [rbp+var_xxx] jz JUMP_ADDR_295	sub r12d CONST cmp [rbp+var_xxx] CONST jz JUMP_ADDR_296	mov esi [rbp+var_xxx] test esi esi jz JUMP_ADDR_323	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_447	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_447	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	add eax CONST mov [rbp+var_xxx] eax	test r9 r9 jz JUMP_ADDR_245	cmp r10d CONST jnz JUMP_ADDR_245	test [rbp+var_xxx] CONST jz JUMP_ADDR_245	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_468	mov rsi [rax+CONST] mov rdi [rax+CONST] cmp rsi rdi jnb JUMP_ADDR_468	cmp [rbp+var_xxx] CONST lea rdx [CONST_VAR+CONST] mov [rax+CONST] rdx mov [CONST_VAR] CONST jz JUMP_ADDR_16	cmp rdx rdi jnb JUMP_ADDR_466	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] r11d	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	add eax CONST mov [rbp+var_xxx] eax	add r12d r13d test r12d r12d jg JUMP_ADDR_319	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	mov rax [rbp+var_xxx] mov rbx unk_xxx mov r13 off_xxx mov r12 [rax+CONST] sub r13 rbx mov rax r12 sub rax rbx cmp r13 rax jbe JUMP_ADDR_441	mov [rbp+var_xxx] rcx mov rdx rcx mov rdi [rbp+var_xxx] mov rsi r14 call callfunc_xxx mov rcx [rbp+var_xxx] cmp rcx rax jnz JUMP_ADDR_16	movsxd rax [rbp+var_xxx] mov rdx CONST add rax rcx add rdx rax mov [rbp+var_xxx] eax cmp rdx rcx movsxd rcx eax setb dl cmp rax rcx mov ecx CONST movzx edx dl cmovnz edx ecx test edx edx jnz JUMP_ADDR_15	test eax eax jns JUMP_ADDR_161	jmp JUMP_ADDR_17	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_299	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_444	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_444	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	add eax CONST sub r12d CONST mov [rbp+var_xxx] eax	test r9 r9 jz JUMP_ADDR_268	cmp r10d CONST jnz JUMP_ADDR_268	test [rbp+var_xxx] CONST jz JUMP_ADDR_268	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_482	mov rsi [rax+CONST] mov rdi [rax+CONST] cmp rsi rdi jnb JUMP_ADDR_482	cmp [rbp+var_xxx] CONST lea rdx [CONST_VAR+CONST] mov [rax+CONST] rdx mov [CONST_VAR] CONST jz JUMP_ADDR_16	cmp rdx rdi jnb JUMP_ADDR_480	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] r11d	mov eax [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	add eax CONST sub r12d CONST mov [rbp+var_xxx] eax	sar rcx CONST add ebx ecx sub r12d ebx test r13d r13d jle JUMP_ADDR_307	mov rdi [rbp+var_xxx] mov rdx r13 mov esi CONST mov [rbp+var_xxx] rcx call sub_xxx cmp r13 rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add r13d eax mov [rbp+var_xxx] r13d jo JUMP_ADDR_15	test r13d r13d mov rcx [rbp+var_xxx] jns JUMP_ADDR_308	jmp JUMP_ADDR_17	test r9 r9 jz JUMP_ADDR_345	movzx eax [rbp+var_xxx] and eax CONST cmp r10d CONST jnz JUMP_ADDR_278	test al al jz JUMP_ADDR_278	mov rcx [rbp+var_xxx] lea rdx [r14+CONST] mov [r14+CONST] CONST mov r14 rdx sub rcx rdx	mov rdx rcx mov rbx r13 mov esi CONST sar rdx CONST sub rbx rdx cmovs rbx rsi mov esi [rbp+var_xxx] movsxd r13 ebx test esi esi jnz JUMP_ADDR_252	sub r12d edx mov rcx rdx sub r12d ebx jmp JUMP_ADDR_225	mov edi [rbp+var_xxx] mov ecx [rax] test edi edi jz JUMP_ADDR_339	mov [rbp+var_xxx] CONST movzx ecx cl mov [rbp+var_xxx] CONST jmp JUMP_ADDR_187	mov [rbp+var_xxx] rsi call sub_xxx mov rsi [rbp+var_xxx] jmp JUMP_ADDR_135	mov [rbp+var_xxx] CONST mov r10d CONST mov r11d CONST mov [rbp+var_xxx] CONST nop [rax+rax+CONST]	mov r9d eax mov [rbp+var_xxx] CONST and r9d CONST jmp JUMP_ADDR_214	mov r14 [rbp+var_xxx] mov rax rcx nop [rax+rax+CONST]	mov rdx rax sub r14 CONST and edx CONST mov edx [CONST_VAR+rdx*4] mov [r14] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_286	jmp JUMP_ADDR_219	mov r14 [rbp+var_xxx] mov rdi rcx nop [rax+rax+CONST]	mov rax CONST mov r9 rdi sub r14 CONST mul rdi shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub r9 rax mov eax [CONST_VAR+r9*4] mov [r14] eax mov rax rdi mov rdi rdx cmp rax CONST ja JUMP_ADDR_289	mov r9 rcx test r8b r8b jz JUMP_ADDR_292	mov r8d [rbp+arg_xxx] mov rcx [rbp+var_xxx] mov rsi r14 mov [rbp+var_xxx] r10d mov rdx [rbp+var_xxx] mov rdi [rbp+var_xxx] mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11d call sub_xxx mov r10d [rbp+var_xxx] mov r9 [rbp+var_xxx] mov r11d [rbp+var_xxx] mov r14 rax	cmp r10d CONST jnz JUMP_ADDR_221	test bl bl jz JUMP_ADDR_221	mov rsi [rbp+var_xxx] mov rdi r14 mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r9 mov rdx rsi mov [rbp+var_xxx] r11d call sub_xxx mov r10d [rbp+var_xxx] mov r9 [rbp+var_xxx] mov r11d [rbp+var_xxx] mov r14 rax jmp JUMP_ADDR_221	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_235	test r12d r12d jg JUMP_ADDR_404	mov edi [rbp+var_xxx] test edi edi js JUMP_ADDR_17	xor r12d r12d jmp JUMP_ADDR_229	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_367	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_487	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_487	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_256	mov r9 rcx	mov r14 [rbp+var_xxx] nop [rax+rax+CONST]	mov rax rcx sub r14 CONST and eax CONST mov eax [CONST_VAR+rax*4] mov [r14] eax mov rax rcx shr rcx CONST cmp rax CONST ja JUMP_ADDR_305	mov r10d CONST jmp JUMP_ADDR_220	mov r13d [rbp+var_xxx] test r13d r13d js JUMP_ADDR_366	mov rax [rbp+var_xxx] mov rbx unk_xxx mov r13 off_xxx mov rax [rax+CONST] sub r13 rbx mov rdx rax sub rdx rbx cmp r13 rdx jbe JUMP_ADDR_450	mov [rbp+var_xxx] rcx mov rdx rcx mov rdi [rbp+var_xxx] mov rsi r14 call callfunc_xxx mov rcx [rbp+var_xxx] cmp rax rcx jnz JUMP_ADDR_16	movsxd rax [rbp+var_xxx] xor edx edx add rax rcx js JUMP_ADDR_509	cmp rax rcx jb JUMP_ADDR_509	movsxd rcx eax mov [rbp+var_xxx] eax mov r14d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_15	test eax eax js JUMP_ADDR_17	test r12d r12d jle JUMP_ADDR_161	movsxd r12 r12d mov rdi [rbp+var_xxx] mov esi CONST mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	add r12d r14d mov [rbp+var_xxx] r12d jo JUMP_ADDR_15	test r12d r12d jns JUMP_ADDR_161	jmp JUMP_ADDR_17	movsxd r12 r12d mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] rcx mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add r12d eax mov rcx [rbp+var_xxx] mov [rbp+var_xxx] r12d jno JUMP_ADDR_246	jmp JUMP_ADDR_15	mov edx [rbp+var_xxx] test edx edx jz JUMP_ADDR_436	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_486	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_486	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_233	mov r10d [rbp+var_xxx] test r10d r10d js JUMP_ADDR_17	mov rax [rbp+var_xxx] mov rbx unk_xxx mov r13 off_xxx mov rax [rax+CONST] sub r13 rbx mov rdx rax sub rdx rbx cmp r13 rdx jbe JUMP_ADDR_479	mov [rbp+var_xxx] rcx mov rdx rcx mov rdi [rbp+var_xxx] mov rsi r14 call callfunc_xxx mov rcx [rbp+var_xxx] cmp rcx rax jnz JUMP_ADDR_16	movsxd rax [rbp+var_xxx] xor edx edx add rax rcx js JUMP_ADDR_510	cmp rax rcx jb JUMP_ADDR_510	movsxd rcx eax mov [rbp+var_xxx] eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_15	test eax eax js JUMP_ADDR_17	mov r8d [rbp+var_xxx] test r8d r8d jz JUMP_ADDR_161	test r12d r12d jz JUMP_ADDR_161	movsxd r12 r12d mov rdi [rbp+var_xxx] mov esi CONST mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	add r12d [rbp+var_xxx] mov [rbp+var_xxx] r12d mov eax r12d jno JUMP_ADDR_250	jmp JUMP_ADDR_15	mov esi [rbp+var_xxx] test esi esi jnz JUMP_ADDR_398	mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_187	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] and rcx CONST lea rdi [rcx+CONST] mov [CONST_VAR+CONST] rdi jmp JUMP_ADDR_112	cmp r13d CONST jz JUMP_ADDR_413	cmp r13d CONST jg JUMP_ADDR_413	xor eax eax xor ecx ecx lea r14 unk_xxx jmp JUMP_ADDR_9	mov rbx r13 sub rbx rax mov eax CONST cmovs rbx rax movsxd r13 ebx	mov r8d [rbp+var_xxx] xor r9d r9d test r8d r8d jnz JUMP_ADDR_252	sar rcx CONST sub r12d ebx xor r9d r9d sub r12d ecx jmp JUMP_ADDR_227	cmp [r15] CONST jz JUMP_ADDR_417	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_415	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_415	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	cmp ebx CONST jz JUMP_ADDR_16	lea r13 [rbp+var_xxx] movsxd rcx [r15] add ebx CONST mov r12 r13 nop [rax+CONST]	mov rax CONST mov rsi rcx sub r12 CONST mul rcx shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub rsi rax lea rax GLOBAL_VAR mov esi [rax+rsi*4] mov rax rcx mov rcx rdx mov [r12] esi cmp rax CONST ja JUMP_ADDR_354	cmp r12 r13 jnb JUMP_ADDR_417	mov r14 [rbp+var_xxx] jmp JUMP_ADDR_362	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_363	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_16	cmp ebx CONST jz JUMP_ADDR_16	add ebx CONST cmp r12 r13 jnb JUMP_ADDR_417	mov esi [r12]	mov rax [r14+CONST] add r12 CONST test rax rax jnz JUMP_ADDR_357	mov rdi r14 call sub_xxx cmp eax CONST jnz JUMP_ADDR_359	jmp JUMP_ADDR_16	mov r9d [rbp+var_xxx] test r9d r9d jns JUMP_ADDR_328	call sub_xxx	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_258	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_500	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_500	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_256	mov r9d [rbp+var_xxx] test r9d r9d jnz JUMP_ADDR_403	mov r8d [rbp+var_xxx] test r8d r8d jnz JUMP_ADDR_476	mov esi [rbp+var_xxx] mov [rax] esi jmp JUMP_ADDR_132	test al CONST jz JUMP_ADDR_72	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_501	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_501	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST jmp JUMP_ADDR_71	mov rdi [rbp+var_xxx] mov ecx [CONST_VAR+rax] mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_402	movsx rcx cl jmp JUMP_ADDR_198	test rbx rbx jnz JUMP_ADDR_38	mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax jmp JUMP_ADDR_17	mov ebx [rbp+var_xxx] test ebx ebx jns JUMP_ADDR_247	jmp JUMP_ADDR_366	test r12d r12d jg JUMP_ADDR_408	mov eax [rbp+var_xxx] test eax eax jns JUMP_ADDR_127	jmp JUMP_ADDR_17	mov r12 [rbp+var_xxx] xor ebx ebx xor r14d r14d jmp JUMP_ADDR_24	test r12d r12d jle JUMP_ADDR_171	movsxd r12 r12d mov rdi [rbp+var_xxx] mov esi CONST mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add r12d eax mov [rbp+var_xxx] r12d jno JUMP_ADDR_171	jmp JUMP_ADDR_15	mov [rbp+var_xxx] CONST neg rcx mov r10d CONST jmp JUMP_ADDR_187	mov ebx CONST test al al jns JUMP_ADDR_67	mov rax [rdx+CONST] cmp rax [rdx+CONST] jnb JUMP_ADDR_460	lea rcx [rax+CONST] mov [rdx+CONST] rcx mov [rax] CONST	movzx eax [r15+CONST] add ebx CONST jmp JUMP_ADDR_67	movzx ecx cx jmp JUMP_ADDR_340	test ebx ebx jg JUMP_ADDR_472	mov ecx [rbp+var_xxx] test ecx ecx jns JUMP_ADDR_144	jmp JUMP_ADDR_17	mov r10d [rbp+var_xxx] movsxd rax ecx movsx rcx cx test r10d r10d cmovz rcx rax jmp JUMP_ADDR_198	movzx ebx [rbp+var_xxx] mov [rax] bl jmp JUMP_ADDR_132	movsxd r12 r12d mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] rcx mov rdx r12 mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11d call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add r12d eax mov r11d [rbp+var_xxx] mov r9 [rbp+var_xxx] mov [rbp+var_xxx] r12d mov r10d [rbp+var_xxx] mov rcx [rbp+var_xxx] jno JUMP_ADDR_297	jmp JUMP_ADDR_15	movsxd rbx r12d mov rdi [rbp+var_xxx] mov esi CONST mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add ebx eax mov [rbp+var_xxx] ebx jno JUMP_ADDR_385	jmp JUMP_ADDR_15	mov [rbp+var_xxx] CONST mov r14 [rbp+var_xxx] xor ebx ebx xor ecx ecx jmp JUMP_ADDR_346	mov eax CONST mov ecx CONST lea r14 unk_xxx jmp JUMP_ADDR_9	mov rbx [rbp+var_xxx] mov rdi rbx call sub_xxx mov rdi rbx lea rsi ds:xxx call sub_xxx mov [rbp+var_xxx] eax jmp JUMP_ADDR_175	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_352	jmp JUMP_ADDR_16	mov esi [r15+CONST] test esi esi jz JUMP_ADDR_423	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_504	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_504	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_16	cmp ebx CONST jz JUMP_ADDR_16	add ebx CONST	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	movsxd rbx ebx add ebx [rbp+var_xxx] mov [rbp+var_xxx] ebx jo JUMP_ADDR_15	test ebx ebx jns JUMP_ADDR_160	jmp JUMP_ADDR_17	mov rdi r14 call sub_xxx mov rcx rax jmp JUMP_ADDR_9	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_497	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_497	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	add ebx CONST jmp JUMP_ADDR_78	mov ecx [CONST_VAR+CONST] cmp ecx CONST ja JUMP_ADDR_465	mov edi ecx add ecx CONST add rdi [CONST_VAR+CONST] mov [CONST_VAR+CONST] ecx	movsd xmm0 [CONST_VAR] movsd [rax] xmm0 and [r13+r15*4+CONST] CONST jmp JUMP_ADDR_47	mov eax CONST lea r14 GLOBAL_VAR cmp r13d eax cmovl r13d eax jmp JUMP_ADDR_8	mov eax [rbp+var_xxx] test eax eax jz JUMP_ADDR_235	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_499	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_499	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_233	mov [rbp+var_xxx] CONST mov r9 rcx xor r8d r8d mov r13d CONST mov [rbp+var_xxx] CONST mov r11d CONST lea rsi GLOBAL_VAR jmp JUMP_ADDR_304	mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] jmp JUMP_ADDR_248	mov rdi [rbp+var_xxx] call sub_xxx cmp eax CONST jnz JUMP_ADDR_130	jmp JUMP_ADDR_16	mov [rbp+var_xxx] r10d mov esi CONST mov [rbp+var_xxx] r9 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11d	mov rdi [rbp+var_xxx] call sub_xxx mov r11d [rbp+var_xxx] mov rcx [rbp+var_xxx] cmp eax CONST mov r9 [rbp+var_xxx] mov r10d [rbp+var_xxx] jnz JUMP_ADDR_256	jmp JUMP_ADDR_16	mov [rbp+var_xxx] rcx mov esi CONST mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11d	mov rdi [rbp+var_xxx] call sub_xxx mov r11d [rbp+var_xxx] mov r9 [rbp+var_xxx] cmp eax CONST mov r10d [rbp+var_xxx] mov rcx [rbp+var_xxx] jnz JUMP_ADDR_233	jmp JUMP_ADDR_16	mov [rbp+var_xxx] rcx mov [rbp+var_xxx] rax call sub_xxx mov rax [rbp+var_xxx] mov rcx [rbp+var_xxx] jmp JUMP_ADDR_309	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_203	jmp JUMP_ADDR_16	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jz JUMP_ADDR_16	movzx eax [r15+CONST] test al CONST jz JUMP_ADDR_494	mov rax [rbp+var_xxx] mov rdx [rax+CONST] test rdx rdx jnz JUMP_ADDR_503	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jz JUMP_ADDR_16	movzx eax [r15+CONST] mov ebx CONST	test al al jns JUMP_ADDR_67	mov rax [rbp+var_xxx] mov rdx [rax+CONST] test rdx rdx jnz JUMP_ADDR_395	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_397	jmp JUMP_ADDR_16	movsxd rcx ecx cmp [CONST_VAR+rcx*8+CONST] CONST jz JUMP_ADDR_121	mov rdi [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rsi movsxd rcx [CONST_VAR+r15*4] add rcx CONST and rcx CONST sub rsp rcx lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST mov [rax] rdi movsxd r8 [r13+r15*4+CONST] mov rcx cs:xxx call callfunc_xxx mov rsi [rbp+var_xxx] mov rax [rbp+var_xxx] lea rdx unk_xxx jmp JUMP_ADDR_47	mov [rbp+var_xxx] CONST movsxd r13 [rbp+var_xxx] mov r10d CONST mov rbx [rbp+var_xxx] mov rcx [rbp+var_xxx] mov r14 [rbp+var_xxx] jmp JUMP_ADDR_346	mov rdi [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] mov [CONST_VAR+CONST] rcx jmp JUMP_ADDR_434	mov rdi [rbp+var_xxx] mov esi r11d mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_243	jmp JUMP_ADDR_16	mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11d call sub_xxx mov r11d [rbp+var_xxx] mov rcx [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_466	mov rdx [rax+CONST] mov rdi [rax+CONST] jmp JUMP_ADDR_241	movsxd r12 ebx mov rdi [rbp+var_xxx] mov esi CONST mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_16	mov eax [rbp+var_xxx] test eax eax js JUMP_ADDR_17	add r12d eax mov [rbp+var_xxx] r12d jno JUMP_ADDR_400	jmp JUMP_ADDR_15	movzx esi [rbp+var_xxx] mov [rax] si jmp JUMP_ADDR_132	mov rdi [rbp+var_xxx] call sub_xxx cmp eax CONST jnz JUMP_ADDR_147	jmp JUMP_ADDR_16	mov [rbp+var_xxx] rax mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] mov rax [rbp+var_xxx] jmp JUMP_ADDR_329	mov rdi [rbp+var_xxx] mov esi r11d mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] cmp eax CONST jnz JUMP_ADDR_266	jmp JUMP_ADDR_16	mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11d call sub_xxx mov r11d [rbp+var_xxx] mov rcx [rbp+var_xxx] cmp eax CONST jz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_16	mov rax [rbp+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_480	mov rdx [rax+CONST] mov rdi [rax+CONST] jmp JUMP_ADDR_264	mov [rbp+var_xxx] rcx mov esi CONST mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11d jmp JUMP_ADDR_448	mov [rbp+var_xxx] r10d mov esi CONST mov [rbp+var_xxx] r9 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11d jmp JUMP_ADDR_445	and [r15+CONST] CONST mov [r15+CONST] CONST jmp JUMP_ADDR_179	and [r15+CONST] CONST jmp JUMP_ADDR_168	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_71	jmp JUMP_ADDR_16	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_82	jmp JUMP_ADDR_16	mov ebx CONST jmp JUMP_ADDR_458	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_76	jmp JUMP_ADDR_16	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_431	jmp JUMP_ADDR_16	mov [rbp+var_xxx] rcx mov esi CONST mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r11d jmp JUMP_ADDR_448	mov [rbp+var_xxx] r10d mov esi CONST mov [rbp+var_xxx] r9 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11d jmp JUMP_ADDR_445	mov rdi [rbp+var_xxx] mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_71	jmp JUMP_ADDR_16	mov rcx [rdx+CONST] mov rsi [rdx+CONST] jmp JUMP_ADDR_65	mov rdi [rbp+var_xxx] call sub_xxx cmp eax CONST jnz JUMP_ADDR_421	jmp JUMP_ADDR_16	mov edx CONST jmp JUMP_ADDR_138	lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx	mov edx CONST jmp JUMP_ADDR_312	mov edx CONST jmp JUMP_ADDR_332
[ph]libcap-git-setcap___vfwprintf_internal
endbr64 push r15 mov r15 rdx push r14 push r13 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov esi CONST mov [rsp+CONST+var_xxx] ecx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax CONST mov eax fs:xxx mov [rsp+CONST+var_xxx] eax call sub_xxx cmp eax CONST jnz JUMP_ADDR_400	mov eax [rbp+CONST] test al CONST jnz JUMP_ADDR_467	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_399	mov esi CONST mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_400	mov ebx [rbp+CONST] mov eax ebx and eax CONST mov [rsp+CONST+var_xxx] eax jnz JUMP_ADDR_246	movdqu xmm1 [r15] mov rax [r15+CONST] mov esi CONST mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax movups [rsp+CONST+var_xxx] xmm1 call sub_xxx mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax and bh CONST jnz JUMP_ADDR_13	cmp cs:xxx CONST jz JUMP_ADDR_254	mov rsi sub_xxx lea rdi [rsp+CONST+var_xxx] mov rdx rbp call callfunc_xxx test [rbp+CONST] CONST mov [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_13	mov rbx fs:xxx mov rdi [rbp+CONST] cmp [CONST_VAR+CONST] rbx jz JUMP_ADDR_12	mov eax fs:xxx test eax eax jnz JUMP_ADDR_419	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbp+CONST] mov [CONST_VAR+CONST] rbx	add [CONST_VAR+CONST] CONST	mov r12 [rbp+CONST] mov rbx [rsp+CONST+var_xxx] mov rdi off_xxx sub rbx [rsp+CONST+var_xxx] sub rdi unk_xxx mov rax r12 sar rbx CONST sub rax unk_xxx mov [rsp+CONST+var_xxx] rdi cmp rdi rax jbe JUMP_ADDR_315	mov rsi [rsp+CONST+var_xxx] mov rdx rbx mov rdi rbp call callfunc_xxx cmp rbx rax jnz JUMP_ADDR_78	movsxd rdx ebx mov rax rbx mov r13d ebx shr rax CONST cmp rbx rdx mov edx CONST cmovnz eax edx mov edx eax test eax eax jnz JUMP_ADDR_305	test ebx ebx js JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] mov ecx [rax] test ecx ecx jz JUMP_ADDR_26	cmp cs:xxx CONST jnz JUMP_ADDR_322	cmp cs:xxx CONST jnz JUMP_ADDR_322	cmp cs:xxx CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_418	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST nop [rax+rax+CONST]	mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST jbe JUMP_ADDR_34	endbr64 test r14d r14d jz JUMP_ADDR_38	mov edx [rsp+CONST+var_xxx]	sub rsp CONST mov r9d r13d mov rcx r15 mov rdi rbp mov eax [rsp+CONST+var_xxx] push rax push rdx push [rsp+CONST+var_xxx] mov eax [rsp+CONST+var_xxx] push rax lea rax [rsp+CONST+var_xxx] push rax push [rsp+CONST+var_xxx] mov eax [rsp+CONST+var_xxx] push rax mov edx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx add rsp CONST mov r13d eax	test [rbp+CONST] CONST jz JUMP_ADDR_30	mov r8d [rsp+CONST+var_xxx] test r8d r8d jnz JUMP_ADDR_33	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_478	add rsp CONST mov eax r13d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [rbp+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_27	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_436	mov r8d [rsp+CONST+var_xxx] sub [CONST_VAR] CONST test r8d r8d jz JUMP_ADDR_28	lea rdi [rsp+CONST+var_xxx] xor esi esi call callfunc_xxx jmp JUMP_ADDR_28	mov [rsp+CONST+var_xxx] CONST xor r9d r9d xor r12d r12d lea rcx GLOBAL_VAR movzx eax ds:xxx lea rcx GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST xor r10d r10d mov [rsp+CONST+var_xxx] CONST mov rbx CONST lea r8 GLOBAL_VAR lea rsi GLOBAL_VAR mov rax ds:xxx mov [rsp+CONST+var_xxx] CONST xor ecx ecx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp rax	endbr64	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR mov r9d CONST xor r10d r10d movzx eax ds:xxx lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	mov rax CONST mov r13d CONST mov fs:xxx CONST jmp JUMP_ADDR_26	endbr64 mov ebx [rsp+CONST+var_xxx] mov r14d [rsp+CONST+var_xxx] sub ebx CONST test r14d r14d jz JUMP_ADDR_361	mov eax [r15] cmp eax CONST ja JUMP_ADDR_314	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rbp+CONST] mov esi [rdx] test rax rax jz JUMP_ADDR_76	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_76	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] esi cmp esi CONST jz JUMP_ADDR_78	cmp r13d CONST jz JUMP_ADDR_78	mov r12d [rsp+CONST+var_xxx] add r13d CONST test r12d r12d jnz JUMP_ADDR_316	nop [rax+rax+CONST]	mov rax [rsp+CONST+var_xxx] mov esi CONST add [rsp+CONST+var_xxx] CONST lea r12 [rax+CONST] mov rdi r12 mov [rsp+CONST+var_xxx] r12 call sub_xxx mov r14 [rbp+CONST] mov rbx rax mov [rsp+CONST+var_xxx] rax sub rbx r12 mov rax r14 sub rax unk_xxx sar rbx CONST cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_261	mov rdx rbx mov rsi r12 mov rdi rbp call callfunc_xxx cmp rax rbx jnz JUMP_ADDR_78	movsxd rax r13d xor edx edx add rax rbx js JUMP_ADDR_476	cmp rax rbx jb JUMP_ADDR_476	movsxd rcx eax mov r13d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_305	test eax eax js JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] mov r9d [rax] test r9d r9d jnz JUMP_ADDR_22	jmp JUMP_ADDR_26	endbr64 mov eax [r15] cmp eax CONST ja JUMP_ADDR_346	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov r12 [rdx]	test r12 r12 jz JUMP_ADDR_311	test r9d r9d jnz JUMP_ADDR_289	cmp r14d CONST jz JUMP_ADDR_289	mov r8d [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] mov r9d r13d mov edx ebx mov rsi r12 mov rdi rbp call sub_xxx mov r13d eax test eax eax jns JUMP_ADDR_48	jmp JUMP_ADDR_26	endbr64 test r9d r9d jnz JUMP_ADDR_39	mov ebx [rsp+CONST+var_xxx] mov eax [rsp+CONST+var_xxx] sub ebx CONST test eax eax jnz JUMP_ADDR_72	test ebx ebx jle JUMP_ADDR_72	movsxd r12 ebx mov esi CONST mov rdi rbp mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_78	add r13d ebx js JUMP_ADDR_305	cmp r13d ebx jb JUMP_ADDR_305	test r13d r13d js JUMP_ADDR_26	nop [rax+rax+CONST]	mov eax [r15] cmp eax CONST jbe JUMP_ADDR_372	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax	movzx edi [rdx] call sub_xxx mov esi eax mov rax [rbp+CONST] test rax rax jnz JUMP_ADDR_43	nop [rax+rax+CONST]	mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_45	nop [rax+CONST]	mov r13d CONST test [rbp+CONST] CONST jnz JUMP_ADDR_27	jmp JUMP_ADDR_30	endbr64 mov edi [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov edx CONST call sub_xxx xor r9d r9d mov r12 rax jmp JUMP_ADDR_59	endbr64 test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_83	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_396	mov eax [r15] test r9d r9d jz JUMP_ADDR_347	cmp eax CONST ja JUMP_ADDR_381	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] movsxd rdx r13d mov [rax] rdx jmp JUMP_ADDR_48	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR movzx eax ds:xxx lea rdi GLOBAL_VAR jmp ds:xxx	endbr64 mov r10d CONST	mov eax [r15] test r9d r9d jz JUMP_ADDR_102	cmp eax CONST ja JUMP_ADDR_306	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rsp+CONST+var_xxx] CONST xor r9d r9d mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax	test ebx ebx js JUMP_ADDR_245	jnz JUMP_ADDR_168	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_167	cmp r10d CONST jnz JUMP_ADDR_394	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_394	mov r8d CONST lea r12 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST	mov [rsp+CONST+var_xxx] CONST xor edx edx jmp JUMP_ADDR_354	endbr64 mov eax [r15] mov r10d CONST test r9d r9d jnz JUMP_ADDR_91	test ecx ecx jz JUMP_ADDR_307	cmp eax CONST ja JUMP_ADDR_367	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movzx eax [rdx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_94	endbr64 jmp JUMP_ADDR_36	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR mov r9d CONST mov r10d CONST movzx eax ds:xxx lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov r9d CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR movzx eax ds:xxx jmp ds:xxx	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rcx GLOBAL_VAR xor r12d r12d movzx eax ds:xxx lea rcx GLOBAL_VAR mov rax ds:xxx mov ecx CONST jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov r12d CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR movzx eax ds:xxx jmp ds:xxx	endbr64 mov r11 [rsp+CONST+var_xxx] mov r14d [r11+CONST] lea rax [r11+CONST] mov [rsp+CONST+var_xxx] rax cmp r14d CONST jz JUMP_ADDR_402	lea eax [r14+CONST] xor ebx ebx cmp eax CONST jbe JUMP_ADDR_429	lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR movzx edx ds:xxx lea rax GLOBAL_VAR jmp ds:xxx	endbr64 lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx call sub_xxx mov ecx [rsp+CONST+var_xxx] lea r8 GLOBAL_VAR lea rsi GLOBAL_VAR cmp eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_305	mov rax [rsp+CONST+var_xxx] mov r14d [rax] cmp r14d CONST jz JUMP_ADDR_24	lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR movzx edx ds:xxx lea rax GLOBAL_VAR jmp ds:xxx	endbr64 mov r11 [rsp+CONST+var_xxx] mov r14d [r11+CONST] lea rax [r11+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax lea eax [r14+CONST] cmp eax CONST jbe JUMP_ADDR_406	mov eax [r15] cmp eax CONST ja JUMP_ADDR_352	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax mov r14d [r11+CONST]	mov eax [rdx] mov [rsp+CONST+var_xxx] eax test eax eax jns JUMP_ADDR_121	neg eax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_121	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	jmp JUMP_ADDR_88	endbr64 cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_411	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	jmp JUMP_ADDR_88	endbr64 mov eax [rsp+CONST+var_xxx] test eax eax mov eax CONST cmovnz eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	jmp JUMP_ADDR_88	endbr64 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	jmp JUMP_ADDR_88	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST movzx eax ds:xxx lea rdi GLOBAL_VAR mov rax ds:xxx jmp rax	endbr64 mov rax [rsp+CONST+var_xxx] mov r14d [rax+CONST] lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea eax [r14+CONST] cmp eax CONST ja UNK_ADDR	lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST movzx eax ds:xxx lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] CONST mov rax ds:xxx jmp rax	endbr64 mov eax [r15] cmp eax CONST ja JUMP_ADDR_327	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] test rax rax jz JUMP_ADDR_410	mov [rsp+CONST+var_xxx] rax xor r9d r9d mov r14d CONST mov r10d CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_94	endbr64 test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_466	mov edx r10d and edx CONST	mov eax [rsp+CONST+var_xxx] movzx edx dl shl r9d CONST mov [rsp+CONST+var_xxx] CONST or dh CONST mov [rsp+CONST+var_xxx] ebx mov [rsp+CONST+var_xxx+CONST] eax lea eax [r12+r12] or eax edx movzx edx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r14d or eax r9d shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx mov [rsp+CONST+var_xxx] ax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax test r10d r10d jnz JUMP_ADDR_335	mov eax [r15+CONST] cmp eax CONST ja JUMP_ADDR_393	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15+CONST] eax	movsd xmm0 [rdx] movsd [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_379	endbr64 test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_465	mov edx r10d and edx CONST	mov eax [rsp+CONST+var_xxx] movzx edx dl shl r9d CONST mov [rsp+CONST+var_xxx] CONST or dh CONST mov [rsp+CONST+var_xxx] ebx mov [rsp+CONST+var_xxx+CONST] eax lea eax [r12+r12] or eax edx movzx edx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r14d or eax r9d shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx movzx edx [rsp+CONST+var_xxx] shl edx CONST or eax edx mov [rsp+CONST+var_xxx] ax mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax test r10d r10d jnz JUMP_ADDR_339	mov eax [r15+CONST] cmp eax CONST ja JUMP_ADDR_392	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15+CONST] eax	movsd xmm0 [rdx] movsd [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_341	endbr64 mov r10d CONST jmp JUMP_ADDR_90	endbr64 mov eax [r15] test r9d r9d jz JUMP_ADDR_328	cmp eax CONST ja JUMP_ADDR_391	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] jmp JUMP_ADDR_333	endbr64 mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_431	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_431	lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rdx] CONST	cmp r13d CONST jz JUMP_ADDR_78	add r13d CONST jmp JUMP_ADDR_48	xor ebx ebx	mov [rsp+CONST+var_xxx] CONST	cmp r14d CONST lea rcx unk_xxx lea rax GLOBAL_VAR cmovnz rcx rax cmp r10d CONST jz JUMP_ADDR_274	cmp r10d CONST jz JUMP_ADDR_258	cmp r10d CONST jz JUMP_ADDR_255	lea r11 [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] movsxd rdi r10d mov r12 r11 nop [rax+CONST]	mov rax rsi xor edx edx sub r12 CONST div rdi mov edx [rcx+rdx*4] mov [r12] edx mov rdx rsi mov rsi rax cmp rdi rdx jbe JUMP_ADDR_173	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_180	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_180	mov r8d [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rdx r11 mov rsi r12 lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r9d mov [rsp+CONST+var_xxx] r11 call sub_xxx mov r10d [rsp+CONST+var_xxx] mov r9d [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov r12 rax	cmp r10d CONST jnz JUMP_ADDR_180	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_180	mov rdx r11 mov rsi r11 mov rdi r12 mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r9d mov [rsp+CONST+var_xxx] r11 call sub_xxx mov r10d [rsp+CONST+var_xxx] mov r9d [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov r12 rax	mov r8 r11 sub r8 r12 mov rax r8 sar rax CONST mov rcx rax cmp rax rbx jge JUMP_ADDR_248	sub rbx rax mov eax CONST mov r11d [rsp+CONST+var_xxx] mov rdx rbx cmovs rdx rax mov ebx edx test r11d r11d jnz JUMP_ADDR_212	mov r8d [rsp+CONST+var_xxx] sub r8d ecx sub r8d edx cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_186	movzx eax [rsp+CONST+var_xxx] and eax CONST	cmp r10d CONST jnz JUMP_ADDR_186	lea edx [r8+CONST] test al al cmovnz r8d edx	mov eax [rsp+CONST+var_xxx] or eax [rsp+CONST+var_xxx] or eax r9d jz JUMP_ADDR_266	sub r8d CONST cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_486	test r9d r9d jz JUMP_ADDR_285	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_425	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_425	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST	cmp r13d CONST jz JUMP_ADDR_78	add r13d CONST	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_204	cmp r10d CONST jnz JUMP_ADDR_204	mov edx [rsp+CONST+var_xxx] test edx edx jz JUMP_ADDR_204	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_438	mov rsi [rax+CONST] mov rdi [rax+CONST] cmp rsi rdi jnb JUMP_ADDR_438	lea rdx [CONST_VAR+CONST] mov [rax+CONST] rdx mov [CONST_VAR] CONST cmp r13d CONST jz JUMP_ADDR_78	cmp rdi rdx jbe JUMP_ADDR_441	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] r14d cmp r14d CONST jz JUMP_ADDR_78	cmp r13d CONST jz JUMP_ADDR_78	add r13d CONST	add ebx r8d test ebx ebx jg JUMP_ADDR_279	mov rbx [rbp+CONST] mov rax rbx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_428	mov [rsp+CONST+var_xxx] rcx mov rdx rcx mov rsi r12 mov rdi rbp call callfunc_xxx mov rcx [rsp+CONST+var_xxx] cmp rcx rax jnz JUMP_ADDR_78	movsxd rax r13d xor edx edx add rax rcx js JUMP_ADDR_360	cmp rax rcx jb JUMP_ADDR_360	movsxd rcx eax mov r13d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_305	test eax eax jns JUMP_ADDR_48	jmp JUMP_ADDR_26	test r9d r9d jz JUMP_ADDR_262	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_422	mov rcx [rax+CONST] cmp rcx [rax+CONST] jnb JUMP_ADDR_422	lea rsi [rcx+CONST] mov [rax+CONST] rsi mov [rcx] CONST	cmp r13d CONST jz JUMP_ADDR_78	sub [rsp+CONST+var_xxx] CONST add r13d CONST	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_228	cmp r10d CONST jnz JUMP_ADDR_228	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_228	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_460	mov rsi [rax+CONST] mov rdi [rax+CONST] cmp rsi rdi jnb JUMP_ADDR_460	lea rcx [CONST_VAR+CONST] mov [rax+CONST] rcx mov [CONST_VAR] CONST cmp r13d CONST jz JUMP_ADDR_78	cmp rcx rdi jnb JUMP_ADDR_463	lea rsi [rcx+CONST] mov [rax+CONST] rsi mov [rcx] r14d cmp r14d CONST jz JUMP_ADDR_78	cmp r13d CONST jz JUMP_ADDR_78	sub [rsp+CONST+var_xxx] CONST add r13d CONST	mov eax [rsp+CONST+var_xxx] sar r8 CONST add edx r8d mov r14 r8 sub eax edx mov [rsp+CONST+var_xxx] eax test ebx ebx jle JUMP_ADDR_234	movsxd rdx ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx rax jnz JUMP_ADDR_78	xor eax eax add r13d ebx js JUMP_ADDR_480	cmp r13d edx jb JUMP_ADDR_480	test eax eax jnz JUMP_ADDR_305	test r13d r13d js JUMP_ADDR_26	mov rbx [rbp+CONST] mov rax rbx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_421	mov rdx r14 mov rsi r12 mov rdi rbp call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_78	movsxd rax r13d xor edx edx add rax r14 js JUMP_ADDR_479	cmp rax r14 jb JUMP_ADDR_479	movsxd rcx eax mov r13d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_305	test eax eax js JUMP_ADDR_26	mov eax [rsp+CONST+var_xxx] test eax eax jle JUMP_ADDR_48	movsxd r14 eax mov esi CONST mov rdi rbp mov rdx r14 call sub_xxx cmp r14 rax jnz JUMP_ADDR_78	add r14d r13d mov r13d r14d jo JUMP_ADDR_305	test r13d r13d jns JUMP_ADDR_48	jmp JUMP_ADDR_26	mov ebx CONST jmp JUMP_ADDR_169	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_478	mov ecx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdx r15 mov rdi rbp add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_353	movzx eax [rsp+CONST+var_xxx] and eax CONST cmp r10d CONST jnz JUMP_ADDR_252	test al al jz JUMP_ADDR_252	mov [r12+CONST] CONST lea rdx [r12+CONST] sub r11 rdx mov r12 rdx mov r8 r11	mov rcx r8 mov esi CONST sar rcx CONST sub rbx rcx mov rdx rbx cmovs rdx rsi mov esi [rsp+CONST+var_xxx] mov ebx edx test esi esi jnz JUMP_ADDR_212	mov r8d [rsp+CONST+var_xxx] sub r8d ecx sub r8d edx jmp JUMP_ADDR_184	mov rax sub_xxx mov [rsp+CONST+var_xxx] rbp mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_8	lea r11 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov r12 r11 nop [rax+rax+CONST]	mov rdx rax sub r12 CONST and edx CONST mov edx [rcx+rdx*4] mov [r12] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_256	jmp JUMP_ADDR_174	lea r11 [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov r12 r11 nop [rax+rax+CONST]	mov rdx rax sub r12 CONST and edx CONST mov edx [rcx+rdx*4] mov [r12] edx mov rdx rax shr rax CONST cmp rdx CONST ja JUMP_ADDR_259	jmp JUMP_ADDR_174	call sub_xxx jmp JUMP_ADDR_49	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_323	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_455	mov rcx [rax+CONST] cmp rcx [rax+CONST] jnb JUMP_ADDR_455	lea rsi [rcx+CONST] mov [rax+CONST] rsi mov [rcx] CONST jmp JUMP_ADDR_216	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_194	test r8d r8d jle JUMP_ADDR_483	movsxd rdx r8d mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r9d mov [rsp+CONST+var_xxx] r8d call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx rax jnz JUMP_ADDR_78	mov r8d [rsp+CONST+var_xxx] xor eax eax mov r9d [rsp+CONST+var_xxx] mov r10d [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] add r13d r8d js JUMP_ADDR_482	cmp r13d edx jb JUMP_ADDR_482	mov r8d eax test eax eax jnz JUMP_ADDR_305	test r13d r13d jns JUMP_ADDR_188	jmp JUMP_ADDR_26	lea r11 [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi CONST mov r12 r11 nop [rax+rax+CONST]	mov rax rsi mov r8 rsi sub r12 CONST mul rdi shr rdx CONST lea rax [rdx+rdx*4] add rax rax sub r8 rax mov eax [rcx+r8*4] mov [r12] eax mov rax rsi mov rsi rdx cmp rax CONST ja JUMP_ADDR_275	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_177	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_177	jmp JUMP_ADDR_176	movsxd r14 ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rcx mov rdx r14 call sub_xxx cmp r14 rax jnz JUMP_ADDR_78	xor eax eax add r13d ebx mov rcx [rsp+CONST+var_xxx] js JUMP_ADDR_481	cmp r13d ebx jb JUMP_ADDR_481	test eax eax jnz JUMP_ADDR_305	test r13d r13d jns JUMP_ADDR_205	jmp JUMP_ADDR_26	mov edi [rsp+CONST+var_xxx] test edi edi jz JUMP_ADDR_414	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_454	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_454	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_192	cmp ebx CONST jz JUMP_ADDR_371	movsxd rsi ebx mov rdi r12 call sub_xxx mov r14 rax	mov ebx [rsp+CONST+var_xxx] sub ebx eax js JUMP_ADDR_356	mov r11d [rsp+CONST+var_xxx] test r11d r11d jnz JUMP_ADDR_294	test ebx ebx jnz JUMP_ADDR_373	mov rax [rbp+CONST] mov rdx rax sub rdx unk_xxx cmp [rsp+CONST+var_xxx] rdx jbe JUMP_ADDR_443	mov rdx r14 mov rsi r12 mov rdi rbp call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_78	movsxd rax r13d xor edx edx add rax r14 js JUMP_ADDR_485	cmp rax r14 jb JUMP_ADDR_485	movsxd rcx eax mov r13d eax cmp rax rcx mov ecx CONST cmovnz edx ecx test edx edx jnz JUMP_ADDR_305	test eax eax js JUMP_ADDR_26	mov r10d [rsp+CONST+var_xxx] test r10d r10d jz JUMP_ADDR_48	test ebx ebx jz JUMP_ADDR_48	movsxd rbx ebx mov esi CONST mov rdi rbp mov rdx rbx call sub_xxx cmp rbx rax jnz JUMP_ADDR_78	add ebx r13d mov r13d ebx jno JUMP_ADDR_243	nop [rax+rax+CONST]	mov rax CONST mov r13d CONST mov fs:xxx CONST jmp JUMP_ADDR_26	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_93	test r12d r12d jnz JUMP_ADDR_368	cmp eax CONST ja JUMP_ADDR_434	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov eax [rdx] mov [rsp+CONST+var_xxx] CONST xor r9d r9d mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_94	cmp ebx CONST jz JUMP_ADDR_395	cmp ebx CONST jg JUMP_ADDR_395	xor eax eax xor r14d r14d lea r12 unk_xxx jmp JUMP_ADDR_291	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_42	call sub_xxx jmp JUMP_ADDR_14	test ebx ebx jle JUMP_ADDR_48	movsxd r12 ebx mov esi CONST mov rdi rbp mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_78	xor eax eax add r13d ebx js JUMP_ADDR_484	cmp r13d ebx jb JUMP_ADDR_484	test eax eax jz JUMP_ADDR_243	jmp JUMP_ADDR_305	mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_218	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_473	mov rcx [rax+CONST] cmp rcx [rax+CONST] jnb JUMP_ADDR_473	lea rsi [rcx+CONST] mov [rax+CONST] rsi mov [rcx] CONST jmp JUMP_ADDR_216	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_143	test ecx ecx jnz JUMP_ADDR_382	test r12d r12d jnz JUMP_ADDR_444	cmp eax CONST ja JUMP_ADDR_469	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsxd rax [rdx] nop [rax+CONST]	test rax rax js JUMP_ADDR_401	mov [rsp+CONST+var_xxx] rax xor r9d r9d mov r10d CONST jmp JUMP_ADDR_94	test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_378	mov edx [r15+CONST] or [rsp+CONST+var_xxx+CONST] CONST cmp edx CONST ja JUMP_ADDR_448	mov eax edx add edx CONST add rax [r15+CONST] mov [r15+CONST] edx	movdqa xmm3 [rax] movaps [rsp+CONST+var_xxx] xmm3 jmp JUMP_ADDR_379	test [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_385	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx fld CONST fstp CONST	lea rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov rdi rbp lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax call sub_xxx test eax eax js JUMP_ADDR_78	xor edx edx add r13d eax js JUMP_ADDR_477	cmp r13d eax jb JUMP_ADDR_477	test edx edx jz JUMP_ADDR_243	jmp JUMP_ADDR_305	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_58	test ecx ecx jnz JUMP_ADDR_388	test r12d r12d jnz JUMP_ADDR_449	cmp eax CONST ja JUMP_ADDR_471	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r13d jmp JUMP_ADDR_48	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_126	sub rbx rax mov eax CONST mov rdx rbx cmovs rdx rax mov ebx edx	mov edi [rsp+CONST+var_xxx] test edi edi jnz JUMP_ADDR_212	mov rcx r8 mov r8d [rsp+CONST+var_xxx] sar rcx CONST sub r8d edx sub r8d ecx jmp JUMP_ADDR_186	mov rbx [rbp+CONST] mov rax rbx sub rax unk_xxx cmp [rsp+CONST+var_xxx] rax jbe JUMP_ADDR_398	mov rdx r14 mov rsi r12 mov rdi rbp call callfunc_xxx cmp rax r14 jnz JUMP_ADDR_78	movsxd rax r13d xor edx edx add rax r14 js JUMP_ADDR_360	cmp rax r14 jnb JUMP_ADDR_209	mov edx CONST jmp JUMP_ADDR_209	test ebx ebx jle JUMP_ADDR_40	movsxd r12 ebx mov esi CONST mov rdi rbp mov rdx r12 call sub_xxx cmp r12 rax jnz JUMP_ADDR_78	add r13d ebx js JUMP_ADDR_305	cmp r13d ebx jb JUMP_ADDR_305	test r13d r13d jns JUMP_ADDR_40	jmp JUMP_ADDR_26	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_105	cmp eax CONST ja JUMP_ADDR_433	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movzx eax [rdx] mov [rsp+CONST+var_xxx] CONST xor r9d r9d mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_94	mov rdi r12 call sub_xxx mov r14 rax jmp JUMP_ADDR_291	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax jmp JUMP_ADDR_74	movsxd rdx ebx mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rdx call sub_xxx mov rdx [rsp+CONST+var_xxx] cmp rdx rax jnz JUMP_ADDR_78	add r13d ebx js JUMP_ADDR_305	cmp r13d ebx jb JUMP_ADDR_305	test r13d r13d jns JUMP_ADDR_294	jmp JUMP_ADDR_26	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx fld CONST fstp CONST	lea rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov rdi rbp lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax call sub_xxx test eax eax jns JUMP_ADDR_342	jmp JUMP_ADDR_78	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_86	cmp eax CONST ja JUMP_ADDR_447	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsx rax [rdx] jmp JUMP_ADDR_333	mov edx [r15+CONST] or [rsp+CONST+var_xxx+CONST] CONST cmp edx CONST ja JUMP_ADDR_453	mov eax edx add edx CONST add rax [r15+CONST] mov [r15+CONST] edx	movdqa xmm2 [rax] movaps [rsp+CONST+var_xxx] xmm2 jmp JUMP_ADDR_341	cmp eax CONST ja JUMP_ADDR_452	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r13b jmp JUMP_ADDR_48	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_161	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_156	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_150	xor r8d r8d lea r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_100	mov eax CONST mov r14d CONST lea r12 unk_xxx jmp JUMP_ADDR_291	mov rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx mov [rsp+CONST+var_xxx] r9d mov rdi rbx call sub_xxx mov rdi rbx lea rsi ds:xxx call sub_xxx mov r9d [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] test eax eax mov [rsp+CONST+var_xxx] eax jns JUMP_ADDR_83	lea rdi GLOBAL_VAR call sub_xxx	call sub_xxx jmp JUMP_ADDR_357	mov rax CONST mov fs:xxx CONST nop [rax+rax+CONST]	mov r13d CONST jmp JUMP_ADDR_28	neg rax mov r9d CONST mov r10d CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_94	lea rax [r11+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax mov eax [r11+CONST] sub eax CONST cmp eax CONST jbe JUMP_ADDR_456	mov eax [r15] cmp eax CONST ja JUMP_ADDR_435	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsxd rax [rdx] mov edx CONST mov r14d [r11+CONST] movsxd rbx edx test eax eax cmovns rbx rax jmp JUMP_ADDR_117	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx call sub_xxx mov ecx [rsp+CONST+var_xxx] lea r8 GLOBAL_VAR lea rsi GLOBAL_VAR cmp eax CONST jz JUMP_ADDR_305	test eax eax jz JUMP_ADDR_124	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_124	jmp JUMP_ADDR_24	mov eax CONST lea r12 GLOBAL_VAR cmp ebx eax cmovl ebx eax jmp JUMP_ADDR_290	mov rax CONST mov rax fs:xxx mov rax [rax] mov edi [rax+CONST] mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rax movzx eax [rax] mov [rsp+CONST+var_xxx] edi test al al setz dl cmp al CONST setz al or al dl jnz JUMP_ADDR_413	test edi edi jnz JUMP_ADDR_131	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_131	mov esi [rsp+CONST+var_xxx] test esi esi jz JUMP_ADDR_194	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_474	mov rdx [rax+CONST] cmp rdx [rax+CONST] jnb JUMP_ADDR_474	lea rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx] CONST jmp JUMP_ADDR_192	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_11	call sub_xxx jmp JUMP_ADDR_235	mov [rsp+CONST+var_xxx] r10d mov esi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8	mov rdi rbp call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] cmp eax CONST mov r10d [rsp+CONST+var_xxx] jnz JUMP_ADDR_216	jmp JUMP_ADDR_78	mov [rsp+CONST+var_xxx] rcx mov esi CONST mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r8d	mov rdi rbp call sub_xxx mov r8d [rsp+CONST+var_xxx] mov r10d [rsp+CONST+var_xxx] cmp eax CONST mov rcx [rsp+CONST+var_xxx] jnz JUMP_ADDR_192	jmp JUMP_ADDR_78	mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_206	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx call sub_xxx movsxd rbx eax cmp ebx CONST jz JUMP_ADDR_305	mov rax [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] lea rsi GLOBAL_VAR lea r8 GLOBAL_VAR mov r14d [rax] jmp JUMP_ADDR_117	mov esi CONST mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_165	jmp JUMP_ADDR_78	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_370	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_310	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_405	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_27	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_27	mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8d call sub_xxx mov r8d [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_78	cmp r13d CONST jz JUMP_ADDR_78	mov rax [rbp+CONST] test rax rax jnz JUMP_ADDR_468	mov esi r14d mov rdi rbp mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8d call sub_xxx mov r8d [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_202	jmp JUMP_ADDR_78	mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_295	cmp eax CONST ja JUMP_ADDR_472	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movsx rax [rdx] jmp JUMP_ADDR_333	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_384	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx jmp JUMP_ADDR_338	cmp eax CONST ja JUMP_ADDR_470	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	mov rax [rdx] mov [rax] r13w jmp JUMP_ADDR_48	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_390	mov rax [r15+CONST] add rax CONST and rax CONST lea rdx [rax+CONST] mov [r15+CONST] rdx jmp JUMP_ADDR_387	mov [rsp+CONST+var_xxx] rcx mov esi CONST mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r8d jmp JUMP_ADDR_426	mov [rsp+CONST+var_xxx] r10d mov esi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 jmp JUMP_ADDR_423	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx call sub_xxx mov ecx [rsp+CONST+var_xxx] lea r8 GLOBAL_VAR lea rsi GLOBAL_VAR cmp eax CONST jz JUMP_ADDR_305	test eax eax jz JUMP_ADDR_403	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_403	jmp JUMP_ADDR_24	mov esi CONST mov rdi rbp mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] cmp eax CONST jz JUMP_ADDR_78	cmp r13d CONST jz JUMP_ADDR_78	mov rax [rbp+CONST] test rax rax jnz JUMP_ADDR_475	mov esi r14d mov rdi rbp mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] cmp eax CONST jnz JUMP_ADDR_226	jmp JUMP_ADDR_78	xor r10d r10d xor edx edx jmp JUMP_ADDR_153	xor r10d r10d xor edx edx jmp JUMP_ADDR_147	or eax CONST mov r13d CONST mov [rbp+CONST] eax mov rax CONST mov fs:xxx CONST jmp JUMP_ADDR_28	mov rdx [rax+CONST] mov rdi [rax+CONST] jmp JUMP_ADDR_200	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_332	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_451	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_351	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_446	mov [rsp+CONST+var_xxx] r10d mov esi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 jmp JUMP_ADDR_423	mov [rsp+CONST+var_xxx] rcx mov esi CONST mov [rsp+CONST+var_xxx] r10d mov [rsp+CONST+var_xxx] r8d jmp JUMP_ADDR_426	mov rcx [rax+CONST] mov rdi [rax+CONST] jmp JUMP_ADDR_224	mov edx CONST jmp JUMP_ADDR_52	mov edx CONST jmp JUMP_ADDR_344	call sub_xxx	mov edx CONST jmp JUMP_ADDR_238	mov eax CONST jmp JUMP_ADDR_232	mov eax CONST jmp JUMP_ADDR_282	mov eax CONST jmp JUMP_ADDR_271	xor r8d r8d jmp JUMP_ADDR_194	mov eax CONST jmp JUMP_ADDR_320	mov edx CONST jmp JUMP_ADDR_298	test r8d r8d jg JUMP_ADDR_268	xor r8d r8d jmp JUMP_ADDR_188
[ph]libcap-git-setcap_buffered_vfprintf_0
push r14 push r13 mov r13 rdx push r12 mov r12d ecx push rbp mov rbp rsi mov esi CONST push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax call sub_xxx cmp eax CONST jnz JUMP_ADDR_23	mov ecx r12d mov rsi rbp lea rdi [rsp+CONST+var_xxx] mov rdx r13 lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov eax [rbx+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] eax lea rax unk_xxx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov rbp CONST mov r12d eax test rbp rbp jz JUMP_ADDR_21	mov rsi sub_xxx mov rdi rsp mov rdx rbx call callfunc_xxx	mov edx [rbx] and edx CONST jz JUMP_ADDR_15	mov rax [rsp+CONST+var_xxx] mov rdx [rax+CONST] sub rdx [rax+CONST] sar rdx CONST mov r13d edx test edx edx jle JUMP_ADDR_11	mov r14 [rbx+CONST] mov rdx off_xxx sub rdx unk_xxx mov rcx r14 sub rcx unk_xxx cmp rdx rcx jbe JUMP_ADDR_22	mov rsi [rax+CONST] movsxd rdx r13d mov rdi rbx call callfunc_xxx cmp r13d eax mov eax CONST cmovnz r12d eax	test [rbx] CONST jnz JUMP_ADDR_11	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_11	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_26	sub [CONST_VAR] CONST	test rbp rbp jz JUMP_ADDR_13	mov rdi rsp xor esi esi call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_28	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov r13 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r13 jz JUMP_ADDR_19	mov eax fs:xxx test eax eax jnz JUMP_ADDR_24	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] r13	mov rax [rsp+CONST+var_xxx] add [CONST_VAR+CONST] CONST mov rdx [rax+CONST] sub rdx [rax+CONST] sar rdx CONST mov r13d edx test edx edx jg JUMP_ADDR_5	jmp JUMP_ADDR_7	mov rax sub_xxx mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_3	call sub_xxx mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_6	mov r12d CONST jmp JUMP_ADDR_13	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_18	call sub_xxx jmp JUMP_ADDR_18	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_11	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_11	call sub_xxx
[ph]libcap-git-setcap___get_errlist
endbr64 xor eax eax cmp edi CONST ja JUMP_ADDR_2	movsxd rdi edi lea rax off_xxx mov rax [rax+rdi*8]	retn
[ph]libcap-git-setcap___get_errname
endbr64 cmp edi CONST ja JUMP_ADDR_4	movsxd rdx edi lea rax unk_xxx movzx eax [rax+rdx*2] test edi edi jz JUMP_ADDR_3	test ax ax jz JUMP_ADDR_4	lea rdx GLOBAL_VAR add rax rdx retn	xor eax eax retn
[ph]libcap-git-setcap_read_int_2
mov rdx [CONST_VAR] lea rcx [rdx+CONST] mov eax [rdx] mov [CONST_VAR] rcx mov ecx [rdx+CONST] sub eax CONST sub ecx CONST cmp ecx CONST ja JUMP_ADDR_9	add rdx CONST mov r8d CONST jmp JUMP_ADDR_5	lea eax [rax+rax*4] mov esi r8d add eax eax sub esi ecx cmp esi eax jl JUMP_ADDR_7	add eax ecx	mov ecx [rdx] mov rsi rdx add rdx CONST sub ecx CONST cmp ecx CONST ja JUMP_ADDR_8	test eax eax js JUMP_ADDR_4	cmp eax CONST jle JUMP_ADDR_2	mov rsi rdx lea rdx [rdx+CONST] mov eax [CONST_VAR] sub eax CONST cmp eax CONST mov eax CONST jbe JUMP_ADDR_4	mov [CONST_VAR] rsi	retn
[ph]libcap-git-setcap___parse_one_specwc
endbr64 push r12 lea r10 [CONST_VAR+CONST] mov r11 rcx push rbp mov rbp rsi push rbx mov rbx rdx sub rsp CONST movzx eax [rdx+CONST] mov [rdx+CONST] CONST mov [rdx+CONST] CONST and ax CONST mov [rsp+CONST+var_xxx] r10 or ah CONST mov [rdx+CONST] ax mov r9d [CONST_VAR+CONST] lea eax [r9+CONST] cmp eax CONST jbe JUMP_ADDR_37	mov rax r10 xor esi esi lea rcx unk_xxx nop [rax+rax+CONST]	sub r9d CONST cmp r9d CONST ja JUMP_ADDR_4	movsxd rdx [rcx+r9*4] add rdx rcx jmp rdx	test sil sil jz JUMP_ADDR_6	mov [rsp+CONST+var_xxx] rax mov r10 rax	test [rbx+CONST] CONST jz JUMP_ADDR_8	mov [rbx+CONST] CONST	mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov eax [r10] cmp eax CONST jz JUMP_ADDR_35	sub eax CONST xor r12d r12d cmp eax CONST jbe JUMP_ADDR_29	mov [rbx+CONST] CONST mov [rbx] CONST cmp [r10] CONST jz JUMP_ADDR_32	mov rdx cs:xxx and [rbx+CONST] CONST test rdx rdx jnz JUMP_ADDR_78	mov eax [r10]	lea rdx [r10+CONST] lea ecx [rax+CONST] mov [rsp+CONST+var_xxx] rdx cmp ecx CONST ja JUMP_ADDR_16	lea rsi unk_xxx movsxd rcx [CONST_VAR+rcx*4] add rcx rsi jmp rcx	or [rbx+CONST] CONST mov eax [r10+CONST] lea rdx [r10+CONST]	cmp cs:xxx CONST mov [rsp+CONST+var_xxx] rdx mov [rbx+CONST] eax mov [rbx+CONST] CONST jz JUMP_ADDR_18	cmp eax CONST jle JUMP_ADDR_56	lea edx [rax+CONST] mov [rbx+CONST] CONST mov esi [rbx+CONST] cmp edx CONST ja JUMP_ADDR_43	lea rcx unk_xxx movsxd rdx [rcx+rdx*4] add rdx rcx jmp rdx	or [rbx+CONST] CONST nop [rax+CONST]	mov r9d [rax+CONST] add rax CONST mov esi CONST test r9d r9d jnz JUMP_ADDR_2	jmp JUMP_ADDR_5	mov [rbx+CONST] CONST jmp JUMP_ADDR_21	or [rbx+CONST] CONST jmp JUMP_ADDR_21	or [rbx+CONST] CONST jmp JUMP_ADDR_21	or [rbx+CONST] CONST jmp JUMP_ADDR_21	or [rbx+CONST] CONST jmp JUMP_ADDR_21	or [rbx+CONST] CONST jmp JUMP_ADDR_21	lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp eax CONST jz JUMP_ADDR_31	mov [rbx+CONST] eax	mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_10	mov eax [r10+CONST] lea rdx [r10+CONST] mov [rsp+CONST+var_xxx] rdx cmp eax CONST jz JUMP_ADDR_71	sub eax CONST cmp eax CONST jbe JUMP_ADDR_53	mov [rbx] CONST mov r10 rdx jmp JUMP_ADDR_11	mov eax [r10+CONST] lea r9 [r10+CONST] mov [rsp+CONST+var_xxx] r9 sub eax CONST cmp eax CONST jbe JUMP_ADDR_73	mov [rbx+CONST] ebp mov r10 r9 add rbp CONST mov r12d CONST mov [rsp+CONST+var_xxx] r9 jmp JUMP_ADDR_10	lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_42	mov rdx [rsp+CONST+var_xxx] cmp [rdx] CONST jnz JUMP_ADDR_42	lea r10 [rdx+CONST] mov [rsp+CONST+var_xxx] r10 cmp eax CONST jz JUMP_ADDR_41	lea ecx [rax+CONST] mov eax eax mov [rbx+CONST] ecx mov rcx [r11] cmp rax rcx cmovb rax rcx mov [r11] rax	mov r9d [rdx+CONST] jmp JUMP_ADDR_1	mov [rsp+CONST+var_xxx] r10 jmp JUMP_ADDR_1	mov [rbx+CONST] CONST nop [rax+rax+CONST]	mov rdi [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_67	sub rdi CONST mov rax r12 mov [rbx+CONST] rdi mov [rbx+CONST] rdi add rsp CONST pop rbx pop rbp pop r12 retn	movzx edx [rbx+CONST] and edx CONST cmp dl CONST sbb edx edx xor dl dl add edx CONST	mov [rbx+CONST] edx cmp esi CONST jnz JUMP_ADDR_44	mov edx CONST	mov [rbx+CONST] ebp add r12 rdx jmp JUMP_ADDR_44	movzx ecx [rbx+CONST] mov edx CONST test cl CONST jnz JUMP_ADDR_47	and ecx CONST mov edx CONST jnz JUMP_ADDR_47	movzx edx [rbx+CONST] shr dl CONST and edx CONST jmp JUMP_ADDR_47	lea rdi [rsp+CONST+var_xxx] call sub_xxx cmp eax CONST jz JUMP_ADDR_55	mov [rbx] eax	mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_11	mov rcx cs:xxx movsxd rdx eax mov r8 [rcx+rdx*8] test r8 r8 jz JUMP_ADDR_18	lea rdx [rbx+CONST] lea rcx [rbx+CONST] mov esi CONST mov rdi rbx call r8 movsxd rdx eax test eax eax mov eax [rbx+CONST] mov [rbx+CONST] rdx js JUMP_ADDR_18	cmp [rbx+CONST] CONST jnz JUMP_ADDR_44	test rdx rdx jz JUMP_ADDR_44	jmp JUMP_ADDR_49	or [rbx+CONST] CONST mov eax [r10+CONST] lea rdx [r10+CONST] cmp eax CONST jnz JUMP_ADDR_16	or [rbx+CONST] CONST add rdx CONST mov eax [rdx+CONST] jmp JUMP_ADDR_16	cmp [r10+CONST] CONST jz JUMP_ADDR_86	or [rbx+CONST] CONST lea rdx [r10+CONST] mov eax [r10+CONST] jmp JUMP_ADDR_16	mov [rbx+CONST] CONST cmp esi CONST jz JUMP_ADDR_92	mov rdi [rsp+CONST+var_xxx]	mov [rbx+CONST] rdi mov esi CONST call sub_xxx mov [rbx+CONST] rax add rsp CONST mov rax r12 pop rbx pop rbp pop r12 retn	mov edx CONST	mov [rbx+CONST] edx cmp esi CONST jnz JUMP_ADDR_66	jmp JUMP_ADDR_48	mov eax [r10+CONST] lea r9 [r10+CONST] mov [rsp+CONST+var_xxx] r9 sub eax CONST cmp eax CONST jbe JUMP_ADDR_87	mov [rbx+CONST] ebp add r12 CONST mov r10 r9 add rbp CONST mov [rsp+CONST+var_xxx] r9 jmp JUMP_ADDR_11	lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_36	mov r10 [rsp+CONST+var_xxx] cmp [r10] CONST jnz JUMP_ADDR_36	cmp eax CONST jz JUMP_ADDR_36	mov rcx [r11] lea edx [rax+CONST] mov eax eax mov [rbx+CONST] edx cmp rax rcx cmovb rax rcx add r10 CONST mov [rsp+CONST+var_xxx] r10 mov [r11] rax test edx edx js JUMP_ADDR_36	xor r12d r12d jmp JUMP_ADDR_10	mov ecx [r10] cmp [rdx+rcx*8] CONST mov rax rcx jz JUMP_ADDR_13	lea rdi [rsp+CONST+var_xxx] mov rsi rbx call sub_xxx test eax eax jz JUMP_ADDR_81	mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_12	mov rdx [rsp+CONST+var_xxx] mov eax [rdx] add rdx CONST jmp JUMP_ADDR_16	mov edx CONST jmp JUMP_ADDR_47	mov edx CONST jmp JUMP_ADDR_69	mov edx CONST jmp JUMP_ADDR_69	mov edx CONST jmp JUMP_ADDR_69	or [rbx+CONST] CONST lea rdx [r10+CONST] mov eax [r10+CONST] jmp JUMP_ADDR_16	lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_72	mov r10 [rsp+CONST+var_xxx] cmp [r10] CONST jnz JUMP_ADDR_72	cmp eax CONST jz JUMP_ADDR_72	mov rcx [r11] lea edx [rax+CONST] mov eax eax mov [rbx+CONST] edx cmp rax rcx cmovb rax rcx add r10 CONST mov [rsp+CONST+var_xxx] r10 mov [r11] rax test edx edx jns JUMP_ADDR_11	jmp JUMP_ADDR_72	mov eax [rbx+CONST] mov edx CONST jmp JUMP_ADDR_49
[ph]libcap-git-setcap__IO_file_doallocate
endbr64 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov eax [CONST_VAR+CONST] test eax eax js JUMP_ADDR_9	mov rbx [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_15	mov rsi rsp mov rdi rbp call callfunc_xxx test eax eax js JUMP_ADDR_9	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jz JUMP_ADDR_11	mov rbx [rsp+CONST+var_xxx] lea rax [rbx+CONST] cmp rax CONST ja JUMP_ADDR_9	mov rdi rbx call sub_xxx mov rsi rax test rax rax jz JUMP_ADDR_10	lea rdx [rax+rbx] mov ecx CONST mov rdi rbp call sub_xxx mov eax CONST	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_16	add rsp CONST pop rbx pop rbp pop r12 retn	mov ebx CONST mov rdi rbx call sub_xxx mov rsi rax test rax rax jnz JUMP_ADDR_6	mov eax CONST jmp JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] mov rdx rax shr rax CONST shr rdx CONST and eax CONST and edx CONST or eax edx sub eax CONST cmp eax CONST ja JUMP_ADDR_13	or [rbp+CONST] CONST jmp JUMP_ADDR_4	mov rbx CONST mov edi [rbp+CONST] mov r12d fs:xxx call sub_xxx mov fs:xxx r12d test eax eax jnz JUMP_ADDR_12	jmp JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap_fputs
endbr64 push r13 push r12 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST call sub_xxx mov edx [rbx] mov r12 rax and edx CONST jnz JUMP_ADDR_6	mov r13 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r13 jz JUMP_ADDR_5	mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	mov edx CONST cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov [CONST_VAR+CONST] r13	add [CONST_VAR+CONST] CONST	mov eax [rbx+CONST] test eax eax jnz JUMP_ADDR_12	mov [rbx+CONST] CONST	mov r13 [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx r13 sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_19	mov rdx r12 mov rsi rbp mov rdi rbx call callfunc_xxx mov r8d CONST cmp r12 rax jnz JUMP_ADDR_13	test [rbx] CONST jz JUMP_ADDR_14	add rsp CONST mov eax r8d pop rbx pop rbp pop r12 pop r13 retn	cmp eax CONST jz JUMP_ADDR_8	mov r8d CONST test [rbx] CONST jnz JUMP_ADDR_11	mov rdi [rbx+CONST] mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_11	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_20	sub [CONST_VAR] CONST add rsp CONST mov eax r8d pop rbx pop rbp pop r12 pop r13 retn	mov ecx CONST mov eax edx lock CONST ecx jz JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_9	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_11	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_11
[ph]libcap-git-setcap__IO_wfile_doallocate
endbr64 push rbp mov rbp rdi push rbx sub rsp CONST mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_3	mov rdx [rbp+CONST] sub rdx rax lea rax [rdx+CONST] shr rax CONST test [rbp+CONST] CONST cmovnz rdx rax lea rbx ds:xxx mov rdi rbx call sub_xxx mov rsi rax test rax rax jz JUMP_ADDR_4	lea rdx [rax+rbx] mov rdi rbp mov ecx CONST call sub_xxx add rsp CONST mov eax CONST pop rbx pop rbp retn	call sub_xxx mov rax [rbp+CONST] jmp JUMP_ADDR_1	add rsp CONST mov eax CONST pop rbx pop rbp retn
[ph]libcap-git-setcap__IO_getdelim
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] edx test rdi rdi jz JUMP_ADDR_39	test rsi rsi jz JUMP_ADDR_39	mov edx [rcx] mov rbx rcx mov rbp rdi mov ecx edx and ecx CONST jz JUMP_ADDR_23	and edx CONST jnz JUMP_ADDR_29	cmp [rbp+CONST] CONST jz JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_7	mov rax [rsp+CONST+var_xxx] mov edi CONST mov [rax] CONST call sub_xxx mov [rbp+CONST] rax test rax rax jz JUMP_ADDR_34	mov r8 [rbx+CONST] mov r14 [rbx+CONST] sub r14 r8 test r14 r14 jle JUMP_ADDR_30	xor r15d r15d jmp JUMP_ADDR_15	mov rax [rsp+CONST+var_xxx] lea r12 [r15+r14] mov rdi [rbp+CONST] lea rsi [r12+CONST] mov rax [rax] cmp rax rsi jnb JUMP_ADDR_12	add rax rax cmp rax rsi cmovnb rsi rax mov [rsp+CONST+CONST_VAR] rsi call sub_xxx mov rsi [rsp+CONST+CONST_VAR] test rax rax mov rdi rax jz JUMP_ADDR_34	mov [rbp+CONST] rax mov rax [rsp+CONST+var_xxx] mov r8 [rbx+CONST] mov [rax] rsi	add rdi r15 mov rdx r14 mov rsi r8 call sub_xxx add [rbx+CONST] r14 test r13 r13 jnz JUMP_ADDR_28	mov rdi rbx call sub_xxx cmp eax CONST jz JUMP_ADDR_28	mov r8 [rbx+CONST] mov r14 [rbx+CONST] mov r15 r12 sub r14 r8	mov esi [rsp+CONST+var_xxx] mov rdx r14 mov rdi r8 mov [rsp+CONST+CONST_VAR] r8 call sub_xxx mov r8 [rsp+CONST+CONST_VAR] mov r13 rax sub rax r8 add rax CONST test r13 r13 cmovnz r14 rax mov rax CONST sub rax r15 cmp rax r14 jg JUMP_ADDR_9	mov rax CONST mov r12 CONST mov fs:xxx CONST mov eax [rbx]	test ah CONST jnz JUMP_ADDR_22	mov rdi [rbx+CONST]	mov eax [CONST_VAR+CONST] sub eax CONST mov [CONST_VAR+CONST] eax jnz JUMP_ADDR_22	mov [CONST_VAR+CONST] CONST mov edx fs:xxx test edx edx jnz JUMP_ADDR_37	sub [CONST_VAR] CONST	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r12 fs:xxx mov rdi [rbx+CONST] cmp [CONST_VAR+CONST] r12 jz JUMP_ADDR_32	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_35	cmpxchg [CONST_VAR] edx	mov rdi [rbx+CONST] mov eax [rbx] mov [CONST_VAR+CONST] r12 add [CONST_VAR+CONST] CONST test al CONST jz JUMP_ADDR_4	mov r12 CONST jmp JUMP_ADDR_17	mov rax [rbp+CONST] mov [rax+r12] CONST mov eax [rbx] jmp JUMP_ADDR_17	mov r12 CONST jmp JUMP_ADDR_22	mov rdi rbx call sub_xxx cmp eax CONST jz JUMP_ADDR_34	mov r8 [rbx+CONST] mov r14 [rbx+CONST] sub r14 r8 jmp JUMP_ADDR_8	add [CONST_VAR+CONST] CONST and edx CONST jz JUMP_ADDR_4	mov r12 CONST jmp JUMP_ADDR_19	mov eax [rbx] mov r12 CONST jmp JUMP_ADDR_17	mov eax ecx lock CONST edx jz JUMP_ADDR_26	call sub_xxx jmp JUMP_ADDR_26	xchg eax [CONST_VAR] cmp eax CONST jle JUMP_ADDR_22	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST syscall jmp JUMP_ADDR_22	mov rax CONST mov r12 CONST mov fs:xxx CONST jmp JUMP_ADDR_22
[ph]libcap-git-setcap__IO_getline
endbr64 push r15 mov r15 rdx push r14 push r13 push r12 mov r12 rdi push rbp mov ebp ecx push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r9 test r9 r9 jz JUMP_ADDR_2	mov [r9] CONST	mov edx [r12+CONST] test edx edx jz JUMP_ADDR_21	test r15 r15 jz JUMP_ADDR_24	mov r14 [rsp+CONST+var_xxx] jmp JUMP_ADDR_7	cmp rbx r15 mov esi ebp mov rdi r13 cmova rbx r15 mov rdx rbx call sub_xxx mov rcx rax test rax rax jnz JUMP_ADDR_14	mov rdi r14 mov rdx rbx mov rsi r13 sub r15 rbx call sub_xxx add r14 rbx add [r12+CONST] rbx test r15 r15 jz JUMP_ADDR_12	mov r13 [r12+CONST] mov rbx [r12+CONST] sub rbx r13 test rbx rbx jg JUMP_ADDR_5	mov rdi r12 call sub_xxx cmp eax CONST jz JUMP_ADDR_17	cmp ebp eax jz JUMP_ADDR_19	sub r15 CONST mov [r14] al add r14 CONST test r15 r15 jnz JUMP_ADDR_7	nop [rax]	mov rax r14 sub rax [rsp+CONST+var_xxx]	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rbp rax mov eax [rsp+CONST+var_xxx] mov rbx r14 sub rbx [rsp+CONST+var_xxx] sub rbp r13 test eax eax js JUMP_ADDR_16	add rcx CONST cmp eax CONST sbb rbp CONST	mov rdx rbp mov rsi r13 mov rdi r14 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] lea rax [rbp+rbx+CONST] mov [r12+CONST] rcx add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx [rsp+CONST+var_xxx] mov rax r14 sub rax [rsp+CONST+var_xxx] test rdx rdx jz JUMP_ADDR_13	mov [rdx] CONST jmp JUMP_ADDR_13	mov eax [rsp+CONST+var_xxx] test eax eax jle JUMP_ADDR_22	mov [r14] bpl add r14 CONST jmp JUMP_ADDR_12	mov [r12+CONST] CONST jmp JUMP_ADDR_3	jz JUMP_ADDR_12	mov esi ebp mov rdi r12 call sub_xxx jmp JUMP_ADDR_12	xor eax eax jmp JUMP_ADDR_13	endbr64 xor r9d r9d jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__IO_wpadn
endbr64 push r15 mov r15 rdi push r14 push r13 lea r13 unk_xxx push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp esi CONST jz JUMP_ADDR_5	mov edi esi lea r13 unk_xxx cmp esi CONST jz JUMP_ADDR_5	lea rsi [rsp+CONST+var_xxx] lea rax [rsp+CONST+var_xxx] nop [rax+CONST]	mov rcx rax mov [rax] edi sub rax CONST cmp rsi rcx jnz JUMP_ADDR_3	mov r13 rsi	mov ebx edx cmp edx CONST jle JUMP_ADDR_11	mov rbp unk_xxx mov rax off_xxx xor r12d r12d sub rax rbp mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_9	mov edx CONST mov rsi r13 mov rdi r15 call callfunc_xxx add r12 rax cmp rax CONST jnz JUMP_ADDR_15	sub ebx CONST cmp ebx CONST jle JUMP_ADDR_12	mov r14 [r15+CONST] mov rax r14 sub rax rbp cmp [rsp+CONST+var_xxx] rax ja JUMP_ADDR_7	call sub_xxx jmp JUMP_ADDR_7	xor r12d r12d nop [rax+rax+CONST]	test ebx ebx jle JUMP_ADDR_15	mov rbp [r15+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_17	movsxd rdx ebx mov rsi r13 mov rdi r15 call callfunc_xxx add r12 rax	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_18	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx jmp JUMP_ADDR_14	call sub_xxx
[ph]libcap-git-setcap_save_for_wbackup
push r15 mov rcx rsi push r14 push r13 push r12 mov r12 rdi push rbp mov rbp rsi push rbx sub rsp CONST mov rdi [CONST_VAR+CONST] mov rax [r12+CONST] mov r8 [CONST_VAR+CONST] mov r9 [CONST_VAR+CONST] mov rdx rax mov r10 [CONST_VAR+CONST] sub rcx r8 mov r13 r9 mov r14 rcx sub r13 r10 sar r14 CONST mov r11 r13 sar r11 CONST mov rbx r14 mov rsi r14 test rax rax jz JUMP_ADDR_22	nop [rax+rax+CONST]	movsxd rcx [rdx+CONST] mov rdx [rdx] cmp rbx rcx cmovg rbx rcx test rdx rdx jnz JUMP_ADDR_2	mov rdx r14 sub rdx rbx cmp rdx r11 ja JUMP_ADDR_11	mov r15 r11 sub r15 rdx lea r13 ds:xxx add r10 r13 test rbx rbx js JUMP_ADDR_19	test rdx rdx jnz JUMP_ADDR_21	mov [CONST_VAR+CONST] r10	mov edx esi nop [rax+rax+CONST]	sub [rax+CONST] edx mov rax [rax] test rax rax jnz JUMP_ADDR_8	xor eax eax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rax ds:xxx mov [rsp+CONST+var_xxx] r9 mov rdi rax mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rax call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_24	test rbx rbx mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] lea rsi ds:xxx lea r13 [rax+CONST] js JUMP_ADDR_20	add rsi r8 mov rdi r13 call sub_xxx	mov rax [r12+CONST] mov rdi [rax+CONST] call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx [r12+CONST] add r10 r15 mov [rcx+CONST] r15 mov [rcx+CONST] r10	mov rdx rbp sub rdx [rcx+CONST] mov rax [r12+CONST] mov rsi rdx sar rsi CONST	mov [rcx+CONST] r13 test rax rax jnz JUMP_ADDR_7	jmp JUMP_ADDR_9	mov r10 r9 nop [rax+CONST]	mov rdx rbx lea rsi [r9+rbx*4] mov rdi r10 sub r15 rbx neg rdx call sub_xxx mov rax [r12+CONST] mov rdx rbp mov rsi [rax+CONST] mov rax [rax+CONST] sub rdx rsi lea rdi [rax+r15*4] sar rdx CONST call sub_xxx mov rcx [r12+CONST] add r13 [rcx+CONST] jmp JUMP_ADDR_15	mov r9 [rsp+CONST+var_xxx] neg rbx mov rdi r13 mov [rsp+CONST+var_xxx] r8 mov rdx rbx add rsi r9 call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rdx r14 mov rdi rax call sub_xxx jmp JUMP_ADDR_14	lea rsi [r8+rbx*4] mov rdi r10 call sub_xxx mov rcx [r12+CONST] mov rax [r12+CONST] sub rbp [rcx+CONST] add r13 [rcx+CONST] mov rsi rbp sar rsi CONST jmp JUMP_ADDR_16	mov r15 r11 test rcx rcx js JUMP_ADDR_18	mov [CONST_VAR+CONST] r9 jmp JUMP_ADDR_9	or eax CONST jmp JUMP_ADDR_10
[ph]libcap-git-setcap__IO_least_wmarker
endbr64 mov rax [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rsi [rax+CONST] mov rax rsi sar rax CONST test rdx rdx jz JUMP_ADDR_3	nop	movsxd rcx [rdx+CONST] mov rdx [rdx] cmp rax rcx cmovg rax rcx test rdx rdx jnz JUMP_ADDR_2	retn
[ph]libcap-git-setcap__IO_switch_to_main_wget_area
endbr64 mov rax [CONST_VAR+CONST] and [CONST_VAR] CONST mov rdx [rax+CONST] mov rcx [rax+CONST] mov [rax+CONST] rdx mov rdx [rax+CONST] mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax] rdx mov [rax+CONST] rdx mov [rax+CONST] rcx retn
[ph]libcap-git-setcap__IO_switch_to_wbackup_area
endbr64 mov rax [CONST_VAR+CONST] or [CONST_VAR] CONST mov rcx [rax+CONST] mov rdx [rax+CONST] mov rsi [rax+CONST] mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax+CONST] rdx mov [rax+CONST] rsi mov [rax+CONST] rcx mov [rax] rdx retn
[ph]libcap-git-setcap__IO_wsetb
endbr64 push r13 mov r13 rsi push r12 mov r12 rdx push rbp mov ebp ecx push rbx mov rbx rdi sub rsp CONST mov rdi [CONST_VAR+CONST] mov eax [rbx+CONST] mov r8 [CONST_VAR+CONST] test r8 r8 jz JUMP_ADDR_2	test al CONST jz JUMP_ADDR_3	mov edx eax or eax CONST mov [CONST_VAR+CONST] r13 and edx CONST test ebp ebp mov [CONST_VAR+CONST] r12 cmovnz eax edx mov [rbx+CONST] eax add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rdi r8 call sub_xxx mov rdi [rbx+CONST] mov eax [rbx+CONST] jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_wdefault_pbackfail
endbr64 push r15 mov r15 rdi push r14 push r13 push r12 push rbp mov ebp esi push rbx sub rsp CONST mov rbx [CONST_VAR+CONST] mov r13d [CONST_VAR] mov r12 [rbx] mov r14 [rbx+CONST] mov eax r13d and eax CONST cmp r12 r14 jbe JUMP_ADDR_4	test eax eax jz JUMP_ADDR_7	lea rax [r12+CONST] mov [rbx] rax mov eax ebp mov [r12+CONST] ebp	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test eax eax jz JUMP_ADDR_11	mov r12 [rbx+CONST] sub r12 r14 mov rbx r12 sar rbx CONST lea r13 ds:xxx mov rdi r13 call sub_xxx test rax rax jz JUMP_ADDR_17	add r12 rax mov rdx rbx mov rsi r14 mov [rsp+CONST] rax mov rdi r12 call sub_xxx mov rax [r15+CONST] mov rdi [rax+CONST] call sub_xxx mov rbx [r15+CONST] mov rcx [rsp+CONST] mov [rbx+CONST] rcx add rcx r13 mov [rbx] r12 mov [rbx+CONST] rcx mov [rbx+CONST] r12 jmp JUMP_ADDR_2	mov rax [CONST_VAR+CONST] movsx edx [rax+CONST] cmp edx esi jz JUMP_ADDR_16	cmp [rbx+CONST] CONST jz JUMP_ADDR_14	mov rsi r12 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_17	mov rbx [r15+CONST] mov r13d [r15] mov rcx [rbx] mov r12 [rbx+CONST] mov rax [rbx+CONST] jmp JUMP_ADDR_13	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_14	mov rcx r12 mov r12 [rbx+CONST]	mov rdx [rbx+CONST] or r13d CONST mov [r15] r13d mov [rbx+CONST] r12 mov [rbx+CONST] rdx mov [rbx+CONST] rax mov [rbx+CONST] rcx mov [rbx] r12 jmp JUMP_ADDR_2	mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_17	lea rdx [rax+CONST] mov rcx r12 mov [rbx+CONST] rax mov [rbx+CONST] rdx mov r12 rdx mov [rbx+CONST] rdx jmp JUMP_ADDR_13	sub rax CONST mov [CONST_VAR+CONST] rax mov eax edx jmp JUMP_ADDR_3	mov eax CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_wdefault_finish
endbr64 push rbp mov rdx [CONST_VAR+CONST] mov rbp rdi mov rdi [rdx+CONST] test rdi rdi jz JUMP_ADDR_2	test [rbp+CONST] CONST jz JUMP_ADDR_8	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_5	nop [rax+rax+CONST]	mov [rax+CONST] CONST mov rax [rax] test rax rax jnz JUMP_ADDR_4	cmp [rbp+CONST] CONST jz JUMP_ADDR_7	mov rdi [rdx+CONST] call sub_xxx mov [rbp+CONST] CONST	mov rdi rbp pop rbp jmp UNK_JUMP_ADDR	call sub_xxx mov rdx [rbp+CONST] mov [rdx+CONST] CONST mov [rdx+CONST] CONST jmp JUMP_ADDR_2
[ph]libcap-git-setcap__IO_wdefault_uflow
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_4	mov rdi rbx call callfunc_xxx cmp eax CONST jz JUMP_ADDR_3	mov rdx [rbx+CONST] mov rax [rdx] lea rcx [rax+CONST] mov eax [rax] mov [rdx] rcx add rsp CONST pop rbx pop rbp retn	add rsp CONST mov eax CONST pop rbx pop rbp retn	call sub_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap___woverflow
endbr64 push r12 mov r12d esi push rbp mov rbp rdi push rbx mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_3	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_4	mov rax [rbx+CONST] mov esi r12d pop rbx mov rdi rbp pop rbp pop r12 jmp rax	mov esi CONST call sub_xxx jmp JUMP_ADDR_1	call sub_xxx mov rax [rbx+CONST] mov esi r12d pop rbx mov rdi rbp pop rbp pop r12 jmp rax
[ph]libcap-git-setcap__IO_wdefault_xsputn
endbr64 test rdx rdx jz JUMP_ADDR_19	push r15 push r14 mov r14 rsi push r13 mov r13 rdi push r12 mov r12 rdx push rbp mov rbp rdx push rbx sub rsp CONST jmp JUMP_ADDR_5	mov rbx [r13+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_16	mov esi r15d mov rdi r13 call callfunc_xxx cmp eax CONST jz JUMP_ADDR_18	sub rbp CONST	mov r15 [r13+CONST] mov rcx r14 mov rdi [r15+CONST] mov rax [r15+CONST] sub rax rdi test rax rax jle JUMP_ADDR_8	sar rax CONST cmp rax rbp cmova rax rbp mov rbx rax cmp rax CONST jg JUMP_ADDR_11	test rax rax jnz JUMP_ADDR_13	test rbp rbp jz JUMP_ADDR_12	mov eax [r13+CONST] mov r15d [rcx] lea r14 [rcx+CONST] test eax eax jnz JUMP_ADDR_2	mov esi CONST mov rdi r13 call sub_xxx jmp JUMP_ADDR_2	mov rdx rax mov rsi r14 mov [rsp+CONST+var_xxx] r14 sub rbp rbx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov [r15+CONST] rax lea rcx [rcx+rbx*4] test rbp rbp jnz JUMP_ADDR_9	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rsi ds:xxx xor eax eax nop [rax+rax+CONST]	mov edx [r14+rax] mov [CONST_VAR+rax] edx add rax CONST cmp rsi rax jnz JUMP_ADDR_14	add rdi rsi lea rcx [r14+CONST_VAR] sub rbp rbx mov [r15+CONST] rdi jmp JUMP_ADDR_8	call sub_xxx mov esi r15d mov rdi r13 call callfunc_xxx cmp eax CONST jnz JUMP_ADDR_4	nop	sub r12 rbp jmp JUMP_ADDR_12	xor eax eax retn
[ph]libcap-git-setcap__IO_wdoallocbuf
endbr64 mov rax [CONST_VAR+CONST] cmp [rax+CONST] CONST jz JUMP_ADDR_2	retn	push r12 push rbp push rbx mov rbx rdi test [CONST_VAR] CONST jnz JUMP_ADDR_9	mov rax [rax+CONST] call callfunc_xxx cmp eax CONST jnz JUMP_ADDR_7	mov rax [rbx+CONST] mov edx [rbx+CONST] mov rdi [rax+CONST] lea r12 [rax+CONST] lea rbp [rax+CONST] test rdi rdi jz JUMP_ADDR_6	test dl CONST jz JUMP_ADDR_8	or edx CONST mov [rax+CONST] rbp mov [rax+CONST] r12 mov [rbx+CONST] edx	pop rbx pop rbp pop r12 retn	call sub_xxx mov rax [rbx+CONST] mov edx [rbx+CONST] jmp JUMP_ADDR_6	mov edx [CONST_VAR+CONST] lea r12 [rax+CONST] lea rbp [rax+CONST] jmp JUMP_ADDR_6
[ph]libcap-git-setcap__IO_wdefault_doallocate
endbr64 push r12 push rbp push rbx mov rbx rdi mov edi CONST call sub_xxx test rax rax jz JUMP_ADDR_5	mov rdx [rbx+CONST] mov rbp rax lea r12 [rax+CONST] mov eax [rbx+CONST] mov rdi [rdx+CONST] test rdi rdi jz JUMP_ADDR_3	test al CONST jz JUMP_ADDR_4	and eax CONST mov [rdx+CONST] rbp mov [rdx+CONST] r12 mov [rbx+CONST] eax pop rbx mov eax CONST pop rbp pop r12 retn	call sub_xxx mov rdx [rbx+CONST] mov eax [rbx+CONST] jmp JUMP_ADDR_3	pop rbx mov eax CONST pop rbp pop r12 retn
[ph]libcap-git-setcap__IO_switch_to_wget_mode
endbr64 mov rax [CONST_VAR+CONST] push rbx mov rbx rdi mov rdx [rax+CONST] cmp rdx [rax+CONST] jbe JUMP_ADDR_3	mov rax [rax+CONST] mov esi CONST call callfunc_xxx cmp eax CONST jz JUMP_ADDR_7	mov rax [rbx+CONST] mov rdx [rax+CONST]	mov ecx [rbx] test ch CONST jnz JUMP_ADDR_8	mov rsi [rax+CONST] mov [rax+CONST] rsi cmp [rax+CONST] rdx jnb JUMP_ADDR_6	mov [rax+CONST] rdx	and ch CONST mov [rax] rdx mov [rax+CONST] rdx mov [rax+CONST] rdx xor eax eax mov [rbx] ecx	pop rbx retn	mov rsi [rax+CONST] mov [rax+CONST] rsi jmp JUMP_ADDR_6
[ph]libcap-git-setcap__IO_free_wbackup_area
endbr64 push rbx mov edx [CONST_VAR] mov rbx rdi mov rax [CONST_VAR+CONST] mov rdi [rax+CONST] test dh CONST jnz JUMP_ADDR_2	call sub_xxx mov rax [rbx+CONST] mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST pop rbx retn	and dh CONST mov rcx [rax+CONST] mov [rbx] edx mov rdx [rax+CONST] mov [rax] rdi mov [rax+CONST] rdx mov rdx [rax+CONST] mov [rax+CONST] rcx mov [rax+CONST] rdi mov rdi rdx mov [rax+CONST] rdx jmp JUMP_ADDR_1
[ph]libcap-git-setcap___wuflow
endbr64 push rbp push rbx sub rsp CONST mov edx [CONST_VAR+CONST] test edx edx js JUMP_ADDR_10	mov rbp rdi jz JUMP_ADDR_12	test [rbp+CONST] CONST jnz JUMP_ADDR_9	mov rax [rbp+CONST] mov rdx [rax] mov rcx [rax+CONST] cmp rdx rcx jb JUMP_ADDR_11	mov edx [rbp+CONST] test dh CONST jnz JUMP_ADDR_17	cmp [rbp+CONST] CONST jz JUMP_ADDR_15	mov rsi [rax+CONST] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_10	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_19	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_3	add rsp CONST mov eax CONST pop rbx pop rbp retn	lea rcx [rdx+CONST] mov [rax] rcx mov eax [rdx] add rsp CONST pop rbx pop rbp retn	mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_10	mov eax [rbp+CONST] test eax eax jnz JUMP_ADDR_2	mov esi CONST mov rdi rbp call sub_xxx jmp JUMP_ADDR_2	cmp [rax+CONST] CONST jz JUMP_ADDR_7	mov rdi rbp call sub_xxx jmp JUMP_ADDR_7	and dh CONST mov rsi [rax+CONST] mov [rbp+CONST] edx mov rdx [rax+CONST] mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax+CONST] rsi mov [rax+CONST] rdx mov [rax+CONST] rcx cmp rsi rdx ja JUMP_ADDR_11	mov [rax] rdx jmp JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_8
[ph]libcap-git-setcap___wunderflow
endbr64 push rbp push rbx sub rsp CONST mov edx [CONST_VAR+CONST] test edx edx js JUMP_ADDR_10	mov rbp rdi jz JUMP_ADDR_13	test [rbp+CONST] CONST jnz JUMP_ADDR_9	mov rax [rbp+CONST] mov rdx [rax] mov rcx [rax+CONST] cmp rdx rcx jb JUMP_ADDR_12	mov edx [rbp+CONST] test dh CONST jnz JUMP_ADDR_11	cmp [rbp+CONST] CONST jz JUMP_ADDR_16	mov rsi [rax+CONST] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_10	mov rbx [rbp+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbx sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_18	mov rax [rbx+CONST] add rsp CONST mov rdi rbp pop rbx pop rbp jmp rax	mov rdi rbp call sub_xxx cmp eax CONST jnz JUMP_ADDR_3	add rsp CONST mov eax CONST pop rbx pop rbp retn	and dh CONST mov rsi [rax+CONST] mov [rbp+CONST] edx mov rdx [rax+CONST] mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax+CONST] rsi mov [rax+CONST] rdx mov [rax+CONST] rcx mov [rax] rdx cmp rsi rdx jbe JUMP_ADDR_5	mov eax [rdx] add rsp CONST pop rbx pop rbp retn	mov esi CONST call sub_xxx cmp eax CONST jnz JUMP_ADDR_10	mov eax [rbp+CONST] test eax eax jnz JUMP_ADDR_2	mov esi CONST mov rdi rbp call sub_xxx jmp JUMP_ADDR_2	cmp [rbp+CONST] CONST jz JUMP_ADDR_7	mov rdi rbp call sub_xxx jmp JUMP_ADDR_7	call sub_xxx jmp JUMP_ADDR_8
[ph]libcap-git-setcap__IO_wdefault_xsgetn
endbr64 push r14 mov r14 rdi push r13 mov r13 rsi push r12 mov r12 rdx push rbp mov rbp rdx push rbx jmp JUMP_ADDR_4	test rbx rbx jnz JUMP_ADDR_8	test rbp rbp jz JUMP_ADDR_7	mov rdi r14 call sub_xxx cmp eax CONST jz JUMP_ADDR_11	mov rdx [r14+CONST] mov rsi [rdx] mov rbx [rdx+CONST] sub rbx rsi test rbx rbx jle JUMP_ADDR_2	sar rbx CONST cmp rbx rbp cmova rbx rbp cmp rbx CONST jle JUMP_ADDR_1	mov rdx rbx mov rdi r13 sub rbp rbx call sub_xxx lea rdx ds:xxx mov r13 rax mov rax [r14+CONST] add [rax] rdx test rbp rbp jnz JUMP_ADDR_3	pop rbx mov rax r12 pop rbp pop r12 pop r13 pop r14 retn	xor eax eax nop [rax+rax+CONST]	mov ecx [CONST_VAR+rax*4] mov [r13+rax*4+CONST] ecx add rax CONST cmp rax rbx jnz JUMP_ADDR_9	lea rcx ds:xxx sub rbp rax add rsi rcx add r13 rcx mov [rdx] rsi jmp JUMP_ADDR_2	sub r12 rbp pop rbx pop rbp mov rax r12 pop r12 pop r13 pop r14 retn
[ph]libcap-git-setcap__IO_sputbackwc
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] mov rdx [rax] cmp rdx [rax+CONST] jbe JUMP_ADDR_2	cmp [rdx+CONST] esi jz JUMP_ADDR_7	mov rbp [rbx+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_8	mov rdi rbx call callfunc_xxx	cmp eax CONST jz JUMP_ADDR_6	and [rbx] CONST	add rsp CONST pop rbx pop rbp retn	sub rdx CONST mov [rax] rdx mov eax esi jmp JUMP_ADDR_4	mov [rsp+CONST] esi call sub_xxx mov esi [rsp+CONST] jmp JUMP_ADDR_3
[ph]libcap-git-setcap__IO_sungetwc
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov rax [CONST_VAR+CONST] mov rdx [rax] cmp rdx [rax+CONST] jbe JUMP_ADDR_5	lea rcx [rdx+CONST] mov [rax] rcx mov eax [rdx+CONST]	cmp eax CONST jz JUMP_ADDR_4	and [rbx] CONST	add rsp CONST pop rbx pop rbp retn	mov rbp [CONST_VAR+CONST] mov rax off_xxx sub rax unk_xxx mov rdx rbp sub rdx unk_xxx cmp rax rdx jbe JUMP_ADDR_7	mov esi CONST mov rdi rbx call callfunc_xxx jmp JUMP_ADDR_2	call sub_xxx jmp JUMP_ADDR_6
[ph]libcap-git-setcap__IO_adjust_wcolumn
endbr64 movsxd rax edx lea rax [CONST_VAR+rax*4] mov rcx rax jmp JUMP_ADDR_2	sub rcx CONST cmp [rcx] CONST jz JUMP_ADDR_4	cmp rcx rsi ja JUMP_ADDR_1	lea eax [rdx+CONST_VAR] retn	sub rax rcx sar rax CONST sub eax CONST retn
[ph]libcap-git-setcap__IO_init_wmarker
endbr64 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov edx [CONST_VAR] mov [CONST_VAR+CONST] rsi test dh CONST jnz JUMP_ADDR_5	mov rcx [rbx+CONST] mov rax [rcx] and dh CONST jz JUMP_ADDR_4	sub rax [rcx+CONST] sar rax CONST	mov [rbp+CONST] eax mov rax [rbx+CONST] mov [rbp+CONST] rax mov [rbx+CONST] rbp add rsp CONST pop rbx pop rbp retn	sub rax [rcx+CONST] sar rax CONST jmp JUMP_ADDR_3	mov rdi rsi call sub_xxx mov edx [rbx] jmp JUMP_ADDR_1
[ph]libcap-git-setcap__IO_wmarker_delta
endbr64 mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_4	mov rcx [rax+CONST] mov eax [rax] mov rdx [rcx] test ah CONST jnz JUMP_ADDR_3	mov eax [CONST_VAR+CONST] sub rdx [rcx+CONST] sar rdx CONST sub eax edx retn	mov eax [CONST_VAR+CONST] sub rdx [rcx+CONST] sar rdx CONST sub eax edx retn	mov eax CONST retn
[ph]libcap-git-setcap__IO_seekwmark
endbr64 cmp [CONST_VAR+CONST] rdi jnz JUMP_ADDR_7	mov ecx [CONST_VAR] movsxd rdx [CONST_VAR+CONST] mov rax [CONST_VAR+CONST] mov esi ecx and esi CONST test edx edx js JUMP_ADDR_4	mov r8 [rax+CONST] test esi esi jnz JUMP_ADDR_6	lea rdx [r8+rdx*4] mov [rax] rdx xor eax eax retn	mov r8 [rax+CONST] test esi esi jnz JUMP_ADDR_3	or ch CONST mov rsi [rax+CONST] mov [CONST_VAR] ecx mov rcx [rax+CONST] mov rdi [rax+CONST] mov [rax+CONST] r8 mov r8 rcx mov [rax+CONST] rcx lea rdx [r8+rdx*4] mov [rax+CONST] rdi mov [rax+CONST] rsi mov [rax] rdx xor eax eax retn	and ch CONST mov rsi [rax+CONST] mov [CONST_VAR] ecx mov rcx [rax+CONST] mov [rax+CONST] rsi mov [rax+CONST] rcx mov rcx [rax+CONST] mov [rax+CONST] r8 mov r8 rcx mov [rax+CONST] rcx lea rdx [r8+rdx*4] mov [rax] rdx xor eax eax retn	mov eax CONST retn
[ph]libcap-git-setcap__IO_unsave_wmarkers
endbr64 push rbx cmp [CONST_VAR+CONST] CONST mov rbx rdi jz JUMP_ADDR_2	mov [CONST_VAR+CONST] CONST	cmp [rbx+CONST] CONST jz JUMP_ADDR_5	mov rax [rbx+CONST] mov edx [rbx] mov rdi [rax+CONST] test dh CONST jnz JUMP_ADDR_6	call sub_xxx mov rax [rbx+CONST] mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST	pop rbx retn	and dh CONST mov rcx [rax+CONST] mov [rbx] edx mov rdx [rax+CONST] mov [rax] rdi mov [rax+CONST] rdx mov rdx [rax+CONST] mov [rax+CONST] rcx mov [rax+CONST] rdi mov rdi rdx mov [rax+CONST] rdx jmp JUMP_ADDR_4
[ph]libcap-git-setcap__IO_strn_overflow
endbr64 push r13 push r12 mov r12d esi push rbp lea rbp [CONST_VAR+CONST] push rbx mov rbx rdi sub rsp CONST cmp [CONST_VAR+CONST] rbp jz JUMP_ADDR_2	mov rax [CONST_VAR+CONST] lea r13 [CONST_VAR+CONST] xor ecx ecx mov rsi rbp mov rdx r13 mov [rax] CONST call sub_xxx mov [rbx+CONST] rbp mov [rbx+CONST] rbp mov [rbx+CONST] rbp mov [rbx+CONST] r13	mov [rbx+CONST] rbp mov eax r12d mov [rbx+CONST] rbp add rsp CONST pop rbx pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___vsnprintf_internal
endbr64 push r15 mov r15 rcx push r14 mov r14 rdx push r13 push r12 push rbp push rbx mov ebx r8d sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] CONST test rsi rsi jz JUMP_ADDR_6	mov rbp rdi lea r12 [CONST_VAR+CONST] lea r9 [rsp+CONST+var_xxx]	lea r13 [rsp+CONST+var_xxx] xor r8d r8d xor ecx ecx mov edx CONST mov esi CONST mov rdi r13 mov [rsp+CONST+var_xxx] r9 call sub_xxx mov rcx rbp mov rdx r12 mov rsi rbp lea rax unk_xxx mov rdi r13 mov [rsp+CONST+var_xxx] rax mov [rbp+CONST] CONST call sub_xxx mov ecx ebx mov rdx r15 mov rsi r14 mov rdi r13 call sub_xxx mov r9 [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] r9 jz JUMP_ADDR_4	mov rdx [rsp+CONST+var_xxx] mov [rdx] CONST	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea r9 [rsp+CONST+var_xxx] mov r12d CONST mov rbp r9 jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___vsnprintf
endbr64 xor r8d r8d jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___libc_enable_asynccancel
endbr64 mov rcx fs:xxx mov r8d fs:xxx	mov edx r8d or edx CONST cmp r8d edx jz JUMP_ADDR_4	mov eax r8d lock CONST edx jnz JUMP_ADDR_5	and edx CONST cmp edx CONST jz JUMP_ADDR_6	mov eax r8d retn	mov r8d eax jmp JUMP_ADDR_1	push rax mov fs:xxx CONST mov rax fs:xxx lock CONST CONST mov rdi fs:xxx call callfunc_xxx nop [rax+rax+CONST] nop [rax]
[ph]libcap-git-setcap___libc_disable_asynccancel
endbr64 and edi CONST jnz JUMP_ADDR_4	mov edx fs:xxx mov rax fs:xxx lea rdi [rax+CONST]	mov r8d edx mov eax edx and r8d CONST lock CONST r8d jnz JUMP_ADDR_9	and edx CONST cmp edx CONST jz JUMP_ADDR_5	retn	push rbx mov r9d CONST mov ebx CONST	xor r10d r10d mov edx r8d mov esi CONST mov eax r9d syscall cmp rax CONST ja JUMP_ADDR_10	mov r8d fs:xxx mov eax r8d and eax CONST cmp eax CONST jz JUMP_ADDR_6	pop rbx retn	mov edx eax jmp JUMP_ADDR_2	add eax CONST cmp eax CONST ja JUMP_ADDR_12	bt rbx rax jb JUMP_ADDR_7	lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap___libc_pthread_init
endbr64 sub rsp CONST mov rdx rsi mov cs:xxx rdi xor ecx ecx xor esi esi xor edi edi call sub_xxx lea rax unk_xxx add rsp CONST retn
[ph]libcap-git-setcap_pthread_sigmask
endbr64 sub rsp CONST xor r8d r8d mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rsi rsi jz JUMP_ADDR_3	mov rcx CONST mov rax [CONST_VAR] test rax rcx jnz JUMP_ADDR_5	mov r8 rsi	mov r10d CONST mov rsi r8 mov eax CONST syscall mov edx eax neg edx cmp eax CONST mov eax CONST cmova eax edx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_6	add rsp CONST retn	movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] mov r8 rsp mov rcx CONST movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] and rax rcx movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movaps [rsp+CONST+var_xxx] xmm0 movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7 jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap___register_atfork
endbr64 push r13 push r12 mov r12 rdi push rbp mov rbp rsi push rbx mov rbx rdx sub rsp CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_15	mov edx CONST cmpxchg cs:xxx edx	cmp cs:xxx CONST jnz JUMP_ADDR_10	mov cs:xxx CONST lea rax unk_xxx mov cs:xxx CONST mov cs:xxx rax xor eax eax	mov r8 rax add rax CONST shl r8 CONST add r8 cs:xxx	mov cs:xxx rax test r8 r8 jz JUMP_ADDR_7	mov [r8] r12 mov [r8+CONST] rbp mov [r8+CONST] rbx mov [r8+CONST] rcx	mov eax fs:xxx test eax eax jnz JUMP_ADDR_17	sub cs:xxx CONST	cmp r8 CONST sbb eax eax add rsp CONST pop rbx and eax CONST pop rbp pop r12 pop r13 retn	mov rdx cs:xxx cmp rdx CONST jz JUMP_ADDR_14	mov rax cs:xxx cmp rax rdx jnz JUMP_ADDR_4	lea r13 unk_xxx mov edx CONST mov [rsp+CONST+var_xxx] rcx mov rsi r13 lea rdi [r13+CONST] call sub_xxx mov rcx [rsp+CONST+var_xxx] test al al jz JUMP_ADDR_19	mov rax cs:xxx mov r8 rax add rax CONST shl r8 CONST add r8 cs:xxx jmp JUMP_ADDR_5	xor r8d r8d jmp JUMP_ADDR_7	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_2	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_9	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_9	mov rdi cs:xxx cmp rdi r13 jz JUMP_ADDR_21	call sub_xxx	mov cs:xxx r13 xor r8d r8d mov cs:xxx CONST mov cs:xxx CONST jmp JUMP_ADDR_7
[ph]libcap-git-setcap___unregister_atfork
endbr64 push rbx mov rbx rdi mov eax fs:xxx test eax eax jnz JUMP_ADDR_24	mov edx CONST cmpxchg cs:xxx edx	mov rsi cs:xxx test rsi rsi jz JUMP_ADDR_19	mov rdi cs:xxx xor ecx ecx mov rax rdi jmp JUMP_ADDR_5	add rcx CONST add rax CONST cmp rsi rcx jz JUMP_ADDR_19	mov rdx rax cmp rbx [rax+CONST] jnz JUMP_ADDR_4	mov rcx rsi lea rax [rax+CONST] shl rcx CONST add rcx rdi cmp rax rcx jz JUMP_ADDR_11	nop [rax]	cmp [rax+CONST] rbx jz JUMP_ADDR_10	movdqu xmm0 [rax] add rdx CONST movups [rdx+CONST] xmm0 movdqu xmm1 [rax+CONST] movups [rdx+CONST] xmm1	add rax CONST cmp rax rcx jnz JUMP_ADDR_8	sub rcx rdx sar rcx CONST jz JUMP_ADDR_19	xor edx edx xor eax eax jmp JUMP_ADDR_15	sub rsi CONST mov edx CONST	add rax CONST cmp rax rcx jz JUMP_ADDR_17	test rsi rsi jnz JUMP_ADDR_13	add rax CONST cmp rax rcx jnz JUMP_ADDR_14	test dl dl jz JUMP_ADDR_19	mov cs:xxx rsi	mov eax fs:xxx test eax eax jnz JUMP_ADDR_22	sub cs:xxx CONST	pop rbx retn	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_21	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall pop rbx retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap___run_fork_handlers
endbr64 push r13 push r12 mov r12d esi push rbp push rbx mov ebx edi sub rsp CONST test edi edi jnz JUMP_ADDR_12	test sil sil jz JUMP_ADDR_4	mov eax fs:xxx mov edx CONST test eax eax jnz JUMP_ADDR_26	cmpxchg cs:xxx edx	mov rbp cs:xxx mov rdi rbp test rbp rbp jnz JUMP_ADDR_10	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rax rbp shl rax CONST add rax cs:xxx mov rax [rax] test rax rax jz JUMP_ADDR_8	call rax	test rbp rbp jz JUMP_ADDR_5	mov rdi cs:xxx	sub rbp CONST cmp rdi rbp ja JUMP_ADDR_6	mov rsi rbp call sub_xxx	mov r13 cs:xxx xor ebp ebp test r13 r13 jz JUMP_ADDR_21	mov rax rbp shl rax CONST add rax cs:xxx cmp ebx CONST jz JUMP_ADDR_18	cmp ebx CONST jz JUMP_ADDR_24	add rbp CONST cmp rbp r13 jz JUMP_ADDR_21	mov rdi cs:xxx cmp rbp rdi jb JUMP_ADDR_13	jmp JUMP_ADDR_11	mov rax [rax+CONST] test rax rax jz JUMP_ADDR_15	call rax	add rbp CONST cmp rbp r13 jnz JUMP_ADDR_16	test r12b r12b jz JUMP_ADDR_5	mov eax fs:xxx test eax eax jnz JUMP_ADDR_28	sub cs:xxx CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rax [rax+CONST] test rax rax jz JUMP_ADDR_15	call rax jmp JUMP_ADDR_20	mov eax edi lock CONST edx jz JUMP_ADDR_4	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_4	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_5	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_5
[ph]libcap-git-setcap___libc_dynarray_at_failure
endbr64 push rbp mov r8 rdi mov rcx rsi lea rdx GLOBAL_VAR mov esi CONST sub rsp CONST mov rax fs:xxx mov [rsp+var_xxx] rax xor eax eax mov rbp rsp mov rdi rbp call sub_xxx mov rdi rbp call sub_xxx
[ph]libcap-git-setcap___libc_dynarray_emplace_enlarge
endbr64 push r13 mov r13 rsi push r12 push rbp mov rbp rdi push rbx mov rbx rdx sub rsp CONST mov rax [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_13	cmp rdx CONST ja JUMP_ADDR_7	mov r12d CONST	mov rax r12 mul rbx jo JUMP_ADDR_15	mov rdi [rbp+CONST] mov rsi rax cmp rdi r13 jz JUMP_ADDR_10	call sub_xxx mov rcx rax test rax rax jz JUMP_ADDR_15	mov [rbp+CONST] r12 mov eax CONST mov [rbp+CONST] rcx add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov r12d CONST cmp rdx CONST ja JUMP_ADDR_3	mov rdi [rbp+CONST] lea rsi ds:xxx mov r12d CONST cmp rdi r13 jnz JUMP_ADDR_5	nop [rax+rax+CONST]	mov rdi rsi call sub_xxx mov rcx rax test rax rax jz JUMP_ADDR_15	test r13 r13 jz JUMP_ADDR_6	imul rbx [rbp+CONST] mov rsi r13 mov rdi rax mov rdx rbx call sub_xxx mov rcx rax jmp JUMP_ADDR_6	mov rdx rax shr rdx CONST lea r12 [rax+rdx+CONST] cmp rax r12 jb JUMP_ADDR_3	mov rax CONST mov fs:xxx CONST add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 retn	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap___strndup
endbr64 push r12 push rbp mov rbp rdi sub rsp CONST call sub_xxx lea rdi [rax+CONST] mov r12 rax call sub_xxx test rax rax jz JUMP_ADDR_2	mov [rax+r12] CONST add rsp CONST mov rdx r12 mov rsi rbp mov rdi rax pop rbp pop r12 jmp UNK_JUMP_ADDR	pop rdx xor eax eax pop rbp pop r12 retn
[ph]libcap-git-setcap_strrchr_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___strtok_r
endbr64 push r13 mov r13 rdx push r12 push rbp mov rbp rsi push rbx mov rbx rdi sub rsp CONST test rdi rdi jz JUMP_ADDR_8	cmp [rbx] CONST jz JUMP_ADDR_7	mov rsi rbp mov rdi rbx call sub_xxx lea r12 [rbx+rax] cmp [r12] CONST jz JUMP_ADDR_6	mov rsi rbp mov rdi r12 call sub_xxx lea rbx [r12+rax] cmp [rbx] CONST jz JUMP_ADDR_5	mov [rbx] CONST add rbx CONST	mov [r13+CONST] rbx add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	mov rbx r12	xor r12d r12d jmp JUMP_ADDR_5	mov rbx [rdx] jmp JUMP_ADDR_1
[ph]libcap-git-setcap_memchr_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap_two_way_long_needle_0
push r15 mov r15 rdi push r14 mov r14 rsi push r13 push r12 push rbp mov rbp rdx push rbx mov rbx rcx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp rcx CONST jbe JUMP_ADDR_63	xor ecx ecx mov r8d CONST mov edx CONST mov r13 CONST mov eax CONST jmp JUMP_ADDR_4	mov r8 rax mov rcx rax mov edx CONST sub r8 r13	lea rax [rcx+rdx] cmp rbx rax jbe JUMP_ADDR_7	lea rsi [rbp+r13+CONST] movzx esi [CONST_VAR+rdx] cmp [rbp+rax+CONST] sil jb JUMP_ADDR_2	jz JUMP_ADDR_31	mov r13 rcx mov edx CONST add rcx CONST mov r8d CONST lea rax [rcx+rdx] cmp rbx rax ja JUMP_ADDR_4	xor ecx ecx mov r9d CONST mov edx CONST mov rsi CONST mov eax CONST jmp JUMP_ADDR_10	mov r9 rax mov rcx rax mov edx CONST sub r9 rsi	lea rax [rcx+rdx] cmp rbx rax jbe JUMP_ADDR_13	lea rdi [rbp+CONST_VAR+CONST] movzx edi [CONST_VAR+rdx] cmp [rbp+rax+CONST] dil ja JUMP_ADDR_8	jz JUMP_ADDR_33	mov rsi rcx mov edx CONST add rcx CONST mov r9d CONST lea rax [rcx+rdx] cmp rbx rax ja JUMP_ADDR_10	add rsi CONST add r13 CONST cmp r13 rsi ja JUMP_ADDR_15	mov r8 r9 mov r13 rsi	lea rax [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] nop [rax+rax+CONST]	mov [rax] rbx add rax CONST cmp rax rdx jnz JUMP_ADDR_16	lea r12 [rbx+CONST] lea rdi [rbp+rbx+CONST] mov rax rbp lea rsi [rbp+r12+CONST] test rbx rbx jz JUMP_ADDR_20	nop [rax+rax+CONST]	movzx edx [rax] mov rcx rsi sub rcx rax add rax CONST mov [rsp+rdx*8+CONST+var_xxx] rcx cmp rax rdi jnz JUMP_ADDR_19	lea rsi [rbp+r8+CONST] mov rdx r13 mov rdi rbp mov [rsp+CONST+var_xxx] r8 call sub_xxx sub r14 rbx mov r8 [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_46	mov r10d CONST lea rax [r13+CONST] xor esi esi xor ecx ecx mov [rsp+CONST+var_xxx] rax sub r10 r13 sub rbx r8 jmp JUMP_ADDR_25	test rsi rsi jz JUMP_ADDR_24	cmp rdx r8 cmovb rdx rbx	add rcx rdx xor esi esi cmp rcx r14 ja JUMP_ADDR_43	lea rax [r15+rcx] movzx edx [rax+r12] mov rdx [rsp+rdx*8+CONST+var_xxx] test rdx rdx jnz JUMP_ADDR_22	cmp rsi r13 mov rdx r13 cmovnb rdx rsi cmp rdx r12 jb JUMP_ADDR_29	jmp JUMP_ADDR_35	add rdx CONST cmp rdx r12 jnb JUMP_ADDR_35	movzx edi [rax+rdx] cmp [rbp+rdx+CONST] dil jz JUMP_ADDR_28	add rcx r10 jmp JUMP_ADDR_24	cmp r8 rdx jz JUMP_ADDR_61	add rdx CONST jmp JUMP_ADDR_3	cmp r9 rdx jz JUMP_ADDR_60	add rdx CONST jmp JUMP_ADDR_9	mov rdi [rsp+CONST+var_xxx] lea r11 [rbp+CONST] lea r9 [rcx+CONST_VAR] mov rdx rdi mov rdi r13 sub r9 r13 add r9 r15 cmp rsi r13 jnb JUMP_ADDR_41	mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_39	lea rdi [rdx+CONST] cmp rsi rdx jz JUMP_ADDR_62	mov rdx rdi	movzx eax [rdx+r9+CONST] lea rdi [rdx+CONST] cmp [r11+rdx+CONST] al jz JUMP_ADDR_37	mov rax [rsp+CONST+var_xxx]	add rsi CONST cmp rsi rdi ja JUMP_ADDR_44	add rcx r8 mov rsi rbx cmp rcx r14 jbe JUMP_ADDR_25	xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_65	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	sub rbx r13 mov r8d CONST cmp rbx r13 cmovb rbx r13 xor esi esi sub r8 r13 lea rdx [rbx+CONST] jmp JUMP_ADDR_49	add rsi rax	cmp rsi r14 ja JUMP_ADDR_43	lea rcx [r15+CONST_VAR] movzx eax [rcx+r12] mov rax [rsp+rax*8+CONST+var_xxx] test rax rax jnz JUMP_ADDR_47	mov rax r13 cmp r12 r13 ja JUMP_ADDR_53	jmp JUMP_ADDR_55	add rax CONST cmp rax r12 jnb JUMP_ADDR_55	movzx edi [rcx+rax] cmp [rbp+rax+CONST] dil jz JUMP_ADDR_52	add rsi r8 jmp JUMP_ADDR_47	lea rax [r13+CONST] lea rdi [rax+CONST_VAR] cmp rax CONST jz JUMP_ADDR_64	sub rdi r13 lea r9 [rbp+CONST] add rdi r15 jmp JUMP_ADDR_58	sub rax CONST jb JUMP_ADDR_64	movzx ebx [rax+CONST_VAR+CONST] cmp [r9+rax+CONST] bl jz JUMP_ADDR_57	add rsi rdx jmp JUMP_ADDR_48	add rcx r9 mov edx CONST jmp JUMP_ADDR_9	add rcx r8 mov edx CONST jmp JUMP_ADDR_3	mov rax [rsp+CONST+var_xxx] mov rdi rsi jmp JUMP_ADDR_41	mov r8d CONST xor r13d r13d jmp JUMP_ADDR_15	mov rax rcx jmp JUMP_ADDR_44	call sub_xxx
[ph]libcap-git-setcap___memmem
endbr64 push r15 push r14 push r13 push r12 push rbp mov rbp rdi push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test rcx rcx jz JUMP_ADDR_21	mov r15 rdx mov rbx rcx cmp rcx CONST jz JUMP_ADDR_22	cmp rcx rsi ja JUMP_ADDR_18	mov r14 rsi sub r14 rcx add r14 rdi cmp rcx CONST jz JUMP_ADDR_24	cmp rcx CONST ja JUMP_ADDR_30	lea rdx [rsp+CONST+var_xxx] xor eax eax lea r13 [rcx+CONST] mov ecx CONST mov rdi rdx rep CONST mov eax CONST nop [rax+rax+CONST]	movzx ecx [r15+rax+CONST] movzx edx [r15+rax] shl rcx CONST sub rdx rcx movzx edx dl mov [rsp+rdx+CONST+var_xxx] al add rax CONST cmp r13 rax ja JUMP_ADDR_6	movzx edx [r15+rbx+CONST] movzx eax [r15+rbx+CONST] mov rdi r13 xor r12d r12d sub rbx CONST shl rdx CONST sub rax rdx movzx eax al movzx edx [rsp+rax+CONST+var_xxx] mov [rsp+rax+CONST+var_xxx] r13b sub rdi rdx mov [rsp+CONST+var_xxx] rdi	cmp r14 rbp jb JUMP_ADDR_18	nop [rax+CONST]	add rbp r13 movzx edx [rbp+CONST] movzx eax [rbp+CONST] shl rdx CONST sub rax rdx movzx eax al movzx eax [rsp+rax+CONST+var_xxx] test rax rax jnz JUMP_ADDR_12	cmp r14 rbp jnb JUMP_ADDR_10	sub rbp rax cmp r13 rax ja JUMP_ADDR_8	cmp r13 CONST jbe JUMP_ADDR_15	mov rax [rbp+r12+CONST] cmp [r15+r12] rax jnz JUMP_ADDR_17	mov rdx r13 mov rsi r15 mov rdi rbp call sub_xxx test eax eax jz JUMP_ADDR_21	lea rax [r12+CONST] cmp r12 CONST cmovb rax rbx mov r12 rax	add rbp [rsp+CONST+var_xxx] cmp r14 rbp jnb JUMP_ADDR_10	xor eax eax	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_32	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax rbp jmp JUMP_ADDR_19	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_32	movzx r8d [rdx] add rsp CONST mov rdx rsi pop rbx pop rbp mov esi r8d pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	movzx ecx [rdx] movzx eax [rdx+CONST] add rbp CONST movzx edx [CONST_VAR] shl ecx CONST or ecx eax movzx eax [CONST_VAR+CONST] shl edx CONST or edx eax cmp r14 rbp jnb JUMP_ADDR_27	jmp JUMP_ADDR_28	movzx eax [rbp+CONST] shl edx CONST add rbp CONST or edx eax cmp r14 rbp jb JUMP_ADDR_28	cmp ecx edx jnz JUMP_ADDR_26	lea rax [rbp+CONST] cmp ecx edx jnz JUMP_ADDR_18	jmp JUMP_ADDR_19	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_32	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	call sub_xxx	endbr64 push r14 push r13 mov r13d esi push r12 mov r12 rcx push rbp mov rbp rdx push rbx mov rbx rdi call sub_xxx test rax rax jnz JUMP_ADDR_36	mov [rbp+CONST] CONST xor eax eax mov [r12] CONST	pop rbx pop rbp pop r12 pop r13 pop r14 retn	lea r14 [rax+CONST] mov rdi r14 call sub_xxx mov [rbp+CONST] rax test rax rax jz JUMP_ADDR_49	mov rcx rax jmp JUMP_ADDR_40	mov [rcx] sil add rcx CONST	add rbx CONST test dl dl jz JUMP_ADDR_45	movsx esi [rbx] mov edx esi cmp esi r13d jnz JUMP_ADDR_38	cmp rax rcx jnb JUMP_ADDR_47	cmp [rcx+CONST] CONST jz JUMP_ADDR_47	mov [rcx] CONST add rbx CONST add rcx CONST test dl dl jnz JUMP_ADDR_40	nop [rax+rax+CONST]	test r14 r14 jz JUMP_ADDR_48	pop rbx xor eax eax pop rbp mov [r12] r14 pop r12 pop r13 pop r14 retn	sub r14 CONST jmp JUMP_ADDR_39	mov rdi rax call sub_xxx mov [rbp+CONST] CONST jmp JUMP_ADDR_46	mov eax CONST jmp JUMP_ADDR_35
[ph]libcap-git-setcap___argz_add_sep
endbr64 push r14 push r13 mov r13 rdi mov rdi rdx push r12 mov r12d ecx push rbp mov rbp rsi push rbx mov rbx rdx call sub_xxx xor r8d r8d test rax rax jnz JUMP_ADDR_2	pop rbx mov eax r8d pop rbp pop r12 pop r13 pop r14 retn	mov rsi [rbp+CONST] lea r14 [rax+CONST] mov rdi [r13+CONST] add rsi r14 call sub_xxx mov [r13+CONST] rax test rax rax jz JUMP_ADDR_12	add rax [rbp+CONST] jmp JUMP_ADDR_6	mov [rax] cl add rax CONST	add rbx CONST test dl dl jz JUMP_ADDR_10	movsx ecx [rbx] mov edx ecx cmp ecx r12d jnz JUMP_ADDR_4	cmp [r13+CONST] rax jnb JUMP_ADDR_11	cmp [rax+CONST] CONST jz JUMP_ADDR_11	mov [rax] CONST movzx edx [rbx] add rax CONST add rbx CONST test dl dl jnz JUMP_ADDR_6	xor r8d r8d pop rbx add [rbp+CONST] r14 mov eax r8d pop rbp pop r12 pop r13 pop r14 retn	sub r14 CONST jmp JUMP_ADDR_5	mov r8d CONST jmp JUMP_ADDR_1
[ph]libcap-git-setcap___memchr_sse2
endbr64 movd xmm1 esi mov ecx edi punpcklbw xmm1 xmm1 test rdx rdx jz JUMP_ADDR_52	punpcklbw xmm1 xmm1 and ecx CONST pshufd xmm1 xmm1 xmm1 cmp ecx CONST ja JUMP_ADDR_6	movdqu xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_44	sub rdx CONST jbe JUMP_ADDR_52	add rdi CONST and ecx CONST and rdi CONST add rdx rcx sub rdx CONST jbe JUMP_ADDR_29	jmp JUMP_ADDR_12	and ecx CONST and rdi CONST movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 sar eax cl test eax eax jz JUMP_ADDR_9	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	add rax rdi add rax rcx retn	neg rcx add rcx CONST sub rdx rcx jbe JUMP_ADDR_52	add rdi CONST sub rdx CONST jbe JUMP_ADDR_29	xchg ax ax	movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	movdqa xmm4 [CONST_VAR+CONST] pcmpeqb xmm4 xmm1 add rdi CONST pmovmskb eax xmm4 test eax eax jnz JUMP_ADDR_40	test rdi CONST jz JUMP_ADDR_23	sub rdx CONST jbe JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 add rdi CONST test eax eax jnz JUMP_ADDR_40	mov rcx rdi and rdi CONST and ecx CONST add rdx rcx xchg ax ax	sub rdx CONST jbe JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] pcmpeqb xmm0 xmm1 pcmpeqb xmm2 xmm1 pcmpeqb xmm3 xmm1 pcmpeqb xmm4 xmm1 pmaxub xmm3 xmm0 pmaxub xmm4 xmm2 pmaxub xmm4 xmm3 pmovmskb eax xmm4 add rdi CONST test eax eax jz JUMP_ADDR_23	sub rdi CONST pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pcmpeqb xmm1 [CONST_VAR+CONST] pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	pmovmskb eax xmm1 bsf eax eax lea rax [CONST_VAR+rax+CONST] retn	add edx CONST jle JUMP_ADDR_36	movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqb xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqb xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_48	sub edx CONST jle JUMP_ADDR_52	pcmpeqb xmm1 [CONST_VAR+CONST] pmovmskb eax xmm1 test eax eax jnz JUMP_ADDR_50	xor eax eax retn	add edx CONST movdqa xmm0 [CONST_VAR] pcmpeqb xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_44	sub edx CONST jbe JUMP_ADDR_52	pcmpeqb xmm1 [CONST_VAR+CONST] pmovmskb eax xmm1 test eax eax jnz JUMP_ADDR_46	xor eax eax retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax add rax rdi retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	add rax rdi retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	xor eax eax retn
[ph]libcap-git-setcap___memchr_avx2
endbr64 test rdx rdx jz JUMP_ADDR_39	mov ecx edi vmovd xmm0 esi vpbroadcastb ymm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_6	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub rdx CONST jbe JUMP_ADDR_38	add rdi CONST and ecx CONST and rdi CONST add rdx rcx sub rdx CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_11	and ecx CONST and rdi CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_9	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax rdi add rax rcx vzeroupper retn	neg rcx add rcx CONST sub rdx rcx jbe JUMP_ADDR_38	add rdi CONST sub rdx CONST jbe JUMP_ADDR_19	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_42	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_47	add rdi CONST sub rdx CONST jbe JUMP_ADDR_19	mov rcx rdi and ecx CONST and rdi CONST add rdx rcx nop [rax+rax+CONST] nop [rax+CONST]	vpcmpeqb ymm1 ymm0 ymm0 vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm0 ymm0 vpcmpeqb ymm4 ymm0 ymm0 vpor ymm5 ymm2 ymm2 vpor ymm6 ymm4 ymm4 vpor ymm5 ymm6 ymm6 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_43	add rdi CONST sub rdx CONST ja JUMP_ADDR_17	add edx CONST jle JUMP_ADDR_26	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_34	sub edx CONST jle JUMP_ADDR_38	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_36	xor eax eax vzeroupper retn	add edx CONST vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub edx CONST jle JUMP_ADDR_38	vpcmpeqb ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_32	xor eax eax vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	vzeroupper	xor eax eax retn	tzcnt eax eax add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_41	vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_42	vpmovmskb eax ymm4 test eax eax	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn
[ph]libcap-git-setcap___strrchr_sse2
endbr64 movd xmm1 esi mov rax rdi and eax CONST punpcklbw xmm1 xmm1 cmp rax CONST punpcklwd xmm1 xmm1 pshufd xmm1 xmm1 xmm1 ja JUMP_ADDR_14	movdqu xmm0 [CONST_VAR] pxor xmm2 xmm2 movdqa xmm3 xmm0 pcmpeqb xmm0 xmm1 pcmpeqb xmm3 xmm2 pmovmskb ecx xmm0 pmovmskb edx xmm3 test rdx rdx jz JUMP_ADDR_4	lea rax [rdx+CONST] xor rax rdx and rax rcx jz JUMP_ADDR_13	bsr rax rax add rax rdi retn	movdqu xmm4 [CONST_VAR+CONST] movdqa xmm5 xmm4 movdqu xmm3 [CONST_VAR+CONST] pcmpeqb xmm4 xmm1 pcmpeqb xmm5 xmm2 movdqu xmm0 [CONST_VAR+CONST] pmovmskb edx xmm5 movdqa xmm5 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm5 xmm2 pcmpeqb xmm2 xmm0 shl rdx CONST pmovmskb r8d xmm3 pmovmskb eax xmm5 pmovmskb esi xmm2 shl r8 CONST shl rax CONST pcmpeqb xmm0 xmm1 or rax rdx mov rdx rsi pmovmskb esi xmm4 shl rdx CONST shl rsi CONST or rsi r8 or rsi rcx pmovmskb ecx xmm0 shl rcx CONST or rsi rcx or rax rdx jz JUMP_ADDR_7	lea rcx [rax+CONST] xor rcx rax and rsi rcx jz JUMP_ADDR_13	bsr rsi rsi lea rax [CONST_VAR+CONST_VAR] retn	test rsi rsi mov rcx rdi jz JUMP_ADDR_12	add rdi CONST pxor xmm7 xmm7 and rdi CONST jmp JUMP_ADDR_10	test rdx rdx cmovnz rsi rdx cmovnz rcx rdi add rdi CONST	movdqa xmm3 [CONST_VAR+CONST] pxor xmm6 xmm6 movdqa xmm2 [CONST_VAR+CONST] movdqa xmm0 xmm3 movdqa xmm4 [CONST_VAR+CONST] pminub xmm0 xmm2 movdqa xmm5 [CONST_VAR] pminub xmm0 xmm4 pminub xmm0 xmm5 pcmpeqb xmm0 xmm7 pmovmskb eax xmm0 movdqa xmm0 xmm5 pcmpeqb xmm0 xmm1 pmovmskb r9d xmm0 movdqa xmm0 xmm4 pcmpeqb xmm0 xmm1 pmovmskb edx xmm0 movdqa xmm0 xmm3 pcmpeqb xmm0 xmm1 shl rdx CONST pmovmskb r10d xmm0 movdqa xmm0 xmm2 pcmpeqb xmm0 xmm1 shl r10 CONST or rdx r10 pmovmskb r8d xmm0 or rdx r9 shl r8 CONST or rdx r8 test eax eax jz JUMP_ADDR_9	pcmpeqb xmm4 xmm6 pcmpeqb xmm3 xmm6 pcmpeqb xmm5 xmm6 pmovmskb eax xmm4 pmovmskb r10d xmm3 pcmpeqb xmm2 xmm6 pmovmskb r9d xmm5 shl r10 CONST shl rax CONST pmovmskb r8d xmm2 or rax r10 or rax r9 shl r8 CONST or rax r8 lea r8 [rax+CONST] xor r8 rax and rdx r8 cmovnz rcx rdi cmovnz rsi rdx bsr rsi rsi lea rax [rcx+CONST_VAR] retn	mov esi CONST xor ecx ecx jmp JUMP_ADDR_8	xor eax eax retn	mov rax rdi pxor xmm0 xmm0 and rax CONST movdqu xmm5 [rax] movdqa xmm6 xmm5 movdqu xmm4 [rax+CONST] pcmpeqb xmm5 xmm1 pcmpeqb xmm6 xmm0 movdqu xmm3 [rax+CONST] pmovmskb esi xmm6 movdqa xmm6 xmm4 movdqu xmm2 [rax+CONST] pcmpeqb xmm4 xmm1 pcmpeqb xmm6 xmm0 pmovmskb edx xmm6 movdqa xmm6 xmm3 pcmpeqb xmm3 xmm1 pcmpeqb xmm6 xmm0 pcmpeqb xmm0 xmm2 shl rdx CONST pmovmskb r9d xmm3 pmovmskb r8d xmm6 pmovmskb ecx xmm0 shl r9 CONST shl r8 CONST pcmpeqb xmm2 xmm1 or rdx r8 shl rcx CONST pmovmskb r8d xmm5 or rdx rsi pmovmskb esi xmm4 or rdx rcx pmovmskb ecx xmm2 shl rsi CONST shl rcx CONST or rsi r9 or rsi r8 or rsi rcx mov ecx edi sub ecx eax shr rdx cl shr rsi cl test rdx rdx jz JUMP_ADDR_7	lea rax [rdx+CONST] xor rax rdx and rsi rax jz JUMP_ADDR_13	bsr rax rsi add rax rdi retn
[ph]libcap-git-setcap___strrchr_avx2
endbr64 movd xmm4 esi mov ecx edi vpbroadcastb ymm4 xmm4 vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_6	vmovdqu ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb ecx ymm2 vpmovmskb eax ymm3 add rdi CONST test eax eax jnz JUMP_ADDR_4	test ecx ecx jnz JUMP_ADDR_25	and rdi CONST xor edx edx jmp JUMP_ADDR_11	test ecx ecx jnz JUMP_ADDR_23	mov edx eax mov rsi rdi and rdi CONST jmp JUMP_ADDR_11	and ecx CONST and rdi CONST vmovdqa ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb edx ymm2 vpmovmskb eax ymm3 shr edx cl shr eax cl add rdi CONST test eax eax jnz JUMP_ADDR_9	test edx edx jnz JUMP_ADDR_25	jmp JUMP_ADDR_11	test edx edx jnz JUMP_ADDR_22	mov edx eax lea rsi [CONST_VAR+rcx] xchg ax ax	vmovdqa ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 add rdi CONST vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb ecx ymm2 vpmovmskb eax ymm3 or ecx eax jnz JUMP_ADDR_15	vmovdqa ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 add rdi CONST vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb ecx ymm2 vpmovmskb eax ymm3 or ecx eax jnz JUMP_ADDR_15	vmovdqa ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 add rdi CONST vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb ecx ymm2 vpmovmskb eax ymm3 or ecx eax jnz JUMP_ADDR_15	vmovdqa ymm1 CONST vpcmpeqb ymm2 ymm0 ymm0 add rdi CONST vpcmpeqb ymm3 ymm4 ymm4 vpmovmskb ecx ymm2 vpmovmskb eax ymm3 or ecx eax jz JUMP_ADDR_11	test eax eax jnz JUMP_ADDR_18	test edx edx jz JUMP_ADDR_25	mov eax edx mov rdi rsi bsr eax eax lea rax [CONST_VAR+rax+CONST] vzeroupper retn	vpmovmskb ecx ymm2 test ecx ecx jnz JUMP_ADDR_20	mov edx eax mov rsi rdi jmp JUMP_ADDR_11	mov r8d ecx sub r8d CONST xor r8d ecx and eax r8d test eax eax jz JUMP_ADDR_16	bsr eax eax lea rax [CONST_VAR+rax+CONST] vzeroupper retn	add rdi rcx mov ecx edx	mov r8d ecx sub r8d CONST xor r8d ecx and eax r8d test eax eax jz JUMP_ADDR_25	bsr eax eax lea rax [CONST_VAR+rax+CONST] vzeroupper retn	xor eax eax vzeroupper retn
[ph]libcap-git-setcap___cache_sysconf
endbr64 sub edi CONST cmp edi CONST ja JUMP_ADDR_3	lea rdx unk_xxx movsxd rax [rdx+rdi*4] add rax rdx jmp rax	mov rax cs:xxx retn	mov rax CONST retn
[ph]libcap-git-setcap___wcslen_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___wmemchr_ifunc
endbr64 mov edx cs:xxx lea rax sub_xxx test dh CONST jnz JUMP_ADDR_3	test cs:xxx CONST jz JUMP_ADDR_3	and dh CONST lea rdx sub_xxx cmovnz rax rdx	retn
[ph]libcap-git-setcap___wmemcpy
endbr64 shl rdx CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_wmemmove
endbr64 shl rdx CONST jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___wmemset_ifunc
endbr64 mov eax cs:xxx lea r8 sub_xxx test ah CONST jnz JUMP_ADDR_5	mov edx cs:xxx test dl CONST jz JUMP_ADDR_5	test ah CONST jz JUMP_ADDR_5	and edx CONST lea r8 sub_xxx jz JUMP_ADDR_5	test ah CONST lea rax sub_xxx cmovz r8 rax	mov rax r8 retn
[ph]libcap-git-setcap_btowc
endbr64 push r13 lea edx [CONST_VAR+CONST] push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp edx CONST ja JUMP_ADDR_12	mov ebx edi cmp edi CONST jz JUMP_ADDR_12	mov eax edi test edi CONST jnz JUMP_ADDR_5	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_20	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rax CONST mov rax fs:xxx mov rbp [rax] mov r12 [rbp+CONST] test r12 r12 jz JUMP_ADDR_18	mov rax [r12] cmp [rax] CONST mov rbp [rax+CONST] jz JUMP_ADDR_8	ror rbp CONST xor rbp fs:xxx	cmp [r12+CONST] CONST jnz JUMP_ADDR_13	test rbp rbp jz JUMP_ADDR_13	mov rdi rbp call sub_xxx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_20	mov rdi [r12] add rsp CONST movzx esi bl mov rax rbp pop rbx pop rbp pop r12 pop r13 jmp rax	mov eax CONST jmp JUMP_ADDR_3	lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] bl lea r13 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov rax [r12] mov [rsp+CONST+var_xxx] r13 cmp [rax] CONST mov rbx [rax+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_15	ror rbx CONST xor rbx fs:xxx	mov rdi rbx call sub_xxx mov rax [rsp+CONST+var_xxx] mov rdx r13 xor r8d r8d lea rsi [rsp+CONST+var_xxx] push CONST push CONST lea rcx [rax+CONST] mov rdi [r12] lea r9 [rsp+CONST+var_xxx] call rbx pop rcx pop rsi mov edx eax lea eax [rax+CONST] cmp eax CONST jbe JUMP_ADDR_17	mov eax CONST test edx edx jnz JUMP_ADDR_3	mov eax [rsp+CONST+var_xxx] jmp JUMP_ADDR_3	lea rax off_xxx lea r12 off_xxx cmp rbp rax jz JUMP_ADDR_6	mov rdi rbp call sub_xxx mov r12 [rbp+CONST] jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap_wcschrnul
endbr64 mov edx [CONST_VAR] mov rax rdi cmp esi edx jnz JUMP_ADDR_3	jmp JUMP_ADDR_4	mov edx [rax+CONST] add rax CONST cmp edx esi jz JUMP_ADDR_4	test edx edx jnz JUMP_ADDR_2	retn
[ph]libcap-git-setcap___wmemchr_sse2
endbr64 movd xmm1 esi mov ecx edi test rdx rdx jz JUMP_ADDR_52	shl rdx CONST and ecx CONST pshufd xmm1 xmm1 xmm1 cmp ecx CONST ja JUMP_ADDR_6	movdqu xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_44	sub rdx CONST jbe JUMP_ADDR_52	add rdi CONST and ecx CONST and rdi CONST add rdx rcx sub rdx CONST jbe JUMP_ADDR_29	jmp JUMP_ADDR_12	and ecx CONST and rdi CONST movdqa xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 sar eax cl test eax eax jz JUMP_ADDR_9	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	add rax rdi add rax rcx retn	neg rcx add rcx CONST sub rdx rcx jbe JUMP_ADDR_52	add rdi CONST sub rdx CONST jbe JUMP_ADDR_29	xchg ax ax	movdqa xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqd xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqd xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	movdqa xmm4 [CONST_VAR+CONST] pcmpeqd xmm4 xmm1 add rdi CONST pmovmskb eax xmm4 test eax eax jnz JUMP_ADDR_40	test rdi CONST jz JUMP_ADDR_23	sub rdx CONST jbe JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqd xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqd xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	movdqa xmm3 [CONST_VAR+CONST] pcmpeqd xmm3 xmm1 pmovmskb eax xmm3 add rdi CONST test eax eax jnz JUMP_ADDR_40	mov rcx rdi and rdi CONST and ecx CONST add rdx rcx xchg ax ax	sub rdx CONST jbe JUMP_ADDR_29	movdqa xmm0 [CONST_VAR] movdqa xmm2 [CONST_VAR+CONST] movdqa xmm3 [CONST_VAR+CONST] movdqa xmm4 [CONST_VAR+CONST] pcmpeqd xmm0 xmm1 pcmpeqd xmm2 xmm1 pcmpeqd xmm3 xmm1 pcmpeqd xmm4 xmm1 pmaxub xmm3 xmm0 pmaxub xmm4 xmm2 pmaxub xmm4 xmm3 pmovmskb eax xmm4 add rdi CONST test eax eax jz JUMP_ADDR_23	sub rdi CONST pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqd xmm3 xmm1 pcmpeqd xmm1 [CONST_VAR+CONST] pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_43	pmovmskb eax xmm1 bsf eax eax lea rax [CONST_VAR+rax+CONST] retn	add edx CONST jle JUMP_ADDR_36	movdqa xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_41	movdqa xmm2 [CONST_VAR+CONST] pcmpeqd xmm2 xmm1 pmovmskb eax xmm2 test eax eax jnz JUMP_ADDR_42	movdqa xmm3 [CONST_VAR+CONST] pcmpeqd xmm3 xmm1 pmovmskb eax xmm3 test eax eax jnz JUMP_ADDR_48	sub edx CONST jle JUMP_ADDR_52	pcmpeqd xmm1 [CONST_VAR+CONST] pmovmskb eax xmm1 test eax eax jnz JUMP_ADDR_50	xor eax eax retn	add edx CONST movdqa xmm0 [CONST_VAR] pcmpeqd xmm0 xmm1 pmovmskb eax xmm0 test eax eax jnz JUMP_ADDR_44	sub edx CONST jbe JUMP_ADDR_52	pcmpeqd xmm1 [CONST_VAR+CONST] pmovmskb eax xmm1 test eax eax jnz JUMP_ADDR_46	xor eax eax retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax add rax rdi retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax lea rax [rax+CONST_VAR+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	add rax rdi retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	bsf eax eax sub rdx rax jbe JUMP_ADDR_52	lea rax [CONST_VAR+rax+CONST] retn	xor eax eax retn
[ph]libcap-git-setcap___wmemchr_avx2
endbr64 test rdx rdx jz JUMP_ADDR_39	mov ecx edi vmovd xmm0 esi shl rdx CONST vpbroadcastd ymm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_6	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub rdx CONST jbe JUMP_ADDR_38	add rdi CONST and ecx CONST and rdi CONST add rdx rcx sub rdx CONST jbe JUMP_ADDR_19	jmp JUMP_ADDR_11	and ecx CONST and rdi CONST vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_9	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax rdi add rax rcx vzeroupper retn	neg rcx add rcx CONST sub rdx rcx jbe JUMP_ADDR_38	add rdi CONST sub rdx CONST jbe JUMP_ADDR_19	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_42	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_47	add rdi CONST sub rdx CONST jbe JUMP_ADDR_19	mov rcx rdi and ecx CONST and rdi CONST add rdx rcx nop [rax+rax+CONST] nop [rax+CONST]	vpcmpeqd ymm1 ymm0 ymm0 vpcmpeqd ymm2 ymm0 ymm0 vpcmpeqd ymm3 ymm0 ymm0 vpcmpeqd ymm4 ymm0 ymm0 vpor ymm5 ymm2 ymm2 vpor ymm6 ymm4 ymm4 vpor ymm5 ymm6 ymm6 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_43	add rdi CONST sub rdx CONST ja JUMP_ADDR_17	add edx CONST jle JUMP_ADDR_26	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_41	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_34	sub edx CONST jle JUMP_ADDR_38	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_36	xor eax eax vzeroupper retn	add edx CONST vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_30	sub edx CONST jle JUMP_ADDR_38	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_32	xor eax eax vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax cmp rdx rax jbe JUMP_ADDR_38	add rax CONST add rax rdi vzeroupper retn	vzeroupper	xor eax eax retn	tzcnt eax eax add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn	vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_40	vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_41	vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_42	vpmovmskb eax ymm4 test eax eax	tzcnt eax eax add rax CONST add rax rdi vzeroupper retn
[ph]libcap-git-setcap___wcslen_sse2
endbr64 cmp [CONST_VAR] CONST jz JUMP_ADDR_34	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_35	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_36	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_37	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_38	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_39	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_40	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_41	pxor xmm0 xmm0 lea rax [CONST_VAR+CONST] lea rcx [CONST_VAR+CONST] and rax CONST pcmpeqd xmm0 [rax] pmovmskb edx xmm0 pxor xmm1 xmm1 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm1 [rax] pmovmskb edx xmm1 pxor xmm2 xmm2 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm2 [rax] pmovmskb edx xmm2 pxor xmm3 xmm3 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 [rax] pmovmskb edx xmm3 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm0 [rax] pmovmskb edx xmm0 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm1 [rax] pmovmskb edx xmm1 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm2 [rax] pmovmskb edx xmm2 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 [rax] pmovmskb edx xmm3 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm0 [rax] pmovmskb edx xmm0 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm1 [rax] pmovmskb edx xmm1 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm2 [rax] pmovmskb edx xmm2 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 [rax] pmovmskb edx xmm3 test edx edx lea rax [rax+CONST] jnz JUMP_ADDR_27	and rax CONST nop	movaps xmm0 [rax] movaps xmm1 [rax+CONST] movaps xmm2 [rax+CONST] movaps xmm6 [rax+CONST] pminub xmm0 xmm1 pminub xmm2 xmm6 pminub xmm2 xmm0 pcmpeqd xmm2 xmm3 pmovmskb edx xmm2 test edx edx lea rax [rax+CONST] jz JUMP_ADDR_21	pcmpeqd xmm3 [rax+CONST] pmovmskb edx xmm3 test edx edx lea rcx [rcx+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 xmm1 pmovmskb edx xmm3 test edx edx lea rcx [rcx+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 [rax+CONST] pmovmskb edx xmm3 test edx edx lea rcx [rcx+CONST] jnz JUMP_ADDR_27	pcmpeqd xmm3 xmm6 pmovmskb edx xmm3 test edx edx lea rcx [rcx+CONST] jnz JUMP_ADDR_27	jmp JUMP_ADDR_21	sub rax rcx shr rax CONST test dl dl jz JUMP_ADDR_30	mov cl dl and cl CONST jz JUMP_ADDR_32	retn	mov ch dh and ch CONST jz JUMP_ADDR_33	add rax CONST retn	add rax CONST retn	add rax CONST retn	xor rax rax retn	mov rax CONST retn	mov rax CONST retn	mov rax CONST retn	mov rax CONST retn	mov rax CONST retn	mov rax CONST retn	mov rax CONST retn
[ph]libcap-git-setcap___wcslen_avx2
endbr64 mov ecx edi mov rdx rdi vpxor xmm0 xmm0 xmm0 and ecx CONST cmp ecx CONST ja JUMP_ADDR_3	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	add rdi CONST and ecx CONST and rdi CONST jmp JUMP_ADDR_6	and ecx CONST and rdi CONST vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 sar eax cl test eax eax jz JUMP_ADDR_5	tzcnt eax eax add rax rdi add rax rcx sub rax rdx shr rax CONST vzeroupper retn	add rdi CONST	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_14	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_15	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_20	add rdi CONST mov rcx rdi and ecx CONST and rdi CONST nop [rax+rax+CONST]	vmovdqa ymm1 CONST vmovdqa ymm2 CONST vmovdqa ymm3 CONST vmovdqa ymm4 CONST vpminud ymm5 ymm2 ymm2 vpminud ymm6 ymm4 ymm4 vpminud ymm5 ymm6 ymm6 vpcmpeqd ymm5 ymm0 ymm0 vpmovmskb eax ymm5 test eax eax jnz JUMP_ADDR_16	add rdi CONST jmp JUMP_ADDR_11	tzcnt eax eax add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn	vpcmpeqd ymm1 ymm0 ymm0 vpmovmskb eax ymm1 test eax eax jnz JUMP_ADDR_13	vpcmpeqd ymm2 ymm0 ymm0 vpmovmskb eax ymm2 test eax eax jnz JUMP_ADDR_14	vpcmpeqd ymm3 ymm0 ymm0 vpmovmskb eax ymm3 test eax eax jnz JUMP_ADDR_15	vpcmpeqd ymm4 ymm0 ymm0 vpmovmskb eax ymm4	tzcnt eax eax add rax CONST add rax rdi sub rax rdx shr rax CONST vzeroupper retn
[ph]libcap-git-setcap___clock_gettime
endbr64 push r12 mov r12 rsi push rbp mov ebp edi sub rsp CONST mov rax cs:xxx test rax rax jz JUMP_ADDR_5	call rax movsxd rdx eax cmp rdx CONST jbe JUMP_ADDR_4	cmp rdx CONST jz JUMP_ADDR_5	mov rax CONST neg edx mov fs:xxx edx mov eax CONST	add rsp CONST pop rbp pop r12 retn	mov rsi r12 mov edi ebp mov eax CONST syscall mov rdx rax cmp rax CONST ja JUMP_ADDR_3	add rsp CONST pop rbp pop r12 retn
[ph]libcap-git-setcap___alloc_dir
endbr64 push r12 push rbp mov ebp edi push rbx mov rbx rcx test sil sil jnz JUMP_ADDR_5	xor eax eax mov edx CONST mov esi CONST call sub_xxx test eax eax js JUMP_ADDR_7	mov rbx [rbx+CONST] mov eax CONST cmp rbx rax cmovb rbx rax mov eax CONST cmp rbx rax cmova rbx rax lea rdi [rbx+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_7	mov [r12] ebp mov [r12+CONST] CONST mov [r12+CONST] rbx mov [r12+CONST] CONST mov [r12+CONST] CONST mov [r12+CONST] CONST mov [r12+CONST] CONST	mov rax r12 pop rbx pop rbp pop r12 retn	mov rbx [rcx+CONST] mov eax CONST cmp rbx rax cmovb rbx rax mov eax CONST cmp rbx rax cmova rbx rax lea rdi [rbx+CONST] call sub_xxx mov r12 rax test rax rax jnz JUMP_ADDR_3	mov edi ebp call sub_xxx jmp JUMP_ADDR_4	xor r12d r12d jmp JUMP_ADDR_4
[ph]libcap-git-setcap_opendir
push r12 push rbp sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test edi edi js JUMP_ADDR_8	mov r12 rsp mov ebp edi mov rsi r12 call sub_xxx test eax eax js JUMP_ADDR_7	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_6	mov rcx r12 xor edx edx mov esi CONST mov edi ebp call sub_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST pop rbp pop r12 retn	mov rax CONST mov fs:xxx CONST	mov edi ebp call sub_xxx xor eax eax jmp JUMP_ADDR_4	xor eax eax jmp JUMP_ADDR_4	call sub_xxx	endbr64 cmp [CONST_VAR] CONST jz JUMP_ADDR_12	sub rsp CONST mov edx CONST xor eax eax call sub_xxx add rsp CONST mov edi eax jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST xor eax eax retn	endbr64 cmp [CONST_VAR] CONST jz JUMP_ADDR_15	sub rsp CONST mov esi CONST xor eax eax call sub_xxx add rsp CONST mov edi eax jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST xor eax eax retn
[ph]libcap-git-setcap_closedir
endbr64 test rdi rdi jz JUMP_ADDR_2	push rbp mov ebp [CONST_VAR] call sub_xxx mov edi ebp pop rbp jmp UNK_JUMP_ADDR	mov rax CONST mov fs:xxx CONST mov eax CONST retn
[ph]libcap-git-setcap___rewinddir
endbr64 push rbp push rbx mov rbx rdi sub rsp CONST mov eax fs:xxx lea rbp [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_5	mov edx CONST cmpxchg [CONST_VAR+CONST] edx	mov edi [rbx] xor edx edx xor esi esi call sub_xxx mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST mov eax fs:xxx test eax eax jnz JUMP_ADDR_7	sub [rbx+CONST] CONST	add rsp CONST pop rbx pop rbp retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	mov rdi rbp call sub_xxx jmp JUMP_ADDR_2	xor eax eax xchg eax [rbx+CONST] cmp eax CONST jle JUMP_ADDR_4	xor r10d r10d mov edx CONST mov esi CONST mov rdi rbp mov eax CONST syscall jmp JUMP_ADDR_4
[ph]libcap-git-setcap_readdir64
endbr64 push r14 push r13 push r12 mov r12 CONST push rbp push rbx mov rbx rdi mov r14d fs:xxx mov eax fs:xxx lea r13 [CONST_VAR+CONST] test eax eax jnz JUMP_ADDR_16	mov edx CONST cmpxchg [CONST_VAR+CONST] edx	mov rax [rbx+CONST] lea rbp [rbx+CONST] jmp JUMP_ADDR_4	add r8 rbx movzx edx [r8+CONST] add rax rdx mov rdx [r8+CONST] cmp [r8] CONST mov [rbx+CONST] rax mov [rbx+CONST] rdx jnz JUMP_ADDR_9	lea r8 [rax+CONST] cmp [rbx+CONST] rax ja JUMP_ADDR_3	mov rdx [rbx+CONST] mov edi [rbx] mov rsi rbp call sub_xxx test rax rax jle JUMP_ADDR_7	mov [rbx+CONST] rax mov r8d CONST xor eax eax jmp JUMP_ADDR_3	jnz JUMP_ADDR_12	mov fs:xxx r14d xor r8d r8d nop [rax+rax+CONST]	mov eax fs:xxx test eax eax jnz JUMP_ADDR_14	sub [rbx+CONST] CONST	pop rbx mov rax r8 pop rbp pop r12 pop r13 pop r14 retn	xor r8d r8d cmp fs:xxx CONST jnz JUMP_ADDR_9	jmp JUMP_ADDR_8	xor eax eax xchg eax [rbx+CONST] cmp eax CONST jle JUMP_ADDR_11	xor r10d r10d mov edx CONST mov esi CONST mov rdi r13 mov eax CONST syscall jmp JUMP_ADDR_11	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	mov rdi r13 call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap___fdopendir
endbr64 push r12 push rbp mov ebp edi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov r12 rsp mov rsi r12 call sub_xxx test eax eax js JUMP_ADDR_8	mov eax [rsp+CONST+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_7	mov esi CONST mov edi ebp xor eax eax call sub_xxx mov edx eax cmp eax CONST jz JUMP_ADDR_8	and eax CONST cmp eax CONST jz JUMP_ADDR_9	mov rcx r12 xor esi esi mov edi ebp call sub_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_10	add rsp CONST pop rbp pop r12 retn	mov rax CONST mov fs:xxx CONST	xor eax eax jmp JUMP_ADDR_5	mov rax CONST mov fs:xxx CONST xor eax eax jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___uname
endbr64 mov eax CONST syscall cmp rax CONST jnb JUMP_ADDR_2	retn	mov rcx CONST neg eax mov fs:xxx eax or rax CONST retn
[ph]libcap-git-setcap___getuid
endbr64 mov eax CONST syscall retn
[ph]libcap-git-setcap___geteuid
endbr64 mov eax CONST syscall retn
[ph]libcap-git-setcap___getgid
endbr64 mov eax CONST syscall retn
[ph]libcap-git-setcap___getegid
endbr64 mov eax CONST syscall retn
[ph]libcap-git-setcap_openat
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rcx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test dl CONST jnz JUMP_ADDR_6	mov eax edx xor r10d r10d and eax CONST cmp eax CONST jz JUMP_ADDR_6	mov eax fs:xxx test eax eax jnz JUMP_ADDR_7	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_9	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_11	add rsp CONST retn	lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov r10d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov [rsp+CONST+CONST_VAR] edx mov [rsp+CONST+CONST_VAR] rsi mov [rsp+CONST+CONST_VAR] edi mov [rsp+CONST+CONST_VAR] r10d call sub_xxx mov r10d [rsp+CONST+CONST_VAR] mov edx [rsp+CONST+CONST_VAR] mov r8d eax mov rsi [rsp+CONST+CONST_VAR] mov edi [rsp+CONST+CONST_VAR] mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_10	mov edi r8d mov [rsp+CONST+CONST_VAR] eax call sub_xxx mov eax [rsp+CONST+CONST_VAR] jmp JUMP_ADDR_4	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_4	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_8	call sub_xxx
[ph]libcap-git-setcap___isatty
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rsi rsp call sub_xxx test eax eax setz al mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_2	movzx eax al add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap___openat_nocancel
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rcx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax test dl CONST jnz JUMP_ADDR_5	mov eax edx xor r10d r10d and eax CONST cmp eax CONST jz JUMP_ADDR_5	mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_6	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST retn	lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov r10d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_2	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap_tcgetattr
endbr64 sub rsp CONST mov r8 rsi mov esi CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rdx rsp mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_5	mov r9d eax test eax eax jnz JUMP_ADDR_3	mov rax [rsp+CONST+var_xxx] movzx edx [rsp+CONST+var_xxx] mov [r8+CONST] CONST movdqu xmm0 [rsp+CONST+var_xxx] mov [r8+CONST] CONST mov [r8] rax mov rax [rsp+CONST+var_xxx] mov [r8+CONST] dx movzx edx [rsp+CONST+var_xxx] mov [r8+CONST] rax movzx eax [rsp+CONST+var_xxx] mov [r8+CONST] dl mov [r8+CONST] al mov eax [rsp+CONST+var_xxx] mov [r8+CONST] CONST and eax CONST movups [r8+CONST] xmm0 mov [r8+CONST] eax mov [r8+CONST] eax	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_6	mov eax r9d add rsp CONST retn	mov rdx CONST neg eax mov r9d CONST mov fs:xxx eax jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap_brk
endbr64 mov eax CONST syscall mov cs:xxx rax cmp rax rdi jb JUMP_ADDR_2	xor eax eax retn	mov rax CONST mov fs:xxx CONST mov eax CONST retn
[ph]libcap-git-setcap_is_dst
push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rdi mov rdi rsi sub rsp CONST call sub_xxx cmp [rbx] CONST mov r12 rax jz JUMP_ADDR_8	mov rdx rax mov rsi rbp mov rdi rbx call sub_xxx test eax eax jz JUMP_ADDR_4	xor r12d r12d	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	movzx edx [rbx+r12] mov eax edx and eax CONST sub eax CONST cmp al CONST jbe JUMP_ADDR_2	lea eax [rdx+CONST] cmp al CONST jbe JUMP_ADDR_2	cmp dl CONST jnz JUMP_ADDR_3	jmp JUMP_ADDR_2	lea rdi [rbx+CONST] mov rdx rax mov rsi rbp mov r13 rax call sub_xxx xor r12d r12d test eax eax jnz JUMP_ADDR_3	cmp [rbx+r13+CONST] CONST jnz JUMP_ADDR_3	add rsp CONST lea r12 [r13+CONST] pop rbx mov rax r12 pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap_is_trusted_path_normalize
test rsi rsi jz JUMP_ADDR_28	push rbp add rsi CONST movzx eax [CONST_VAR] and rsi CONST mov rbp rsp sub rsp rsi lea rsi [rsp+CONST] and rsi CONST mov rdx rsi test al al jnz JUMP_ADDR_5	jmp JUMP_ADDR_13	mov [rdx] al add rdi CONST mov eax ecx add rdx CONST	test al al jz JUMP_ADDR_11	movzx ecx [CONST_VAR+CONST] cmp al CONST jnz JUMP_ADDR_3	cmp cl CONST jz JUMP_ADDR_18	cmp rsi rdx jnb JUMP_ADDR_3	cmp [rdx+CONST] CONST jnz JUMP_ADDR_3	mov eax ecx add rdi CONST test al al jnz JUMP_ADDR_5	nop [rax+rax+CONST]	cmp rdx rsi jz JUMP_ADDR_13	cmp [rdx+CONST] CONST mov rax rdx jz JUMP_ADDR_14	mov [rdx] CONST lea rax [rdx+CONST]	sub rax rsi cmp rax CONST jbe JUMP_ADDR_16	mov rax CONST cmp [CONST_VAR] rax jz JUMP_ADDR_29	xor eax eax	leave retn	movzx r8d [CONST_VAR+CONST] cmp r8b CONST jz JUMP_ADDR_22	cmp r8b CONST jz JUMP_ADDR_21	test r8b r8b jnz JUMP_ADDR_7	add rdi CONST mov eax r8d jmp JUMP_ADDR_4	movzx r8d [CONST_VAR+CONST] cmp r8b CONST jz JUMP_ADDR_26	test r8b r8b jnz JUMP_ADDR_7	jmp JUMP_ADDR_26	sub rdx CONST cmp [rdx] CONST jz JUMP_ADDR_27	cmp rdx rsi ja JUMP_ADDR_25	add rdi CONST mov eax r8d jmp JUMP_ADDR_4	xor eax eax retn	cmp [CONST_VAR+CONST] CONST mov eax CONST jz JUMP_ADDR_17	xor eax eax jmp JUMP_ADDR_17
[ph]libcap-git-setcap_open_verify.constprop.0
push rbp xor eax eax mov rbp rsp push r15 push r14 mov r14 rdi push r13 mov r13 rsi mov esi CONST push r12 push rbx mov rbx rdx sub rsp CONST mov [rbp+var_xxx] ecx call sub_xxx mov r15d eax cmp eax CONST jz JUMP_ADDR_14	mov rax CONST mov r12d CONST mov fs:xxx CONST lea rax [r13+CONST] mov [r13+CONST] CONST mov [rbp+var_xxx] rax xor eax eax	mov rdi [rbp+var_xxx] mov rdx r12 sub rdx rax lea rsi [CONST_VAR+rax] mov edi r15d call sub_xxx test rax rax jle JUMP_ADDR_59	add rax [r13+CONST] mov [r13+CONST] rax cmp rax CONST jbe JUMP_ADDR_2	cmp rax CONST jle JUMP_ADDR_47	mov rdx CONST cmp [r13+CONST] rdx jnz JUMP_ADDR_51	movzx edx [r13+CONST] test dl dl jnz JUMP_ADDR_53	mov edi [r13+CONST] test edi edi jnz JUMP_ADDR_9	cmp [r13+CONST] CONST jz JUMP_ADDR_15	cmp [r13+CONST] CONST jnz JUMP_ADDR_72	cmp [r13+CONST] CONST jz JUMP_ADDR_62	mov [rbx] CONST xor r9d r9d	mov edi r15d mov [rbp+var_xxx] r9 mov r15d CONST call sub_xxx mov rax CONST mov fs:xxx CONST mov r9 [rbp+var_xxx]	mov rdi r9 call sub_xxx	lea rsp [rbp+CONST] mov eax r15d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp [r13+CONST] CONST jnz JUMP_ADDR_9	xor r12d r12d cmp [r13+CONST] CONST jnz JUMP_ADDR_56	cmp [r13+CONST] CONST jnz JUMP_ADDR_57	movzx edi [r13+CONST] lea edx [CONST_VAR+CONST] cmp dx CONST ja JUMP_ADDR_58	cmp [r13+CONST] CONST jnz JUMP_ADDR_60	movzx ecx [r13+CONST] mov r10 [r13+CONST] lea rbx ds:xxx sub rbx rcx shl rbx CONST lea rdx [rbx+r10] cmp rdx rax ja JUMP_ADDR_41	mov rax [rbp+var_xxx] lea r8 [rax+r10]	add rbx r8 cmp r8 rbx jnb JUMP_ADDR_61	mov [rbp+var_xxx] r14 mov rbx r8 mov r14 r13 xor r9d r9d mov r11 CONST mov r13 r8 mov r10 CONST jmp JUMP_ADDR_25	lea rax ds:xxx add rbx CONST sub rax rcx lea rax [r13+rax*8+CONST] cmp rbx rax jnb JUMP_ADDR_13	cmp [rbx] CONST jnz JUMP_ADDR_24	mov rdx [rbx+CONST] cmp rdx CONST jbe JUMP_ADDR_24	mov rax [rbx+CONST] sub rax CONST test rax CONST jnz JUMP_ADDR_24	mov rcx [rbx+CONST] lea rax [rdx+rcx] cmp rax [r14] jbe JUMP_ADDR_43	cmp rdx CONST ja JUMP_ADDR_45	lea rax [rdx+CONST] and rax CONST sub rsp rax lea r12 [rsp+CONST+var_xxx+CONST] and r12 CONST	mov rsi r12 mov edi r15d mov [rbp+var_xxx] r9 mov [rbp+var_xxx] rdx call sub_xxx mov rdx [rbp+var_xxx] mov r9 [rbp+var_xxx] mov r11 CONST mov r10 CONST cmp rax rdx jnz JUMP_ADDR_75	nop [rax+rax+CONST]	mov rax [r12+CONST] mov rcx [r12] xor rax r10 xor rcx r11 or rax rcx jnz JUMP_ADDR_39	test rdx rdx jz JUMP_ADDR_44	mov esi [r12+CONST] mov eax [r12+CONST] mov ecx [r12+CONST] mov edx [r12+CONST] test esi esi jnz JUMP_ADDR_12	movzx eax al movzx ecx cl movzx edx dl mov esi cs:xxx shl eax CONST add eax ecx shl eax CONST add eax edx cmp eax esi jbe JUMP_ADDR_13	test esi esi jz JUMP_ADDR_13	jmp JUMP_ADDR_12	mov rcx [rbx+CONST] mov eax [r12] mov edi [r12+CONST] mov rsi rcx lea rax [rcx+rax+CONST] neg rsi lea rcx [rcx+CONST_VAR+CONST] and rax rsi add rax rcx lea rcx [rdx+CONST] and rax rsi cmp rax rcx ja JUMP_ADDR_44	sub rdx rax add r12 rax jmp JUMP_ADDR_33	lea rax [rbx+CONST] mov rcx r10 mov rdx rbx mov edi r15d and rax CONST sub rsp rax lea r8 [rsp+CONST+var_xxx+CONST] and r8 CONST mov rsi r8 mov [rbp+var_xxx] r8 call sub_xxx mov r8 [rbp+var_xxx] cmp rax rbx jnz JUMP_ADDR_74	movzx ecx [r13+CONST] lea rbx ds:xxx sub rbx rcx shl rbx CONST jmp JUMP_ADDR_22	mov rax [rbp+var_xxx] lea r12 [rax+rcx] jmp JUMP_ADDR_33	movzx ecx [r14+CONST] jmp JUMP_ADDR_24	mov rsi rdx mov rdi r9 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] rdx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_73	mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov r9 rax jmp JUMP_ADDR_31	mov rax CONST lea rdx GLOBAL_VAR mov r12d fs:xxx lea rax GLOBAL_VAR test r12d r12d cmovz rax rdx mov rbx rax	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_50	mov edi r15d call sub_xxx mov rcx rbx xor edx edx mov rsi r14 mov edi r12d call sub_xxx	mov rdi r14 call sub_xxx mov rsi r14 lea rdx [rax+CONST] add rax CONST and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx+CONST] and rdi CONST call sub_xxx mov rdi r14 mov r13 rax call sub_xxx mov r14 r13 jmp JUMP_ADDR_49	mov rdx CONST cmp [r13+CONST] rdx jz JUMP_ADDR_6	jmp JUMP_ADDR_9	cmp [r13+CONST] CONST jnz JUMP_ADDR_9	cmp dl CONST jbe JUMP_ADDR_7	jmp JUMP_ADDR_9	lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	xor r9d r9d jmp JUMP_ADDR_12	lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	mov rax [r13+CONST] jmp JUMP_ADDR_4	lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	xor r9d r9d jmp JUMP_ADDR_13	xor r12d r12d cmp [r13+CONST] CONST lea rbx GLOBAL_VAR jnz JUMP_ADDR_48	cmp [r13+CONST] CONST lea rbx GLOBAL_VAR jnz JUMP_ADDR_48	movzx edx [r13+CONST] cmp dl CONST setnz al test dl dl jz JUMP_ADDR_66	lea rbx GLOBAL_VAR test al al jnz JUMP_ADDR_48	movzx edx [r13+CONST] test dl dl jz JUMP_ADDR_70	cmp dl CONST ja JUMP_ADDR_69	test al al jz JUMP_ADDR_70	xor r12d r12d lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	lea rdi [r13+CONST] mov edx CONST lea rsi unk_xxx call sub_xxx lea rbx GLOBAL_VAR mov r12d eax test eax eax jz JUMP_ADDR_48	xor r12d r12d lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	xor r12d r12d lea rbx GLOBAL_VAR jmp JUMP_ADDR_48	mov r14 [rbp+var_xxx]	mov rax CONST lea rbx GLOBAL_VAR mov r12d fs:xxx jmp JUMP_ADDR_48	mov rdi r9 mov r14 [rbp+var_xxx] call sub_xxx jmp JUMP_ADDR_74
[ph]libcap-git-setcap_add_path.constprop.0.isra.0
cmp rsi CONST jz JUMP_ADDR_9	push r12 mov r12 rsi push rbp push rbx mov rbx rdi mov rsi [CONST_VAR] jmp JUMP_ADDR_3	mov eax CONST mov rsi [r12] add [rcx+CONST] CONST cmp rdx rax cmovb rdx rax add [rcx] rdx test rsi rsi jz JUMP_ADDR_7	add r12 CONST cmp [rbx] CONST mov rcx [rbx+CONST] mov rdx [CONST_VAR+CONST] jnz JUMP_ADDR_2	mov eax [rbx+CONST] lea edi [rax+CONST] shl rax CONST mov [rbx+CONST] edi mov rdi [rbx+CONST] lea rbp [rcx+rax] mov [rbp+CONST] rdi cmp rdx CONST ja JUMP_ADDR_8	mov eax CONST lea rdx [CONST_VAR+CONST] sbb al CONST mov [rbx+CONST] rdx mov [CONST_VAR] al mov rax [rbx+CONST]	lea rdx [rax+CONST] mov [rbx+CONST] rdx mov [rax] CONST mov rsi [r12] mov [rbp+CONST] CONST test rsi rsi jnz JUMP_ADDR_3	pop rbx pop rbp pop r12 retn	mov rsi [CONST_VAR+CONST] sub rdx CONST call sub_xxx jmp JUMP_ADDR_6	retn
[ph]libcap-git-setcap_open_path.isra.0
push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov rax [rcx] mov [rbp+var_xxx] rdi mov [rbp+var_xxx] edx mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r9 mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_34	mov rax cs:xxx mov [rbp+var_xxx] rsi mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST add rax rsi add rax CONST and rax CONST sub rsp rax lea rax [rsp+CONST+var_xxx] and rax CONST mov r14 rax mov rax [rbp+var_xxx] mov r13 [rax]	mov ecx cs:xxx and ecx CONST jnz JUMP_ADDR_35	mov rdx [r13+CONST] mov rsi [r13+CONST] mov rdi r14 xor ebx ebx xor r15d r15d call sub_xxx mov r8d CONST mov r12 rax xor eax eax	cmp r8d CONST jnz JUMP_ADDR_12	test rax rax jnz JUMP_ADDR_28	cmp [r13+CONST] CONST mov r8d CONST mov eax CONST jz JUMP_ADDR_4	mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] mov rdi r12 call sub_xxx sub rax r14 mov r15 rax test cs:xxx CONST jnz JUMP_ADDR_24	mov rdx [rbp+arg_xxx] mov rsi [rbp+var_xxx] xor ecx ecx mov rdi r14 call sub_xxx mov r8d eax mov eax [r13+CONST] test eax eax jnz JUMP_ADDR_15	cmp r8d CONST jz JUMP_ADDR_21	mov [r13+CONST] CONST mov ebx CONST test [rbp+var_xxx] CONST jnz JUMP_ADDR_17	mov eax CONST cmp r8d CONST jz JUMP_ADDR_5	mov rdi r15 mov [rbp+var_xxx] r8d call sub_xxx mov r8d [rbp+var_xxx] mov rdi rax mov rax [rbp+var_xxx] test rdi rdi mov [rax] rdi jz JUMP_ADDR_54	mov rdx r15 mov rsi r14 call sub_xxx mov r8d [rbp+var_xxx]	lea rsp [rbp+CONST] mov eax r8d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp eax CONST setnz al movzx eax al or ebx eax cmp r8d CONST jz JUMP_ADDR_11	test [rbp+var_xxx] CONST jz JUMP_ADDR_11	mov esi cs:xxx test esi esi jz JUMP_ADDR_11	mov edi r8d lea rsi [rbp+var_xxx] mov [rbp+var_xxx] r8d call sub_xxx mov r8d [rbp+var_xxx] test eax eax jnz JUMP_ADDR_20	test [rbp+var_xxx] CONST jnz JUMP_ADDR_11	mov edi r8d call sub_xxx mov rax CONST mov r8d CONST mov fs:xxx CONST jmp JUMP_ADDR_11	cmp [rbp+arg_xxx] CONST jz JUMP_ADDR_25	mov rax [rbp+arg_xxx] lea rcx off_xxx mov rax [rax+CONST] lea rdx [rax+rax*8] lea rax [rax+rdx*2] mov rax [rcx+rax*8] test [rax+CONST] CONST jz JUMP_ADDR_25	mov ebx CONST jmp JUMP_ADDR_11	mov rsi r14 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_8	mov rax r15 sub rax [rbp+var_xxx] lea rsi [rbp+var_xxx] mov rdi r14 mov [r14+rax+CONST] CONST mov [rbp+var_xxx] r8d call sub_xxx mov r8d [rbp+var_xxx] mov r9d eax mov eax CONST test r9d r9d jnz JUMP_ADDR_27	mov edx [rbp+CONST] xor eax eax and edx CONST cmp edx CONST setz al add eax CONST cmp edx CONST mov edx CONST cmovz ebx edx	mov [r13+CONST] eax jmp JUMP_ADDR_11	cmp r8d CONST jnz JUMP_ADDR_12	test ebx ebx jz JUMP_ADDR_32	mov rax CONST mov eax fs:xxx cmp eax CONST jz JUMP_ADDR_32	cmp eax CONST jnz JUMP_ADDR_34	add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] or [rbp+var_xxx] ebx mov r13 [rax] test r13 r13 jnz JUMP_ADDR_2	mov ecx [rbp+var_xxx] test ecx ecx jz JUMP_ADDR_49	mov r8d CONST jmp JUMP_ADDR_14	mov rax [r13+CONST] mov [rbp+var_xxx] ecx mov [rbp+var_xxx] rax cmp rax [rbp+var_xxx] jz JUMP_ADDR_3	mov rax [r13+CONST] mov [rbp+CONST] rsp lea rdi GLOBAL_VAR lea r15 GLOBAL_VAR lea r12 GLOBAL_VAR mov [rbp+var_xxx] rax mov rax cs:xxx add rax CONST and rax CONST sub rsp rax xor eax eax call sub_xxx mov rcx [rbp+var_xxx] mov rbx rsp mov rax [rcx] mov rdx rcx mov ecx [rbp+var_xxx] test rax rax jz JUMP_ADDR_43	mov [rbp+var_xxx] r13 mov r13 rdx mov [rbp+var_xxx] r14 mov r14d ecx jmp JUMP_ADDR_41	mov rdx [rax+CONST] mov rsi [rax+CONST] mov rdi rbx call sub_xxx mov rdx [r13+CONST] cmp [rdx+CONST] CONST jz JUMP_ADDR_40	test r14d r14d mov [rax] CONST mov rdi r12 mov rsi rbx cmovz rdi r15 xor eax eax xor r14d r14d call sub_xxx	mov rax [r13+CONST] add r13 CONST test rax rax jz JUMP_ADDR_42	mov rcx [rbp+var_xxx] cmp rcx [rax+CONST] jz JUMP_ADDR_38	mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx]	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_48	mov rax [rbp+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_46	mov rax cs:xxx mov rcx [rax] lea rax GLOBAL_VAR test rcx rcx cmovnz rax rcx mov [rbp+var_xxx] rax	mov rdx [rbp+var_xxx] mov rsi [rbp+var_xxx] lea rdi GLOBAL_VAR xor eax eax call sub_xxx	mov rax [rbp+var_xxx] mov rsp [rbp+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_3	mov rsi [rbp+var_xxx] lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_47	mov rax [rbp+var_xxx] mov edx [rax+CONST] test edx edx jnz JUMP_ADDR_53	mov rcx [rbp+var_xxx] lea rax GLOBAL_VAR cmp rcx rax jz JUMP_ADDR_34	lea rax GLOBAL_VAR cmp rcx rax jz JUMP_ADDR_34	mov [rcx] CONST jmp JUMP_ADDR_14	mov rdi [rax] mov [rbp+var_xxx] r8d call sub_xxx mov r8d [rbp+var_xxx] jmp JUMP_ADDR_50	mov edi r8d call sub_xxx jmp JUMP_ADDR_34
[ph]libcap-git-setcap_add_name_to_object.isra.0
push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rdi sub rsp CONST test rdi rdi jnz JUMP_ADDR_4	jmp JUMP_ADDR_8	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_6	mov rbx rax	mov rsi [rbx] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rdi rbp call sub_xxx lea rdi [rax+CONST] lea r13 [rax+CONST] call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_9	lea rdi [r12+CONST] mov rdx r13 mov rsi rbp call sub_xxx mov [r12+CONST] CONST mov [r12] rax mov [r12+CONST] CONST mov [rbx+CONST] r12 add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	mov rdi rsi call sub_xxx lea rdi [rax+CONST] call sub_xxx test rax rax jnz JUMP_ADDR_10	lea rcx GLOBAL_VAR xor edx edx mov rsi rbp mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_dst_count
endbr64 push r14 mov esi CONST push r13 push r12 xor r12d r12d push rbp push rbx call sub_xxx test rax rax jnz JUMP_ADDR_2	pop rbx mov rax r12 pop rbp pop r12 pop r13 pop r14 retn	lea rbx GLOBAL_VAR lea r13 GLOBAL_VAR lea r14 GLOBAL_VAR nop [rax]	lea rbp [rax+CONST] mov rsi rbx mov rdi rbp call sub_xxx test rax rax jnz JUMP_ADDR_7	mov rsi r13 mov rdi rbp call sub_xxx test rax rax jnz JUMP_ADDR_7	mov rsi r14 mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_8	nop [rax+CONST]	add r12 CONST add rbp rax	mov esi CONST mov rdi rbp call sub_xxx test rax rax jnz JUMP_ADDR_3	pop rbx mov rax r12 pop rbp pop r12 pop r13 pop r14 retn
[ph]libcap-git-setcap__dl_dst_substitute
endbr64 push r15 mov r15 rsi push r14 xor r14d r14d push r13 lea r13 GLOBAL_VAR push r12 mov r12 rdx push rbp mov rbp rdx push rbx mov rbx rsi sub rsp CONST movzx eax [CONST_VAR] mov [rsp+CONST+var_xxx] rdi jmp JUMP_ADDR_3	mov [rbp+CONST] al add rbp CONST	movzx eax [r15] test al al jz JUMP_ADDR_10	add r15 CONST cmp al CONST jnz JUMP_ADDR_1	mov rsi r13 mov rdi r15 call sub_xxx mov rcx rax test rax rax jz JUMP_ADDR_13	mov eax cs:xxx test eax eax jnz JUMP_ADDR_20	mov rax [rsp+CONST+var_xxx] xor r14d r14d mov rsi [rax+CONST] lea rax [CONST_VAR+CONST]	cmp rax CONST ja JUMP_ADDR_19	mov rdi rbp mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx] mov rbp rax add r15 rcx movzx eax [r15] test al al jnz JUMP_ADDR_3	nop [rax+CONST]	test r14b r14b jnz JUMP_ADDR_18	mov [rbp+CONST] CONST	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rsi GLOBAL_VAR mov rdi r15 call sub_xxx mov rcx rax test rax rax jnz JUMP_ADDR_16	lea rsi GLOBAL_VAR mov rdi r15 call sub_xxx mov rcx rax test rax rax jz JUMP_ADDR_17	lea rax GLOBAL_VAR lea rsi [rax+CONST] jmp JUMP_ADDR_7	mov rsi cs:xxx lea rax [CONST_VAR+CONST] jmp JUMP_ADDR_7	mov [rbp+CONST] CONST add rbp CONST jmp JUMP_ADDR_2	mov rsi rbp mov rdi r12 sub rsi r12 call sub_xxx test al al jnz JUMP_ADDR_11	mov [r12] CONST jmp JUMP_ADDR_12	lea rax [rbx+CONST] cmp r15 rax jnz JUMP_ADDR_19	movzx eax [r15+rcx] test al al jz JUMP_ADDR_23	cmp al CONST jnz JUMP_ADDR_19	mov rdx [rsp+CONST+var_xxx] mov rsi [rdx+CONST] test [rdx+CONST] CONST setz r14b lea rax [CONST_VAR+CONST] jmp JUMP_ADDR_7
[ph]libcap-git-setcap_expand_dynamic_string_token
push r14 push r13 push r12 mov r12 rdi mov rdi rsi push rbp mov rbp rsi push rbx call sub_xxx test rax rax jnz JUMP_ADDR_2	pop rbx mov rdi rbp pop rbp pop r12 pop r13 pop r14 jmp UNK_JUMP_ADDR	mov rdi rbp mov rbx rax call sub_xxx mov rdi [r12+CONST] mov r14 rax mov r13 rax test rdi rdi jz JUMP_ADDR_9	cmp rdi CONST jz JUMP_ADDR_11	call sub_xxx	mov rdx cs:xxx cmp rax rdx cmovb rax rdx cmp rax CONST jbe JUMP_ADDR_7	sub rax CONST imul rax rbx lea r13 [r14+rax]	lea rdi [r13+CONST] call sub_xxx mov rdx rax test rax rax jz JUMP_ADDR_12	pop rbx mov rsi rbp mov rdi r12 pop rbp pop r12 pop r13 pop r14 jmp UNK_JUMP_ADDR	mov rax [r12+CONST] cmp [rax] CONST jnz JUMP_ADDR_13	call sub_xxx mov [r12+CONST] rax mov rdi rax lea rax [rax+CONST] cmp rax CONST jbe JUMP_ADDR_4	xor eax eax jmp JUMP_ADDR_5	pop rbx xor eax eax pop rbp pop r12 pop r13 pop r14 retn	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_fillin_rpath.isra.0
push r15 push r14 push r13 push r12 push rbp mov rbp rsi push rbx xor ebx ebx sub rsp CONST lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rax nop [rax+rax+CONST]	mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_34	cmp [r15] CONST jz JUMP_ADDR_21	mov rdi [rsp+CONST+var_xxx] mov rsi r15 call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_1	mov rdi rax call sub_xxx mov r13 rax test rax rax jnz JUMP_ADDR_8	jmp JUMP_ADDR_32	cmp [r15+r13+CONST] CONST lea rax [r13+CONST] jnz JUMP_ADDR_31	mov r13 rax	cmp r13 CONST jnz JUMP_ADDR_6	cmp [r15] CONST mov [rsp+CONST+var_xxx] r15 jnz JUMP_ADDR_31	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_23	mov r14 r12 jmp JUMP_ADDR_13	mov r14 [r14] test r14 r14 jz JUMP_ADDR_23	cmp [r14+CONST] r13 jnz JUMP_ADDR_12	mov rsi [r14+CONST] mov rdx r13 mov rdi r15 call sub_xxx test eax eax jnz JUMP_ADDR_12	xor eax eax test rbx rbx jz JUMP_ADDR_19	nop [rax+rax+CONST]	cmp [rbp+rax*8+CONST] r14 jz JUMP_ADDR_20	add rax CONST cmp rax rbx jnz JUMP_ADDR_17	mov [rbp+rbx*8+CONST] r14 add rbx CONST	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_1	mov r12 cs:xxx xor r13d r13d mov [rsp+CONST+var_xxx] CONST test r12 r12 jnz JUMP_ADDR_11	nop [rax+CONST]	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_33	mov rdi [rsp+CONST+var_xxx] call sub_xxx add rax CONST mov [rsp+CONST+var_xxx] rax	mov rdi [rsp+CONST+var_xxx] lea rax [r13+CONST] mov [rsp+CONST+var_xxx] rax add rdi rax call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_36	lea rdi [rax+CONST] mov rdx r13 mov rsi r15 mov [rax+CONST] rdi call sub_xxx cmp r13 cs:xxx mov [rax] CONST mov [r14+CONST] r13 jbe JUMP_ADDR_28	mov cs:xxx r13	xor eax eax cmp [r15] CONST mov rsi [rsp+CONST+var_xxx] setnz al add eax eax mov [r14+CONST] eax mov rax [rsp+CONST+var_xxx] mov [r14+CONST] rax test rsi rsi jz JUMP_ADDR_35	mov rdi [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] add rdi r14 call sub_xxx	mov [r14+CONST] rax mov [r14] r12 mov cs:xxx r14 jmp JUMP_ADDR_19	mov [r15+r13] CONST add r13 CONST mov [rsp+CONST+var_xxx] r15 jmp JUMP_ADDR_10	mov rdi r15 call sub_xxx jmp JUMP_ADDR_1	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_25	mov [rbp+rbx*8+CONST] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	xor eax eax jmp JUMP_ADDR_30	lea rcx GLOBAL_VAR xor edx edx xor esi esi mov edi CONST call sub_xxx
[ph]libcap-git-setcap_decompose_rpath
push r15 push r14 push r13 push r12 mov r12 rcx push rbp mov rbp rdx push rbx mov rbx rdi mov rdi rsi sub rsp CONST mov rax cs:xxx mov r13 [rdx+CONST] test rax rax jnz JUMP_ADDR_11	cmp [CONST_VAR] CONST jnz JUMP_ADDR_3	mov [rbx] CONST add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_31	movzx eax [rax] test al al jz JUMP_ADDR_27	mov rdx r14 xor ecx ecx nop [rax+CONST]	cmp al CONST setz al add rdx CONST movzx eax al add rcx rax movzx eax [rdx] test al al jnz JUMP_ADDR_6	lea rdi ds:xxx	call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_29	mov r9 rbp mov r8 r13 mov rcx r12 mov rsi rax lea rdx GLOBAL_VAR mov rdi r14 call sub_xxx mov rdi r14 call sub_xxx cmp [r15] CONST jz JUMP_ADDR_28	mov [rbx] r15 mov eax CONST mov [rbx+CONST] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edx cs:xxx test edx edx jnz JUMP_ADDR_1	movzx esi [r13+CONST] movzx r10d [rax] nop	mov rcx r13 mov edx r10d cmp r10b sil jz JUMP_ADDR_16	jmp JUMP_ADDR_24	movzx r10d [rax+CONST] movzx edx [rcx+CONST] add rax CONST add rcx CONST cmp r10b dl jnz JUMP_ADDR_25	test dl dl jnz JUMP_ADDR_15	test r10b r10b jz JUMP_ADDR_2	cmp r10b CONST jz JUMP_ADDR_2	nop [rax]	movzx edx [rax] test dl dl jz JUMP_ADDR_1	add rax CONST cmp dl CONST jnz JUMP_ADDR_20	movzx r10d [rax] test r10b r10b jnz JUMP_ADDR_13	jmp JUMP_ADDR_1	mov edx esi nop [rax+rax+CONST]	test dl dl jnz JUMP_ADDR_20	jmp JUMP_ADDR_17	mov edi CONST jmp JUMP_ADDR_8	mov rdi r15 call sub_xxx jmp JUMP_ADDR_2	mov rdi r14 call sub_xxx lea rcx GLOBAL_VAR	xor edx edx xor esi esi mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR jmp JUMP_ADDR_30
[ph]libcap-git-setcap__dl_init_paths
endbr64 push rbp mov rbp rsp push r13 mov r13 rdi mov edi CONST push r12 mov r12 rsi push rbx sub rsp CONST call sub_xxx mov cs:xxx rax test rax rax jz JUMP_ADDR_16	mov edi CONST mov rbx rax call sub_xxx mov [rbx] rax test rax rax jz JUMP_ADDR_14	lea rcx GLOBAL_VAR lea rsi GLOBAL_VAR mov cs:xxx CONST mov cs:xxx rax mov [rax+CONST] rcx mov [rax+CONST] CONST mov [rax+CONST] rsi mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax] CONST mov cs:xxx CONST mov [rbx+CONST] CONST test r13 r13 jz JUMP_ADDR_4	cmp [r13+CONST] CONST jnz JUMP_ADDR_5	mov cs:xxx CONST lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop rbp retn	mov rdi r13 call sub_xxx mov rsi r13 lea rdx [rax+CONST] add rax CONST and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST call sub_xxx mov r13 rax movzx eax [rax] test al al jz JUMP_ADDR_13	mov rdx r13 mov ecx CONST nop [rax+rax+CONST]	sub eax CONST cmp al CONST adc rcx CONST movzx eax [rdx+CONST] add rdx CONST test al al jnz JUMP_ADDR_7	lea rdi ds:xxx	call sub_xxx mov cs:xxx rax mov rsi rax test rax rax jz JUMP_ADDR_14	xor r9d r9d xor r8d r8d mov rdi r13 mov rcx r12 lea rdx GLOBAL_VAR call sub_xxx mov rdi cs:xxx cmp [CONST_VAR] CONST jz JUMP_ADDR_12	mov cs:xxx CONST lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop rbp retn	call sub_xxx mov cs:xxx CONST jmp JUMP_ADDR_11	mov edi CONST jmp JUMP_ADDR_9	lea rcx GLOBAL_VAR	xor edx edx xor esi esi mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR jmp JUMP_ADDR_15
[ph]libcap-git-setcap__dl_process_pt_gnu_property
endbr64 cmp [rdx+CONST] CONST mov rax rdx jnz JUMP_ADDR_7	mov r8 [rdx+CONST] cmp r8 CONST jbe JUMP_ADDR_7	mov rdx [CONST_VAR] mov esi CONST add rdx [rax+CONST] sub rsi rdx jmp JUMP_ADDR_4	mov ecx [rdx+CONST] add rax CONST and rax CONST lea rax [rax+rcx+CONST] and rax CONST add rdx rax lea rax [rdx+CONST_VAR] cmp rax r8 jnb JUMP_ADDR_7	mov eax [rdx] cmp eax CONST jnz JUMP_ADDR_3	cmp [rdx+CONST] CONST jnz JUMP_ADDR_3	cmp [rdx+CONST] CONST jnz JUMP_ADDR_3	retn
[ph]libcap-git-setcap__dl_map_object_from_fd.constprop.0
push rbp mov rbp rsp push r15 push r14 mov r14 rdx push r13 mov r13d r9d push r12 mov r12 r8 push rbx sub rsp CONST mov [rbp+var_xxx] esi mov rsi [rbp+arg_xxx] mov [rbp+var_xxx] rdi xor edi edi mov [rbp+var_xxx] rcx call sub_xxx mov [rbp+var_xxx] rax mov eax [rbp+arg_xxx] and eax CONST mov [rbp+var_xxx] eax jz JUMP_ADDR_56	cmp [rbp+arg_xxx] CONST jnz JUMP_ADDR_239	pxor xmm0 xmm0 movaps [rbp+var_xxx] xmm0	mov eax [rbp+arg_xxx] and eax CONST mov [rbp+var_xxx] eax jnz JUMP_ADDR_184	test cs:xxx CONST jnz JUMP_ADDR_185	mov rax [rbp+var_xxx] mov eax [rax+CONST] test eax eax jz JUMP_ADDR_65	cmp eax CONST jnz JUMP_ADDR_240	mov [rbp+var_xxx] CONST	mov r9 [rbp+arg_xxx] mov r8d [rbp+arg_xxx] mov rcx r12 mov edx r13d mov rsi [rbp+var_xxx] mov rdi [rbp+var_xxx] call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_186	mov rax [r14+CONST] mov rcx [r14+CONST] mov [r15+CONST] rax movzx eax [r14+CONST] mov [rbp+var_xxx] ax movzx eax [r14+CONST] lea rbx ds:xxx mov [r15+CONST] ax sub rbx rax shl rbx CONST lea rax [rbx+rcx] cmp rax [r14] ja JUMP_ADDR_41	lea rax [r14+rcx+CONST] mov [rbp+var_xxx] rax	movzx eax [r15+CONST] mov [rbp+var_xxx] rsp lea rdx [rax+rax*2] shl rdx CONST sub rsp rdx lea rdx [rsp+CONST+var_xxx] mov rbx rdx and rdx CONST mov r13 rdx lea rdx ds:xxx shr rbx CONST sub rdx rax mov rax [rbp+var_xxx] mov [rbp+var_xxx] rbx lea rsi [rax+rdx*8] cmp rsi rax jbe JUMP_ADDR_208	mov rbx cs:xxx mov r8 cs:xxx mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rbx lea r12 [r8+CONST] xor ebx ebx neg r8 mov [rbp+var_xxx] r14 jmp JUMP_ADDR_17	cmp edx CONST jz JUMP_ADDR_49	cmp edx CONST jnz JUMP_ADDR_43	mov rdx [rax+CONST] mov [r15+CONST] rdx nop [rax]	add rax CONST cmp rsi rax jbe JUMP_ADDR_23	mov edx [rax] cmp edx CONST jz JUMP_ADDR_51	jbe JUMP_ADDR_13	cmp edx CONST jz JUMP_ADDR_55	cmp edx CONST jnz JUMP_ADDR_16	mov rdx [rax+CONST] add rax CONST mov [r15+CONST] rdx mov rdx [rax+CONST] mov [r15+CONST] rdx cmp rsi rax ja JUMP_ADDR_17	nop [rax+CONST]	mov r14 [rbp+var_xxx] test rbx rbx jz JUMP_ADDR_208	movzx edi [rbp+var_xxx] mov [rbp+var_xxx] edi cmp di CONST jnz JUMP_ADDR_209	mov rdi [rbp+var_xxx] lea rax [rbx+rbx*2+CONST] mov ecx CONST mov r8d [rbp+var_xxx] shl rax CONST mov r12 ds:xxx mov rax [r13+rax+CONST] mov r10d ds:xxx sub rax r12 mov [rbp+var_xxx] rax mov rsi rax mov rax rdi mov edx r10d mov rdi cs:xxx mov r9 ds:xxx mov [rbp+var_xxx] r10d and rdi r12 call sub_xxx mov r10d [rbp+var_xxx] cmp rax CONST mov [r15+CONST] rax jz JUMP_ADDR_40	mov rdi [rbp+var_xxx] lea rdx [rax+CONST_VAR] sub rax r12 cmp [rbp+var_xxx] CONST mov [r15+CONST] rdx mov [r15] rax jnz JUMP_ADDR_66	or [r15+CONST] CONST mov r12 r13	test r10b CONST jz JUMP_ADDR_30	mov rax [r12+CONST] add rax [r15] mov [r15+CONST] rax	cmp [r15+CONST] CONST jz JUMP_ADDR_79	mov rcx [r12+CONST] mov r8 [r12+CONST] cmp rcx r8 jbe JUMP_ADDR_36	mov rsi cs:xxx add r8 [r15] add rcx [r15] mov rax rsi lea rdx [r8+CONST_VAR+CONST] neg rax and rdx rax cmp rdx rcx cmova rdx rcx mov r11 rdx cmp r8 rdx jnb JUMP_ADDR_35	test r10b CONST jz JUMP_ADDR_228	mov [rbp+var_xxx] rdx xor esi esi sub rdx r8 mov rdi r8 mov [rbp+var_xxx] r10d mov [rbp+var_xxx] rcx call sub_xxx mov r11 [rbp+var_xxx] mov rcx [rbp+var_xxx] mov r10d [rbp+var_xxx]	cmp rcx r11 ja JUMP_ADDR_193	add r12 CONST	lea rax [rbx+rbx*2] shl rax CONST add rax r13 cmp r12 rax jnb JUMP_ADDR_68	mov rsi [r12+CONST] mov rdi [r12] mov r10d [r12+CONST] cmp rsi rdi jbe JUMP_ADDR_28	mov r9 [r12+CONST] sub rsi rdi mov edx r10d add rdi [r15] mov r8d [rbp+var_xxx] mov ecx CONST mov [rbp+var_xxx] r10d call sub_xxx mov r10d [rbp+var_xxx] cmp rax CONST jnz JUMP_ADDR_28	lea r12 GLOBAL_VAR jmp JUMP_ADDR_195	lea rax [rbx+CONST] mov edi [rbp+var_xxx] mov rdx rbx and rax CONST sub rsp rax lea rax [rsp+CONST+var_xxx+CONST] and rax CONST mov rsi rax mov [rbp+var_xxx] rax call sub_xxx cmp rax rbx jz JUMP_ADDR_11	lea r12 GLOBAL_VAR jmp JUMP_ADDR_223	cmp edx CONST jnz JUMP_ADDR_16	mov rdx [rax+CONST] test rdx r12 jnz JUMP_ADDR_82	mov rcx [rax+CONST] mov rdi [rax+CONST] sub rdx CONST mov r9 rcx sub r9 rdi test r9 rdx jnz JUMP_ADDR_94	mov r11 [rax+CONST] lea rdx [rbx+rbx*2] mov r14 rcx and rdi r8 shl rdx CONST and r14 r8 lea r10 [rbx+CONST] add r11 rcx add rdx r13 add rcx [rax+CONST] lea r9 [r12+r11] mov [rdx] r14 and r9 r8 mov [rdx+CONST] r11 mov [rdx+CONST] r9 mov [rdx+CONST] rcx mov [rdx+CONST] rdi cmp r10 CONST jbe JUMP_ADDR_48	movzx edi [rbp+var_xxx] cmp r14 [rdx+CONST] mov ecx CONST cmovnz edi ecx mov [rbp+var_xxx] dil	mov ecx [rax+CONST] lea rdx [rbx+rbx*2] mov ebx CONST shl rdx CONST and ecx CONST shl ecx CONST sar ebx cl mov ecx ebx mov rbx r10 and ecx CONST mov [r13+rdx+CONST] ecx jmp JUMP_ADDR_16	cmp [rax+CONST] CONST jz JUMP_ADDR_16	mov rdx [rax+CONST] mov [r15+CONST] rdx mov rdx [rax+CONST] shr rdx CONST mov [r15+CONST] dx jmp JUMP_ADDR_16	mov rdx [rax+CONST] test rdx rdx jz JUMP_ADDR_16	mov [r15+CONST] rdx mov rdx [rax+CONST] mov [r15+CONST] rdx mov rdi [rax+CONST] lea rcx [rdx+CONST] and rcx rdi test rdx rdx cmovnz rdx rcx mov [r15+CONST] rdx mov rdx [rax+CONST] mov [r15+CONST] rdi mov [r15+CONST] rdx movzx edx [r15+CONST] and edx CONST cmp dl CONST jz JUMP_ADDR_16	cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_16	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov edi [rax+CONST] mov [rbp+var_xxx] rdi jmp JUMP_ADDR_16	mov edi [rbp+var_xxx] lea rsi [rbp+var_xxx] call sub_xxx test eax eax js JUMP_ADDR_211	mov rbx [rbp+arg_xxx] mov rax [rbp+var_xxx] mov rdx [rbp+var_xxx] lea rcx [rbx+rbx*8] mov [rbp+var_xxx] rax lea rsi [rbx+rcx*2] lea rcx off_xxx mov [rbp+var_xxx+CONST] rdx mov r15 [rcx+rsi*8] test r15 r15 jnz JUMP_ADDR_60	jmp JUMP_ADDR_3	mov r15 [r15+CONST] test r15 r15 jz JUMP_ADDR_3	test [r15+CONST] CONST jnz JUMP_ADDR_59	cmp [r15+CONST] rax jnz JUMP_ADDR_59	cmp [r15+CONST] rdx jnz JUMP_ADDR_59	mov edi [rbp+var_xxx] call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx mov rdi [r15+CONST] mov rsi [rbp+var_xxx] call sub_xxx	lea rsp [rbp+CONST] mov rax r15 pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rbx [rbp+var_xxx] mov [rbx+CONST] CONST call sub_xxx nop mov [rbp+var_xxx] CONST jmp JUMP_ADDR_8	mov rdi [rbp+var_xxx] lea rdx [rbx+rbx*2] mov [rbp+var_xxx] r10d shl rdx CONST mov rcx ds:xxx mov rsi [r13+rdx+CONST] xor edx edx sub rsi rcx lea rdi [rax+rcx] call sub_xxx mov r10d [rbp+var_xxx] test eax eax jns JUMP_ADDR_27	lea r12 GLOBAL_VAR jmp JUMP_ADDR_195	mov rdx [r15+CONST] mov rsp [rbp+var_xxx] test rdx rdx jz JUMP_ADDR_204	mov rdi [r15] add rdx rdi mov [r15+CONST] rdx jz JUMP_ADDR_205	mov rax [rdx] lea rcx [r15+CONST] test rax rax jz JUMP_ADDR_99	mov r8d CONST mov ebx CONST mov r12d CONST mov r13d CONST mov r11d CONST mov r10d CONST jmp JUMP_ADDR_75	mov rsi r10 sub rsi rax mov rax rsi	mov [rcx+rax*8] rdx	mov rax [rdx+CONST] add rdx CONST test rax rax jz JUMP_ADDR_99	cmp rax CONST jbe JUMP_ADDR_73	mov rsi r8 sub rsi rax cmp rsi CONST jbe JUMP_ADDR_72	lea esi [rax+rax] mov r9d esi sar r9d CONST cmp esi CONST jbe JUMP_ADDR_97	mov eax r11d sub eax r9d jmp JUMP_ADDR_73	mov rdx [r12+CONST] mov rax [r14+CONST] cmp rdx rax ja JUMP_ADDR_31	movzx edi [r14+CONST] mov rcx [r12+CONST] mov r8 [r12] lea rsi ds:xxx add rcx rdx sub rsi rdi sub rcx r8 lea rsi [rax+rsi*8] cmp rcx rsi jb JUMP_ADDR_31	add rax r8 sub rax rdx mov [r15+CONST] rax jmp JUMP_ADDR_31	lea r12 GLOBAL_VAR	mov rsp [rbp+var_xxx]	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_86	mov edi [rbp+var_xxx] call sub_xxx	mov rdi [r15+CONST] test rdi rdi jnz JUMP_ADDR_96	mov rdi [r15+CONST] cmp rdi CONST jz JUMP_ADDR_89	call sub_xxx	mov rdi [r15+CONST] mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_95	cmp [r15+CONST] CONST js JUMP_ADDR_183	mov rdi r15 call sub_xxx mov rdi [rbp+var_xxx] call sub_xxx cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_93	mov rsi [rbp+var_xxx] mov edi [rbp+var_xxx] mov rcx r12 xor edx edx call sub_xxx	mov rbx [rbp+var_xxx] mov [rbx+CONST] CONST call sub_xxx nop jmp JUMP_ADDR_92	lea r12 GLOBAL_VAR jmp JUMP_ADDR_83	call sub_xxx jmp JUMP_ADDR_90	mov rsi [r15+CONST] sub rsi rdi call sub_xxx jmp JUMP_ADDR_87	mov rsi rbx sub rsi rax cmp rsi CONST ja JUMP_ADDR_191	mov rsi r13 sub rsi rax mov rax rsi jmp JUMP_ADDR_73	test rdi rdi jz JUMP_ADDR_116	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_102	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_104	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_106	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_108	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_110	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_112	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_114	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_116	add [rax+CONST] rdi	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_118	cmp [rax+CONST] CONST jnz JUMP_ADDR_238	cmp [r15+CONST] CONST jz JUMP_ADDR_120	mov rax [r15+CONST] cmp [rax+CONST] CONST jnz JUMP_ADDR_237	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_126	mov rdx [rax+CONST] mov [r15+CONST] edx test dl CONST jz JUMP_ADDR_123	mov [r15+CONST] rax	test dl CONST jz JUMP_ADDR_125	mov [r15+CONST] rax	and edx CONST jnz JUMP_ADDR_198	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_213	mov rax [rax+CONST] mov [r15+CONST] eax mov edx eax test al CONST jnz JUMP_ADDR_197	test cs:xxx CONST jnz JUMP_ADDR_230	mov eax [r15+CONST]	and edx CONST jnz JUMP_ADDR_196	cmp [r15+CONST] CONST jz JUMP_ADDR_133	mov [r15+CONST] CONST	mov edx eax and edx CONST test al CONST jz JUMP_ADDR_135	mov esi [rbp+arg_xxx] test esi esi js JUMP_ADDR_235	mov ecx [rbp+var_xxx] test ecx ecx jnz JUMP_ADDR_137	test edx edx jnz JUMP_ADDR_234	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_217	add rax [r15] mov [r15+CONST] rax	mov eax cs:xxx not eax and rax [rbp+var_xxx] test al CONST jnz JUMP_ADDR_220	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_142	add rax [r15] mov [r15+CONST] rax	movzx edx [r15+CONST] mov rbx [r15+CONST] lea rax ds:xxx mov [rbp+var_xxx] rbx sub rax rdx lea r14 [rbx+rax*8] cmp rbx r14 jnz JUMP_ADDR_147	jmp JUMP_ADDR_170	cmp eax CONST jnz JUMP_ADDR_146	mov esi [rbp+var_xxx] mov rdx r14 mov rdi r15 call sub_xxx	cmp [rbp+var_xxx] r14 jz JUMP_ADDR_170	mov eax [r14+CONST] sub r14 CONST cmp eax CONST jnz JUMP_ADDR_144	mov rdx [r14+CONST] mov rax [r15] mov r9 [r14+CONST] test [r15+CONST] CONST jnz JUMP_ADDR_146	cmp [r14+CONST] CONST jnz JUMP_ADDR_146	cmp r9 CONST jbe JUMP_ADDR_199	add rdx rax mov r10d CONST xor r8d r8d xor ebx ebx mov [rbp+var_xxx] CONST sub r10 rdx mov [rbp+var_xxx] r14 jmp JUMP_ADDR_154	mov edi [rdx+CONST]	add rax CONST and rax CONST lea rax [CONST_VAR+rax+CONST] and rax CONST add rdx rax lea rax [rdx+r10] cmp r9 rax jbe JUMP_ADDR_188	mov eax [rdx] cmp eax CONST jnz JUMP_ADDR_152	cmp [rdx+CONST] CONST jnz JUMP_ADDR_152	cmp [rdx+CONST] CONST jnz JUMP_ADDR_152	movzx ecx [r15+CONST] test cl CONST jnz JUMP_ADDR_190	and ecx CONST or ecx CONST mov [r15+CONST] cl mov edi [rdx+CONST] cmp edi CONST jbe JUMP_ADDR_190	test dil CONST jnz JUMP_ADDR_190	lea rcx [rdx+CONST] mov r14d ebx lea r12 [rcx+CONST_VAR] jmp JUMP_ADDR_165	cmp ebx CONST jnz JUMP_ADDR_190	mov ecx [rcx+CONST] cmp r8d CONST jnz JUMP_ADDR_227	mov r14d ecx	add rsi CONST and rsi CONST lea rcx [r11+CONST_VAR] mov rsi r12 sub rsi rcx cmp rsi CONST jle JUMP_ADDR_169	mov esi r8d mov r8d [rcx] mov ebx [rcx+CONST] cmp r8d esi jb JUMP_ADDR_190	lea r11 [rcx+CONST] mov esi ebx lea r13 [r11+CONST_VAR] cmp r12 r13 jb JUMP_ADDR_190	mov r13d r8d and r13d CONST cmp r13d CONST jz JUMP_ADDR_161	cmp r8d CONST jbe JUMP_ADDR_164	mov ebx r14d jmp JUMP_ADDR_153	mov edi [rbp+var_xxx] call sub_xxx test eax eax jnz JUMP_ADDR_222	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_206	mov rax [r15+CONST] mov r8 [r15] add rax r8 mov [r15+CONST] rax test cs:xxx CONST jnz JUMP_ADDR_224	mov rdi r15 call sub_xxx test [rbp+arg_xxx] CONST jnz JUMP_ADDR_175	cmp [r15+CONST] CONST jnz JUMP_ADDR_202	test [r15+CONST] CONST jz JUMP_ADDR_177	mov cs:xxx r15	movdqa xmm1 [rbp+var_xxx] cmp cs:xxx CONST movups [r15+CONST] xmm1 jnz JUMP_ADDR_225	mov rax [rbp+arg_xxx] mov rbx [rbp+arg_xxx] lea rax [rax+rax*8] lea rdx [rbx+rax*2] lea rax off_xxx lea rbx [rax+rdx*8] cmp [rbx+CONST] CONST jz JUMP_ADDR_214	cmp [r15+CONST] CONST jz JUMP_ADDR_182	movzx eax [r15+CONST] and eax CONST cmp al CONST jnz JUMP_ADDR_200	call sub_xxx mov [r15+CONST] rax	mov rsi [rbp+arg_xxx] mov rdi r15 call sub_xxx jmp JUMP_ADDR_64	mov rdi [r15+CONST] call sub_xxx jmp JUMP_ADDR_91	mov rdi [rbp+var_xxx] xor r15d r15d call sub_xxx mov edi [rbp+var_xxx] call sub_xxx jmp JUMP_ADDR_64	mov rdx [rbp+arg_xxx] mov rsi [rbp+var_xxx] lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_5	mov rax CONST cmp [rbp+var_xxx] CONST lea r12 GLOBAL_VAR mov eax fs:xxx mov [rbp+var_xxx] eax jz JUMP_ADDR_91	mov edi [rbp+var_xxx] xor r15d r15d call sub_xxx jmp JUMP_ADDR_91	mov edi [rbp+var_xxx] mov eax ebx mov r14 [rbp+var_xxx] or eax edi jz JUMP_ADDR_199	movzx eax [r15+CONST] mov [r15+CONST] edi mov [r15+CONST] ebx and eax CONST or eax CONST mov [r15+CONST] al jmp JUMP_ADDR_146	mov r14 [rbp+var_xxx] jmp JUMP_ADDR_146	mov rsi r12 sub rsi rax cmp rsi CONST ja JUMP_ADDR_74	mov esi CONST sub rsi rax mov rax rsi jmp JUMP_ADDR_73	mov rsi rcx xor r9d r9d mov r8d CONST mov edx r10d sub rsi r11 mov ecx CONST mov rdi r11 call sub_xxx cmp rax CONST jnz JUMP_ADDR_36	lea r12 GLOBAL_VAR	mov [r15+CONST] CONST mov [r15+CONST] CONST jmp JUMP_ADDR_83	mov rdx [r15+CONST] mov [r15+CONST] rdx jmp JUMP_ADDR_131	mov [r15+CONST] CONST jmp JUMP_ADDR_128	mov [r15+CONST] rax jmp JUMP_ADDR_126	movzx eax [r15+CONST] and eax CONST or eax CONST mov [r15+CONST] al jmp JUMP_ADDR_146	cmp cs:xxx CONST jnz JUMP_ADDR_181	jmp JUMP_ADDR_182	mov rsi [r15+CONST] lea rax [r15+CONST] cmp [CONST_VAR] rax jz JUMP_ADDR_175	mov rax [r15+CONST] lea rdi [CONST_VAR+CONST] mov [rax] r15 mov rax [r15+CONST] mov [r15+CONST] CONST lea rdx ds:xxx call sub_xxx mov rax [r15+CONST] lea rdx [r15+CONST] mov [rax] rdx jmp JUMP_ADDR_175	cmp [rbp+var_xxx] CONST jz JUMP_ADDR_232	mov eax [r15+CONST] jmp JUMP_ADDR_133	test [r15+CONST] CONST jz JUMP_ADDR_172	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea r12 GLOBAL_VAR jmp JUMP_ADDR_83	mov edi [rbp+var_xxx] test edi edi jz JUMP_ADDR_233	lea rax [rbx+rbx*2+CONST] mov r12 r13 shl rax CONST mov rdx [r13+rax+CONST] mov rax [rbp+var_xxx] mov rax ds:xxx mov rdi rdx sub rdi rax add rax [r15] mov [r15+CONST] rax mov rax [r15] mov [rbp+var_xxx] rdi add rax rdx movzx edx [r15+CONST] mov [r15+CONST] rax movzx eax [rbp+var_xxx] and edx CONST xor eax CONST and eax CONST shl eax CONST or eax edx mov [r15+CONST] al jmp JUMP_ADDR_37	mov rax CONST cmp [rbp+var_xxx] CONST mov eax fs:xxx mov [rbp+var_xxx] eax jz JUMP_ADDR_219	mov [rbp+var_xxx] CONST lea r12 GLOBAL_VAR jmp JUMP_ADDR_187	mov eax [r15+CONST] jmp JUMP_ADDR_131	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_179	mov rdx [r15+CONST] mov rdi [rax+CONST] lea rsi GLOBAL_VAR add rdi [rdx+CONST] call sub_xxx test eax eax jnz JUMP_ADDR_179	mov [rbx+CONST] r15 jmp JUMP_ADDR_179	movzx eax [r14+CONST] lea r12 ds:xxx sub r12 rax shl r12 CONST mov rdi r12 call sub_xxx mov rdi rax test rax rax jz JUMP_ADDR_236	mov rsi [rbp+var_xxx] mov rdx r12 call sub_xxx or [r15+CONST] CONST mov [r15+CONST] rax jmp JUMP_ADDR_139	mov rdi [rbp+var_xxx] lea r12 GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_92	or cs:xxx CONST mov rdi [rbp+arg_xxx] call cs:xxx mov [rbp+var_xxx] eax test eax eax jz JUMP_ADDR_140	lea r12 GLOBAL_VAR jmp JUMP_ADDR_84	lea r12 GLOBAL_VAR	mov rax CONST mov eax fs:xxx mov [rbp+var_xxx] eax jmp JUMP_ADDR_84	movzx ecx [r15+CONST] sub rsp CONST mov rdx [r15+CONST] mov r9d CONST mov esi CONST lea rdi GLOBAL_VAR push rcx mov ecx CONST push CONST push [r15+CONST] push CONST push rax xor eax eax push CONST push [rbp+var_xxx] call sub_xxx add rsp CONST jmp JUMP_ADDR_173	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_179	mov rdx [r15+CONST] mov rdi [r15+CONST] mov rsi [rax+CONST] add rsi [rdx+CONST] call sub_xxx jmp JUMP_ADDR_178	mov [rbp+var_xxx] ecx mov ebx r14d mov r8d CONST jmp JUMP_ADDR_153	and rax r8 mov [rbp+CONST] rdx mov edx r10d or edx CONST mov rdi rax mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r10d mov [rbp+var_xxx] r8 call sub_xxx mov r8 [rbp+var_xxx] mov r10d [rbp+var_xxx] test eax eax mov rcx [rbp+var_xxx] mov r11 [rbp+CONST] js JUMP_ADDR_67	mov rdx r11 mov rdi r8 xor esi esi mov [rbp+var_xxx] r10d sub rdx r8 mov [rbp+var_xxx] rcx mov [rbp+var_xxx] r11 call sub_xxx mov rsi cs:xxx mov edx [rbp+var_xxx] mov rdi rsi neg rdi and rdi rax call sub_xxx mov r10d [rbp+var_xxx] mov r11 [rbp+var_xxx] mov rcx [rbp+var_xxx] jmp JUMP_ADDR_35	mov esi eax and esi CONST jz JUMP_ADDR_129	xor eax eax lea rdi GLOBAL_VAR call sub_xxx mov edx [r15+CONST] mov eax edx jmp JUMP_ADDR_130	lea r12 GLOBAL_VAR jmp JUMP_ADDR_84	lea r12 GLOBAL_VAR jmp JUMP_ADDR_83	lea r12 GLOBAL_VAR jmp JUMP_ADDR_84	test edx edx lea r12 GLOBAL_VAR lea rax GLOBAL_VAR cmovz r12 rax jmp JUMP_ADDR_84	lea r12 GLOBAL_VAR jmp JUMP_ADDR_223	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_map_object
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] edx mov [rsp+CONST+var_xxx] ecx test r9 r9 js JUMP_ADDR_104	cmp r9 cs:xxx mov rbp r9 jnb JUMP_ADDR_105	lea rax [r9+r9*8] mov r12 rdi mov r13 rsi mov ebx r8d lea r14 off_xxx lea rax [r9+rax*2] mov r15 [r14+rax*8] test r15 r15 jnz JUMP_ADDR_5	jmp JUMP_ADDR_12	mov r15 [r15+CONST] test r15 r15 jz JUMP_ADDR_12	movzx eax [r15+CONST] mov edx eax shr al CONST shr dl CONST or eax edx test al CONST jnz JUMP_ADDR_4	mov rsi r15 mov rdi r13 call sub_xxx test eax eax jnz JUMP_ADDR_11	test [r15+CONST] CONST jnz JUMP_ADDR_4	mov rax [r15+CONST] test rax rax jz JUMP_ADDR_4	mov rdx [r15+CONST] mov rsi [rax+CONST] mov rdi r13 add rsi [rdx+CONST] mov [rsp+CONST+var_xxx] rsi call sub_xxx test eax eax jnz JUMP_ADDR_4	mov rsi [rsp+CONST+var_xxx] mov rdi [r15+CONST] call sub_xxx or [r15+CONST] CONST	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov eax ebx mov r15d cs:xxx and eax CONST mov [rsp+CONST+var_xxx] eax test r15b CONST jnz JUMP_ADDR_69	mov esi CONST mov rdi r13 mov [rsp+CONST+var_xxx] CONST call sub_xxx test rax rax jz JUMP_ADDR_26	test r12 r12 jz JUMP_ADDR_19	mov rdi r12 mov rsi r13 call sub_xxx mov [rsp+CONST+var_xxx] rax mov rdi rax test rax rax jz JUMP_ADDR_20	lea r15 [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] mov ecx CONST mov rsi r15 call sub_xxx mov esi eax cmp eax CONST jz JUMP_ADDR_84	mov edx [rsp+CONST+var_xxx] xor eax eax test edx edx cmovnz r12 rax	mov rax cs:xxx mov rdx r15 mov r8 r12 mov rdi r13 sub rsp CONST mov [rsp+CONST+var_xxx] rax push rbp lea rax [rsp+CONST+var_xxx] push rax push rbx mov r9d [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] call sub_xxx add rsp CONST mov r15 rax jmp JUMP_ADDR_11	mov rdi r13 call sub_xxx mov [rsp+CONST+var_xxx] rax mov rdi rax test rax rax jnz JUMP_ADDR_16	mov ecx [rsp+CONST+var_xxx] xor eax eax test ecx ecx cmovnz r12 rax	mov esi [rsp+CONST+var_xxx] test esi esi jz JUMP_ADDR_50	test cs:xxx CONST jnz JUMP_ADDR_50	mov rdi r13 call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_103	mov edx [rsp+CONST+var_xxx] mov r9 rbp mov r8d ebx mov rcx r12 mov rsi r13 mov rdi rax call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_103	lea rax GLOBAL_VAR mov rsi rbp mov rdi r15 or [r15+CONST] CONST mov [r15+CONST] rax mov [r15+CONST] CONST call sub_xxx jmp JUMP_ADDR_11	mov rdi r13 call sub_xxx add rax CONST and r15d CONST mov [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_74	test r12 r12 jz JUMP_ADDR_91	cmp [r12+CONST] CONST jz JUMP_ADDR_40	cmp cs:xxx CONST lea rcx GLOBAL_VAR jz JUMP_ADDR_32	lea rax [rsp+CONST+var_xxx] mov edx ebx mov rdi r13 push rax push r12 mov rsi [rsp+CONST+var_xxx] lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx mov esi eax pop rax pop rdx cmp esi CONST jnz JUMP_ADDR_37	test r12 r12 jz JUMP_ADDR_36	mov rax [r12+CONST] cmp rax CONST jz JUMP_ADDR_62	lea r15 [r12+CONST] test rax rax jz JUMP_ADDR_85	lea rax [rsp+CONST+var_xxx] mov rcx r15 push rax push r12 lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx]	mov rsi [rsp+CONST+var_xxx] mov edx ebx mov rdi r13 call sub_xxx pop r15 mov esi eax pop rax	cmp esi CONST jz JUMP_ADDR_62	test cs:xxx CONST jnz JUMP_ADDR_88	mov edi [rsp+CONST+var_xxx] xor eax eax test edi edi cmovnz r12 rax cmp esi CONST jz JUMP_ADDR_21	lea r15 [rsp+CONST+var_xxx] jmp JUMP_ADDR_18	mov rax cs:xxx mov r15 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbp mov rbp r12 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_44	lea rax [rsp+CONST+var_xxx] mov rcx r11 mov edx ebx mov rsi r15 push rax mov rdi r13 push r12 lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx pop r8 pop r9 cmp eax CONST jnz JUMP_ADDR_83	cmp [rsp+CONST+var_xxx] rbp setz al or [rsp+CONST+var_xxx] al	mov rbp [rbp+CONST] test rbp rbp jz JUMP_ADDR_52	mov rax [rbp+CONST] lea r11 [rbp+CONST] cmp rax CONST jz JUMP_ADDR_43	test rax rax jnz JUMP_ADDR_41	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_49	mov rdx [rbp+CONST] mov rsi [rax+CONST] mov rdi r11 mov [rsp+CONST+var_xxx] r11 lea rcx GLOBAL_VAR add rsi [rdx+CONST] mov rdx rbp call sub_xxx mov r11 [rsp+CONST+var_xxx] test al al jz JUMP_ADDR_43	jmp JUMP_ADDR_41	mov [rbp+CONST] CONST jmp JUMP_ADDR_43	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_94	lea rcx GLOBAL_VAR xor edx edx mov rsi r13 xor edi edi call sub_xxx	cmp [rsp+CONST+var_xxx] CONST mov rbp [rsp+CONST+var_xxx] jnz JUMP_ADDR_58	mov rcx [rsp+CONST+var_xxx] test rcx rcx jz JUMP_ADDR_58	movzx eax [rcx+CONST] mov [rsp+CONST+var_xxx] al and eax CONST cmp al CONST jz JUMP_ADDR_58	mov rax [rcx+CONST] lea r15 [rcx+CONST] cmp rax CONST jz JUMP_ADDR_58	test rax rax jz JUMP_ADDR_98	mov rax [rsp+CONST+var_xxx] test r12 r12 mov rdi r13 mov edx ebx cmovnz rax r12 mov rcx rax lea rax [rsp+CONST+var_xxx] push rax push rcx mov rsi [rsp+CONST+var_xxx] mov rcx r15 lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx pop rcx pop rdi mov esi eax cmp eax CONST jnz JUMP_ADDR_37	cmp cs:xxx CONST lea rcx GLOBAL_VAR jz JUMP_ADDR_61	test r12 r12 jnz JUMP_ADDR_30	lea rax [rsp+CONST+var_xxx] push rax push cs:xxx lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_35	test r12 r12 jnz JUMP_ADDR_32	mov [rsp+CONST+var_xxx] CONST test ebx CONST jnz JUMP_ADDR_95	mov r10d cs:xxx test r10d r10d jnz JUMP_ADDR_79	mov rdi r13 call sub_xxx mov rdi rax test rax rax jz JUMP_ADDR_79	test r12 r12 jz JUMP_ADDR_75	test [r12+CONST] CONST jnz JUMP_ADDR_76	lea r15 [rsp+CONST+var_xxx] xor ecx ecx lea rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi mov rsi r15 call sub_xxx mov rdi [rsp+CONST+var_xxx] cmp eax CONST mov esi eax jz JUMP_ADDR_78	mov [rsp+CONST+var_xxx] rdi jmp JUMP_ADDR_37	test r12 r12 jz JUMP_ADDR_89	mov rcx [r12+CONST] mov r8 [r12+CONST] cmp [rcx] CONST jnz JUMP_ADDR_72	mov rax cs:xxx mov rcx [rax] lea rax GLOBAL_VAR test rcx rcx cmovz rcx rax	mov r10d [rsp+CONST+var_xxx] lea rax GLOBAL_VAR mov rsi r13 mov rdx rbp lea rdi GLOBAL_VAR test r10d r10d cmovnz rdi rax xor eax eax call sub_xxx mov esi CONST mov rdi r13 mov [rsp+CONST+var_xxx] CONST call sub_xxx test rax rax jnz JUMP_ADDR_15	mov rdi r13 call sub_xxx add rax CONST mov [rsp+CONST+var_xxx] rax test cs:xxx CONST jz JUMP_ADDR_28	mov rdx rbp mov rsi r13 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_27	mov rax cs:xxx test [rax+CONST] CONST jz JUMP_ADDR_67	mov rax CONST cmp [CONST_VAR] rax jnz JUMP_ADDR_67	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_67	call sub_xxx	mov rax r12 test r12 r12 jz JUMP_ADDR_92	test [rax+CONST] CONST jnz JUMP_ADDR_101	cmp cs:xxx CONST mov esi CONST jz JUMP_ADDR_37	lea rdx [rsp+CONST+var_xxx] lea rcx GLOBAL_VAR mov rdi r13 push rdx mov edx ebx push rax mov rsi [rsp+CONST+var_xxx] lea r9 [rsp+CONST+var_xxx] lea r8 [rsp+CONST+var_xxx] call sub_xxx pop r8 pop r9 mov esi eax jmp JUMP_ADDR_37	mov rbp [rsp+CONST+var_xxx] mov esi eax jmp JUMP_ADDR_37	mov rdi [rsp+CONST+var_xxx] call sub_xxx jmp JUMP_ADDR_20	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_97	mov rdx [r12+CONST] mov rsi [rax+CONST] lea rcx GLOBAL_VAR mov rdi r15 add rsi [rdx+CONST] mov rdx r12 call sub_xxx test al al jz JUMP_ADDR_62	jmp JUMP_ADDR_34	lea rdi GLOBAL_VAR xor eax eax mov [rsp+CONST+var_xxx] esi call sub_xxx mov esi [rsp+CONST+var_xxx] jmp JUMP_ADDR_38	mov esi CONST mov rdi r13 mov [rsp+CONST+var_xxx] CONST call sub_xxx test rax rax jnz JUMP_ADDR_19	mov rdi r13 call sub_xxx add rax CONST and r15d CONST mov [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_74	mov rax cs:xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_53	lea rax [rbp+rbp*8+CONST] lea rax [rbp+rax*2+CONST] mov rax [r14+rax*8] test rax rax jz JUMP_ADDR_81	jmp JUMP_ADDR_80	mov rax CONST lea rcx GLOBAL_VAR xor edx edx mov rsi r13 mov edi fs:xxx call sub_xxx	mov r11d cs:xxx test r11d r11d jnz JUMP_ADDR_79	jmp JUMP_ADDR_63	mov [r12+CONST] CONST jmp JUMP_ADDR_62	mov rax [rsp+CONST+var_xxx] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_102	mov rdi [rsp+CONST+var_xxx] mov rsi [rax+CONST] lea rcx GLOBAL_VAR mov rdx [CONST_VAR+CONST] add rsi [rdx+CONST] mov rdx rdi mov rdi r15 call sub_xxx test al al jz JUMP_ADDR_58	jmp JUMP_ADDR_57	mov esi CONST jmp JUMP_ADDR_37	mov rax [rsp+CONST+var_xxx] mov [rax+CONST] CONST jmp JUMP_ADDR_58	mov rdi r14 call sub_xxx xor edx edx mov rsi r13 mov edi CONST lea rcx GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	endbr64 push r15 push r14 push r13 mov r13d edx push r12 mov r12 rsi push rbp mov rbp rdi push rbx sub rsp CONST test dl dl jnz JUMP_ADDR_116	mov eax [CONST_VAR+CONST] add rax CONST shl rax CONST	add rax r12 cmp [rbp+CONST] CONST mov [rsp+CONST+var_xxx] r13b mov r14 rsp mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r12 mov [rsp+CONST+var_xxx] rax jz JUMP_ADDR_121	mov rsi cs:xxx mov rdi r14 call sub_xxx mov rsi [rbp+CONST] cmp rsi CONST jz JUMP_ADDR_112	test rsi rsi jz JUMP_ADDR_117	mov rdi r14 call sub_xxx	test [rbp+CONST] CONST jz JUMP_ADDR_120	test r13b r13b jz JUMP_ADDR_115	mov eax [r12+CONST] add rax CONST shl rax CONST add [r12] rax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [CONST_VAR+CONST] CONST mov eax CONST mov [CONST_VAR] CONST jmp JUMP_ADDR_108	mov rax [rbp+CONST] test rax rax jz JUMP_ADDR_138	mov rdx [rbp+CONST] mov rsi [rax+CONST] lea rdi [rbp+CONST] lea rcx GLOBAL_VAR add rsi [rdx+CONST] mov rdx rbp call sub_xxx test al al jz JUMP_ADDR_112	mov rsi [rbp+CONST] mov rdi r14 call sub_xxx jmp JUMP_ADDR_112	mov rsi cs:xxx mov rdi r14 call sub_xxx jmp JUMP_ADDR_113	mov rbx rbp mov r14 rsp lea r15 GLOBAL_VAR jmp JUMP_ADDR_124	mov rdi r14 call sub_xxx	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_131	mov rsi [rbx+CONST] cmp rsi CONST jz JUMP_ADDR_123	test rsi rsi jnz JUMP_ADDR_122	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_129	mov rdx [rbx+CONST] mov rsi [rax+CONST] lea rdi [rbx+CONST] mov rcx r15 add rsi [rdx+CONST] mov rdx rbx call sub_xxx test al al jz JUMP_ADDR_123	mov rsi [rbx+CONST] jmp JUMP_ADDR_122	mov [rbx+CONST] CONST mov rbx [rbx+CONST] test rbx rbx jnz JUMP_ADDR_124	nop [rax+rax+CONST]	cmp [rbp+CONST] CONST jnz JUMP_ADDR_109	mov rbx cs:xxx test rbx rbx jz JUMP_ADDR_109	movzx eax [rbx+CONST] and eax CONST cmp al CONST jz JUMP_ADDR_109	cmp rbp rbx jz JUMP_ADDR_109	mov rsi [rbx+CONST] cmp rsi CONST jz JUMP_ADDR_109	test rsi rsi jz JUMP_ADDR_139	mov rdi r14 call sub_xxx jmp JUMP_ADDR_109	mov [rbp+CONST] CONST jmp JUMP_ADDR_112	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_142	mov rdx [rbx+CONST] mov rsi [rax+CONST] lea rdi [rbx+CONST] lea rcx GLOBAL_VAR add rsi [rdx+CONST] mov rdx rbx call sub_xxx test al al jz JUMP_ADDR_109	mov rsi [rbx+CONST] jmp JUMP_ADDR_137	mov [rbx+CONST] CONST jmp JUMP_ADDR_109
[ph]libcap-git-setcap_check_match
push r14 movzx eax [r9+CONST] mov r10 rdi push r13 mov r13 rdx mov edx r8d push r12 push rbp mov ebp ecx movzx ecx [r9+CONST] push rbx mov rbx r9 mov r12 [rsp+CONST+arg_xxx] and ecx CONST cmp [r9+CONST] CONST jz JUMP_ADDR_19	xor r8d r8d test ax ax mov eax CONST setz r8b sar eax cl and r8d edx and eax CONST or r8d eax jnz JUMP_ADDR_15	cmp rbx rsi jz JUMP_ADDR_4	mov edi [rbx] mov rsi r10 add rdi [rsp+CONST+arg_xxx] call sub_xxx test eax eax jnz JUMP_ADDR_15	mov rax [r12+CONST] test r13 r13 jz JUMP_ADDR_10	test rax rax jz JUMP_ADDR_22	mov edx [rsp+CONST+arg_xxx] movzx r14d [rax+rdx*2] mov rax r14 and eax CONST lea rdx [rax+rax*2] mov rax [r12+CONST] lea rax [rax+rdx*8] mov ebp [rax+CONST] cmp ebp [r13+CONST] jz JUMP_ADDR_17	or ebp [r13+CONST] jnz JUMP_ADDR_15	test r14w r14w js JUMP_ADDR_15	mov rax rbx pop rbx pop rbp pop r12 pop r13 pop r14 retn	test rax rax jz JUMP_ADDR_9	mov edx [rsp+CONST+arg_xxx] movzx edx [rax+rdx*2] xor eax eax mov ecx edx and ecx CONST and ebp CONST setz al add eax CONST cmp ecx eax jl JUMP_ADDR_9	test dx dx js JUMP_ADDR_15	mov rax [rsp+CONST+arg_xxx] mov rsi [rsp+CONST+arg_xxx] mov eax [rax] lea edx [rax+CONST] mov [CONST_VAR] edx test eax eax jnz JUMP_ADDR_15	mov rax [rsp+CONST+arg_xxx] mov [rax] rbx nop [rax+rax+CONST]	xor eax eax	pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov rsi [r13+CONST] mov rdi [rax] call sub_xxx test eax eax jz JUMP_ADDR_9	jmp JUMP_ADDR_7	cmp cl CONST jz JUMP_ADDR_1	cmp ax CONST jz JUMP_ADDR_1	xor eax eax jmp JUMP_ADDR_16	mov rdi [r13+CONST] test rdi rdi jz JUMP_ADDR_9	mov rsi r12 call sub_xxx test eax eax jz JUMP_ADDR_9	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_do_lookup_x
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov r13d [r9+CONST] mov [rsp+CONST+var_xxx] r8 mov rbp [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] rdi mov r15 [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] rdx mov r8d [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] rcx mov rax rsi mov [rsp+CONST+var_xxx] rsi mov r14 [r9] shr rax CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_5	mov edx [rbx+CONST] test edx edx jz JUMP_ADDR_4	mov rax [rbx+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov r11 [rax+CONST] mov rax [rbx+CONST] mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rax mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_13	mov rdi [rsp+CONST+var_xxx] mov ecx [rsp+CONST+var_xxx] and ecx [rbx+CONST] mov rax [rax+rcx*8] mov ecx [rbx+CONST] mov rsi rdi shr rsi cl mov rcx rsi mov rsi rax shr rsi cl mov ecx edi shr rax cl and rsi rax and esi CONST jnz JUMP_ADDR_27	add rbp CONST cmp r13 rbp jbe JUMP_ADDR_33	mov rax [r14+rbp*8] mov rbx [rax+CONST] cmp rbx r15 jz JUMP_ADDR_4	mov eax r8d and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_8	test [rbx+CONST] CONST jz JUMP_ADDR_4	test [rbx+CONST] CONST jnz JUMP_ADDR_4	test cs:xxx CONST jz JUMP_ADDR_1	mov rdx [rbx+CONST] mov rcx [rbx+CONST] cmp [rdx] CONST jz JUMP_ADDR_12	mov rsi [rsp+CONST+var_xxx] lea rdi GLOBAL_VAR xor eax eax mov [rsp+CONST+arg_xxx] r8d call sub_xxx mov r8d [rsp+CONST+arg_xxx] jmp JUMP_ADDR_1	mov rax cs:xxx mov rdx [rax] lea rax GLOBAL_VAR test rdx rdx cmovz rdx rax jmp JUMP_ADDR_11	mov rax [rsp+CONST+var_xxx] mov edi CONST mov esi edx mov rax [rax] cmp rax rdi jz JUMP_ADDR_89	xor edx edx div rsi lea rax ds:xxx	mov rdx [rbx+CONST] mov eax [rdx+rax] test eax eax jz JUMP_ADDR_4	lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r14 mov r14 [rsp+CONST+arg_xxx] mov [rsp+CONST+arg_xxx] rbp mov ebp r8d mov [rsp+CONST+arg_xxx] r15 mov r15d [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] r13 mov r13 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] r11 jmp JUMP_ADDR_18	mov rax [rbx+CONST] mov eax [rax+r12*4] test eax eax jz JUMP_ADDR_65	sub rsp CONST mov r12d eax mov r8d ebp mov ecx r15d push [rsp+CONST+var_xxx] lea rdx [r12+r12*2] mov rsi r13 push [rsp+CONST+var_xxx] push rbx push [rsp+CONST+var_xxx] push rax mov rax [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] lea r9 [rax+rdx*8] mov rdx r14 call sub_xxx add rsp CONST test rax rax jz JUMP_ADDR_17	mov r8d ebp mov r14 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov rcx rax mov r15 [rsp+CONST+arg_xxx] mov rbp [rsp+CONST+arg_xxx] mov r13 [rsp+CONST+var_xxx] nop [rax+CONST]	cmp [rsp+CONST+arg_xxx] CONST jz JUMP_ADDR_35	movzx eax [rcx+CONST] and eax CONST sub eax CONST cmp eax CONST jbe JUMP_ADDR_4	movzx eax [rcx+CONST] shr al CONST cmp al CONST jz JUMP_ADDR_49	cmp al CONST jz JUMP_ADDR_52	cmp al CONST jnz JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx] mov [rax] rcx mov [rax+CONST] rbx	mov eax CONST jmp JUMP_ADDR_34	mov ecx edx mov rax rdi xor edx edx div rcx mov rax [rbx+CONST] mov eax [rax+rdx*4] test eax eax jz JUMP_ADDR_4	mov rdx [rbx+CONST] mov [rsp+CONST+var_xxx] r14 mov r14d r8d mov [rsp+CONST+arg_xxx] rbp mov rbp r11 mov [rsp+CONST+arg_xxx] r15 lea r12 [rdx+rax*4] mov r15 [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] r13 mov r13 rdi jmp JUMP_ADDR_30	add r12 CONST and edx CONST jnz JUMP_ADDR_98	mov eax [r12] mov rdx rax xor rax r13 shr rax CONST jnz JUMP_ADDR_29	sub rsp CONST mov rax r12 sub rax [rbx+CONST] mov r8d r14d push [rsp+CONST+var_xxx] sar rax CONST mov edx eax lea rdx [rdx+rdx*2] lea rcx [rsp+CONST+var_xxx] lea r9 [rbp+rdx*8+CONST] mov rdx r15 push rcx push rbx push [rsp+CONST+var_xxx] push rax mov ecx [rsp+CONST+arg_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] call sub_xxx add rsp CONST test rax rax jnz JUMP_ADDR_116	mov edx [r12] jmp JUMP_ADDR_29	xor eax eax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test [rbx+CONST] CONST jnz JUMP_ADDR_21	cmp r8d CONST jnz JUMP_ADDR_21	mov rdx [rbx+CONST] test rdx rdx jz JUMP_ADDR_21	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_21	mov rax [rax+CONST] test rax rax jz JUMP_ADDR_21	mov r12 [rdx+CONST] mov rdx CONST mul rdx mov rax rdx shr rax CONST test eax eax jz JUMP_ADDR_21	sub eax CONST mov [rsp+CONST+var_xxx] rcx lea rax [rax+rax*2] mov [rsp+CONST+arg_xxx] r8d lea r9 [r12+rax*8+CONST] mov [rsp+CONST+var_xxx] rbx mov rbx r12 mov [rsp+CONST+arg_xxx] rbp mov r12 r9 mov rbp r11	mov rax [rbx+CONST] mov ecx eax cmp eax CONST jz JUMP_ADDR_47	cmp rcx CONST jz JUMP_ADDR_47	lea rsi [rcx+CONST] cmp rsi CONST jbe JUMP_ADDR_47	cmp rcx CONST jnz JUMP_ADDR_47	shr rax CONST mov rsi [rsp+CONST+var_xxx] lea rax [rax+rax*2] mov edi [rbp+rax*8+CONST] add rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jz JUMP_ADDR_119	add rbx CONST cmp rbx r12 jnz JUMP_ADDR_42	mov rcx [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov rbp [rsp+CONST+arg_xxx] mov r8d [rsp+CONST+arg_xxx] jmp JUMP_ADDR_21	mov esi cs:xxx test esi esi jz JUMP_ADDR_25	mov rax [rsp+CONST+var_xxx] cmp [rax] CONST jnz JUMP_ADDR_4	mov [rax] rcx mov [rax+CONST] rbx jmp JUMP_ADDR_4	mov rdi [rbx+CONST] cmp cs:xxx CONST mov r12 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi jz JUMP_ADDR_54	lea rax [CONST_VAR+rdi*8] lea rdx off_xxx mov [rsp+CONST+var_xxx] rcx lea rax [CONST_VAR+rax*2] lea rdi [rdx+rax*8+CONST] call callfunc_xxx mov rcx [rsp+CONST+var_xxx]	mov rdi [rsp+CONST+var_xxx] lea rax [CONST_VAR+rdi*8] lea rax [CONST_VAR+rax*2] lea rdi off_xxx lea r13 [CONST_VAR+rax*8] mov rax [r13+CONST] mov r15 [r13+CONST] mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_112	mov rax r12 xor edx edx lea rsi [r15+CONST] mov [rsp+CONST+var_xxx] rcx div r15 mov [rsp+CONST+var_xxx] rbx mov rax r12 mov r8 rdx xor edx edx div rsi mov [rsp+CONST+var_xxx] r8 mov rax r12 mov r12 r15 mov r15 r8 mov r14 rax lea rbp [rdx+CONST] mov r9 rbp mov rbx rbp shl r9 CONST mov rbp r9	mov r13 r15 shl r13 CONST add r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_59	test rdi rdi jz JUMP_ADDR_69	add r15 rbx add r13 rbp cmp r12 r15 jbe JUMP_ADDR_87	mov eax [r13+CONST] mov rdi [r13+CONST] cmp r14 rax jnz JUMP_ADDR_57	mov rsi [rsp+CONST+var_xxx] call sub_xxx test eax eax jnz JUMP_ADDR_58	mov edx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] test edx edx jz JUMP_ADDR_115	mov rax [rsp+CONST+var_xxx] mov [rax] rcx	mov rax [rsp+CONST+var_xxx] cmp cs:xxx CONST mov [rax+CONST] rbx jz JUMP_ADDR_26	mov rdi [rsp+CONST+var_xxx] lea rdx off_xxx lea rax [CONST_VAR+rdi*8] lea rax [CONST_VAR+rax*2] lea rdi [rdx+rax*8+CONST] call callfunc_xxx jmp JUMP_ADDR_26	mov r8d ebp mov r14 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov r15 [rsp+CONST+arg_xxx] mov rbp [rsp+CONST+arg_xxx] mov r13 [rsp+CONST+var_xxx]	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_4	mov rcx [rsp+CONST+var_xxx] test rcx rcx jnz JUMP_ADDR_20	jmp JUMP_ADDR_4	mov rdi [rsp+CONST+var_xxx] mov r15 r12 mov rbp rbx mov rcx [rsp+CONST+var_xxx] lea rdx off_xxx lea rsi [r15+r15*2] mov rbx [rsp+CONST+var_xxx] mov r12 r14 lea rax [CONST_VAR+rdi*8] mov r8 [rsp+CONST+var_xxx] lea rax [CONST_VAR+rax*2] mov rax [rdx+rax*8+CONST] shl rax CONST cmp rsi rax jbe JUMP_ADDR_99	mov eax [rsp+CONST+var_xxx] mov rdi rbp mov esi [rcx] mov rdx [rsp+CONST+var_xxx] add rsi [rsp+CONST+var_xxx] shl rdi CONST test eax eax jz JUMP_ADDR_78	mov rax r8 shl rax CONST add rax rdx jmp JUMP_ADDR_73	add r8 rbp add rax rdi cmp r15 r8 jbe JUMP_ADDR_88	cmp [rax+CONST] CONST jnz JUMP_ADDR_72	mov rdx [rsp+CONST+var_xxx] mov rdi [rsp+CONST+arg_xxx] mov [rax] r12d mov [rax+CONST] rsi mov [rax+CONST] rdx mov [rax+CONST] rdi	mov rdi [rsp+CONST+var_xxx] lea rax [CONST_VAR+rdi*8] lea rax [CONST_VAR+rax*2] lea rdi off_xxx add [CONST_VAR+rax*8+CONST] CONST cmp cs:xxx CONST lea rdx ds:xxx jz JUMP_ADDR_25	lea rdi [CONST_VAR+rdx+CONST] mov [rsp+CONST+var_xxx] rcx call callfunc_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_25	sub r8 r15	mov rax r8 shl rax CONST add rax rdx jmp JUMP_ADDR_80	add r8 rbp add rax rdi cmp r15 r8 jbe JUMP_ADDR_77	cmp [rax+CONST] CONST jnz JUMP_ADDR_79	mov [rax] r12d mov [rax+CONST] rsi mov [rax+CONST] rcx mov [rax+CONST] rbx movzx eax [rbx+CONST] and eax CONST cmp al CONST jnz JUMP_ADDR_75	cmp [rbx+CONST] CONST jnz JUMP_ADDR_75	test [rsp+CONST+arg_xxx] CONST jz JUMP_ADDR_117	cmp [rbx+CONST] CONST jnz JUMP_ADDR_75	test cs:xxx CONST jnz JUMP_ADDR_121	mov [rbx+CONST] CONST jmp JUMP_ADDR_75	sub r15 r12 jmp JUMP_ADDR_56	sub r8 r15 jmp JUMP_ADDR_71	mov rdx [rsp+CONST+var_xxx] xor eax eax movzx edi [rdx] test rdi rdi jz JUMP_ADDR_97	movzx eax [rdx+CONST] test al al jz JUMP_ADDR_114	shl rdi CONST add rdi rax mov rax [rsp+CONST+var_xxx] movzx eax [rax+CONST] test al al jz JUMP_ADDR_114	shl rdi CONST add rdi rax mov rax [rsp+CONST+var_xxx] movzx eax [rax+CONST] test al al jz JUMP_ADDR_114	shl rdi CONST add rdi rax mov rax [rsp+CONST+var_xxx] movzx eax [rax+CONST] test al al jz JUMP_ADDR_114	shl rdi CONST add rax rdi mov rdi [rsp+CONST+var_xxx] movzx ecx [CONST_VAR+CONST] lea rdx [CONST_VAR+CONST] test cl cl jz JUMP_ADDR_96	shl rax CONST add rdx CONST add rcx rax mov rax rcx shr rax CONST and eax CONST xor rax rcx movzx ecx [rdx] test cl cl jnz JUMP_ADDR_95	and eax CONST xor edx edx mov rdi rax div rsi lea rax ds:xxx	mov rdx [rsp+CONST+var_xxx] mov [rdx] rdi jmp JUMP_ADDR_15	mov r11 rbp mov r8d r14d mov rbp [rsp+CONST+arg_xxx] mov r15 [rsp+CONST+arg_xxx] mov r14 [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_66	lea rdi [r15+CONST] call sub_xxx mov edi CONST mov rsi rax mov r13 rax call sub_xxx mov r10 rax test rax rax jz JUMP_ADDR_122	lea rax [r13+CONST] mov rdx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov rax r15 shl rax CONST test r15 r15 mov rdi rdx lea rbp [rax+rdx] jz JUMP_ADDR_110	mov [rsp+CONST+var_xxx] rcx mov rcx [rsp+CONST+var_xxx] nop [rax+rax+CONST]	mov r8 [CONST_VAR+CONST] test r8 r8 jz JUMP_ADDR_108	mov r15d [CONST_VAR] xor edx edx mov r11 [CONST_VAR+CONST] mov r14 [CONST_VAR+CONST] mov rax r15 mov r9 r15 div r13 mov rax r15 mov rsi rdx xor edx edx div rcx add rdx CONST mov r15 rdx shl r15 CONST	mov rax rsi shl rax CONST add rax r10 jmp JUMP_ADDR_106	add rsi rdx add rax r15 cmp r13 rsi jbe JUMP_ADDR_111	cmp [rax+CONST] CONST jnz JUMP_ADDR_105	mov [rax] r9d mov [rax+CONST] r8 mov [rax+CONST] r14 mov [rax+CONST] r11	add rdi CONST cmp rbp rdi jnz JUMP_ADDR_102	mov rcx [rsp+CONST+var_xxx]	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10 mov r15 r13 mov [rsp+CONST+var_xxx] rcx lea rax [CONST_VAR+rdi*8] lea rax [CONST_VAR+rax*2] lea rdi off_xxx lea r14 [CONST_VAR+rax*8] mov rdi [rsp+CONST+var_xxx] call callfunc_xxx xor edx edx mov r10 [rsp+CONST+var_xxx] mov [r14+CONST] r13 mov rax sub_xxx mov rcx [rsp+CONST+var_xxx] mov [r14+CONST] r10 mov [r14+CONST] rax mov rax r12 div r13 mov [rsp+CONST+var_xxx] r10 mov rax r12 mov r8 rdx xor edx edx div [rsp+CONST+var_xxx] lea rbp [rdx+CONST] jmp JUMP_ADDR_70	sub rsi r13 jmp JUMP_ADDR_104	mov esi CONST mov edi CONST mov [rsp+CONST+var_xxx] rcx call sub_xxx mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_122	mov [r13+CONST] rax mov rcx [rsp+CONST+var_xxx] mov rdx CONST mov r15d CONST mov rax sub_xxx mov [r13+CONST] CONST mov [r13+CONST] rax mov rax r12 mul rdx mov rax r12 sub rax rdx shr rax CONST lea r8 [rdx+rax] mov rdx CONST shr r8 CONST mov rax r8 shl rax CONST sub rax r8 mov r8 r12 sub r8 rax mov rax r12 imul rdx mov rax rdx mov rdx r12 sar rdx CONST sar rax CONST sub rax rdx lea rdx ds:xxx sub rdx rax lea rax [rax+rdx*4] mov rdx r12 sub rdx rax lea rbp [rdx+CONST] jmp JUMP_ADDR_70	mov rax rdi xor edx edx div rsi lea rax ds:xxx jmp JUMP_ADDR_97	mov rax [r13+CONST] mov rdx [rsp+CONST+var_xxx] mov rbx [r13+CONST] mov [rdx] rax jmp JUMP_ADDR_63	mov r11 rbp mov r8d r14d mov r13 [rsp+CONST+var_xxx] mov r14 [rsp+CONST+var_xxx] mov rbp [rsp+CONST+arg_xxx] mov r15 [rsp+CONST+arg_xxx] mov rcx rax jmp JUMP_ADDR_20	test cs:xxx CONST jnz JUMP_ADDR_120	mov [rbx+CONST] CONST jmp JUMP_ADDR_75	mov rbp [rsp+CONST+arg_xxx] mov r8d [rsp+CONST+arg_xxx] jmp JUMP_ADDR_4	mov rdx [rbx+CONST] mov rsi [rbx+CONST] xor eax eax mov [rsp+CONST+var_xxx] rcx lea rdi GLOBAL_VAR call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_118	mov rdx [rbx+CONST] mov rsi [rbx+CONST] xor eax eax mov [rsp+CONST+var_xxx] rcx lea rdi GLOBAL_VAR call sub_xxx mov rcx [rsp+CONST+var_xxx] jmp JUMP_ADDR_86	cmp cs:xxx CONST jz JUMP_ADDR_124	imul rbp [rsp+CONST+var_xxx] [rsp+CONST_VAR+var_xxx] lea rax off_xxx lea rdi [rax+rbp+CONST] call callfunc_xxx	lea rdi GLOBAL_VAR xor eax eax call sub_xxx
[ph]libcap-git-setcap__dl_lookup_symbol_x
endbr64 push r15 push r14 push r13 push r12 mov r12 rdi push rbp mov rbp rdx push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9d	movzx edx [r12] test dl dl jz JUMP_ADDR_31	mov rcx r12 mov ebx CONST nop [rax+rax+CONST]	mov rax rbx add rcx CONST shl rax CONST add rbx rax add rbx rdx movzx edx [rcx] test dl dl jnz JUMP_ADDR_3	mov ebx ebx	mov eax CONST cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_7	test [rsp+CONST+arg_xxx] CONST jnz JUMP_ADDR_175	cmp [rsp+CONST+arg_xxx] CONST mov rax [rsp+CONST+var_xxx] mov r9 [rax] jnz JUMP_ADDR_37	test r9 r9 jz JUMP_ADDR_32	mov [rsp+CONST+var_xxx] CONST	mov rax [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] lea r15 [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] jmp JUMP_ADDR_12	mov r9 [r13+CONST] add r13 CONST xor eax eax test r9 r9 jz JUMP_ADDR_13	push [rsp+CONST+var_xxx] mov esi [rsp+CONST+var_xxx] mov r8 r15 mov rdx r14 mov rcx [rbp+CONST] push rsi mov rsi rbx push [rsp+CONST+arg_xxx] mov edi [rsp+CONST+arg_xxx] push rdi mov rdi r12 push [rsp+CONST+var_xxx] push rax call sub_xxx add rsp CONST test eax eax jz JUMP_ADDR_11	mov rcx [rbp+CONST] mov rdx [rsp+CONST+var_xxx] mov rax rcx test rdx rdx jz JUMP_ADDR_33	test rcx rcx jz JUMP_ADDR_16	movzx eax [rcx+CONST] and eax CONST cmp al CONST jz JUMP_ADDR_22	mov [rsp+CONST+var_xxx] CONST mov r13 [rsp+CONST+var_xxx]	movzx eax [r13+CONST] and eax CONST cmp al CONST jz JUMP_ADDR_49	mov r10 [rsp+CONST+var_xxx] mov r15 r13	mov esi [r15+CONST] test esi esi jz JUMP_ADDR_41	mov eax cs:xxx test eax CONST jnz JUMP_ADDR_42	mov [rbp+CONST] r10 add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_66	mov [rsp+CONST+var_xxx] CONST mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r9 [rax] test r9 r9 jz JUMP_ADDR_65	mov r10 [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST lea r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] setz [rsp+CONST+var_xxx] mov r13 r8 mov r15 r10 jmp JUMP_ADDR_28	push CONST mov r8 r13 mov rsi rbx mov rdi r12 push rax push [rsp+CONST+arg_xxx] mov eax [rsp+CONST+arg_xxx] push rax push [rsp+CONST+var_xxx] push rdx mov rdx r14 call sub_xxx add rsp CONST test eax eax jnz JUMP_ADDR_61	mov r9 [r15+CONST] add r15 CONST test r9 r9 jz JUMP_ADDR_61	mov rcx [rbp+CONST] xor edx edx	movzx eax [rcx+CONST] and eax CONST cmp al CONST jnz JUMP_ADDR_30	cmp [rsp+CONST+var_xxx] CONST mov eax CONST jnz JUMP_ADDR_25	mov eax CONST jmp JUMP_ADDR_25	mov ebx CONST jmp JUMP_ADDR_5	mov rax [rbp+CONST]	test rax rax jz JUMP_ADDR_35	movzx eax [rax+CONST] shr al CONST cmp al CONST jz JUMP_ADDR_36	test cs:xxx CONST jz JUMP_ADDR_164	xor r10d r10d xor r13d r13d jmp JUMP_ADDR_21	mov rax [r9] mov rdi [rax] cmp [rsp+CONST+arg_xxx] rdi jz JUMP_ADDR_9	mov rcx [rsp+CONST+arg_xxx] xor edx edx xchg ax ax	add rdx CONST cmp [rax+rdx*8] rcx jnz JUMP_ADDR_39	mov [rsp+CONST+var_xxx] rdx jmp JUMP_ADDR_10	mov [r15+CONST] CONST jmp JUMP_ADDR_20	test al CONST jz JUMP_ADDR_21	mov ecx [rsp+CONST+var_xxx] lea r9 GLOBAL_VAR lea rax GLOBAL_VAR mov r8 [r13+CONST] test ecx ecx mov rcx [r13+CONST] cmovz r9 rax cmp [rcx] CONST jnz JUMP_ADDR_45	mov rax cs:xxx mov rcx [rax] lea rax GLOBAL_VAR test rcx rcx cmovz rcx rax	mov rax [rsp+CONST+var_xxx] mov rsi [rax+CONST] mov rdx [rax+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_47	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	mov [rsp+CONST+var_xxx] r10 sub rsp CONST xor eax eax push r12 lea rdi GLOBAL_VAR call sub_xxx pop rax pop rdx mov rax [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] test rax rax mov [rsp+CONST+var_xxx] r10 jz JUMP_ADDR_69	mov rsi [rax] lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_21	cmp [rsp+CONST+var_xxx] r13 jz JUMP_ADDR_18	test [rsp+CONST+arg_xxx] CONST jz JUMP_ADDR_18	cmp [r13+CONST] CONST jnz JUMP_ADDR_18	mov eax [rsp+CONST+arg_xxx] and eax CONST mov [rsp+CONST+var_xxx] eax jz JUMP_ADDR_54	cmp [r13+CONST] CONST jnz JUMP_ADDR_18	mov rax [rsp+CONST+var_xxx] mov rdi [rax+CONST] mov r8 rdi mov [rsp+CONST+var_xxx] rdi mov rax [rax+CONST] mov rbx rax mov [rsp+CONST+var_xxx] rax test rbx rbx jz JUMP_ADDR_70	mov rax [rbx] xor edx edx test rax rax jnz JUMP_ADDR_58	jmp JUMP_ADDR_70	lea eax [rdx+CONST] mov rdx rax mov rax [rbx+rax*8] test rax rax jz JUMP_ADDR_70	cmp rax r13 jnz JUMP_ADDR_57	mov r15 r13	mov r10 [rsp+CONST+var_xxx] mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_19	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_65	mov rdi [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] rdi jz JUMP_ADDR_65	mov rax [rbp+CONST] mov [rsp+CONST+var_xxx] rdi mov r13 rdi mov [rsp+CONST+var_xxx] rax	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_17	mov r13 [rsp+CONST+var_xxx] jmp JUMP_ADDR_64	mov rax [rsp+CONST+var_xxx] mov r10 rcx cmp [rsp+CONST+var_xxx] rax jz JUMP_ADDR_95	mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rax	mov r15 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov r13 r15 jmp JUMP_ADDR_19	lea rdi GLOBAL_VAR xor eax eax call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_21	test r8 r8 jz JUMP_ADDR_76	mov r14d [r8] test r14d r14d jz JUMP_ADDR_77	lea edx [r14+CONST] lea rax [r8+CONST] lea rdx [r8+rdx*8+CONST] jmp JUMP_ADDR_74	add rax CONST cmp rdx rax jz JUMP_ADDR_77	cmp [rax] r13 jnz JUMP_ADDR_73	jmp JUMP_ADDR_59	xor r14d r14d	mov rax [r13+CONST] mov [rsp+CONST+var_xxx] rax mov eax [rsp+CONST+arg_xxx] and eax CONST mov r15d eax jnz JUMP_ADDR_118	cmp cs:xxx CONST mov r10 r13 jz JUMP_ADDR_80	lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] r13 call callfunc_xxx mov r10 [rsp+CONST+var_xxx]	mov rax [rsp+CONST+var_xxx] lea rdi off_xxx mov rdx [rax+CONST] lea rax [rdx+rdx*8] lea rax [rdx+rax*2] mov rax [CONST_VAR+rax*8] test rax rax jnz JUMP_ADDR_83	jmp JUMP_ADDR_112	mov rax [rax+CONST] test rax rax jz JUMP_ADDR_112	cmp rax r10 jnz JUMP_ADDR_82	test rax rax jz JUMP_ADDR_112	mov rax [rsp+CONST+var_xxx] cmp rax [r10+CONST] jnz JUMP_ADDR_96	cmp [r10+CONST] CONST mov ebx r15d mov r8d r14d mov r15 r13 jnz JUMP_ADDR_109	mov edi [rsp+CONST+var_xxx] test edi edi jz JUMP_ADDR_89	cmp [r10+CONST] CONST jnz JUMP_ADDR_109	mov rax [rsp+CONST+var_xxx] movzx eax [rax+CONST] mov [rsp+CONST+var_xxx] al and eax CONST cmp al CONST jz JUMP_ADDR_101	test cs:xxx CONST jnz JUMP_ADDR_159	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_116	cmp cs:xxx CONST mov [r10+CONST] CONST jz JUMP_ADDR_110	lea rdi GLOBAL_VAR call callfunc_xxx test ebx ebx jz JUMP_ADDR_60	mov fs:xxx CONST jmp JUMP_ADDR_60	mov r10 rdx jmp JUMP_ADDR_68	cmp cs:xxx CONST jnz JUMP_ADDR_130	test r15d r15d jz JUMP_ADDR_1	or ebx CONST	mov fs:xxx CONST add ebx CONST jz JUMP_ADDR_115	jmp JUMP_ADDR_59	mov rax [rsp+CONST+var_xxx] mov eax [rax+CONST] cmp eax r8d jbe JUMP_ADDR_147	mov rdi [rsp+CONST+var_xxx] mov edx r8d mov rax [CONST_VAR+CONST] mov [rax+rdx*8+CONST] r10 mov rax [CONST_VAR+CONST] lea edx [r8+CONST] mov [rax] edx	test cs:xxx CONST jz JUMP_ADDR_109	mov rax [rsp+CONST+var_xxx] mov rcx [rax+CONST] mov r8 [rax+CONST] cmp [rcx] CONST jnz JUMP_ADDR_106	mov rax cs:xxx mov rcx [rax] test rcx rcx jz JUMP_ADDR_174	mov rsi [r10+CONST] mov rdx [r10+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_108	mov rax cs:xxx mov rsi [rax] test rsi rsi jz JUMP_ADDR_153	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	cmp cs:xxx CONST jnz JUMP_ADDR_93	test ebx ebx jnz JUMP_ADDR_94	jmp JUMP_ADDR_60	cmp cs:xxx CONST jz JUMP_ADDR_97	lea rdi GLOBAL_VAR call callfunc_xxx test r15d r15d jz JUMP_ADDR_1	mov fs:xxx CONST	mov rax [rsp+CONST+var_xxx] mov rax [rax+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_1	cmp cs:xxx CONST mov [r10+CONST] CONST jnz JUMP_ADDR_93	jmp JUMP_ADDR_110	xor eax eax xchg eax fs:xxx cmp eax CONST jnz JUMP_ADDR_120	xor r10d r10d mov edx CONST mov esi CONST mov rax fs:xxx lea rdi [rax+CONST] mov eax CONST syscall	cmp cs:xxx CONST jz JUMP_ADDR_122	lea rdi GLOBAL_VAR mov [rsp+CONST+var_xxx] r8 call callfunc_xxx mov r8 [rsp+CONST+var_xxx]	mov rdi [rsp+CONST+var_xxx] mov rax r13 mov rdx [CONST_VAR+CONST] mov r10 rax cmp rdx rbx jz JUMP_ADDR_134	test rdx rdx jz JUMP_ADDR_134	mov rcx [rdx] test rcx rcx jz JUMP_ADDR_134	xor esi esi jmp JUMP_ADDR_127	lea ecx [CONST_VAR+CONST] mov rsi rcx mov rcx [rdx+rcx*8] test rcx rcx jz JUMP_ADDR_134	cmp rax rcx jnz JUMP_ADDR_126	xor ebx ebx mov rax [rax+CONST] cmp [rsp+CONST+var_xxx] rax setnz bl neg ebx cmp cs:xxx CONST jnz JUMP_ADDR_131	jmp JUMP_ADDR_99	mov ebx CONST	lea rdi GLOBAL_VAR call callfunc_xxx test r15d r15d jnz JUMP_ADDR_99	cmp ebx CONST jnz JUMP_ADDR_59	jmp JUMP_ADDR_1	mov rdi [rsp+CONST+var_xxx] mov rcx [CONST_VAR+CONST] test rcx rcx jz JUMP_ADDR_80	mov edx [rcx] cmp r8 rcx jz JUMP_ADDR_141	test edx edx jz JUMP_ADDR_146	lea edi [rdx+CONST] lea rsi [rcx+CONST] lea rcx [rcx+rdi*8+CONST] jmp JUMP_ADDR_139	add rsi CONST cmp rcx rsi jz JUMP_ADDR_145	cmp [CONST_VAR] rax jnz JUMP_ADDR_138	jmp JUMP_ADDR_128	cmp r14d edx jnb JUMP_ADDR_80	mov ecx r14d lea rsi [r8+rcx*8] xor ecx ecx	cmp [CONST_VAR+rcx*8+CONST] rax jz JUMP_ADDR_128	add rcx CONST lea edi [r14+rcx] cmp edi edx jb JUMP_ADDR_143	mov r14d edx jmp JUMP_ADDR_80	xor r14d r14d jmp JUMP_ADDR_80	mov [rsp+CONST+var_xxx] CONST test eax eax jz JUMP_ADDR_149	add eax eax mov [rsp+CONST+var_xxx] eax	mov eax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] r10 lea rdi ds:xxx call sub_xxx mov r10 [rsp+CONST+var_xxx] mov r8d [rsp+CONST+var_xxx] test rax rax mov r13 rax jz JUMP_ADDR_155	mov r14d r8d test r8d r8d jnz JUMP_ADDR_154	lea eax [r8+CONST] mov [r13+r14*8+CONST] r10 mov [r13+CONST] eax mov rax [rsp+CONST+var_xxx] mov esi [rsp+CONST+var_xxx] mov rdi [rax+CONST] mov [rax+CONST] esi mov [rax+CONST] r13 test rdi rdi jz JUMP_ADDR_103	mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_103	lea rsi GLOBAL_VAR jmp JUMP_ADDR_108	lea rdi [rax+CONST] mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r8d lea rdx ds:xxx mov [rsp+CONST+var_xxx] r10 mov rax [rax+CONST] lea rsi [rax+CONST] mov [rsp+CONST+var_xxx] rax call sub_xxx mov r8d [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_151	test cs:xxx CONST jz JUMP_ADDR_91	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_158	cmp [r10+CONST] CONST jnz JUMP_ADDR_116	mov rdx [r10+CONST] mov rsi [r10+CONST] xor eax eax mov [rsp+CONST+var_xxx] r10 lea rdi GLOBAL_VAR call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_91	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_161	cmp [r10+CONST] CONST jnz JUMP_ADDR_116	mov rax [rsp+CONST+var_xxx] mov r11 [r10+CONST] mov rsi [r10+CONST] mov rcx [rax+CONST] cmp [rcx] CONST jnz JUMP_ADDR_163	mov rdx r11 lea rdi GLOBAL_VAR xor eax eax mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_91	mov r8 rdx xor eax eax mov rdx r11 mov [rsp+CONST+var_xxx] r10 lea rdi GLOBAL_VAR call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_91	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_169	lea r8 unk_xxx cmp [rsp+CONST+var_xxx] CONST mov rsi [rax+CONST] mov r9 r8 jz JUMP_ADDR_167	mov rax [rsp+CONST+var_xxx] lea r8 GLOBAL_VAR mov r9 [rax] test r9 r9 jz JUMP_ADDR_176	cmp [CONST_VAR] CONST jz JUMP_ADDR_171	lea rbp [rsp+CONST+var_xxx] lea rdx GLOBAL_VAR mov rcx r12 xor eax eax mov rdi rbp call sub_xxx lea rdx GLOBAL_VAR mov rsi rbp xor edi edi call sub_xxx	lea r8 unk_xxx cmp [rsp+CONST+var_xxx] CONST mov r9 r8 jz JUMP_ADDR_171	mov rax [rsp+CONST+var_xxx] lea r8 GLOBAL_VAR mov r9 [rax] test r9 r9 jz JUMP_ADDR_173	mov rax cs:xxx mov rsi [rax] test rsi rsi jnz JUMP_ADDR_168	lea rsi GLOBAL_VAR jmp JUMP_ADDR_168	lea r9 unk_xxx jmp JUMP_ADDR_171	lea rcx GLOBAL_VAR jmp JUMP_ADDR_106	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea r9 unk_xxx jmp JUMP_ADDR_167
[ph]libcap-git-setcap__dl_setup_hash
endbr64 mov rdx [CONST_VAR+CONST] mov rax rdi test rdx rdx jz JUMP_ADDR_3	mov rsi [rdx+CONST] mov ecx [CONST_VAR] mov [CONST_VAR+CONST] ecx mov edx [CONST_VAR+CONST] mov edi [CONST_VAR+CONST] lea r8d [rdx+CONST] test r8d edx jnz JUMP_ADDR_6	mov [rax+CONST] r8d add edx edx lea r8 [CONST_VAR+CONST] sub rcx rdi mov esi [CONST_VAR+CONST] lea rdx [r8+rdx*4] mov [rax+CONST] r8 mov [rax+CONST] rdx lea rdx [rdx+rcx*4] mov [rax+CONST] esi mov [rax+CONST] rdx retn	mov rdx [CONST_VAR+CONST] test rdx rdx jz JUMP_ADDR_5	mov rdx [rdx+CONST] mov ecx [rdx] add rdx CONST mov [CONST_VAR+CONST] rdx lea rdx [rdx+rcx*4] mov [CONST_VAR+CONST] ecx mov [CONST_VAR+CONST] rdx	retn	push rax lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_add_to_namespace_list
endbr64 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST cmp cs:xxx CONST jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	lea rax [rbx+rbx*8] lea rcx off_xxx lea rax [rbx+rax*2] lea rdx [rcx+rax*8] mov rax [rdx] test rax rax jz JUMP_ADDR_9	nop [rax+CONST]	mov rdx rax mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_4	mov [rbp+CONST] rdx mov [rdx+CONST] rbp	lea rax [rbx+rbx*8] lea rax [rbx+rax*2] add [rcx+rax*8+CONST] CONST mov rax cs:xxx mov [rbp+CONST] rax add rax CONST cmp cs:xxx CONST mov cs:xxx rax jz JUMP_ADDR_8	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	mov [rdx] rbp jmp JUMP_ADDR_6
[ph]libcap-git-setcap__dl_new_object
endbr64 push r15 push r14 mov r14 r9 push r13 mov r13d edx push r12 push rbp mov rbp rsi push rbx mov rbx rcx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov rdi rsi mov [rsp+CONST+var_xxx] r8d call sub_xxx mov esi CONST lea rdx [rax+CONST] lea rdi [rax+CONST] mov r15 rax mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_21	mov [r12+CONST] rax mov rdx [rsp+CONST+var_xxx] lea rax [rax+CONST] mov rsi rbp mov [r12+CONST] rax lea rdi [r12+CONST] lea rax [r12+CONST] mov [r12+CONST] rax call sub_xxx mov rdx [rsp+CONST+var_xxx] mov [r12+CONST] CONST mov [r12+CONST] rax add rax r15 movzx ecx [rdx] test cl cl cmovnz rax rdx and r13d CONST mov [r12+CONST] rax movzx eax [r12+CONST] and eax CONST or r13d eax mov [r12+CONST] r13b test cs:xxx CONST jz JUMP_ADDR_22	lea rax [r14+r14*8] lea rsi [r12+CONST] mov [r12+CONST] r14 lea rdx [r14+rax*2] lea rax off_xxx mov [r12+CONST] rbx mov rax [rax+rdx*8] mov [r12+CONST] rsi mov [r12+CONST] CONST test rax rax jz JUMP_ADDR_27	lea rdx [rax+CONST] mov [r12+CONST] rdx test rbx rbx jz JUMP_ADDR_23	mov edx CONST nop [rax+rax+CONST]	mov rax rbx mov rbx [rbx+CONST] test rbx rbx jnz JUMP_ADDR_5	test edx edx jnz JUMP_ADDR_29	add rax CONST	mov [CONST_VAR] rax	lea rax [r12+CONST] test cl cl mov [rsp+CONST+var_xxx] cl mov [r12+CONST] rax jz JUMP_ADDR_21	mov rdi [rsp+CONST+var_xxx] xor ebp ebp call sub_xxx movzx ecx [rsp+CONST+var_xxx] mov r13 rax lea rax [rax+CONST] mov [rsp+CONST+var_xxx] rax mov r14 rax cmp cl CONST jnz JUMP_ADDR_13	jmp JUMP_ADDR_31	mov rax CONST cmp fs:xxx CONST jnz JUMP_ADDR_34	mov rbx r14 sub r14 CONST mov rdi rbp mov r15 rbp mov rsi r14 call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_33	lea rsi [rbx+CONST] mov rdi rax sub rsi r13 call sub_xxx test rax rax jz JUMP_ADDR_12	mov rdi rbp call sub_xxx lea rdi [rbp+rax+CONST] cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_17	mov [CONST_VAR] CONST add rdi CONST	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] call sub_xxx nop	mov rdx rax sub rax CONST cmp [rax] CONST jnz JUMP_ADDR_18	cmp rbp rax cmovz rax rdx mov [rax] CONST	mov [r12+CONST] rbp	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [r12+CONST] CONST jmp JUMP_ADDR_2	mov rax r12	add rax CONST cmp rax rdx jz JUMP_ADDR_9	test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_30	mov [r12+CONST] rdx jmp JUMP_ADDR_8	xor edx edx test rbx rbx jnz JUMP_ADDR_5	mov rax r12 jmp JUMP_ADDR_7	mov rdx [r12+CONST] jmp JUMP_ADDR_24	lea rsi [r12+CONST] jmp JUMP_ADDR_8	mov rdi rax call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_35	mov rdi rax jmp JUMP_ADDR_17	mov rbp r15 nop [rax+rax+CONST]	mov rdi rbp mov rbp CONST call sub_xxx jmp JUMP_ADDR_20	or rbp CONST jmp JUMP_ADDR_20
[ph]libcap-git-setcap__dl_try_allocate_static_tls
endbr64 cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_10	mov r8 [CONST_VAR+CONST] cmp r8 cs:xxx ja JUMP_ADDR_10	mov rcx cs:xxx mov r10d esi mov rsi cs:xxx sub rcx rsi cmp rcx CONST jbe JUMP_ADDR_10	mov r9 [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] sub rcx CONST add rdx r9 cmp rcx rdx jb JUMP_ADDR_10	mov rax rcx sub rax rdx xor edx edx div r8 mov rdx rcx sub rdx r9 imul rax r8 sub rdx rax test r10b r10b jz JUMP_ADDR_7	mov r8 cs:xxx cmp r8 rdx jb JUMP_ADDR_10	sub r8 rcx add r8 r9 add r8 rax mov cs:xxx r8	lea rax [CONST_VAR+rdx] mov cs:xxx rax mov [CONST_VAR+CONST] rax mov rax [CONST_VAR+CONST] test [rax+CONST] CONST jz JUMP_ADDR_9	sub rsp CONST call cs:xxx xor eax eax add rsp CONST retn	or [CONST_VAR+CONST] CONST xor eax eax retn	mov eax CONST retn
[ph]libcap-git-setcap__dl_allocate_static_tls
endbr64 push rbx cmp [CONST_VAR+CONST] CONST mov rbx rdi jz JUMP_ADDR_3	xor esi esi call sub_xxx test eax eax jnz JUMP_ADDR_3	pop rbx retn	mov rsi [rbx+CONST] lea rcx GLOBAL_VAR xor edx edx xor edi edi call sub_xxx
[ph]libcap-git-setcap__dl_nothread_init_static_tls
endbr64 push r12 mov rax rdi mov rdx [CONST_VAR+CONST] mov r12 [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi fs:xxx sub rdi [rax+CONST] sub r12 rdx call sub_xxx mov rdx r12 xor esi esi pop r12 mov rdi rax jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__dl_protect_relro
endbr64 mov rax cs:xxx push rbx mov rbx rdi mov rsi [CONST_VAR+CONST] add rsi [CONST_VAR] neg rax mov rdi rsi add rsi [rbx+CONST] and rdi rax and rsi rax cmp rdi rsi jnz JUMP_ADDR_2	pop rbx retn	sub rsi rdi mov edx CONST call sub_xxx test eax eax jns JUMP_ADDR_1	mov rax CONST mov rsi [rbx+CONST] lea rcx GLOBAL_VAR xor edx edx mov edi fs:xxx call sub_xxx
[ph]libcap-git-setcap__dl_reloc_bad_type
endbr64 push r12 movsxd rdx edx push rbp lea rax [rdx+rdx*8] mov rbp rdi push rbx lea rdx [rdx+rax*2] lea rax GLOBAL_VAR mov ebx esi lea rsi [rax+rdx*2] sub rsp CONST mov r12 rsp mov rdi r12 call sub_xxx lea rcx GLOBAL_VAR cmp ebx CONST ja JUMP_ADDR_2	mov edx ebx and ebx CONST mov [rax+CONST] CONST mov rsi [rbp+CONST] shr edx CONST xor edi edi and edx CONST movzx edx [rcx+rdx] mov [rax] dl movzx edx [rcx+rbx] mov rcx r12 mov [rax+CONST] dl xor edx edx call sub_xxx	mov edx ebx add rax CONST shr edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl mov edx ebx shr edx CONST and edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl mov edx ebx shr edx CONST and edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl mov edx ebx shr edx CONST and edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl mov edx ebx shr edx CONST and edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl mov edx ebx shr edx CONST and edx CONST movzx edx [rcx+rdx] mov [rax+CONST] dl jmp JUMP_ADDR_1
[ph]libcap-git-setcap__dl_relocate_object
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov [rbp+var_xxx] rsi mov [rbp+var_xxx] ecx test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_44	mov eax cs:xxx mov r11 rdi mov r12d edx and eax CONST test ecx ecx jz JUMP_ADDR_45	mov r13d r12d and r13d CONST test eax eax jnz JUMP_ADDR_255	mov rax [r11+CONST] mov [rbp+var_xxx] rax test rax rax jnz JUMP_ADDR_245	mov rax [r11+CONST] cmp [r11+CONST] CONST mov rax [rax+CONST] mov [rbp+var_xxx] rax jz JUMP_ADDR_149	test r13d r13d jz JUMP_ADDR_12	mov rax [r11+CONST] mov rax [rax+CONST] mov rdx [rax+CONST] test rdx rdx jnz JUMP_ADDR_155	mov ecx [rbp+var_xxx] mov [rax+CONST] r11 test ecx ecx jnz JUMP_ADDR_278	cmp cs:xxx CONST jnz JUMP_ADDR_156	lea rdi sub_xxx mov [rax+CONST] rdi	mov rax [r11+CONST] test rax rax jnz JUMP_ADDR_151	nop [rax+CONST]	mov rax [r11+CONST] pxor xmm0 xmm0 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm0 test rax rax jz JUMP_ADDR_158	mov rdx [rax+CONST] mov rax [r11+CONST] mov r10 [rax+CONST] mov rax [r11+CONST] lea rsi [rdx+r10] test rax rax jz JUMP_ADDR_15	mov rax [rax+CONST] mov [rbp+var_xxx] rax	cmp [r11+CONST] CONST jz JUMP_ADDR_21	mov rax [r11+CONST] mov rcx [rax+CONST] mov rax [r11+CONST] mov rax [rax+CONST] lea rdi [rcx+rax] cmp rdi rsi jnz JUMP_ADDR_18	sub r10 rax lea rsi [r10+rdx]	test r13d r13d jnz JUMP_ADDR_20	cmp rcx rsi jz JUMP_ADDR_157	mov [rbp+var_xxx] rcx mov [rbp+var_xxx+CONST] rax mov [rbp+var_xxx+CONST] r13d	lea rax [rbp+var_xxx] and r12d CONST xor ecx ecx mov [rbp+var_xxx] rax lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] r12d mov r12 r11	mov rax [rbp+var_xxx] lea rdi [r10+rdx] mov r10 [r12] mov [rbp+var_xxx] rdi mov rsi [rax+CONST] mov rax rdx test ecx ecx jz JUMP_ADDR_50	xor r13d r13d xor ebx ebx cmp rdx rdi jnb JUMP_ADDR_40	mov rdi [rbp+var_xxx] jmp JUMP_ADDR_29	mov rdx [rax] add rdx r10 cmp rcx CONST jnz JUMP_ADDR_48	mov rcx [r12+CONST] test rcx rcx jnz JUMP_ADDR_143	add [rdx] r10	add rax CONST cmp rdi rax jbe JUMP_ADDR_31	mov rsi [rax+CONST] mov ecx esi cmp esi CONST jnz JUMP_ADDR_25	test rbx rbx mov r13 rax cmovz rbx rax add rax CONST cmp rdi rax ja JUMP_ADDR_29	test rbx rbx jz JUMP_ADDR_40	cmp rbx r13 ja JUMP_ADDR_40	mov r15 r10 jmp JUMP_ADDR_35	add rbx CONST cmp rbx r13 ja JUMP_ADDR_40	cmp [rbx+CONST] CONST jnz JUMP_ADDR_34	mov r14 [rbx] mov edx [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] add r14 r15 test edx edx jnz JUMP_ADDR_38	call rax	add rbx CONST mov [r14] rax cmp rbx r13 jbe JUMP_ADDR_35	nop [rax]	add [rbp+var_xxx] CONST mov rax [rbp+var_xxx] cmp [rbp+var_xxx] rax jnz JUMP_ADDR_144	mov eax [rbp+var_xxx] mov r11 r12 test eax eax jnz JUMP_ADDR_264	or [r11+CONST] CONST cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_260	cmp [r11+CONST] CONST jnz JUMP_ADDR_152	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_2	xor r13d r13d test eax eax jz JUMP_ADDR_3	lea rdx unk_xxx jmp JUMP_ADDR_256	cmp rcx CONST jnz JUMP_ADDR_259	mov rsi [r12+CONST] mov rcx [r12] mov [rdx+CONST] rax add rcx [CONST_VAR+CONST] mov [rdx] rcx jmp JUMP_ADDR_28	mov rcx [r12+CONST] cmp r12 CONST mov rdi [rcx+CONST] lea rcx [CONST_VAR+rsi*2] lea rbx [rdx+rcx*8] mov [rbp+var_xxx] rdi jz JUMP_ADDR_53	test r10 r10 jnz JUMP_ADDR_110	cmp [r12+CONST] CONST jz JUMP_ADDR_110	mov rax [r12+CONST] mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_159	mov rax [rbp+var_xxx] mov rax [rax+CONST] mov [rbp+var_xxx] rax cmp [rbp+var_xxx] rbx jbe JUMP_ADDR_40	xor r11d r11d mov [rbp+var_xxx] r10 mov [rbp+var_xxx] CONST mov [rbp+var_xxx] r11 nop [rax+CONST]	mov r14 [rbx+CONST] mov r13d r14d cmp r14d CONST jz JUMP_ADDR_128	mov rdi [rbp+var_xxx] mov rax r14 mov r10 [rbp+var_xxx] shr rax CONST add r10 [rbx] mov rsi [r12+CONST] movzx edx [CONST_VAR+rax*2] mov rdi [rbp+var_xxx] lea rax [rax+rax*2] lea r15 [CONST_VAR+rax*8] mov [rbp+var_xxx] r15 cmp r13 CONST jz JUMP_ADDR_129	cmp r13 CONST jz JUMP_ADDR_129	test r13 r13 jz JUMP_ADDR_72	movzx eax [r15+CONST] mov edi eax shr dil CONST jz JUMP_ADDR_116	movzx ecx [r15+CONST] and ecx CONST sub ecx CONST cmp ecx CONST jbe JUMP_ADDR_116	xor r9d r9d cmp r13 CONST lea rcx [r13+CONST] setz r9b xor eax eax shl r9d CONST cmp r13 CONST setz al add eax eax or r9d eax cmp r15 [r12+CONST] jz JUMP_ADDR_145	cmp rcx CONST ja JUMP_ADDR_65	lea rax unk_xxx or r9d [rax+rcx*4]	and edx CONST mov [r12+CONST] r9d lea rax [rdx+rdx*2] mov [r12+CONST] r15 lea r8 [CONST_VAR+rax*8] test r8 r8 jz JUMP_ADDR_67	mov r11d [r8+CONST] xor eax eax test r11d r11d cmovz r8 rax	mov edi [r15] push CONST lea rdx [rbp+var_xxx] mov rsi r12 mov rcx [rbp+var_xxx] add rdi [rbp+var_xxx] push CONST mov [rbp+var_xxx] r10 call sub_xxx mov rdx [rbp+var_xxx] mov r10 [rbp+var_xxx] mov [r12+CONST] rax mov r11 rax mov [r12+CONST] rdx pop rdi pop r8	xor r9d r9d test rdx rdx jnz JUMP_ADDR_130	cmp r13 CONST ja JUMP_ADDR_127	lea rsi unk_xxx movsxd rax [CONST_VAR+r13*4] add rax rsi jmp rax	mov rax [rbp+var_xxx] mov r9 [rax+CONST] add r9 [rbx+CONST] mov [r10] r9 nop	add rbx CONST cmp [rbp+var_xxx] rbx ja JUMP_ADDR_56	mov r11 [rbp+var_xxx] mov r10 [rbp+var_xxx] test r11 r11 jz JUMP_ADDR_40	mov r13 [rbp+var_xxx] cmp r11 r13 ja JUMP_ADDR_40	lea r14 [rbp+var_xxx] mov [rbp+var_xxx] r10 lea r15 GLOBAL_VAR mov rbx r11 mov [rbp+var_xxx] r14 jmp JUMP_ADDR_77	add rbx CONST cmp rbx r13 ja JUMP_ADDR_40	mov rax [rbx+CONST] cmp eax CONST jnz JUMP_ADDR_76	mov rsi [rbp+var_xxx] shr rax CONST mov rdi [rbp+var_xxx] mov r14 [rbp+var_xxx] add r14 [rbx] movzx ecx [CONST_VAR+rax*2] lea rax [rax+rax*2] mov rsi [r12+CONST] lea r10 [CONST_VAR+rax*8] mov [rbp+var_xxx] r10 movzx eax [r10+CONST] mov edi eax shr dil CONST jz JUMP_ADDR_132	movzx edx [r10+CONST] and edx CONST sub edx CONST cmp edx CONST jbe JUMP_ADDR_132	cmp r10 [r12+CONST] jz JUMP_ADDR_243	and ecx CONST mov [r12+CONST] r10 mov [r12+CONST] CONST lea rax [rcx+rcx*2] lea r8 [CONST_VAR+rax*8] test r8 r8 jz JUMP_ADDR_83	mov r11d [r8+CONST] xor eax eax test r11d r11d cmovz r8 rax	mov edi [r10] push CONST xor r9d r9d mov rsi r12 mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] push CONST add rdi [rbp+var_xxx] mov [rbp+var_xxx] r10 call sub_xxx mov rdx [rbp+var_xxx] mov r10 [rbp+var_xxx] mov [r12+CONST] rax mov rcx rax mov [r12+CONST] rdx pop r8 pop r9	test rdx rdx jnz JUMP_ADDR_148	mov esi [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] test esi esi jnz JUMP_ADDR_87	call rax	mov [r14] rax jmp JUMP_ADDR_76	mov rax [rbp+var_xxx] mov r9 [rax+CONST] add r9 [rbx+CONST] lea rdi GLOBAL_VAR mov [r10] r9d shr r9 CONST jz JUMP_ADDR_72	mov rax [r12+CONST] mov edx [r15] add rdx [rax+CONST] mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax xor eax eax call sub_xxx jmp JUMP_ADDR_72	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_236	mov rdx [r11+CONST] lea rcx [rdx+CONST] cmp rcx CONST jbe JUMP_ADDR_275	mov rax [rax+CONST] sub rax rdx add rax [rbx+CONST] mov [r10+CONST] rax lea rax sub_xxx mov [r10] rax jmp JUMP_ADDR_72	test r11 r11 jz JUMP_ADDR_72	mov rax [r11+CONST] mov [r10] rax jmp JUMP_ADDR_72	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_72	mov rdx [r11+CONST] lea rcx [rdx+CONST] cmp rcx CONST jbe JUMP_ADDR_274	mov rax [rax+CONST] sub rax rdx add rax [rbx+CONST] mov [r10] rax jmp JUMP_ADDR_72	mov rdx [rbp+var_xxx] test rdx rdx jz JUMP_ADDR_72	mov rax [rbx+CONST] add rax [rdx+CONST] mov [r10] rax jmp JUMP_ADDR_72	mov rax [rbx+CONST] sub rax r10 add rax r9 movsxd rdx eax mov [r10] eax cmp rax rdx jz JUMP_ADDR_72	lea rdi GLOBAL_VAR jmp JUMP_ADDR_89	mov edx [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] test edx edx jnz JUMP_ADDR_104	mov [rbp+var_xxx] r10 call rax mov r10 [rbp+var_xxx]	mov [r10] rax jmp JUMP_ADDR_72	mov r13 [rbp+var_xxx] test r13 r13 jz JUMP_ADDR_72	mov rdx [r15+CONST] mov rax [r13+CONST] mov rsi r9 mov rdi r10 cmp rdx rax cmova rdx rax call sub_xxx mov rax [r15+CONST] cmp [r13+CONST] rax ja JUMP_ADDR_109	jnb JUMP_ADDR_72	mov ecx cs:xxx test ecx ecx jz JUMP_ADDR_72	lea rdi GLOBAL_VAR jmp JUMP_ADDR_89	cmp rdx rbx jnb JUMP_ADDR_53	nop [rax+CONST]	mov rcx [rax] mov edx [rax+CONST] add rcx r10 cmp rdx CONST jz JUMP_ADDR_114	cmp rdx CONST jnz JUMP_ADDR_288	mov rdx [rax+CONST] add rax CONST add rdx r10 mov [rcx] rdx cmp rbx rax ja JUMP_ADDR_112	jmp JUMP_ADDR_53	mov rdx r15 mov r11 r12 movzx ecx [rdx+CONST] cmp cx CONST jz JUMP_ADDR_131	mov r9 [r11]	and eax CONST add r9 [rdx+CONST] cmp al CONST jnz JUMP_ADDR_69	test cx cx jz JUMP_ADDR_69	mov esi [rbp+var_xxx] test esi esi jnz JUMP_ADDR_69	cmp r12 r11 jz JUMP_ADDR_125	movzx eax [r11+CONST] test al CONST jnz JUMP_ADDR_125	mov rdx [r12+CONST] mov rcx cs:xxx mov r8d [r15] mov rsi [rcx] add r8 [rdx+CONST] mov rdx [r12+CONST] test al CONST jz JUMP_ADDR_290	test rsi rsi lea rax GLOBAL_VAR mov rcx [r11+CONST] lea rdi GLOBAL_VAR cmovz rsi rax xor eax eax mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r11 call sub_xxx mov r9 [rbp+var_xxx] mov r10 [rbp+var_xxx] mov r11 [rbp+var_xxx]	mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r10 call r9 mov r11 [rbp+var_xxx] mov r10 [rbp+var_xxx] mov r9 rax cmp r13 CONST jbe JUMP_ADDR_70	nop [rax+rax+CONST]	xor edx edx mov esi r14d mov rdi r12 call sub_xxx	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rbx test rax rax cmovz rax rbx mov [rbp+var_xxx] rax jmp JUMP_ADDR_72	mov rax [rbx+CONST] add rax [r12] mov [r10] rax jmp JUMP_ADDR_72	movzx ecx [rdx+CONST] movzx eax [rdx+CONST] cmp cx CONST jnz JUMP_ADDR_117	xor r9d r9d jmp JUMP_ADDR_118	mov rcx r12 mov rdx r10	movzx esi [rdx+CONST] mov r9 [rdx+CONST] and eax CONST cmp si CONST jz JUMP_ADDR_237	mov rdx [rcx] cmp al CONST jnz JUMP_ADDR_85	test si si jz JUMP_ADDR_85	add r9 rdx	mov edi [rbp+var_xxx] test edi edi jnz JUMP_ADDR_285	cmp r12 rcx jz JUMP_ADDR_142	movzx eax [rcx+CONST] test al CONST jnz JUMP_ADDR_142	mov rdx [r12+CONST] mov rsi cs:xxx mov r8d [r10] mov rsi [CONST_VAR] add r8 [rdx+CONST] mov rdx [r12+CONST] test al CONST jz JUMP_ADDR_290	test rsi rsi lea rax GLOBAL_VAR mov rcx [rcx+CONST] mov rdi r15 cmovz rsi rax xor eax eax mov [rbp+var_xxx] r9 call sub_xxx mov r9 [rbp+var_xxx]	call r9 mov rax [rbx+CONST] add rax [r12] jmp JUMP_ADDR_86	mov rsi rdx sub rsi [r12+CONST] lea rcx [rcx+rsi*2] mov [rdx] rcx jmp JUMP_ADDR_28	mov rax [rbp+var_xxx] mov ecx [rax+CONST] mov r10 [rax+CONST] mov rdx [rax] jmp JUMP_ADDR_22	mov eax [r12+CONST] cmp rcx CONST jbe JUMP_ADDR_153	cmp r9d eax jnz JUMP_ADDR_65	mov rdx [r12+CONST] mov r11 [r12+CONST] mov [rbp+var_xxx] rdx jmp JUMP_ADDR_68	movzx eax [rdx+CONST] jmp JUMP_ADDR_133	mov rax [r11+CONST] test rax rax jz JUMP_ADDR_12	test r13d r13d jz JUMP_ADDR_12	mov rdx [rax+CONST] mov rax [r11] lea rsi sub_xxx mov [rdx+rax] rsi jmp JUMP_ADDR_12	mov rdi r11 call sub_xxx lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	lea rdi unk_xxx mov r8d [CONST_VAR+rcx*4] or r8d r9d cmp r8d eax jnz JUMP_ADDR_64	jmp JUMP_ADDR_147	add rdx [r11] mov [r11+CONST] rdx lea rdx [rax+CONST] mov [r11+CONST] rdx jmp JUMP_ADDR_7	test cs:xxx CONST lea rdx sub_xxx lea rcx sub_xxx cmovnz rdx rcx mov [rax+CONST] rdx jmp JUMP_ADDR_10	add r10 rax jmp JUMP_ADDR_21	xor esi esi xor r10d r10d xor edx edx jmp JUMP_ADDR_15	xor r11d r11d cmp [rbp+var_xxx] rbx jbe JUMP_ADDR_40	mov [rbp+var_xxx] r10 nop	mov r14 [rbx+CONST] mov r13d r14d cmp r14d CONST jz JUMP_ADDR_211	mov rax [rbp+var_xxx] add rax [rbx] mov [rbp+var_xxx] rax mov rax r14 mov rdi [rbp+var_xxx] shr rax CONST lea rax [rax+rax*2] lea r15 [CONST_VAR+rax*8] mov [rbp+var_xxx] r15 cmp r13 CONST jz JUMP_ADDR_222	cmp r13 CONST jz JUMP_ADDR_222	test r13 r13 jz JUMP_ADDR_175	movzx eax [r15+CONST] mov esi eax shr sil CONST jz JUMP_ADDR_212	movzx edx [r15+CONST] and edx CONST sub edx CONST cmp edx CONST jbe JUMP_ADDR_212	xor r9d r9d cmp r13 CONST setz r9b xor eax eax add r9d r9d cmp r13 CONST setz al shl eax CONST or r9d eax lea rax [r13+CONST] cmp r15 [r12+CONST] jz JUMP_ADDR_240	cmp rax CONST ja JUMP_ADDR_170	lea rdx unk_xxx or r9d [rdx+rax*4]	mov edi [r15] mov rcx [rbp+var_xxx] xor r8d r8d mov rsi r12 mov [r12+CONST] r9d lea rdx [rbp+var_xxx] add rdi [rbp+var_xxx] mov [r12+CONST] r15 push CONST push CONST mov [rbp+var_xxx] r11 call sub_xxx mov rdx [rbp+var_xxx] mov r11 [rbp+var_xxx] mov [r12+CONST] rax mov r10 rax mov [r12+CONST] rdx pop rax pop rcx	xor r9d r9d test rdx rdx jnz JUMP_ADDR_234	cmp r13 CONST ja JUMP_ADDR_127	lea rdi unk_xxx movsxd rax [CONST_VAR+r13*4] add rax rdi jmp rax	mov rax [rbp+var_xxx] mov r9 [rax+CONST] mov rax [rbp+var_xxx] add r9 [rbx+CONST] mov [rax] r9 nop [rax+rax+CONST]	add rbx CONST cmp [rbp+var_xxx] rbx ja JUMP_ADDR_161	mov r10 [rbp+var_xxx] test r11 r11 jz JUMP_ADDR_40	mov r13 [rbp+var_xxx] cmp r11 r13 ja JUMP_ADDR_40	lea r14 [rbp+var_xxx] mov [rbp+var_xxx] r10 lea r15 GLOBAL_VAR mov rbx r11 mov [rbp+var_xxx] r14 jmp JUMP_ADDR_180	add rbx CONST cmp rbx r13 ja JUMP_ADDR_40	mov rax [rbx+CONST] cmp eax CONST jnz JUMP_ADDR_179	mov rsi [rbp+var_xxx] shr rax CONST mov r14 [rbp+var_xxx] lea rax [rax+rax*2] add r14 [rbx] lea r10 [CONST_VAR+rax*8] mov [rbp+var_xxx] r10 movzx eax [r10+CONST] mov esi eax shr sil CONST jz JUMP_ADDR_223	movzx edx [r10+CONST] and edx CONST sub edx CONST cmp edx CONST jbe JUMP_ADDR_223	cmp r10 [r12+CONST] jz JUMP_ADDR_276	mov edi [r10] mov rcx [rbp+var_xxx] xor r8d r8d xor r9d r9d mov [r12+CONST] r10 mov rdx [rbp+var_xxx] mov rsi r12 add rdi [rbp+var_xxx] mov [rbp+var_xxx] r10 mov [r12+CONST] CONST push CONST push CONST call sub_xxx mov rdx [rbp+var_xxx] mov r10 [rbp+var_xxx] mov [r12+CONST] rax mov rcx rax mov [r12+CONST] rdx pop rdi pop r8	test rdx rdx jnz JUMP_ADDR_239	mov edx [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] test edx edx jnz JUMP_ADDR_188	call rax	mov [r14] rax jmp JUMP_ADDR_179	mov rax [rbp+var_xxx] mov r9 [rax+CONST] mov rax [rbp+var_xxx] add r9 [rbx+CONST] lea rdi GLOBAL_VAR mov [rax] r9d shr r9 CONST jz JUMP_ADDR_175	mov rax [r12+CONST] mov edx [r15] mov [rbp+var_xxx] r11 add rdx [rax+CONST] mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax xor eax eax call sub_xxx mov r11 [rbp+var_xxx] jmp JUMP_ADDR_175	mov r10d [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] test r10d r10d jnz JUMP_ADDR_193	mov [rbp+var_xxx] r11 call rax mov r11 [rbp+var_xxx]	mov rsi [rbp+var_xxx] mov [CONST_VAR] rax jmp JUMP_ADDR_175	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_268	mov rdx [r10+CONST] lea rcx [rdx+CONST] cmp rcx CONST jbe JUMP_ADDR_284	mov rax [rax+CONST] mov rsi [rbp+var_xxx] sub rax rdx add rax [rbx+CONST] mov [CONST_VAR+CONST] rax lea rax sub_xxx mov [CONST_VAR] rax jmp JUMP_ADDR_175	mov r13 [rbp+var_xxx] test r13 r13 jz JUMP_ADDR_175	mov rax [r15+CONST] mov rdx [r13+CONST] mov rsi r9 mov [rbp+var_xxx] r11 mov rdi [rbp+var_xxx] cmp rax rdx cmovbe rdx rax call sub_xxx mov rax [r15+CONST] cmp [r13+CONST] rax mov r11 [rbp+var_xxx] ja JUMP_ADDR_201	jnb JUMP_ADDR_175	mov r13d cs:xxx test r13d r13d jz JUMP_ADDR_175	lea rdi GLOBAL_VAR jmp JUMP_ADDR_190	mov rax [rbx+CONST] mov rsi [rbp+var_xxx] sub rax rsi add rax r9 movsxd rdx eax mov [CONST_VAR] eax cmp rax rdx jz JUMP_ADDR_175	lea rdi GLOBAL_VAR jmp JUMP_ADDR_190	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_175	mov rdx [r10+CONST] lea rcx [rdx+CONST] cmp rcx CONST jbe JUMP_ADDR_283	mov rax [rax+CONST] mov rsi [rbp+var_xxx] sub rax rdx add rax [rbx+CONST] mov [CONST_VAR] rax jmp JUMP_ADDR_175	mov rdx [rbp+var_xxx] test rdx rdx jz JUMP_ADDR_175	mov rdi [rbp+var_xxx] mov rax [rbx+CONST] add rax [rdx+CONST] mov [CONST_VAR] rax jmp JUMP_ADDR_175	test r10 r10 jz JUMP_ADDR_175	mov rax [r10+CONST] mov rdi [rbp+var_xxx] mov [CONST_VAR] rax jmp JUMP_ADDR_175	test r11 r11 mov [rbp+var_xxx] rbx cmovz r11 rbx jmp JUMP_ADDR_175	mov rdx r15 mov r10 r12 movzx ecx [rdx+CONST] cmp cx CONST jz JUMP_ADDR_235	mov r9 [r10]	and eax CONST add r9 [rdx+CONST] cmp al CONST jnz JUMP_ADDR_172	mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_172	test cx cx jz JUMP_ADDR_172	cmp r12 r10 jz JUMP_ADDR_221	movzx eax [r10+CONST] test al CONST jnz JUMP_ADDR_221	mov rdx [r12+CONST] mov rcx cs:xxx mov r8d [r15] mov rsi [rcx] add r8 [rdx+CONST] mov rdx [r12+CONST] test al CONST jz JUMP_ADDR_290	test rsi rsi lea rax GLOBAL_VAR mov rcx [r10+CONST] lea rdi GLOBAL_VAR cmovz rsi rax xor eax eax mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r10 call sub_xxx mov r11 [rbp+var_xxx] mov r9 [rbp+var_xxx] mov r10 [rbp+var_xxx]	mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r10 call r9 mov r11 [rbp+var_xxx] mov r10 [rbp+var_xxx] mov r9 rax jmp JUMP_ADDR_172	mov rsi [rbp+var_xxx] mov rax [rbx+CONST] add rax [r12] mov [CONST_VAR] rax jmp JUMP_ADDR_175	mov rcx r12 mov rdx r10	movzx esi [rdx+CONST] mov r9 [rdx+CONST] and eax CONST cmp si CONST jz JUMP_ADDR_271	mov rdx [rcx] cmp al CONST jnz JUMP_ADDR_186	test si si jz JUMP_ADDR_186	add r9 rdx	mov esi [rbp+var_xxx] test esi esi jnz JUMP_ADDR_286	cmp r12 rcx jz JUMP_ADDR_233	movzx eax [rcx+CONST] test al CONST jnz JUMP_ADDR_233	mov rdx [r12+CONST] mov rsi cs:xxx mov r8d [r10] mov rsi [CONST_VAR] add r8 [rdx+CONST] mov rdx [r12+CONST] test al CONST jz JUMP_ADDR_290	test rsi rsi lea rax GLOBAL_VAR mov rcx [rcx+CONST] mov rdi r15 cmovz rsi rax xor eax eax mov [rbp+var_xxx] r9 call sub_xxx mov r9 [rbp+var_xxx]	call r9 mov rax [rbx+CONST] add rax [r12] jmp JUMP_ADDR_187	movzx ecx [rdx+CONST] movzx eax [rdx+CONST] cmp cx CONST jnz JUMP_ADDR_213	xor r9d r9d jmp JUMP_ADDR_214	mov rax [rbx+CONST] mov [r10+CONST] rax lea rax sub_xxx mov [r10] rax jmp JUMP_ADDR_72	cmp al CONST jnz JUMP_ADDR_85	jmp JUMP_ADDR_137	movzx eax [rdx+CONST] jmp JUMP_ADDR_224	mov edx [r12+CONST] cmp rax CONST ja JUMP_ADDR_269	lea rcx unk_xxx mov edi [rcx+rax*4] or edi r9d cmp edi edx jnz JUMP_ADDR_169	mov rdx [r12+CONST] mov r10 [r12+CONST] mov [rbp+var_xxx] rdx jmp JUMP_ADDR_171	mov eax [r12+CONST] test eax eax jnz JUMP_ADDR_81	mov rdx [r12+CONST] mov rcx [r12+CONST] mov [rbp+var_xxx] rdx jmp JUMP_ADDR_84	movzx edx [r11+CONST] mov rcx [r11+CONST] lea rax ds:xxx mov rbx rcx sub rax rdx lea rax [rcx+rax*8] cmp rcx rax jnb JUMP_ADDR_287	mov [rbp+var_xxx] r12d xor r15d r15d mov r12 r11 mov r14 CONST mov [rbp+var_xxx] r13d jmp JUMP_ADDR_248	lea rax ds:xxx add rbx CONST sub rax rdx lea rax [rcx+rax*8] cmp rbx rax jnb JUMP_ADDR_258	mov rax [rbx] and rax r14 cmp rax CONST jnz JUMP_ADDR_247	mov rdx cs:xxx mov rsi [rbx+CONST] sub rsp CONST lea rcx [rsp+CONST+var_xxx] mov rax rdx mov rdi rsi lea rsi [CONST_VAR+rdx+CONST] add rsi [rbx+CONST] neg rax and rcx CONST and rdi rax and rsi rax mov eax [rbx+CONST] mov r13 rcx sub rsi rdi add rdi [r12] mov edx eax mov [rcx+CONST] rsi shr edx CONST mov [rcx] rdi and edx CONST test al CONST jz JUMP_ADDR_251	or edx CONST	mov [r13+CONST] edx test al CONST jz JUMP_ADDR_253	or edx CONST mov [r13+CONST] edx	or edx CONST call sub_xxx test eax eax js JUMP_ADDR_294	mov [r13+CONST] r15 mov r15 r13 mov rcx [r12+CONST] movzx edx [r12+CONST] jmp JUMP_ADDR_247	test r13d r13d lea rdx GLOBAL_VAR lea rax unk_xxx cmovz rdx rax	mov rsi [r11+CONST] cmp [CONST_VAR] CONST jz JUMP_ADDR_273	lea rdi GLOBAL_VAR xor eax eax mov [rbp+var_xxx] r11 call sub_xxx mov r11 [rbp+var_xxx] jmp JUMP_ADDR_3	mov r11 r12 mov [rbp+var_xxx] r15 mov r13d [rbp+var_xxx] mov r12d [rbp+var_xxx] jmp JUMP_ADDR_4	mov edx CONST mov rdi r12 call sub_xxx	mov rbx [rbp+var_xxx] mov r12 r11	mov edx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx] call sub_xxx test eax eax js JUMP_ADDR_292	mov rbx [rbx+CONST] test rbx rbx jnz JUMP_ADDR_261	mov r11 r12 jmp JUMP_ADDR_43	mov rax [r12+CONST] test rax rax jz JUMP_ADDR_42	mov rdx [r12+CONST] xor ecx ecx mov rax [rax+CONST] mov edi CONST mov [rbp+var_xxx] r12 cmp [rdx+CONST] CONST setz cl xor edx edx lea rcx ds:xxx div rcx mov rsi rax call sub_xxx mov r11 [rbp+var_xxx] mov [r11+CONST] rax test rax rax jnz JUMP_ADDR_42	mov rax cs:xxx mov rdx [r11+CONST] mov rsi [rax] test rsi rsi jz JUMP_ADDR_289	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	mov rax [rbx+CONST] mov rsi [rbp+var_xxx] mov [CONST_VAR+CONST] rax lea rax sub_xxx mov [CONST_VAR] rax jmp JUMP_ADDR_175	cmp edx r9d jnz JUMP_ADDR_170	jmp JUMP_ADDR_242	cmp al CONST jnz JUMP_ADDR_186	jmp JUMP_ADDR_228	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax jmp JUMP_ADDR_257	mov rdi r11 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r11 call sub_xxx mov r11 [rbp+var_xxx] mov rax [rbp+var_xxx] mov r10 [rbp+var_xxx] mov rdx [r11+CONST] jmp JUMP_ADDR_97	mov rdi r11 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r11 call sub_xxx mov r11 [rbp+var_xxx] mov rax [rbp+var_xxx] mov r10 [rbp+var_xxx] mov rdx [r11+CONST] jmp JUMP_ADDR_92	mov r9d [r12+CONST] test r9d r9d jnz JUMP_ADDR_184	mov rdx [r12+CONST] mov rcx [r12+CONST] mov [rbp+var_xxx] rdx jmp JUMP_ADDR_185	lea rdx sub_xxx test cs:xxx CONST jnz JUMP_ADDR_280	test cs:xxx CONST lea rdx sub_xxx lea rcx sub_xxx cmovnz rdx rcx	mov rdi cs:xxx mov [rax+CONST] rdx test rdi rdi jz JUMP_ADDR_10	mov rsi r11 mov [rbp+var_xxx] r11 call sub_xxx mov r11 [rbp+var_xxx] test eax eax jz JUMP_ADDR_10	mov cs:xxx r11 jmp JUMP_ADDR_10	mov rdi r10 mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] mov rax [rbp+var_xxx] mov r11 [rbp+var_xxx] mov rdx [r10+CONST] jmp JUMP_ADDR_206	mov rdi r10 mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] mov rax [rbp+var_xxx] mov r11 [rbp+var_xxx] mov rdx [r10+CONST] jmp JUMP_ADDR_196	mov rax [rbx+CONST] add rax [r12] jmp JUMP_ADDR_87	mov rax [rbx+CONST] add rax [r12] jmp JUMP_ADDR_188	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_4	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rsi GLOBAL_VAR jmp JUMP_ADDR_267	test rsi rsi jz JUMP_ADDR_295	mov rcx rdx lea rdi GLOBAL_VAR mov rdx r8 xor eax eax call sub_xxx	mov r11 r12 lea rcx GLOBAL_VAR	mov rax CONST mov rsi [r11+CONST] xor edx edx mov edi fs:xxx call sub_xxx	mov r11 r12 lea rcx GLOBAL_VAR jmp JUMP_ADDR_293	lea rsi GLOBAL_VAR jmp JUMP_ADDR_291
[ph]libcap-git-setcap__dl_debug_vdprintf
push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST cmp [rdx] CONST mov [rbp+CONST_VAR] edi jz JUMP_ADDR_96	lea rax [rbp+var_xxx] mov r13d esi mov rbx rdx mov r15 rcx mov [rbp+var_xxx] rax xor r9d r9d xor r12d r12d	cmp r13d CONST jz JUMP_ADDR_22	movzx eax [rbx] test al al jz JUMP_ADDR_25	cmp al CONST jz JUMP_ADDR_25	test r13d r13d mov rdx rbx setz cl jmp JUMP_ADDR_8	movzx eax [rdx+CONST] add rdx CONST test al al jz JUMP_ADDR_10	cmp al CONST jz JUMP_ADDR_10	cmp al CONST jnz JUMP_ADDR_6	test cl cl jnz JUMP_ADDR_6	cmp r12d CONST jg JUMP_ADDR_95	mov rsi rdx movsxd rcx r12d sub rsi rbx shl rcx CONST mov [rbp+rcx+CONST_VAR] rsi test rsi rsi jz JUMP_ADDR_13	mov [rbp+rcx+CONST_VAR] rbx add r12d CONST	cmp al CONST jz JUMP_ADDR_28	cmp al CONST jz JUMP_ADDR_19	mov rbx rdx	cmp [rbx] CONST jnz JUMP_ADDR_2	movsxd r12 r12d	mov edi [rbp+CONST_VAR] lea rsi [rbp+CONST_VAR] mov rdx r12 mov eax CONST syscall lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	cmp rbx rdx jz JUMP_ADDR_80	lea eax [r12+CONST] cdqe shl rax CONST add [rbp+rax+CONST_VAR] CONST	cmp [rdx+CONST] CONST lea rbx [rdx+CONST] jz JUMP_ADDR_17	test r9d r9d jz JUMP_ADDR_76	cmp r12d CONST jg JUMP_ADDR_94	movsxd rax r12d mov rdi [rbp+var_xxx] add r12d CONST mov r13d CONST shl rax CONST mov [rbp+rax+CONST_VAR] CONST mov [rbp+rax+CONST_VAR] rdi movzx eax [rbx] test al al jnz JUMP_ADDR_4	cmp r12d CONST jg JUMP_ADDR_95	movsxd rdx r12d shl rdx CONST mov [rbp+rdx+CONST_VAR] CONST mov rdx rbx cmp al CONST jnz JUMP_ADDR_14	nop [rax+CONST]	movzx eax [rdx+CONST] cmp al CONST jz JUMP_ADDR_71	lea rbx [rdx+CONST] mov r10d CONST	mov r14 CONST cmp al CONST jz JUMP_ADDR_68	mov edx CONST cmp al CONST jz JUMP_ADDR_66	cmp al CONST jz JUMP_ADDR_34	cmp al CONST jnz JUMP_ADDR_40	movzx eax [rbx+CONST] lea rcx [rbx+CONST] cmp al CONST jz JUMP_ADDR_72	jg JUMP_ADDR_53	cmp al CONST jnz JUMP_ADDR_64	mov rbx rcx	movsxd rax r12d add r12d CONST shl rax CONST mov [rbp+rax+CONST_VAR] rbx mov [rbp+rax+CONST_VAR] CONST	add rbx CONST jmp JUMP_ADDR_16	cmp al CONST jz JUMP_ADDR_73	jg JUMP_ADDR_48	cmp al CONST jz JUMP_ADDR_38	cmp al CONST jnz JUMP_ADDR_67	mov eax [r15] cmp eax CONST ja JUMP_ADDR_51	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax mov edi [rdx] movzx eax [rbx] mov r11 rdi cmp al CONST jz JUMP_ADDR_52	sub rsp CONST mov edx CONST mov [rbp+var_xxx] r9d lea rsi [rsp+CONST+var_xxx] mov [rbp+CONST_VAR+CONST] r10b and rsi CONST add rsi CONST cmp al CONST mov eax CONST cmovnz edx eax xor ecx ecx mov [rbp+var_xxx] rsi call sub_xxx cmp r14d CONST mov rsi [rbp+var_xxx] mov r9d [rbp+var_xxx] mov rdx rax jnz JUMP_ADDR_86	movsxd rax r12d sub rsi rdx add r12d CONST shl rax CONST mov [rbp+rax+CONST_VAR] rdx mov [rbp+rax+CONST_VAR] rsi jmp JUMP_ADDR_39	cmp al CONST jz JUMP_ADDR_44	cmp al CONST jnz JUMP_ADDR_67	mov eax [r15] cmp eax CONST jbe JUMP_ADDR_45	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax mov edi [rdx] movzx eax [rbx] mov r11 rdi cmp al CONST jnz JUMP_ADDR_46	shr r11d CONST jmp JUMP_ADDR_58	cmp al CONST jnz JUMP_ADDR_61	mov eax [r15] cmp eax CONST ja JUMP_ADDR_63	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movzx eax [rbx+CONST] mov rdi [rdx] mov rbx rcx cmp al CONST jnz JUMP_ADDR_46	mov rax rdi shr rax CONST mov r11 rax	sub rsp CONST xor ecx ecx mov edx CONST mov [rbp+CONST_VAR+CONST] r11b lea rsi [rsp+CONST+var_xxx] mov [rbp+var_xxx] r9d and rsi CONST mov [rbp+CONST_VAR+CONST] r10b add rsi CONST mov [rbp+var_xxx] rsi call sub_xxx cmp r14d CONST mov rsi [rbp+var_xxx] mov r9d [rbp+var_xxx] movzx r11d [rbp+CONST_VAR+CONST] jnz JUMP_ADDR_92	test r11b r11b jz JUMP_ADDR_90	mov [rax+CONST] CONST lea rdx [rax+CONST] jmp JUMP_ADDR_47	cmp al CONST jnz JUMP_ADDR_67	mov eax [r15] cmp eax CONST jbe JUMP_ADDR_55	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_56	cmp al CONST jz JUMP_ADDR_54	jmp JUMP_ADDR_67	cmp [rbx+CONST] CONST jz JUMP_ADDR_83	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov eax [r15] cmp eax CONST ja JUMP_ADDR_81	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movzx eax [rbx+CONST] movsxd r14 [rdx] add rbx CONST jmp JUMP_ADDR_31	movzx eax [rdx+CONST] lea rbx [rdx+CONST] mov r10d CONST jmp JUMP_ADDR_30	mov rbx rcx	mov eax [r15] cmp eax CONST ja JUMP_ADDR_82	mov ecx eax add eax CONST add rcx [r15+CONST] mov [r15] eax	mov rdi [rcx] movsxd r14 r12d mov [rbp+var_xxx] edx shl r14 CONST mov [rbp+var_xxx] r9d mov [rbp+r14+CONST_VAR] rdi call sub_xxx movsxd rcx [rbp+var_xxx] mov r9d [rbp+var_xxx] cmp rcx rax mov rdx rcx cmova rcx rax cmp edx CONST cmovnz rax rcx add r12d CONST mov [rbp+r14+CONST_VAR] rax jmp JUMP_ADDR_39	call sub_xxx test eax eax js JUMP_ADDR_97	xor ecx ecx movsxd rdi eax mov edx CONST mov [rbp+var_xxx] eax lea rsi [rbp+var_xxx] call sub_xxx cmp rax [rbp+var_xxx] mov r9d [rbp+var_xxx] jbe JUMP_ADDR_79	mov rdi [rbp+var_xxx] mov esi CONST mov [rbp+var_xxx] r9d sub rax rdi mov rdx rax call sub_xxx mov r9d [rbp+var_xxx]	mov eax CONST mov [rbp+var_xxx] ax jmp JUMP_ADDR_23	movsxd rax r12d add r12d CONST shl rax CONST mov [rbp+rax+CONST_VAR] rdx mov [rbp+rax+CONST_VAR] CONST jmp JUMP_ADDR_21	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_70	mov rcx [r15+CONST] lea rax [rcx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_75	mov eax [r15] cmp eax CONST ja JUMP_ADDR_91	mov edx eax add eax CONST add rdx [r15+CONST] mov [r15] eax	movzx eax [rbx+CONST] mov edx [rdx] add rbx CONST jmp JUMP_ADDR_32	mov rax rsi movzx r10d [rbp+CONST_VAR+CONST] xor r11d r11d sub rax rdx cmp r14 rax jle JUMP_ADDR_47	mov rax rdx nop [rax+rax+CONST]	sub rax CONST mov rdx rsi mov [rax] r10b sub rdx rax cmp rdx r14 jl JUMP_ADDR_88	test r11b r11b jnz JUMP_ADDR_60	mov rdx rax jmp JUMP_ADDR_47	mov rdx [r15+CONST] lea rax [rdx+CONST] mov [r15+CONST] rax jmp JUMP_ADDR_85	mov rdx rsi movzx r10d [rbp+CONST_VAR+CONST] sub rdx rax cmp rdx r14 jge JUMP_ADDR_59	mov rdx rax jmp JUMP_ADDR_87	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor r12d r12d jmp JUMP_ADDR_18	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_sysdep_read_whole_file
endbr64 push r13 xor eax eax mov r13d edx push r12 mov r12 CONST push rbp push rbx mov rbx rsi mov esi CONST sub rsp CONST call sub_xxx test eax eax jns JUMP_ADDR_2	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	mov rsi rsp mov edi eax mov ebp eax call sub_xxx test eax eax js JUMP_ADDR_4	mov rsi [rsp+CONST+var_xxx] mov [rbx] rsi test rsi rsi jnz JUMP_ADDR_6	mov r12 CONST	mov edi ebp call sub_xxx jmp JUMP_ADDR_1	xor r9d r9d mov r8d ebp mov ecx CONST mov edx r13d xor edi edi call sub_xxx mov r12 rax jmp JUMP_ADDR_5
[ph]libcap-git-setcap__dl_debug_printf
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	lea rax [rsp+CONST+arg_xxx] lea rcx [rsp+CONST+var_xxx] mov rdx r10 mov esi CONST mov edi cs:xxx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap__dl_debug_printf_c
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	lea rax [rsp+CONST+arg_xxx] lea rcx [rsp+CONST+var_xxx] mov rdx r10 mov esi CONST mov edi cs:xxx mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap__dl_dprintf
endbr64 sub rsp CONST mov r10 rsi mov [rsp+CONST] rdx mov [rsp+CONST] rcx mov [rsp+CONST] r8 mov [rsp+CONST] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST] xmm0 movaps [rsp+CONST] xmm1 movaps [rsp+CONST] xmm2 movaps [rsp+CONST] xmm3 movaps [rsp+CONST] xmm4 movaps [rsp+CONST] xmm5 movaps [rsp+CONST] xmm6 movaps [rsp+CONST] xmm7	lea rax [rsp+CONST] lea rcx [rsp+CONST] mov rdx r10 xor esi esi mov [rsp+CONST] rax lea rax [rsp+CONST] mov [rsp+CONST] CONST mov [rsp+CONST] CONST mov [rsp+CONST] rax call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap__dl_printf
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	lea rcx [rsp+CONST+var_xxx] mov rdx r10 xor esi esi mov edi CONST lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap__dl_error_printf
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	lea rcx [rsp+CONST+var_xxx] mov rdx r10 xor esi esi mov edi CONST lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx add rsp CONST retn
[ph]libcap-git-setcap__dl_fatal_printf
endbr64 sub rsp CONST mov r10 rdi mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test al al jz JUMP_ADDR_2	movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7	mov edi CONST lea rcx [rsp+CONST+var_xxx] mov rdx r10 xor esi esi lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax call sub_xxx mov edi CONST call sub_xxx
[ph]libcap-git-setcap__dl_name_match_p
endbr64 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov rsi [CONST_VAR+CONST] call sub_xxx mov r8d eax mov eax CONST test r8d r8d jz JUMP_ADDR_6	mov rbx [rbx+CONST] test rbx rbx jnz JUMP_ADDR_4	jmp JUMP_ADDR_7	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_7	mov rsi [rbx] mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_3	mov eax CONST	add rsp CONST pop rbx pop rbp retn	add rsp CONST xor eax eax pop rbx pop rbp retn
[ph]libcap-git-setcap__dl_higher_prime_number
endbr64 lea rcx unk_xxx lea rdx [rcx+CONST] jmp JUMP_ADDR_3	mov rax rcx sub rax rdx mov rsi rax shr rax CONST sar rsi CONST add rax rsi sar rax CONST lea rax [rdx+rax*4] mov esi [rax] cmp rsi rdi jb JUMP_ADDR_5	mov rcx rax	cmp rcx rdx jnz JUMP_ADDR_1	mov eax [rcx] retn	lea rdx [rax+CONST] jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_strtoul
endbr64 movzx eax [CONST_VAR] push rbx mov r11 rsi cmp al CONST jnz JUMP_ADDR_3	nop	movzx eax [CONST_VAR+CONST] add rdi CONST cmp al CONST jz JUMP_ADDR_2	cmp al CONST jz JUMP_ADDR_2	cmp al CONST jz JUMP_ADDR_29	cmp al CONST mov ebx CONST setz al movzx eax al add rdi rax	movzx eax [CONST_VAR] lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_27	mov r9d CONST mov r10d CONST cmp al CONST jz JUMP_ADDR_21	xor r8d r8d add r10d CONST movsxd rsi r9d jmp JUMP_ADDR_13	movsx edx al cmp edx r10d ja JUMP_ADDR_14	lea ecx [rax+CONST] movsx rcx cl	mov rax rcx xor edx edx not rax div rsi cmp rax r8 jbe JUMP_ADDR_17	imul r8 rsi movzx eax [CONST_VAR+CONST] add rdi CONST add r8 rcx	cmp al CONST jg JUMP_ADDR_9	cmp r9d CONST jnz JUMP_ADDR_23	lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_19	lea ecx [rax+CONST] xor edx edx movsx rcx cl mov rax rcx not rax div rsi cmp rax r8 ja JUMP_ADDR_12	mov r8 CONST test r11 r11 jnz JUMP_ADDR_28	jmp JUMP_ADDR_26	lea edx [rax+CONST] cmp dl CONST ja JUMP_ADDR_23	lea ecx [rax+CONST] movsx rcx cl jmp JUMP_ADDR_11	movzx edx [CONST_VAR+CONST] and edx CONST cmp dl CONST jnz JUMP_ADDR_30	movzx eax [CONST_VAR+CONST] mov r9d CONST add rdi CONST jmp JUMP_ADDR_8	test r11 r11 jz JUMP_ADDR_25	mov [r11] rdi	mov rax r8 neg rax test bl bl cmovz r8 rax	mov rax r8 pop rbx retn	xor r8d r8d test r11 r11 jz JUMP_ADDR_26	mov rax r8 mov [r11] rdi pop rbx retn	add rdi CONST xor ebx ebx jmp JUMP_ADDR_6	mov r9d CONST mov r10d CONST jmp JUMP_ADDR_8
[ph]libcap-git-setcap__dl_start_profile
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov r10 cs:xxx movzx ecx [r10+CONST] mov rax [r10+CONST] lea rdx ds:xxx sub rdx rcx lea rdi [rax+rdx*8] cmp rdi rax jbe JUMP_ADDR_44	mov rbx cs:xxx xor esi esi mov rcx CONST mov r9 CONST mov r8 CONST mov r11 rbx sub rbx CONST neg r11 nop [rax+CONST]	mov rdx [rax] and rdx r9 cmp rdx r8 jnz JUMP_ADDR_4	mov rdx [rax+CONST] mov r12 rdx and r12 r11 cmp rcx r12 cmova rcx r12 add rdx [rax+CONST] add rdx rbx and rdx r11 cmp rsi rdx cmovb rsi rdx	add rax CONST cmp rdi rax ja JUMP_ADDR_2	mov r8 rcx mov rdi rsi	mov cs:xxx CONST mov rax [r10] mov cs:xxx CONST lea r13 [rax+CONST_VAR+CONST] add rcx rax and r13 CONST and rcx CONST mov rbx r13 mov cs:xxx rcx sub rbx rcx mov rcx CONST lea rdx [rbx+rbx*2] mov cs:xxx rbx shr rdx CONST mov rax rdx mul rcx shr rdx CONST cmp edx CONST ja JUMP_ADDR_18	mov cs:xxx CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST	mov rax rbx mov [rbp+var_xxx] r8 shr rax CONST mov [rbp+var_xxx+CONST] rdi mov [rbp+var_xxx] CONST mov [rbp+var_xxx+CONST] CONST mov [rbp+var_xxx+CONST] CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] eax call sub_xxx mov r14 cs:xxx xor edx edx mov [rbp+var_xxx] CONST mov [rbp+var_xxx+CONST] eax mov rax CONST mov rdi r14 mov [rbp+var_xxx+CONST] dx mov [rbp+var_xxx+CONST] rax mov [rbp+var_xxx+CONST] CONST mov [rbp+var_xxx+CONST] CONST call sub_xxx mov r15 cs:xxx mov r12 rax mov rdi r15 call sub_xxx mov rsi r14 lea rax [r12+rax+CONST] and rax CONST sub rsp rax lea r12 [rsp+CONST+var_xxx] and r12 CONST mov rdi r12 call sub_xxx mov rsi r15 mov [rax] CONST lea rdi [rax+CONST] call sub_xxx mov edx CONST mov esi CONST mov rdi r12 mov rcx CONST mov [rax+CONST] CONST mov [rax] rcx xor eax eax call sub_xxx mov r15d eax cmp eax CONST jz JUMP_ADDR_23	lea rsi [rbp+var_xxx] mov edi eax call sub_xxx test eax eax js JUMP_ADDR_20	mov eax [rbp+var_xxx] and eax CONST cmp eax CONST jnz JUMP_ADDR_20	mov r14 [rbp+var_xxx] mov rax rbx shr rax CONST mov [rbp+var_xxx] rax add r14 rax mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_38	cmp rax r14 jnz JUMP_ADDR_24	xor r9d r9d xor edi edi mov r8d r15d mov ecx CONST mov edx CONST mov rsi r14 call sub_xxx cmp rax CONST mov [rbp+var_xxx] rax jz JUMP_ADDR_53	mov edi r15d call sub_xxx mov r9 [rbp+var_xxx] mov rax [rbp+var_xxx] cmp [rbp+var_xxx] CONST lea r8 [r9+rax+CONST] lea r15 [r9+CONST] lea rax [r8+CONST] mov cs:xxx r8 mov cs:xxx rax jz JUMP_ADDR_26	mov rdx [r9] mov rax [r9+CONST] xor rdx [rbp+var_xxx] xor rax [rbp+var_xxx+CONST] or rax rdx jnz JUMP_ADDR_17	mov eax [rbp+var_xxx] cmp [r9+CONST] eax jz JUMP_ADDR_47	mov rsi r14 mov rdi r9 call sub_xxx jmp JUMP_ADDR_25	cmp edx CONST jbe JUMP_ADDR_59	mov cs:xxx CONST mov [rbp+var_xxx] CONST mov [rbp+var_xxx] CONST jmp JUMP_ADDR_8	mov rax CONST lea r13 GLOBAL_VAR	mov edi r15d mov r14d fs:xxx call sub_xxx	lea rsi [rbp+var_xxx] mov edi r14d mov edx CONST call sub_xxx mov rsi r12 mov rdi r13 mov rdx rax xor eax eax call sub_xxx lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rax CONST lea r13 GLOBAL_VAR mov r14d fs:xxx jmp JUMP_ADDR_22	mov edi r15d call sub_xxx	mov rdx cs:xxx mov rsi r12 lea rdi GLOBAL_VAR xor eax eax call sub_xxx lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	movdqa xmm0 [rbp+var_xxx] mov eax [rbp+var_xxx] mov [r9+CONST] CONST movdqa xmm1 [rbp+var_xxx] movdqa xmm2 [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [r9+CONST] eax movups [r9] xmm0 mov [r9+CONST] rdx movups [r9+CONST] xmm1 movups [r9+CONST] xmm2 mov [r8+CONST] CONST	mov rdi [rbp+var_xxx] mov esi CONST add rdi [rbp+var_xxx] mov [rbp+var_xxx] r9 mov [rbp+var_xxx] r8 call sub_xxx mov r8 [rbp+var_xxx] mov r9 [rbp+var_xxx] test rax rax mov cs:xxx rax mov rdi rax jz JUMP_ADDR_58	mov rax [rbp+var_xxx] mov cs:xxx CONST mov edx [r8] lea r9 [CONST_VAR+rax] mov eax cs:xxx mov cs:xxx r9 cmp edx eax jnb JUMP_ADDR_30	mov eax [r8]	mov cs:xxx eax test rax rax jz JUMP_ADDR_33	lea rax [rax+rax*4] lea rdx [r8+rax*4+CONST] sub r8 CONST nop [rax+CONST]	mov ecx cs:xxx mov rsi [rdx+CONST] lea eax [rcx+CONST] shr rsi CONST mov cs:xxx eax mov eax ecx lea rsi [CONST_VAR+rsi*2] shl rax CONST movzx r10d [CONST_VAR] add rax r9 mov [rax] rdx sub rdx CONST mov [rax+CONST] r10w mov [CONST_VAR] cx cmp rdx r8 jnz JUMP_ADDR_32	mov r8 cs:xxx mov ecx CONST sub r13 r8 cmp r13 [rbp+var_xxx] jbe JUMP_ADDR_37	mov rax r13 xor edx edx mov ecx CONST div [rbp+var_xxx] mov rsi rax cmp rax CONST ja JUMP_ADDR_37	cmp rax CONST jbe JUMP_ADDR_54	mov eax CONST xor edx edx div rsi mov rcx rax	mov rsi [rbp+var_xxx] mov rdi r15 mov rdx r8 call sub_xxx mov cs:xxx CONST lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rdx cs:xxx mov [rbp+var_xxx] rsp xor esi esi lea rax [rdx+CONST] mov [rbp+CONST] rdx and rax CONST sub rsp rax mov rdi rsp mov [rbp+var_xxx] rsp call sub_xxx mov rsi [rbp+CONST] xor edx edx mov edi r15d neg rsi and rsi r14 call sub_xxx cmp rax CONST jnz JUMP_ADDR_41	jmp JUMP_ADDR_45	mov rax CONST cmp fs:xxx CONST jnz JUMP_ADDR_46	mov rax cs:xxx mov rsi [rbp+var_xxx] mov edi r15d lea rdx [rax+CONST] and rdx r14 call sub_xxx cmp rax CONST jz JUMP_ADDR_40	test rax rax js JUMP_ADDR_45	mov rsp [rbp+var_xxx] jmp JUMP_ADDR_13	xor edi edi mov r8 CONST mov rcx CONST xor esi esi jmp JUMP_ADDR_6	mov rax CONST	lea r13 GLOBAL_VAR mov rsp [rbp+var_xxx] jmp JUMP_ADDR_21	mov eax [r9+CONST] test eax eax jnz JUMP_ADDR_17	mov rdx [r9+CONST] mov rax [r9+CONST] xor rdx [rbp+var_xxx] xor rax [rbp+var_xxx+CONST] or rax rdx jnz JUMP_ADDR_17	mov rdx [r9+CONST] mov rax [r9+CONST] xor rdx [rbp+var_xxx] xor rax [rbp+var_xxx+CONST] or rax rdx jnz JUMP_ADDR_17	mov rax [rbp+var_xxx] cmp [r9+CONST] rax jnz JUMP_ADDR_17	mov eax [r8+CONST] cmp eax CONST jz JUMP_ADDR_27	jmp JUMP_ADDR_17	mov rax CONST lea r13 GLOBAL_VAR jmp JUMP_ADDR_21	mov rax r13 shr rax CONST jz JUMP_ADDR_57	shr rbx CONST mov rax r13 xor edx edx div rbx	mov r13 rax xor edx edx mov eax CONST div r13 mov rcx rax jmp JUMP_ADDR_37	shl r13 CONST xor edx edx mov rax r13 div [rbp+var_xxx] jmp JUMP_ADDR_56	mov rdi r9 mov rsi r14 call sub_xxx lea rdi GLOBAL_VAR xor eax eax call sub_xxx	mov cs:xxx edx mov edx edx imul r14 rdx rdx shl rdx CONST mov [rbp+var_xxx] rdx lea rax [r14+CONST] mov [rbp+var_xxx] rax jmp JUMP_ADDR_8
[ph]libcap-git-setcap__dl_mcount
endbr64 mov ecx cs:xxx test ecx ecx jz JUMP_ADDR_31	mov rax cs:xxx sub rdi cs:xxx xor edx edx cmp rax rdi cmovbe rdi rdx sub rsi cs:xxx cmp rax rsi jbe JUMP_ADDR_31	mov ecx cs:xxx mov rax rsi push rbp push rbx shr rax cl mov rcx cs:xxx lea r9 [rcx+rax*2] movzx edx [r9] test rdx rdx jz JUMP_ADDR_7	mov r10 cs:xxx shl rdx CONST add rdx r10 mov r8 [rdx] mov rax [r8] cmp rax rdi jz JUMP_ADDR_24	movzx eax [rdx+CONST] test ax ax jnz JUMP_ADDR_29	mov rax [r8] cmp rax rdi jz JUMP_ADDR_24	lea r9 [rdx+CONST]	mov r10 cs:xxx mov eax cs:xxx mov r11d CONST mov edx [r10] cmp edx eax jnz JUMP_ADDR_14	jmp JUMP_ADDR_15	mov rbx cs:xxx lea rax [rax+rax*4] mov r8 [rbx+rax*4+CONST] mov eax r11d shr r8 CONST cmp fs:xxx CONST jz JUMP_ADDR_11	lock	xadd cs:xxx eax mov ebp cs:xxx mov [rsp+CONST+var_xxx] eax lea r8 [rcx+r8*2] mov edx [rsp+CONST+var_xxx] lea rbp [rbp+rbp*4+CONST] lea eax [rdx+CONST] lea rbx [rbx+rbp*4] mov rdx rax shl rax CONST add rax cs:xxx mov [rax] rbx movzx ebx [r8] mov [rax+CONST] bx mov [r8] dx cmp fs:xxx CONST jz JUMP_ADDR_13	lock	inc cs:xxx mov eax cs:xxx mov edx [r10] cmp edx eax jz JUMP_ADDR_15	cmp cs:xxx eax ja JUMP_ADDR_9	movzx eax [r9] test ax ax jnz JUMP_ADDR_32	mov eax CONST mov edx eax cmp fs:xxx CONST jz JUMP_ADDR_18	lock	xadd [r10] edx mov [rsp+CONST+var_xxx] edx mov edx [rsp+CONST+var_xxx] cmp cs:xxx edx jbe JUMP_ADDR_27	cmp fs:xxx CONST jz JUMP_ADDR_21	lock	xadd cs:xxx eax mov [rsp+CONST+var_xxx] eax mov eax [rsp+CONST+var_xxx] lea rcx [rdx+rdx*4] mov rdx cs:xxx add eax CONST mov [r9] ax movzx eax [r9] lea rdx [rdx+rcx*4] shl rax CONST add rax cs:xxx mov [rax] rdx mov [rdx] rdi mov [rdx+CONST] rsi mov [rdx+CONST] CONST xor edx edx mov [rax+CONST] dx cmp fs:xxx CONST jz JUMP_ADDR_23	lock	inc cs:xxx mov r8 [rax]	cmp fs:xxx CONST jz JUMP_ADDR_26	lock	inc [r8+CONST]	pop rbx pop rbp retn	mov r9 [r8] cmp r9 rdi jz JUMP_ADDR_5	shl rax CONST lea rdx [r10+rax] movzx eax [rdx+CONST] mov r8 [rdx] test ax ax jnz JUMP_ADDR_28	jmp JUMP_ADDR_5	retn	movzx edx [r9] jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_get_origin
endbr64 push r13 mov edx CONST mov eax CONST lea rdi GLOBAL_VAR push r12 push rbp push rbx sub rsp CONST mov rbp rsp mov rsi rbp syscall cmp eax CONST ja JUMP_ADDR_10	test eax eax jle JUMP_ADDR_10	movzx edx [rsp+var_xxx] cmp dl CONST jz JUMP_ADDR_10	cmp dl CONST jnz JUMP_ADDR_21	mov ecx eax cdqe add rax rbp jmp JUMP_ADDR_7	sub rax CONST lea ebx [rcx+CONST] cmp [rax] CONST jz JUMP_ADDR_19	mov ecx ebx	cmp ecx CONST jnz JUMP_ADDR_5	mov edi CONST call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_17	mov eax CONST mov [r12] ax jmp JUMP_ADDR_18	mov rbp cs:xxx test rbp rbp jz JUMP_ADDR_17	mov rdi rbp call sub_xxx lea rdi [rax+CONST] mov r13 rax call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_17	mov rdx r13 mov rsi rbp mov rdi rax call sub_xxx lea rdx [r12+CONST] cmp rax rdx ja JUMP_ADDR_15	jmp JUMP_ADDR_16	sub rax CONST cmp rax rdx jz JUMP_ADDR_16	cmp [rax+CONST] CONST jz JUMP_ADDR_14	mov [rax] CONST jmp JUMP_ADDR_18	mov r12 CONST	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 retn	add ecx CONST movsxd rdi ecx call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_17	movsxd rdx ebx mov rsi rbp mov rdi r12 call sub_xxx mov [rax] CONST jmp JUMP_ADDR_18	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_scope_free
endbr64 push r12 push rbp mov rbp rdi sub rsp CONST mov r12d fs:xxx test r12d r12d jnz JUMP_ADDR_3	call sub_xxx	add rsp CONST mov eax r12d pop rbp pop r12 retn	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_6	mov rax [r12] cmp rax CONST ja JUMP_ADDR_8	lea rdx [rax+CONST] mov [r12] rdx mov [r12+rax*8+CONST] rdi xor r12d r12d jmp JUMP_ADDR_2	mov edi CONST call sub_xxx mov cs:xxx rax test rax rax jz JUMP_ADDR_12	mov [rax+CONST] rbp xor r12d r12d mov [rax] CONST jmp JUMP_ADDR_2	call sub_xxx mov rax [r12] test rax rax jz JUMP_ADDR_11	xchg ax ax	sub rax CONST mov [r12] rax mov rdi [r12+rax*8+CONST] call sub_xxx mov rax [r12] test rax rax jnz JUMP_ADDR_10	mov r12d CONST jmp JUMP_ADDR_2	call sub_xxx mov rdi rbp mov r12d CONST call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap__dl_make_stack_executable
endbr64 mov rsi cs:xxx mov edx cs:xxx push rbx mov rbx rdi mov rdi rsi neg rdi and rdi [rbx] call sub_xxx test eax eax jnz JUMP_ADDR_2	mov [rbx] CONST pop rbx or cs:xxx CONST retn	mov rax CONST pop rbx mov eax fs:xxx retn
[ph]libcap-git-setcap__dl_runtime_profile_avx512
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax mov rbx rsp and rsp CONST sub rsp CONST mov [rbx+CONST] rsp mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rbp lea rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7 bndmov [rsp+CONST+var_xxx] bnd0 bndmov [rsp+CONST+var_xxx] bnd1 bndmov [rsp+CONST+var_xxx] bnd2 bndmov [rsp+CONST+var_xxx] bnd3 vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm1 vmovdqa64 CONST zmm2 vmovdqa64 CONST zmm3 vmovdqa64 CONST zmm4 vmovdqa64 CONST zmm5 vmovdqa64 CONST zmm6 vmovdqa64 CONST zmm7 vmovdqa [rsp+CONST+var_xxx] xmm0 vmovdqa [rsp+CONST+var_xxx] xmm1 vmovdqa [rsp+CONST+var_xxx] xmm2 vmovdqa [rsp+CONST+var_xxx] xmm3 vmovdqa [rsp+CONST+var_xxx] xmm4 vmovdqa [rsp+CONST+var_xxx] xmm5 vmovdqa [rsp+CONST+var_xxx] xmm6 vmovdqa [rsp+CONST+var_xxx] xmm7 mov rcx rsp mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] lea r8 [rbx+CONST] call sub_xxx mov r11 rax mov rax [rbx+CONST] mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] movaps xmm2 [rsp+CONST+var_xxx] movaps xmm3 [rsp+CONST+var_xxx] movaps xmm4 [rsp+CONST+var_xxx] movaps xmm5 [rsp+CONST+var_xxx] movaps xmm6 [rsp+CONST+var_xxx] movaps xmm7 [rsp+CONST+var_xxx] vpcmpeqq xmm8 xmm0 xmm0 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_2	vmovdqa [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_3	vmovdqa64 zmm0 CONST vmovdqa [rsp+CONST+var_xxx] xmm0	vpcmpeqq xmm8 xmm1 xmm1 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_5	vmovdqa [rsp+CONST+var_xxx] xmm1 jmp JUMP_ADDR_6	vmovdqa64 zmm1 CONST vmovdqa [rsp+CONST+var_xxx] xmm1	vpcmpeqq xmm8 xmm2 xmm2 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_8	vmovdqa [rsp+CONST+var_xxx] xmm2 jmp JUMP_ADDR_9	vmovdqa64 zmm2 CONST vmovdqa [rsp+CONST+var_xxx] xmm2	vpcmpeqq xmm8 xmm3 xmm3 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_11	vmovdqa [rsp+CONST+var_xxx] xmm3 jmp JUMP_ADDR_12	vmovdqa64 zmm3 CONST vmovdqa [rsp+CONST+var_xxx] xmm3	vpcmpeqq xmm8 xmm4 xmm4 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_14	vmovdqa [rsp+CONST+var_xxx] xmm4 jmp JUMP_ADDR_15	vmovdqa64 zmm4 CONST vmovdqa [rsp+CONST+var_xxx] xmm4	vpcmpeqq xmm8 xmm5 xmm5 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_17	vmovdqa [rsp+CONST+var_xxx] xmm5 jmp JUMP_ADDR_18	vmovdqa64 zmm5 CONST vmovdqa [rsp+CONST+var_xxx] xmm5	vpcmpeqq xmm8 xmm6 xmm6 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_20	vmovdqa [rsp+CONST+var_xxx] xmm6 jmp JUMP_ADDR_21	vmovdqa64 zmm6 CONST vmovdqa [rsp+CONST+var_xxx] xmm6	vpcmpeqq xmm8 xmm7 xmm7 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_23	vmovdqa [rsp+CONST+var_xxx] xmm7 jmp JUMP_ADDR_24	vmovdqa64 zmm7 CONST vmovdqa [rsp+CONST+var_xxx] xmm7	bndmov bnd0 [rsp+CONST+var_xxx] bndmov bnd1 [rsp+CONST+var_xxx] bndmov bnd2 [rsp+CONST+var_xxx] bndmov bnd3 [rsp+CONST+var_xxx] mov r10 [rbx+CONST] test r10 r10 bnd CONST	mov rcx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST	lea rsi [rbx+CONST] add r10 CONST and r10 CONST mov rcx r10 sub rsp r10 mov rdi rsp shr rcx CONST rep CONST mov rcx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] bnd CONST mov rsp [rbx+CONST] sub rsp CONST mov rcx rsp mov [rcx] rax mov [rcx+CONST] rdx movaps [rcx+CONST] xmm0 movaps [rcx+CONST] xmm1 vmovdqa64 CONST zmm0 vmovdqa64 CONST zmm1 vmovdqa [rcx+CONST] xmm0 vmovdqa [rcx+CONST] xmm1 bndmov [rcx+CONST] bnd0 bndmov [rcx+CONST] bnd1 fstp CONST fstp CONST mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov rax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx+CONST] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] vpcmpeqq xmm2 xmm0 xmm0 vpmovmskb esi xmm2 cmp esi CONST jnz JUMP_ADDR_28	vmovdqa64 zmm0 CONST	vpcmpeqq xmm2 xmm1 xmm1 vpmovmskb esi xmm2 cmp esi CONST jnz JUMP_ADDR_30	vmovdqa64 zmm1 CONST	bndmov bnd0 [rsp+CONST+arg_xxx] bndmov bnd1 [rsp+CONST+arg_xxx] fld [rsp+CONST+arg_xxx] fld CONST mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd retn
[ph]libcap-git-setcap__dl_runtime_profile_avx
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax mov rbx rsp and rsp CONST sub rsp CONST mov [rbx+CONST] rsp mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rbp lea rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7 bndmov [rsp+CONST+var_xxx] bnd0 bndmov [rsp+CONST+var_xxx] bnd1 bndmov [rsp+CONST+var_xxx] bnd2 bndmov [rsp+CONST+var_xxx] bnd3 vmovdqa [rsp+CONST+var_xxx] ymm0 vmovdqa [rsp+CONST+var_xxx] ymm1 vmovdqa [rsp+CONST+var_xxx] ymm2 vmovdqa [rsp+CONST+var_xxx] ymm3 vmovdqa [rsp+CONST+var_xxx] ymm4 vmovdqa [rsp+CONST+var_xxx] ymm5 vmovdqa [rsp+CONST+var_xxx] ymm6 vmovdqa [rsp+CONST+var_xxx] ymm7 vmovdqa [rsp+CONST+var_xxx] xmm0 vmovdqa [rsp+CONST+var_xxx] xmm1 vmovdqa [rsp+CONST+var_xxx] xmm2 vmovdqa [rsp+CONST+var_xxx] xmm3 vmovdqa [rsp+CONST+var_xxx] xmm4 vmovdqa [rsp+CONST+var_xxx] xmm5 vmovdqa [rsp+CONST+var_xxx] xmm6 vmovdqa [rsp+CONST+var_xxx] xmm7 mov rcx rsp mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] lea r8 [rbx+CONST] call sub_xxx mov r11 rax mov rax [rbx+CONST] mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] movaps xmm2 [rsp+CONST+var_xxx] movaps xmm3 [rsp+CONST+var_xxx] movaps xmm4 [rsp+CONST+var_xxx] movaps xmm5 [rsp+CONST+var_xxx] movaps xmm6 [rsp+CONST+var_xxx] movaps xmm7 [rsp+CONST+var_xxx] vpcmpeqq xmm8 xmm0 xmm0 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_2	vmovdqa [rsp+CONST+var_xxx] xmm0 jmp JUMP_ADDR_3	vmovdqa ymm0 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm0	vpcmpeqq xmm8 xmm1 xmm1 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_5	vmovdqa [rsp+CONST+var_xxx] xmm1 jmp JUMP_ADDR_6	vmovdqa ymm1 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm1	vpcmpeqq xmm8 xmm2 xmm2 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_8	vmovdqa [rsp+CONST+var_xxx] xmm2 jmp JUMP_ADDR_9	vmovdqa ymm2 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm2	vpcmpeqq xmm8 xmm3 xmm3 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_11	vmovdqa [rsp+CONST+var_xxx] xmm3 jmp JUMP_ADDR_12	vmovdqa ymm3 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm3	vpcmpeqq xmm8 xmm4 xmm4 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_14	vmovdqa [rsp+CONST+var_xxx] xmm4 jmp JUMP_ADDR_15	vmovdqa ymm4 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm4	vpcmpeqq xmm8 xmm5 xmm5 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_17	vmovdqa [rsp+CONST+var_xxx] xmm5 jmp JUMP_ADDR_18	vmovdqa ymm5 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm5	vpcmpeqq xmm8 xmm6 xmm6 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_20	vmovdqa [rsp+CONST+var_xxx] xmm6 jmp JUMP_ADDR_21	vmovdqa ymm6 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm6	vpcmpeqq xmm8 xmm7 xmm7 vpmovmskb esi xmm8 cmp esi CONST jz JUMP_ADDR_23	vmovdqa [rsp+CONST+var_xxx] xmm7 jmp JUMP_ADDR_24	vmovdqa ymm7 [rsp+CONST+var_xxx] vmovdqa [rsp+CONST+var_xxx] xmm7	bndmov bnd0 [rsp+CONST+var_xxx] bndmov bnd1 [rsp+CONST+var_xxx] bndmov bnd2 [rsp+CONST+var_xxx] bndmov bnd3 [rsp+CONST+var_xxx] mov r10 [rbx+CONST] test r10 r10 bnd CONST	mov rcx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST	lea rsi [rbx+CONST] add r10 CONST and r10 CONST mov rcx r10 sub rsp r10 mov rdi rsp shr rcx CONST rep CONST mov rcx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] bnd CONST mov rsp [rbx+CONST] sub rsp CONST mov rcx rsp mov [rcx] rax mov [rcx+CONST] rdx movaps [rcx+CONST] xmm0 movaps [rcx+CONST] xmm1 vmovdqa CONST ymm0 vmovdqa CONST ymm1 vmovdqa [rcx+CONST] xmm0 vmovdqa [rcx+CONST] xmm1 bndmov [rcx+CONST] bnd0 bndmov [rcx+CONST] bnd1 fstp CONST fstp CONST mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov rax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx+CONST] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] vpcmpeqq xmm2 xmm0 xmm0 vpmovmskb esi xmm2 cmp esi CONST jnz JUMP_ADDR_28	vmovdqa ymm0 [rsp+CONST+arg_xxx]	vpcmpeqq xmm2 xmm1 xmm1 vpmovmskb esi xmm2 cmp esi CONST jnz JUMP_ADDR_30	vmovdqa ymm1 [rsp+CONST+arg_xxx]	bndmov bnd0 [rsp+CONST+arg_xxx] bndmov bnd1 [rsp+CONST+arg_xxx] fld [rsp+CONST+arg_xxx] fld CONST mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd retn
[ph]libcap-git-setcap__dl_runtime_profile_sse
endbr64 sub rsp CONST mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax mov rbx rsp and rsp CONST sub rsp CONST mov [rbx+CONST] rsp mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rbp lea rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7 bndmov [rsp+CONST+var_xxx] bnd0 bndmov [rsp+CONST+var_xxx] bnd1 bndmov [rsp+CONST+var_xxx] bnd2 bndmov [rsp+CONST+var_xxx] bnd3 mov rcx rsp mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] lea r8 [rbx+CONST] call sub_xxx mov r11 rax mov rax [rbx+CONST] mov rdx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] movaps xmm2 [rsp+CONST+var_xxx] movaps xmm3 [rsp+CONST+var_xxx] movaps xmm4 [rsp+CONST+var_xxx] movaps xmm5 [rsp+CONST+var_xxx] movaps xmm6 [rsp+CONST+var_xxx] movaps xmm7 [rsp+CONST+var_xxx] bndmov bnd0 [rsp+CONST+var_xxx] bndmov bnd1 [rsp+CONST+var_xxx] bndmov bnd2 [rsp+CONST+var_xxx] bndmov bnd3 [rsp+CONST+var_xxx] mov r10 [rbx+CONST] test r10 r10 bnd CONST	mov rcx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST	lea rsi [rbx+CONST] add r10 CONST and r10 CONST mov rcx r10 sub rsp r10 mov rdi rsp shr rcx CONST rep CONST mov rcx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] bnd CONST mov rsp [rbx+CONST] sub rsp CONST mov rcx rsp mov [rcx] rax mov [rcx+CONST] rdx movaps [rcx+CONST] xmm0 movaps [rcx+CONST] xmm1 bndmov [rcx+CONST] bnd0 bndmov [rcx+CONST] bnd1 fstp CONST fstp CONST mov rdx [rbx+CONST] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov rax [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] movaps xmm0 [rsp+CONST+var_xxx] movaps xmm1 [rsp+CONST+var_xxx] bndmov bnd0 [rsp+CONST+var_xxx] bndmov bnd1 [rsp+CONST+var_xxx] fld CONST fld CONST mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd retn
[ph]libcap-git-setcap__dl_runtime_resolve_fxsave
endbr64 push rbx mov rbx rsp and rsp CONST sub rsp CONST mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 fxsave [rsp+CONST+var_xxx] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov r11 rax fxrstor [rsp+CONST+var_xxx] mov r9 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST
[ph]libcap-git-setcap__dl_runtime_resolve_xsave
endbr64 push rbx mov rbx rsp and rsp CONST sub rsp cs:xxx mov [rsp+CONST+var_xxx] rax mov [rsp+CONST] rcx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rsi mov [rsp+CONST+arg_xxx] rdi mov [rsp+CONST+arg_xxx] r8 mov [rsp+CONST+arg_xxx] r9 mov eax CONST xor edx edx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx xsave [rsp+CONST+arg_xxx] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov r11 rax mov eax CONST xor edx edx xrstor [rsp+CONST+arg_xxx] mov r9 [rsp+CONST+arg_xxx] mov r8 [rsp+CONST+arg_xxx] mov rdi [rsp+CONST+arg_xxx] mov rsi [rsp+CONST+arg_xxx] mov rdx [rsp+CONST+arg_xxx] mov rcx [rsp+CONST] mov rax [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST
[ph]libcap-git-setcap__dl_runtime_resolve_xsavec
endbr64 push rbx mov rbx rsp and rsp CONST sub rsp cs:xxx mov [rsp+CONST+var_xxx] rax mov [rsp+CONST] rcx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rsi mov [rsp+CONST+arg_xxx] rdi mov [rsp+CONST+arg_xxx] r8 mov [rsp+CONST+arg_xxx] r9 mov eax CONST xor edx edx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx mov [rsp+CONST+arg_xxx] rdx xsavec [rsp+CONST+arg_xxx] mov rsi [rbx+CONST] mov rdi [rbx+CONST] call sub_xxx mov r11 rax mov eax CONST xor edx edx xrstor [rsp+CONST+arg_xxx] mov r9 [rsp+CONST+arg_xxx] mov r8 [rsp+CONST+arg_xxx] mov rdi [rsp+CONST+arg_xxx] mov rsi [rsp+CONST+arg_xxx] mov rdx [rsp+CONST+arg_xxx] mov rcx [rsp+CONST] mov rax [rsp+CONST+var_xxx] mov rsp rbx mov rbx [rsp+CONST+var_xxx] add rsp CONST bnd CONST
[ph]libcap-git-setcap_length_mismatch
sub rsp CONST lea rdi GLOBAL_VAR xor eax eax call sub_xxx
[ph]libcap-git-setcap__dl_exception_create
endbr64 push r15 push r14 mov r14d CONST push r13 mov r13 rdx push r12 lea r12 unk_xxx push rbp mov rbp rdi push rbx sub rsp CONST test rsi rsi jz JUMP_ADDR_2	mov rdi rsi mov r12 rsi call sub_xxx lea r14 [rax+CONST]	mov rdi r13 call sub_xxx lea r15 [rax+CONST] lea rdi [r15+r14] call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_5	mov rdx r15 mov rsi r13 mov rdi rax call sub_xxx mov rdx r14 mov rsi r12 mov rdi rax call sub_xxx mov rdx rbx	mov [rbp+CONST] rbx mov [rbp+CONST] rax mov [rbp+CONST] rdx add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	lea rax unk_xxx lea rdx GLOBAL_VAR jmp JUMP_ADDR_4
[ph]libcap-git-setcap__dl_exception_create_format
endbr64 push r15 push r14 mov r14 rdx push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r9 test rsi rsi jz JUMP_ADDR_60	mov rdi rsi mov r13 rsi call sub_xxx mov rbx rax lea rax [rax+CONST] mov [rsp+CONST+var_xxx] rax add rbx CONST	lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax movzx eax [r14] test al al jz JUMP_ADDR_16	mov r15 [rsp+CONST+var_xxx] mov rdx r14 jmp JUMP_ADDR_6	add rbx CONST mov rbp rdx	movzx eax [rbp+CONST] lea rdx [rbp+CONST] test al al jz JUMP_ADDR_15	lea rbp [rdx+CONST] cmp al CONST jnz JUMP_ADDR_4	movzx eax [rdx+CONST] cmp al CONST jz JUMP_ADDR_35	jg JUMP_ADDR_32	cmp al CONST jz JUMP_ADDR_34	cmp al CONST jnz JUMP_ADDR_33	mov eax [rsp+CONST+var_xxx] cmp eax CONST ja JUMP_ADDR_58	mov edx eax add eax CONST mov [rsp+CONST+var_xxx] eax add rdx r15	mov rdi [rdx] call sub_xxx lea rdx [rbp+CONST] add rbx rax movzx eax [rbp+CONST] test al al jnz JUMP_ADDR_6	nop [rax]	test rbx rbx js JUMP_ADDR_57	mov rdi rbx call sub_xxx mov rbp rax test rax rax jz JUMP_ADDR_57	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST add rbx rbp mov [rax+CONST] rbp mov [rax+CONST] rbp lea rax [rsp+CONST+arg_xxx] mov [rsp+CONST+var_xxx] rax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax movzx eax [r14] test al al jnz JUMP_ADDR_22	jmp JUMP_ADDR_29	cmp rbx rbp jz JUMP_ADDR_62	mov [rbp+CONST] al mov r12 r14 add rbp CONST	movzx eax [r12+CONST] lea r14 [r12+CONST] test al al jz JUMP_ADDR_29	cmp al CONST jnz JUMP_ADDR_19	movzx eax [r14+CONST] lea r12 [r14+CONST] cmp al CONST jz JUMP_ADDR_50	jg JUMP_ADDR_36	cmp al CONST jnz JUMP_ADDR_41	cmp rbx rbp jz JUMP_ADDR_62	movzx eax [r12+CONST] mov [rbp+CONST] CONST lea r14 [r12+CONST] add rbp CONST test al al jnz JUMP_ADDR_22	nop [rax]	cmp rbx rbp jz JUMP_ADDR_62	lea rdi [rbp+CONST] mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] CONST sub rbx rdi cmp rbx rax jnz JUMP_ADDR_62	mov rsi r13 mov rdx rax call sub_xxx mov rcx [rsp+CONST+var_xxx] mov [rcx] rax add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp al CONST jz JUMP_ADDR_34	add rbx CONST jmp JUMP_ADDR_5	cmp [rdx+CONST] CONST jz JUMP_ADDR_59	add rbx CONST jmp JUMP_ADDR_5	cmp al CONST jnz JUMP_ADDR_48	mov eax [rsp+CONST+var_xxx] cmp eax CONST ja JUMP_ADDR_54	mov edx eax add eax CONST add rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax	mov edi [rdx] lea r15 [rbp+CONST] xor ecx ecx mov edx CONST mov rsi r15 call sub_xxx cmp rax rbp jz JUMP_ADDR_61	sub rax rbp mov rdi rbp mov esi CONST mov rbp r15 mov rdx rax call sub_xxx jmp JUMP_ADDR_21	cmp al CONST jnz JUMP_ADDR_49	cmp [r14+CONST] CONST jnz JUMP_ADDR_49	mov eax [rsp+CONST+var_xxx] cmp eax CONST ja JUMP_ADDR_55	mov edi eax add eax CONST add rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax	lea r15 [rbp+CONST] mov rdi [CONST_VAR] xor ecx ecx mov edx CONST mov rsi r15 call sub_xxx cmp rax rbp jz JUMP_ADDR_47	sub rax rbp mov esi CONST mov rdi rbp mov rdx rax call sub_xxx	lea r12 [r14+CONST] mov rbp r15 jmp JUMP_ADDR_21	cmp al CONST jz JUMP_ADDR_42	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	mov eax [rsp+CONST+var_xxx] cmp eax CONST ja JUMP_ADDR_56	mov edx eax add eax CONST add rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax	mov r15 [rdx] mov rdi r15 call sub_xxx mov rdx rax mov rax rbx sub rax rbp cmp rax rdx jb JUMP_ADDR_62	mov rdi rbp mov rsi r15 call sub_xxx mov rbp rax jmp JUMP_ADDR_21	mov rdx [rsp+CONST+var_xxx] lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_39	mov rdi [rsp+CONST+var_xxx] lea rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_45	mov rdx [rsp+CONST+var_xxx] lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_52	mov rax [rsp+CONST+var_xxx] lea rcx unk_xxx mov [rax] rcx lea rcx GLOBAL_VAR mov [rax+CONST] rcx mov [rax+CONST] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx [rsp+CONST+var_xxx] lea rax [rdx+CONST] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_13	add rbx CONST lea rbp [rdx+CONST] jmp JUMP_ADDR_5	mov [rsp+CONST+var_xxx] CONST mov ebx CONST lea r13 unk_xxx jmp JUMP_ADDR_2	mov rbp r15 jmp JUMP_ADDR_21	call sub_xxx
[ph]libcap-git-setcap__dl_exception_free
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR+CONST] call sub_xxx mov [rbx] CONST mov [rbx+CONST] CONST mov [rbx+CONST] CONST pop rbx retn
[ph]libcap-git-setcap___thread_gscope_wait
endbr64 push r14 push r13 push r12 push rbp push rbx mov eax fs:xxx test eax eax jnz JUMP_ADDR_30	mov edx CONST cmpxchg cs:xxx edx	mov r8 cs:xxx lea rbp GLOBAL_VAR mov rbx fs:xxx cmp r8 rbp jz JUMP_ADDR_14	mov r14d CONST mov r13d CONST mov r9d CONST mov r12d CONST	lea rax [r8+CONST] cmp rbx rax jz JUMP_ADDR_13	mov edx [r8+CONST] test edx edx jz JUMP_ADDR_13	lea rdi [r8+CONST] mov eax r14d lock CONST r13d jz JUMP_ADDR_9	jmp JUMP_ADDR_13	cmp [r8+CONST] CONST jnz JUMP_ADDR_13	xor r10d r10d mov edx CONST mov esi CONST mov eax r9d syscall cmp rax CONST jbe JUMP_ADDR_8	add eax CONST cmp eax CONST ja JUMP_ADDR_12	bt r12 rax jb JUMP_ADDR_8	lea rdi GLOBAL_VAR call sub_xxx	mov r8 [r8] cmp r8 rbp jnz JUMP_ADDR_4	mov r8 cs:xxx lea rbp GLOBAL_VAR cmp r8 rbp jz JUMP_ADDR_27	mov r14d CONST mov r13d CONST mov r9d CONST mov r12d CONST nop [rax+rax+CONST]	lea rax [r8+CONST] cmp rbx rax jz JUMP_ADDR_26	mov eax [r8+CONST] test eax eax jz JUMP_ADDR_26	lea rdi [r8+CONST] mov eax r14d lock CONST r13d jz JUMP_ADDR_21	jmp JUMP_ADDR_26	cmp [r8+CONST] CONST jnz JUMP_ADDR_26	xor r10d r10d mov edx CONST mov esi CONST mov eax r9d syscall cmp rax CONST jbe JUMP_ADDR_20	add eax CONST cmp eax CONST ja JUMP_ADDR_12	bt r12 rax jnb JUMP_ADDR_12	cmp [r8+CONST] CONST jz JUMP_ADDR_21	nop [rax+CONST]	mov r8 [r8] cmp r8 rbp jnz JUMP_ADDR_16	mov eax fs:xxx test eax eax jnz JUMP_ADDR_32	sub cs:xxx CONST	pop rbx pop rbp pop r12 pop r13 pop r14 retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_29	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall jmp JUMP_ADDR_29
[ph]libcap-git-setcap__dl_cache_libcmp
endbr64 mov rcx rsi	movzx edx [CONST_VAR] test dl dl jz JUMP_ADDR_6	movsx r8d [rcx] lea eax [rdx+CONST] lea esi [r8+CONST] cmp al CONST jbe JUMP_ADDR_7	cmp sil CONST jbe JUMP_ADDR_16	cmp dl r8b jnz JUMP_ADDR_17	movzx edx [CONST_VAR+CONST] add rdi CONST add rcx CONST test dl dl jnz JUMP_ADDR_2	movsx eax [rcx] neg eax retn	cmp sil CONST ja JUMP_ADDR_18	movsx edx [CONST_VAR+CONST] lea r8 [CONST_VAR+CONST] movsx eax al lea r9 [rcx+CONST] movsx esi sil lea edi [rdx+CONST] cmp dil CONST mov rdi r8 ja JUMP_ADDR_11	nop [rax]	add rdi CONST lea eax [rax+rax*4] lea eax [rdx+rax*2+CONST] movsx edx [CONST_VAR] lea r8d [rdx+CONST] cmp r8b CONST jbe JUMP_ADDR_10	movsx edx [rcx+CONST] lea ecx [rdx+CONST] cmp cl CONST mov rcx r9 ja JUMP_ADDR_14	nop	add rcx CONST lea esi [CONST_VAR+rsi*4] lea esi [rdx+rsi*2+CONST] movsx edx [rcx] lea r8d [rdx+CONST] cmp r8b CONST jbe JUMP_ADDR_13	cmp esi eax jz JUMP_ADDR_1	sub eax esi retn	mov eax CONST retn	movsx eax dl sub eax r8d retn	mov eax CONST retn
[ph]libcap-git-setcap_search_cache
push r15 mov r15 rdi push r14 push r13 push r12 push rbp mov rbp r9 push rbx mov ebx ecx sub rsp CONST mov r12 cs:xxx mov [rsp+CONST+var_xxx] esi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r8d test r12 r12 jz JUMP_ADDR_36	lea rsi GLOBAL_VAR mov rdi r12 call sub_xxx mov rdx CONST mov [rsp+CONST+var_xxx] rdx test eax eax jz JUMP_ADDR_3	lea rsi GLOBAL_VAR mov rdi r12 call sub_xxx mov rdx CONST test eax eax mov rax CONST cmovnz rax rdx mov [rsp+CONST+var_xxx] rax	xor edx edx lea rsi [rsp+CONST+var_xxx] mov edi CONST call sub_xxx mov rax [rsp+CONST+var_xxx] sub ebx CONST mov r11d ebx mov [rsp+CONST+var_xxx] rax mov rax cs:xxx mov [rsp+CONST+var_xxx] rax js JUMP_ADDR_10	mov ebx [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] xor r13d r13d jmp JUMP_ADDR_6	lea r11d [r10+CONST] cmp r11d r13d jl JUMP_ADDR_10	lea r10d [r13+r11+CONST] sar r10d CONST movsxd r14 r10d mov rax r14 imul rax rbx mov esi [r12+rax+CONST] cmp esi [rsp+CONST+var_xxx] jnb JUMP_ADDR_10	add rsi r15 mov rdi rbp call sub_xxx test eax eax jz JUMP_ADDR_11	jns JUMP_ADDR_5	lea r13d [r10+CONST] cmp r11d r13d jge JUMP_ADDR_6	xor r12d r12d jmp JUMP_ADDR_35	mov r12 r14 mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r10d mov r14d r10d sub r12 CONST imul r12 rbx lea r13 [rax+r12+CONST] mov r10 r13 mov r13d [rsp+CONST+var_xxx] jmp JUMP_ADDR_15	mov esi [r10] lea r12d [r14+CONST] cmp r13d esi jbe JUMP_ADDR_16	add rsi r15 mov rdi rbp sub r10 rbx call sub_xxx test eax eax jnz JUMP_ADDR_16	mov r14d r12d	test r14d r14d jnz JUMP_ADDR_12	mov rdx [rsp+CONST+var_xxx] and rdx [rsp+CONST+var_xxx] movsxd rcx r14d xor r12d r12d imul rcx rbx mov r13 [rsp+CONST+var_xxx] mov r10d [rsp+CONST+var_xxx] mov rax CONST or rax rdx mov [rsp+CONST+var_xxx] r12 not rax mov [rsp+CONST+var_xxx] rax mov eax cs:xxx add r13 rcx mov r12 r13 mov r13 rbp mov ebp r11d mov r11d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax mov eax cs:xxx mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_18	add r14d CONST add r12 rbx cmp r14d ebp jg JUMP_ADDR_34	cmp r14d r10d jle JUMP_ADDR_21	mov esi [r12+CONST] cmp esi r11d jnb JUMP_ADDR_34	add rsi r15 mov rdi r13 call sub_xxx test eax eax jnz JUMP_ADDR_34	cmp [r12] CONST jnz JUMP_ADDR_17	mov eax [r12+CONST] cmp eax r11d jnb JUMP_ADDR_17	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_26	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_17	mov r12 [rsp+CONST+var_xxx] add rax r15 cmp [rsp+CONST+var_xxx] CONST cmovnz r12 rax jmp JUMP_ADDR_35	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_32	mov rsi [r12+CONST] test [rsp+CONST+var_xxx] rsi jnz JUMP_ADDR_17	mov ecx [rsp+CONST+var_xxx] test ecx ecx jz JUMP_ADDR_30	cmp ecx [r12+CONST] jb JUMP_ADDR_17	mov rdx CONST and rsi rdx jz JUMP_ADDR_32	cmp rsi [rsp+CONST+var_xxx] jnz JUMP_ADDR_17	add rax r15 cmp [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_17	nop [rax+rax+CONST]	mov r12 [rsp+CONST+var_xxx]	add rsp CONST mov rax r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap__dl_load_cache_lookup
endbr64 push rbp mov r9 rdi mov rbp rsp push r12 sub rsp CONST test cs:xxx CONST jnz JUMP_ADDR_31	mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_14	cmp rdi CONST jz JUMP_ADDR_13	mov rsi cs:xxx	mov r10 cs:xxx cmp r10 CONST jz JUMP_ADDR_9	mov ecx [r10+CONST] lea rdx [r10+CONST] mov r8d CONST mov rdi r10 call sub_xxx mov r12 rax	test cs:xxx CONST jnz JUMP_ADDR_32	test r12 r12 jz JUMP_ADDR_13	mov rdi r12 call sub_xxx mov rsi r12 lea rdx [rax+CONST] add rax CONST and rax CONST sub rsp rax lea rdi [rsp+CONST+var_xxx] and rdi CONST call sub_xxx mov rdi rax call sub_xxx mov r12 [rbp+var_xxx] leave retn	mov eax [CONST_VAR+CONST] lea rdx [CONST_VAR+CONST] mov r8d CONST mov rcx rax lea rax [rax+rax*2] lea rax ds:xxx add rdi rax sub esi eax call sub_xxx mov r12 rax jmp JUMP_ADDR_6	cmp rsi CONST ja JUMP_ADDR_22	call sub_xxx	mov cs:xxx CONST	mov r12 [rbp+var_xxx] xor eax eax leave retn	lea rdi GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR mov [rbp+CONST] r9 call sub_xxx mov rdi rax cmp rax CONST jz JUMP_ADDR_12	mov rsi cs:xxx mov r9 [rbp+CONST] cmp rsi CONST jbe JUMP_ADDR_10	mov rax CONST xor rax [CONST_VAR+CONST] mov rdx CONST xor rdx [CONST_VAR] or rax rdx jnz JUMP_ADDR_22	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_22	mov rcx CONST lea rdx [CONST_VAR+CONST] mov rax rdx mul rcx mov eax [CONST_VAR+CONST] shr rdx CONST cmp rdx rax jb JUMP_ADDR_22	movzx eax [CONST_VAR+CONST] test al al jz JUMP_ADDR_34	and eax CONST cmp al CONST jz JUMP_ADDR_34	call sub_xxx mov cs:xxx CONST jmp JUMP_ADDR_12	mov rax CONST cmp [CONST_VAR] rax jnz JUMP_ADDR_11	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_11	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_11	lea rdx [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] mov r8 CONST mov rax rdx mul r8 shr rdx CONST cmp rdx rcx jb JUMP_ADDR_11	lea rax [rcx+rcx*2] mov cs:xxx rdi lea rax ds:xxx and rax CONST lea rdx [CONST_VAR+rax] add rax CONST mov cs:xxx rdx cmp rsi rax jb JUMP_ADDR_30	mov rax CONST xor rax [rdx+CONST] mov rcx CONST xor rcx [rdx] or rax rcx jnz JUMP_ADDR_30	cmp [rdx+CONST] CONST jz JUMP_ADDR_35	nop [rax]	mov cs:xxx CONST jmp JUMP_ADDR_4	mov [rbp+CONST] rdi lea rsi GLOBAL_VAR xor eax eax lea rdi GLOBAL_VAR call sub_xxx mov r9 [rbp+CONST] jmp JUMP_ADDR_1	test r12 r12 jz JUMP_ADDR_13	mov rsi r12 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_8	mov cs:xxx rdi mov cs:xxx rdi jmp JUMP_ADDR_4	movzx eax [rdx+CONST] test al al jz JUMP_ADDR_4	and eax CONST cmp al CONST jz JUMP_ADDR_4	mov [rbp+CONST] r9 mov cs:xxx CONST mov cs:xxx CONST call sub_xxx mov rdi cs:xxx mov r9 [rbp+CONST] test rdi rdi jnz JUMP_ADDR_2	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_unload_cache
endbr64 mov rdi cs:xxx lea rax [CONST_VAR+CONST] cmp rax CONST jbe JUMP_ADDR_2	retn	sub rsp CONST mov rsi cs:xxx call sub_xxx mov cs:xxx CONST add rsp CONST retn
[ph]libcap-git-setcap__dl_tlsdesc_return
endbr64 mov rax [rax+CONST] retn
[ph]libcap-git-setcap__dl_tlsdesc_undefweak
endbr64 mov rax [rax+CONST] sub rax fs:xxx retn
[ph]libcap-git-setcap__dl_tlsdesc_resolve_rela
endbr64 sub rsp CONST mov [rsp] rax mov [rsp+CONST] rdi mov rdi rax mov [rsp+CONST] rsi mov rsi [rsp+CONST] mov [rsp+CONST] r8 mov [rsp+CONST] r9 mov [rsp+CONST] r10 mov [rsp+CONST] r11 mov [rsp+CONST] rdx mov [rsp+CONST] rcx call sub_xxx mov rax [rsp] mov rdi [rsp+CONST] mov rsi [rsp+CONST] mov r8 [rsp+CONST] mov r9 [rsp+CONST] mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov rdx [rsp+CONST] mov rcx [rsp+CONST] add rsp CONST jmp UNK_ADDR
[ph]libcap-git-setcap__dl_tlsdesc_resolve_hold
endbr64 sub rsp CONST mov [rsp] rax mov [rsp+CONST] rdi mov rdi rax mov [rsp+CONST] rsi lea rsi loc_xxx mov [rsp+CONST] r8 mov [rsp+CONST] r9 mov [rsp+CONST] r10 mov [rsp+CONST] r11 mov [rsp+CONST] rdx	mov [rsp+CONST] rcx call sub_xxx mov rax [rsp] mov rdi [rsp+CONST] mov rsi [rsp+CONST] mov r8 [rsp+CONST] mov r9 [rsp+CONST] mov r10 [rsp+CONST] mov r11 [rsp+CONST] mov rdx [rsp+CONST] mov rcx [rsp+CONST] add rsp CONST jmp UNK_ADDR
[ph]libcap-git-setcap_do_dlopen
endbr64 push rbx mov rdx [CONST_VAR+CONST] mov rbx rdi mov rcx CONST mov esi [CONST_VAR+CONST] mov r9 cs:xxx mov r8d cs:xxx mov rdi [CONST_VAR] sub rsp CONST push cs:xxx call sub_xxx mov [rbx+CONST] rax pop rax pop rdx pop rbx retn
[ph]libcap-git-setcap_dlerror_run
sub rsp CONST mov rcx rdi mov r8 rsi mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jnz JUMP_ADDR_5	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_4	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST retn	mov eax CONST nop [rax]	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_2	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax call sub_xxx mov eax [rsp+CONST+var_xxx] jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___libc_dlsym
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] rsi mov rsi rsp call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_6	cmp [rax+CONST] CONST jz JUMP_ADDR_8	mov rcx [rsp+CONST+var_xxx] xor edx edx test rcx rcx jz JUMP_ADDR_5	mov rdx [rcx]	add rdx [rax+CONST] mov rax rdx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST retn	xor edx edx jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___libc_dlvsym
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rsi movzx esi [rdx] mov [rsp+CONST+var_xxx] rdi mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] CONST test rsi rsi jz JUMP_ADDR_4	mov rcx rdx movzx edx [rdx+CONST] test dl dl jz JUMP_ADDR_12	movzx eax dl movzx edx [rcx+CONST] shl rsi CONST add rax rsi test dl dl jnz JUMP_ADDR_13	nop [rax+rax+CONST]	mov rsi rsp lea rdi sub_xxx mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] CONST call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_10	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_10	cmp [rax+CONST] CONST jz JUMP_ADDR_19	mov rcx [rsp+CONST+var_xxx] xor edx edx test rcx rcx jz JUMP_ADDR_9	mov rdx [rcx]	add rdx [rax+CONST] mov rax rdx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_20	add rsp CONST retn	movzx eax sil jmp JUMP_ADDR_4	shl rax CONST add rax rdx movzx edx [rcx+CONST] test dl dl jz JUMP_ADDR_4	shl rax CONST add rax rdx movzx edx [rcx+CONST] test dl dl jz JUMP_ADDR_4	shl rax CONST lea rsi [rcx+CONST] add rax rdx movzx edx [rcx+CONST] test dl dl jz JUMP_ADDR_4	nop [rax]	shl rax CONST add rsi CONST add rax rdx mov rdx rax shr rdx CONST and edx CONST xor rax rdx movzx edx [CONST_VAR] test dl dl jnz JUMP_ADDR_17	and eax CONST jmp JUMP_ADDR_4	xor edx edx jmp JUMP_ADDR_9	call sub_xxx
[ph]libcap-git-setcap_do_dlsym_private
endbr64 push rbx lea rdx [CONST_VAR+CONST] mov rbx rdi xor r9d r9d sub rsp CONST mov rsi [CONST_VAR] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax lea rax GLOBAL_VAR mov [CONST_VAR+CONST] CONST mov rdi [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] CONST mov rcx [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax mov rax CONST mov [rsp+CONST+var_xxx] rax push CONST push CONST lea r8 [rsp+CONST+var_xxx] call sub_xxx mov [rbx+CONST] rax pop rax pop rdx mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_2	add rsp CONST pop rbx retn	call sub_xxx
[ph]libcap-git-setcap_do_dlsym
endbr64 push rbx lea rdx [CONST_VAR+CONST] mov rsi [CONST_VAR] mov rbx rdi mov [CONST_VAR+CONST] CONST mov rdi [CONST_VAR+CONST] xor r9d r9d xor r8d r8d push CONST lea rcx [CONST_VAR+CONST] push CONST call sub_xxx mov [rbx+CONST] rax pop rax pop rdx pop rbx retn
[ph]libcap-git-setcap_do_dlvsym
endbr64 push rbx lea rdx [CONST_VAR+CONST] mov rsi [CONST_VAR] mov rbx rdi mov [CONST_VAR+CONST] CONST mov rdi [CONST_VAR+CONST] lea r8 [rbx+CONST] xor r9d r9d push CONST lea rcx [CONST_VAR+CONST] push CONST call sub_xxx mov [rbx+CONST] rax pop rax pop rdx pop rbx retn
[ph]libcap-git-setcap_do_dlclose
endbr64 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___libc_dlclose
endbr64 sub rsp CONST mov r8 rdi lea rcx sub_xxx mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax lea rdx [rsp+CONST+var_xxx] lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST lea rdi [rsp+CONST+var_xxx] call sub_xxx test eax eax jnz JUMP_ADDR_5	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_4	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_7	add rsp CONST retn	mov eax CONST nop [rax]	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_2	mov rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax call sub_xxx mov eax [rsp+CONST+var_xxx] jmp JUMP_ADDR_2	call sub_xxx
[ph]libcap-git-setcap___libc_dlsym_private
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] rsi mov rsi rsp call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_6	cmp [rax+CONST] CONST jz JUMP_ADDR_8	mov rcx [rsp+CONST+var_xxx] xor edx edx test rcx rcx jz JUMP_ADDR_5	mov rdx [rcx]	add rdx [rax+CONST] mov rax rdx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_9	add rsp CONST retn	xor edx edx jmp JUMP_ADDR_5	call sub_xxx
[ph]libcap-git-setcap___libc_dlopen_mode
endbr64 push rbp sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov rax [rsp+CONST] mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] esi mov rsi rsp mov [rsp+CONST+var_xxx] rax call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_6	mov rbp [rsp+CONST+var_xxx] lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_3	lea rcx off_xxx mov [rax] rcx	lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_5	lea rcx off_xxx mov [rax] rcx	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rax [rsp+CONST+var_xxx]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_8	add rsp CONST pop rbp retn	call sub_xxx
[ph]libcap-git-setcap___libc_register_dl_open_hook
endbr64 push rbp lea rsi GLOBAL_VAR mov rbp rdi call sub_xxx test rax rax jz JUMP_ADDR_2	lea rdx off_xxx mov [rax] rdx	lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test rax rax jz JUMP_ADDR_4	lea rcx off_xxx mov [rax] rcx	pop rbp retn
[ph]libcap-git-setcap___mpn_cmp
endbr64 sub rdx CONST jns JUMP_ADDR_3	jmp JUMP_ADDR_5	sub rdx CONST jb JUMP_ADDR_5	mov rax [CONST_VAR+rdx*8] mov rcx [CONST_VAR+rdx*8] cmp rax rcx jz JUMP_ADDR_2	cmp rcx rax sbb eax eax and eax CONST sub eax CONST retn	xor eax eax retn
[ph]libcap-git-setcap___mpn_divrem
endbr64 push r15 push r14 push r13 mov r13 rdi push r12 push rbp push rbx mov rbx rcx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov rsi rdx cmp r9 CONST jz JUMP_ADDR_19	mov r15 r9 cmp r9 CONST jz JUMP_ADDR_32	test r9 r9 jz JUMP_ADDR_31	mov [rsp+CONST+var_xxx] CONST mov rax rcx sub rax r9 lea r14 [rdx+rax*8] lea rax ds:xxx lea rdi [rax+CONST] lea rsi [rax+CONST] mov [rsp+CONST+var_xxx] rax mov rbp [r8+rax+CONST] mov r12 [r8+rax+CONST] lea rax [r14+CONST_VAR] mov [rsp+CONST+var_xxx] rdi mov rcx [rax] mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rax cmp rbp rcx jbe JUMP_ADDR_52	mov rax [rsp+CONST+var_xxx] lea r11 [rbx+rax] sub r11 r15 sub r11 CONST js JUMP_ADDR_27	lea rax [r15+CONST] mov [rsp+CONST+var_xxx] r13 mov r13 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r15 mov r15 r12 mov r12 r14 mov r14 rbp mov [rsp+CONST+var_xxx] rax mov rbp r11 mov [rsp+CONST+var_xxx] r8 jmp JUMP_ADDR_9	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rcx rbx mov rdi r12 call sub_xxx cmp [rsp+CONST+var_xxx] rax jz JUMP_ADDR_8	mov rcx [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rsi r12 mov rdi r12 sub rbx CONST call sub_xxx	mov rax [rsp+CONST+var_xxx] mov [rax+rbp*8] rbx mov rax [rsp+CONST+var_xxx] mov rcx [rax] sub rbp CONST jb JUMP_ADDR_27	cmp [rsp+CONST+var_xxx] rbp jg JUMP_ADDR_28	mov rax [rsp+CONST+var_xxx] sub r12 CONST mov rax [r12+rax] mov [rsp+CONST+var_xxx] rax mov rax [rsp+CONST+var_xxx] add rax r12 mov [rsp+CONST+var_xxx] rax	mov rbx CONST cmp r14 rcx jz JUMP_ADDR_6	mov rax [rsp+CONST+var_xxx] mov rdx rcx mov rax [rax] mov [rsp+CONST+var_xxx] rax div r14 mov rbx rax mov rcx rdx mov rax r15 mul rbx jmp JUMP_ADDR_14	cmp rax r15 sbb rdx CONST sub rax r15	cmp rdx rcx ja JUMP_ADDR_17	jnz JUMP_ADDR_6	cmp [r12+r13] rax jnb JUMP_ADDR_6	sub rbx CONST add rcx r14 jnb JUMP_ADDR_13	jmp JUMP_ADDR_6	mov rcx [r8] mov rdx [rdx+rbx*8+CONST] mov [rsp+CONST+var_xxx] CONST cmp rcx rdx jbe JUMP_ADDR_48	mov rdi rbx sub rdi CONST js JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] lea rax [rax+rbx+CONST] lea r8 [r13+rax*8+CONST] nop [rax+rax+CONST]	mov rax [CONST_VAR+rdi*8] sub rdi CONST sub r8 CONST div rcx mov [r8+CONST] rax cmp rdi CONST jnz JUMP_ADDR_22	mov rax [rsp+CONST+var_xxx] sub rax CONST js JUMP_ADDR_26	lea rdi [r13+rax*8+CONST] xor r8d r8d nop [rax+CONST]	mov rax r8 div rcx mov [CONST_VAR] rax mov rax rdi sub rdi CONST cmp r13 rax jnz JUMP_ADDR_25	mov [CONST_VAR] rdx	mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov rax [rax] mov [rsp+CONST+var_xxx] rax js JUMP_ADDR_30	mov rdx [rsp+CONST+var_xxx] lea rdi [r12+CONST] mov rsi r12 mov [rsp+CONST+var_xxx] rcx call sub_xxx mov rcx [rsp+CONST+var_xxx]	mov [r12] CONST jmp JUMP_ADDR_11	ud2	lea r10 [rdx+rcx*8+CONST] mov rdi [r8+CONST] mov r8 [r8] mov [rsp+CONST+var_xxx] CONST mov rcx [r10+CONST] mov rdx [r10] cmp rdi rcx jbe JUMP_ADDR_49	mov rbp [rsp+CONST+var_xxx] lea r11 [rbp+rbx+CONST] test r11 r11 js JUMP_ADDR_46	mov rbx r8 neg rbx jmp JUMP_ADDR_38	mov r9 [r10+CONST] sub r10 CONST cmp rdi rcx jnz JUMP_ADDR_40	add rdx rdi mov rcx rdx jnb JUMP_ADDR_47	mov rax CONST sub rcx r8 mov rdx r9 mov [r13+r11*8+CONST] rax add rdx r8 adc rcx CONST sub r11 CONST jb JUMP_ADDR_46	cmp rbp r11 jle JUMP_ADDR_35	mov [r10] CONST xor r9d r9d cmp rdi rcx jz JUMP_ADDR_36	mov r12 rdx mov rdx rcx mov rax r12 div rdi mov r12 rax mov rcx rdx mov rax r8 mul r12 mov rsi rax mov rax r12 nop [rax+rax+CONST]	cmp rdx rcx ja JUMP_ADDR_44	jnz JUMP_ADDR_45	cmp rsi r9 jbe JUMP_ADDR_45	sub rax CONST sub rsi r8 sbb rdx CONST add rcx rdi jnb JUMP_ADDR_41	sub r9 rsi sbb rcx rdx mov [r13+r11*8+CONST] rax mov rdx r9 sub r11 CONST jnb JUMP_ADDR_38	mov [r10+CONST] rcx mov [r10] rdx jmp JUMP_ADDR_27	cmp r8 CONST mov rdx r8 mov rsi rbx mov rax CONST adc rdx CONST jmp JUMP_ADDR_41	mov [rsp+CONST+var_xxx] CONST sub rdx rcx jmp JUMP_ADDR_20	jb JUMP_ADDR_51	cmp r8 rdx ja JUMP_ADDR_33	mov [rsp+CONST+var_xxx] CONST sub rdx r8 sbb rcx rdi jmp JUMP_ADDR_33	jb JUMP_ADDR_54	mov rsi r8 lea rdx [r9+CONST] mov rdi r14 mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] test eax eax js JUMP_ADDR_4	mov rcx r15 mov rdx r8 mov rsi r14 mov rdi r14 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov rax [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov rcx [rax] jmp JUMP_ADDR_4
[ph]libcap-git-setcap___mpn_lshift
endbr64 lea rdi [CONST_VAR+rdx*8+CONST] lea rsi [CONST_VAR+rdx*8+CONST] mov eax edx and eax CONST jnz JUMP_ADDR_2	mov r10 [CONST_VAR] mov r11 [CONST_VAR+CONST] xor eax eax shld rax r10 r10 mov r8 [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] sub rdx CONST jmp JUMP_ADDR_15	cmp eax CONST jnb JUMP_ADDR_6	mov r9 [CONST_VAR] xor eax eax shld rax r9 r9 sub rdx CONST jb JUMP_ADDR_5	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jmp JUMP_ADDR_14	shl r9 cl mov [CONST_VAR] r9 retn	jnz JUMP_ADDR_10	mov r8 [CONST_VAR] mov r9 [CONST_VAR+CONST] xor eax eax shld rax r8 r8 sub rdx CONST jb JUMP_ADDR_9	mov r10 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jmp JUMP_ADDR_13	shld r8 r9 r9 mov [CONST_VAR] r8 shl r9 cl mov [CONST_VAR+CONST] r9 retn	mov r11 [CONST_VAR] mov r8 [CONST_VAR+CONST] xor eax eax shld rax r11 r11 mov r9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST jb JUMP_ADDR_16	nop [rax+rax+CONST]	shld r11 r8 r8 mov r10 [CONST_VAR] mov [CONST_VAR] r11	shld r8 r9 r9 mov r11 [CONST_VAR+CONST] mov [CONST_VAR+CONST] r8	shld r9 r10 r10 mov r8 [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9	shld r10 r11 r11 mov r9 [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 add rsi CONST lea rdi [CONST_VAR+CONST] sub rdx CONST jnb JUMP_ADDR_12	shld r11 r8 r8 mov [CONST_VAR] r11 shld r8 r9 r9 mov [CONST_VAR+CONST] r8 shl r9 cl mov [CONST_VAR+CONST] r9 retn
[ph]libcap-git-setcap___mpn_rshift
endbr64 mov eax edx and eax CONST jnz JUMP_ADDR_2	mov r10 [CONST_VAR] mov r11 [CONST_VAR+CONST] xor eax eax shrd rax r10 r10 mov r8 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] sub rdx CONST jmp JUMP_ADDR_15	cmp eax CONST jnb JUMP_ADDR_6	mov r9 [CONST_VAR] xor eax eax shrd rax r9 r9 sub rdx CONST jb JUMP_ADDR_5	mov r10 [CONST_VAR+CONST] mov r11 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jmp JUMP_ADDR_14	shr r9 cl mov [CONST_VAR] r9 retn	jnz JUMP_ADDR_10	mov r8 [CONST_VAR] mov r9 [CONST_VAR+CONST] xor eax eax shrd rax r8 r8 sub rdx CONST jb JUMP_ADDR_9	mov r10 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] lea rdi [CONST_VAR+CONST] jmp JUMP_ADDR_13	shrd r8 r9 r9 mov [CONST_VAR] r8 shr r9 cl mov [CONST_VAR+CONST] r9 retn	mov r11 [CONST_VAR] mov r8 [CONST_VAR+CONST] xor eax eax shrd rax r11 r11 mov r9 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] sub rdx CONST jb JUMP_ADDR_16	nop [rax+rax+CONST]	shrd r11 r8 r8 mov r10 [CONST_VAR+CONST] mov [CONST_VAR] r11	shrd r8 r9 r9 mov r11 [CONST_VAR] mov [CONST_VAR+CONST] r8	shrd r9 r10 r10 mov r8 [CONST_VAR+CONST] mov [CONST_VAR+CONST] r9	shrd r10 r11 r11 mov r9 [CONST_VAR+CONST] mov [CONST_VAR+CONST] r10 add rsi CONST lea rdi [CONST_VAR+CONST] sub rdx CONST jnb JUMP_ADDR_12	shrd r11 r8 r8 mov [CONST_VAR] r11 shrd r8 r9 r9 mov [CONST_VAR+CONST] r8 shr r9 cl mov [CONST_VAR+CONST] r9 retn
[ph]libcap-git-setcap___mpn_mul
endbr64 push rbp mov rbp rsp push r15 mov r15 rsi push r14 push r13 mov r13 rdx push r12 push rbx mov rbx r8 sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] rcx mov rax fs:xxx mov [rbp+var_xxx] rax xor eax eax cmp r8 CONST jg JUMP_ADDR_9	test r8 r8 jnz JUMP_ADDR_4	mov rdx [rbp+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_43	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov rcx [rcx] cmp rcx CONST ja JUMP_ADDR_19	jz JUMP_ADDR_39	test rdx rdx jle JUMP_ADDR_8	mov rdi [rbp+var_xxx] lea rdx ds:xxx xor esi esi call sub_xxx	xor eax eax jmp JUMP_ADDR_20	mov rax r8 mov r12 [rbp+var_xxx] mov rcx rbx mov r14 r13 shl rax CONST sub r14 rbx add rax CONST mov rdi r12 sub rsp rax mov [rbp+var_xxx] rax lea rdx [rsp+CONST+var_xxx] and rdx CONST mov [rbp+var_xxx] rdx mov r8 rdx mov rdx [rbp+var_xxx] call sub_xxx lea rdx ds:xxx mov [rbp+var_xxx] rdx add r12 rdx lea r9 [r15+rdx] cmp rbx r14 jg JUMP_ADDR_17	mov rax [rbp+var_xxx] mov [rbp+var_xxx] r13 mov r13 rbx sub rsp rax lea r15 [rsp+CONST+var_xxx] and r15 CONST lea rax [r15+rdx] mov [rbp+var_xxx] rax add rax CONST mov [rbp+var_xxx] rax lea rax [rbx+CONST] mov rbx r12 mov r12 r9 mov [rbp+CONST] rax nop [rax+CONST]	mov r8 [rbp+var_xxx] mov rdx [rbp+var_xxx] mov rcx r13 mov rsi r12 mov rdi r15 call sub_xxx mov rdi rbx mov rcx r13 mov rdx r15 mov rsi rbx call sub_xxx mov rcx [rbp+var_xxx] add rbx [rbp+var_xxx] xor edx edx lea rdi [rbx+CONST] add rax [rcx] setb dl mov [rbx] rax test rdx rdx jz JUMP_ADDR_26	mov rsi [rbp+var_xxx] lea rdx [r13+CONST] nop	mov rax [CONST_VAR] add rdi CONST add rsi CONST add rax CONST mov [CONST_VAR+CONST] rax test rax rax jnz JUMP_ADDR_28	sub rdx CONST jnz JUMP_ADDR_13	sub r14 r13 add r12 [rbp+var_xxx] cmp r13 r14 jle JUMP_ADDR_11	mov r9 r12 mov r12 rbx mov rbx r13 mov r13 [rbp+var_xxx]	test r14 r14 jnz JUMP_ADDR_32	mov rax [rbp+var_xxx] add rbx r13 mov rax [rax+rbx*8+CONST] jmp JUMP_ADDR_2	mov rdi [rbp+var_xxx] call sub_xxx	mov rcx [rbp+var_xxx] lea r8 ds:xxx mov [rcx+r13*8] rax lea r14 [rcx+CONST] cmp rbx CONST jle JUMP_ADDR_2	mov r12 [rbp+var_xxx] lea rbx [rcx+rbx*8] mov [rbp+var_xxx] rbx mov rbx r8 add r12 CONST jmp JUMP_ADDR_24	mov eax CONST jz JUMP_ADDR_31	mov [r14+rbx] rax add r12 CONST add r14 CONST cmp r14 [rbp+var_xxx] jz JUMP_ADDR_2	mov rcx [r12] cmp rcx CONST jbe JUMP_ADDR_22	mov rdx r13 mov rsi r15 mov rdi r14 call sub_xxx jmp JUMP_ADDR_23	mov rax [rbp+var_xxx] mov rdx [rbp+CONST] mov rsi rax cmp rdi rax jz JUMP_ADDR_15	test rdx rdx lea r8 ds:xxx mov eax CONST cmovle r8 rax mov rdx r8 call sub_xxx jmp JUMP_ADDR_15	cmp rsi rdi jz JUMP_ADDR_15	sub rdx CONST test rdx rdx jg JUMP_ADDR_27	jmp JUMP_ADDR_15	mov rcx r13 mov rdx r15 mov rsi r14 mov rdi r14 call sub_xxx jmp JUMP_ADDR_23	mov r15 [rbp+var_xxx] mov rsi [rbp+var_xxx] mov r8 r14 mov rcx r9 mov rdx rbx mov rdi r15 call sub_xxx mov rsi r12 mov rdi r12 mov rcx rbx mov rdx r15 call sub_xxx mov rsi [rbp+var_xxx] mov r8 rax mov rax r15 add rax rsi add rsi r12 add r8 [rax] mov r10 rsi lea rsi [rax+CONST] setb al mov [r10] r8 lea rdi [r10+CONST] movzx eax al test rax rax jnz JUMP_ADDR_37	cmp rdi rsi jz JUMP_ADDR_18	cmp r14 CONST jle JUMP_ADDR_18	lea rdx ds:xxx call sub_xxx jmp JUMP_ADDR_18	mov rax [CONST_VAR] add rdi CONST add rsi CONST add rax CONST mov [CONST_VAR+CONST] rax test rax rax jnz JUMP_ADDR_33	sub r14 CONST jnz JUMP_ADDR_36	jmp JUMP_ADDR_18	test rdx rdx jle JUMP_ADDR_8	mov rcx [rbp+var_xxx] xor eax eax nop [rax+rax+CONST]	mov rdx [r15+rax*8] mov [rcx+rax*8] rdx add rax CONST cmp r13 rax jnz JUMP_ADDR_41	xor eax eax jmp JUMP_ADDR_20	call sub_xxx
[ph]libcap-git-setcap___mpn_mul_1
endbr64 push rbx xor r10 r10 mov rax [CONST_VAR] mov rbx rdx mul rcx mov r11 rbx add rax r10 adc rdx CONST and ebx CONST jz JUMP_ADDR_6	cmp ebx CONST jz JUMP_ADDR_8	jg JUMP_ADDR_7	dec r11 jnz JUMP_ADDR_5	mov [CONST_VAR] rax jmp JUMP_ADDR_15	lea rsi [CONST_VAR+r11*8+CONST] lea rdi [CONST_VAR+r11*8+CONST] neg r11 xor r10 r10 xor ebx ebx mov r9 rax mov rax [CONST_VAR+r11*8] mov r8 rdx jmp JUMP_ADDR_10	lea rsi [CONST_VAR+r11*8] lea rdi [CONST_VAR+r11*8+CONST] neg r11 xor r10 r10 mov r8 rax mov rbx rdx jmp JUMP_ADDR_11	lea rsi [CONST_VAR+r11*8+CONST] lea rdi [CONST_VAR+r11*8+CONST] neg r11 mov rbx rax mov r10 rdx jmp JUMP_ADDR_12	lea rsi [CONST_VAR+r11*8+CONST] lea rdi [CONST_VAR+r11*8+CONST] neg r11 xor r8 r8 xor ebx ebx mov r10 rax mov rax [CONST_VAR+r11*8+CONST] mov r9 rdx jmp JUMP_ADDR_13	mov [CONST_VAR+r11*8] r10 add r9 rax mov rax [CONST_VAR+r11*8] adc r8 rdx mov r10d CONST	mul rcx mov [CONST_VAR+r11*8+CONST] r9 add r8 rax adc rbx rdx	mov rax [CONST_VAR+r11*8+CONST] mul rcx mov [CONST_VAR+r11*8+CONST] r8 add rbx rax adc r10 rdx	mov rax [CONST_VAR+r11*8+CONST] mul rcx mov [CONST_VAR+r11*8+CONST] rbx mov r8d CONST mov rbx r8 add r10 rax mov rax [CONST_VAR+r11*8+CONST] mov r9 r8 adc r9 rdx	mul rcx add r11 CONST js JUMP_ADDR_9	mov [CONST_VAR+r11*8] r10 add r9 rax adc rdx r8 mov [CONST_VAR+r11*8+CONST] r9 add rdx r8	mov rax rdx pop rbx retn
[ph]libcap-git-setcap___mpn_impn_mul_n_basecase
endbr64 push r15 push r14 mov r14 rsi push r13 mov r13 rcx push r12 mov r12 rdx push rbp push rbx mov rbx rdi sub rsp CONST mov rcx [rdx] cmp rcx CONST ja JUMP_ADDR_13	jz JUMP_ADDR_14	test r13 r13 jle JUMP_ADDR_4	lea rdx ds:xxx xor esi esi call sub_xxx	xor eax eax	mov [rbx+r13*8] rax lea r15 ds:xxx add rbx CONST cmp r13 CONST jle JUMP_ADDR_11	mov ebp CONST jmp JUMP_ADDR_9	mov eax CONST jz JUMP_ADDR_12	add rbp CONST mov [rbx+r15] rax add rbx CONST cmp r13 rbp jz JUMP_ADDR_11	mov rcx [r12+rbp*8] cmp rcx CONST jbe JUMP_ADDR_7	mov rdx r13 mov rsi r14 mov rdi rbx call sub_xxx jmp JUMP_ADDR_8	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rcx r13 mov rdx r14 mov rsi rbx mov rdi rbx call sub_xxx jmp JUMP_ADDR_8	mov rdx r13 call sub_xxx jmp JUMP_ADDR_5	test r13 r13 jle JUMP_ADDR_4	xor eax eax nop [rax+rax+CONST]	mov rdx [r14+rax*8] mov [rbx+rax*8] rdx add rax CONST cmp r13 rax jnz JUMP_ADDR_16	jmp JUMP_ADDR_4
[ph]libcap-git-setcap___mpn_impn_mul_n
endbr64 push r15 push r14 mov r14 rcx push r13 mov r13 rdi push r12 push rbp mov rbp r8 push rbx mov rbx rcx sub rsp CONST mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rdx and ebx CONST jz JUMP_ADDR_5	lea rbx [rcx+CONST] cmp rbx CONST jle JUMP_ADDR_29	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rcx rbx call sub_xxx	mov r15 [rsp+CONST+var_xxx] mov r12 [rsp+CONST+var_xxx] lea rbp [r13+rbx*8+CONST] mov rdx rbx mov rdi rbp mov rcx [r15+rbx*8] mov rsi r12 call sub_xxx mov rdx r14 mov rsi r15 mov rdi rbp mov r8 rax mov rax rbx shl rax CONST mov [r13+rax+CONST] r8 mov rcx [r12+rbx*8] add rbx r14 call sub_xxx mov [r13+rbx*8+CONST] rax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r12 rcx mov rdx [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] sar r12 CONST lea rax ds:xxx add rdx rax mov [rsp+CONST+var_xxx] rax add r10 rax lea rax ds:xxx mov [rsp+CONST+var_xxx] rdx lea r15 [CONST_VAR+rax] mov [rsp+CONST+var_xxx] rax cmp r12 CONST jle JUMP_ADDR_28	mov rdx [rsp+CONST+var_xxx] mov rsi r10 mov rcx r12 mov rdi r15 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx]	mov rsi [rsp+CONST+var_xxx] mov rdi r10 mov rdx r12 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx r12 test eax eax js JUMP_ADDR_39	mov rdx [rsp+CONST+var_xxx] mov rsi r10 mov rdi r13 call sub_xxx mov [rsp+CONST+var_xxx] CONST	mov rsi [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov rdx r12 call sub_xxx mov rcx [rsp+CONST+var_xxx] lea r10 [r13+rcx+CONST] mov rcx r12 test eax eax js JUMP_ADDR_38	mov rsi [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx xor [rsp+CONST+var_xxx] CONST mov r10 [rsp+CONST+var_xxx]	cmp r12 CONST jg JUMP_ADDR_37	mov rdx r10 mov rcx r12 mov rsi r13 mov rdi rbp mov [rsp+CONST+var_xxx] r10 call sub_xxx test r12 r12 mov r10 [rsp+CONST+var_xxx] jle JUMP_ADDR_15	xor eax eax nop [rax+rax+CONST]	mov rdx [r15+rax*8] mov [r10+rax*8] rdx add rax CONST cmp r12 rax jg JUMP_ADDR_14	lea rax [r12+r14] mov rcx r12 mov rsi r15 mov rdi r15 lea r11 [r13+rax*8+CONST] mov [rsp+CONST+var_xxx] r10 mov rdx r11 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov r11 [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_36	mov rsi r10 mov rdi r10 mov rcx r14 mov rdx rbp mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov rsi [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] sub rsi rax mov [rsp+CONST+var_xxx] rsi	cmp r12 CONST jg JUMP_ADDR_30	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rcx r12 mov rdi rbp mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx r14 mov rdx rbp mov rsi r10 mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx add rax [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] jnz JUMP_ADDR_40	test r12 r12 jle JUMP_ADDR_22	nop [rax]	mov rax [rbp+rbx*8+CONST] mov [r13+rbx*8+CONST] rax add rbx CONST cmp r12 rbx jg JUMP_ADDR_21	mov rdx [rsp+CONST+var_xxx] mov rcx r12 mov rsi r10 mov rdi r10 add rdx rbp call sub_xxx test rax rax jz JUMP_ADDR_4	mov rax [r15] add rax CONST mov [r15] rax jnb JUMP_ADDR_4	sub r14 CONST xor eax eax jmp JUMP_ADDR_26	mov rdi [r15+rax*8+CONST] lea rdx [CONST_VAR+CONST] mov [r15+rax*8+CONST] rdx add rax CONST test rdx rdx jnz JUMP_ADDR_4	cmp rax r14 jnz JUMP_ADDR_25	jmp JUMP_ADDR_4	mov rsi r10 mov rcx r12 mov rdi r15 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_7	mov rcx rbx call sub_xxx jmp JUMP_ADDR_3	mov r8 [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] mov rcx r12 mov rdi rbp mov rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] r11 add r8 rbp mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] mov rcx r14 mov rdx rbp mov rsi r10 mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx add rax [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] jz JUMP_ADDR_21	add [r11] rax jnb JUMP_ADDR_21	lea rcx [r12+CONST] xor eax eax jmp JUMP_ADDR_34	mov rdi [r11+rax*8+CONST] lea rdx [CONST_VAR+CONST] mov [r11+rax*8+CONST] rdx add rax CONST test rdx rdx jnz JUMP_ADDR_19	cmp rcx rax jnz JUMP_ADDR_33	jmp JUMP_ADDR_19	mov rsi r10 mov rdi r10 mov rcx r14 mov rdx rbp mov [rsp+CONST+var_xxx] r11 mov [rsp+CONST+var_xxx] r10 call sub_xxx add rax [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_17	mov rax [rsp+CONST+var_xxx] mov rdx r10 mov rcx r12 mov rsi r13 mov rdi rbp mov [rsp+CONST+var_xxx] r10 lea r8 [rbp+rax+CONST] call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_13	mov rdx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] jmp JUMP_ADDR_11	mov rsi [rsp+CONST+var_xxx] mov rdx r10 mov rdi r13 call sub_xxx mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_9	add [r11] rax jnb JUMP_ADDR_19	jmp JUMP_ADDR_32
[ph]libcap-git-setcap___mpn_impn_sqr_n_basecase
endbr64 push r14 push r13 mov r13 rsi push r12 mov r12 rdx push rbp push rbx mov rcx [CONST_VAR] mov rbx rdi cmp rcx CONST ja JUMP_ADDR_13	jz JUMP_ADDR_14	test rdx rdx jle JUMP_ADDR_4	lea rdx ds:xxx xor esi esi call sub_xxx	xor eax eax	mov [rbx+r12*8] rax mov ebp CONST add rbx CONST lea r14 ds:xxx cmp r12 CONST jg JUMP_ADDR_9	jmp JUMP_ADDR_11	mov eax CONST jz JUMP_ADDR_12	add rbp CONST mov [rbx+r14] rax add rbx CONST cmp r12 rbp jz JUMP_ADDR_11	mov rcx [r13+rbp*8+CONST] cmp rcx CONST jbe JUMP_ADDR_7	mov rdx r12 mov rsi r13 mov rdi rbx call sub_xxx jmp JUMP_ADDR_8	pop rbx pop rbp pop r12 pop r13 pop r14 retn	mov rcx r12 mov rdx r13 mov rsi rbx mov rdi rbx call sub_xxx jmp JUMP_ADDR_8	call sub_xxx jmp JUMP_ADDR_5	test rdx rdx jle JUMP_ADDR_4	xor eax eax jmp JUMP_ADDR_17	mov rcx [r13+rax*8+CONST]	mov [rbx+rax*8] rcx add rax CONST cmp r12 rax jnz JUMP_ADDR_16	jmp JUMP_ADDR_4
[ph]libcap-git-setcap___mpn_impn_sqr_n
endbr64 push r15 push r14 mov r14 rsi push r13 mov r13 rcx push r12 push rbp mov rbp rdi push rbx mov rbx rdx sub rsp CONST mov [rsp+CONST+var_xxx] rdx and ebx CONST jz JUMP_ADDR_5	lea rbx [rdx+CONST] cmp rbx CONST jle JUMP_ADDR_25	mov rdx rbx call sub_xxx	lea r12 ds:xxx mov rdx rbx mov rsi r14 lea r13 [r14+r12] add r12 rbp mov rcx [r13+CONST] mov rdi r12 call sub_xxx mov r15 [rsp+CONST+var_xxx] mov rsi r14 mov rdi r12 mov r8 rax mov rax rbx shl rax CONST mov rdx r15 add rbx r15 mov [rbp+rax+CONST] r8 mov rcx [r13+CONST] call sub_xxx mov [rbp+rbx*8+CONST] rax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST+var_xxx] mov r12 rax shl rax CONST sar r12 CONST mov [rsp+CONST+var_xxx] rax lea r8 [CONST_VAR+rax] lea rcx ds:xxx mov [rsp+CONST+var_xxx] rcx lea r15 [CONST_VAR+rcx] cmp r12 CONST jle JUMP_ADDR_24	mov rdi r8 mov rcx r13 mov rdx r12 mov rsi r15 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx]	mov rdx r12 mov rsi r14 mov rdi r15 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] test eax eax js JUMP_ADDR_35	mov rcx r12 mov rdx r14 mov rsi r15 mov rdi rbp call sub_xxx mov r8 [rsp+CONST+var_xxx]	mov [rsp+CONST+var_xxx] r8 cmp r12 CONST jg JUMP_ADDR_34	mov rdx r12 mov rsi rbp mov rdi r13 call sub_xxx test r12 r12 mov r8 [rsp+CONST+var_xxx] jle JUMP_ADDR_26	mov rax [rsp+CONST+var_xxx] lea r15 [rbp+rax+CONST] xor eax eax nop [rax+rax+CONST]	mov rdx [r8+rax*8] mov [r15+rax*8] rdx add rax CONST cmp r12 rax jg JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] mov rsi r8 mov rdi r8 mov rcx r12 mov [rsp+CONST+var_xxx] r8 add rax r12 lea r11 [rbp+rax*8+CONST] mov rdx r11 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov rcx [rsp+CONST+var_xxx] mov rsi r15 mov rdx r13 mov rdi r15 mov [rsp+CONST+var_xxx] rax call sub_xxx mov rsi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] sub rsi rax cmp r12 CONST mov [rsp+CONST+var_xxx] rsi jle JUMP_ADDR_27	mov rcx [rsp+CONST+var_xxx] mov rdx r12 mov rsi r14 mov rdi r13 mov [rsp+CONST+var_xxx] r8 add rcx r13 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov rcx [rsp+CONST+var_xxx] mov rdx r13 mov rsi r15 mov rdi r15 call sub_xxx add rax [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] jz JUMP_ADDR_17	add [r11] rax jb JUMP_ADDR_29	nop [rax+CONST]	mov rax [r13+rbx*8+CONST] mov [rbp+rbx*8+CONST] rax add rbx CONST cmp r12 rbx jg JUMP_ADDR_17	mov rdx [rsp+CONST+var_xxx] mov rcx r12 mov rsi r15 mov rdi r15 mov [rsp+CONST+var_xxx] r8 add rdx r13 call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_4	mov rax [r8] add rax CONST mov [r8] rax jnb JUMP_ADDR_4	mov r14 [rsp+CONST+var_xxx] xor eax eax sub r14 CONST jmp JUMP_ADDR_22	mov rdi [r8+rax*8+CONST] lea rdx [CONST_VAR+CONST] mov [r8+rax*8+CONST] rdx add rax CONST test rdx rdx jnz JUMP_ADDR_4	cmp rax r14 jnz JUMP_ADDR_21	jmp JUMP_ADDR_4	mov rdi r8 mov rdx r12 mov rsi r15 mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_7	mov rdx rbx call sub_xxx jmp JUMP_ADDR_3	mov rax [rsp+CONST+var_xxx] mov rsi r8 mov rdi r8 mov rcx r12 mov [rsp+CONST+var_xxx] r8 add rax r12 lea r11 [rbp+rax*8+CONST] mov rdx r11 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov rsi [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] mov rdx r13 mov [rsp+CONST+var_xxx] rax lea r15 [rbp+CONST_VAR+CONST] mov rdi r15 mov rsi r15 call sub_xxx mov rdi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] sub rdi rax mov [rsp+CONST+var_xxx] rdi	mov rdx r12 mov rsi r14 mov rdi r13 mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] r11 call sub_xxx mov rcx [rsp+CONST+var_xxx] mov rdx r13 mov rsi r15 mov rdi r15 call sub_xxx add rax [rsp+CONST+var_xxx] mov r11 [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] jz JUMP_ADDR_32	add [r11] rax jnb JUMP_ADDR_32	lea rcx [r12+CONST] xor eax eax jmp JUMP_ADDR_31	mov rsi [r11+rax*8+CONST] lea rdx [CONST_VAR+CONST] mov [r11+rax*8+CONST] rdx add rax CONST test rdx rdx jnz JUMP_ADDR_32	cmp rcx rax jnz JUMP_ADDR_30	test r12 r12 jg JUMP_ADDR_17	jmp JUMP_ADDR_18	mov rax [rsp+CONST+var_xxx] mov rdx r12 mov rsi rbp mov rdi r13 lea rcx [r13+rax+CONST] call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_11	mov rcx r12 mov rdx r15 mov rsi r14 mov rdi rbp mov [rsp+CONST+var_xxx] r8 call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_9
[ph]libcap-git-setcap___mpn_mul_n
endbr64 push rbp mov r9 rcx mov rbp rsp sub rsp CONST mov rax fs:xxx mov [rbp+CONST] rax xor eax eax cmp rsi rdx jz JUMP_ADDR_6	cmp rcx CONST jle JUMP_ADDR_5	mov rax rcx shl rax CONST add rax CONST sub rsp rax lea r8 [rsp+CONST] and r8 CONST call sub_xxx	mov rax [rbp+CONST] sub rax fs:xxx jnz JUMP_ADDR_9	leave retn	call sub_xxx jmp JUMP_ADDR_3	cmp rcx CONST jg JUMP_ADDR_8	mov rdx rcx call sub_xxx jmp JUMP_ADDR_3	mov rax rcx mov rdx r9 shl rax CONST add rax CONST sub rsp rax lea rcx [rsp+CONST] and rcx CONST call sub_xxx jmp JUMP_ADDR_3	call sub_xxx
[ph]libcap-git-setcap___mpn_sub_n
endbr64 xor r8 r8 mov r10 [CONST_VAR] mov r11 [rdx] lea rsi [CONST_VAR+rcx*8+CONST] lea rdx [rdx+rcx*8+CONST] lea rdi [CONST_VAR+rcx*8+CONST] mov eax ecx neg rcx and eax CONST jz JUMP_ADDR_4	add rcx rax cmp eax CONST jl JUMP_ADDR_5	jz JUMP_ADDR_6	shr r8 CONST jmp JUMP_ADDR_10	shr r8 CONST mov r8 r10 mov r9 r11 lea rcx [rcx+CONST] jmp JUMP_ADDR_9	shr r8 CONST jmp JUMP_ADDR_12	shr r8 CONST mov r8 r10 mov r9 r11 jmp JUMP_ADDR_11	sbb r10 r11 mov [CONST_VAR+CONST] r10 mov eax ecx adc eax eax retn	mov r8 [CONST_VAR+rcx*8+CONST] mov r9 [rdx+rcx*8+CONST] sbb r10 r11 mov [CONST_VAR+rcx*8+CONST] r10	mov r10 [CONST_VAR+rcx*8+CONST] mov r11 [rdx+rcx*8+CONST] sbb r8 r9 mov [CONST_VAR+rcx*8+CONST] r8	mov r8 [CONST_VAR+rcx*8+CONST] mov r9 [rdx+rcx*8+CONST] sbb r10 r11 mov [CONST_VAR+rcx*8+CONST] r10	mov r10 [CONST_VAR+rcx*8] mov r11 [rdx+rcx*8] sbb r8 r9 mov [CONST_VAR+rcx*8] r8	jrcxz JUMP_ADDR_7	lea rcx [rcx+CONST] jmp JUMP_ADDR_8
[ph]libcap-git-setcap___mpn_submul_1
endbr64 push rbx push rbp lea rbx [rdx] neg rbx mov rax [CONST_VAR] mov r10 [CONST_VAR] lea rdi [CONST_VAR+rdx*8+CONST] lea rsi [CONST_VAR+rdx*8] mul rcx bt ebx CONST jb JUMP_ADDR_3	lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] lea rbp [rdx] mul rcx add rbx CONST jns JUMP_ADDR_9	lea r8 [rax] mov rax [CONST_VAR+rbx*8] lea r9 [rdx] jmp JUMP_ADDR_6	add rbx CONST jns JUMP_ADDR_10	lea r8 [rax] mov rax [CONST_VAR+rbx*8] lea r9 [rdx] mul rcx lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] lea rbp [rdx] jmp JUMP_ADDR_7	mul rcx sub r10 r8 lea r8 [rax] mov rax [CONST_VAR+rbx*8] adc r11 r9 mov [CONST_VAR+rbx*8+CONST] r10 mov r10 [CONST_VAR+rbx*8] lea r9 [rdx] adc rbp CONST	mul rcx sub r10 r11 lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] adc r8 rbp mov [CONST_VAR+rbx*8] r10 mov r10 [CONST_VAR+rbx*8+CONST] lea rbp [rdx] adc r9 CONST	add rbx CONST js JUMP_ADDR_5	mul rcx sub r10 r8 adc r11 r9 mov [CONST_VAR+CONST] r10 adc rbp CONST	mov r10 [CONST_VAR] sub r10 r11 adc rax rbp mov [CONST_VAR] r10 adc rdx CONST	mov r10 [CONST_VAR+CONST] sub r10 rax mov [CONST_VAR+CONST] r10 mov eax ebx adc rax rdx pop rbp pop rbx retn
[ph]libcap-git-setcap___mpn_extract_double
endbr64 mov rsi rdi mov rdi rdx movq rdx xmm0 shr rdx CONST movq rax xmm0 mov [rcx] edx movq rdx xmm0 shr rdx CONST and edx CONST sub edx CONST mov [CONST_VAR] edx mov rdx CONST and rdx rax shr rax CONST mov [CONST_VAR] rdx test eax CONST jnz JUMP_ADDR_3	test rdx rdx jnz JUMP_ADDR_4	mov [CONST_VAR] CONST mov eax CONST retn	bts rdx CONST mov eax CONST mov [CONST_VAR] rdx retn	bsr rcx rdx mov eax CONST xor rcx CONST sub ecx CONST sub eax ecx shl rdx cl mov [CONST_VAR] rdx mov [CONST_VAR] eax mov eax CONST retn
[ph]libcap-git-setcap___mpn_extract_long_double
endbr64 mov r8 rdi mov edi [rsp+arg_xxx] mov rsi [rsp+arg_xxx] mov [rsp+var_xxx] edi movzx eax [rsp+var_xxx+CONST] mov [rsp+var_xxx] rsi shr al CONST movzx eax al mov [rcx] eax movzx eax [rsp+var_xxx] mov rcx rdi and eax CONST sub eax CONST mov [rdx] eax mov rax rsi mov [r8] rsi and cx CONST jnz JUMP_ADDR_4	test rsi rsi jnz JUMP_ADDR_7	mov [rdx] CONST	mov eax CONST retn	test rsi rsi jnz JUMP_ADDR_3	cmp cx CONST jnz JUMP_ADDR_2	mov eax CONST retn	btr rax CONST test rax rax jz JUMP_ADDR_9	bsr rcx rax xor rcx CONST shl rax cl mov [r8] rax mov eax CONST sub eax ecx mov [rdx] eax mov eax CONST retn	mov rax CONST mov [r8] rax mov eax CONST mov [rdx] CONST retn
[ph]libcap-git-setcap___mpn_extract_float128
endbr64 movaps [rsp+var_xxx] xmm0 mov rax [rsp+var_xxx+CONST] mov rsi rdi mov rdi rdx mov r8 CONST mov rdx rax shr rdx CONST mov [rcx] edx mov rcx rax and rax r8 shr rcx CONST mov edx ecx and edx CONST sub edx CONST mov [CONST_VAR] edx mov rdx [rsp+var_xxx] mov [CONST_VAR+CONST] rax mov [CONST_VAR] rdx test ecx CONST jnz JUMP_ADDR_4	test rdx rdx jnz JUMP_ADDR_5	test rax rax jnz JUMP_ADDR_9	mov [CONST_VAR] CONST mov eax CONST retn	bts rax CONST mov [CONST_VAR+CONST] rax mov eax CONST retn	test rax rax jnz JUMP_ADDR_9	bsr r8 rdx xor r8 CONST mov r9d r8d cmp r8d CONST jle JUMP_ADDR_10	lea ecx [r8+CONST] shl rdx cl mov r10 rdx	mov [CONST_VAR] rax mov eax CONST sub eax r9d mov [CONST_VAR+CONST] r10 mov [CONST_VAR] eax mov eax CONST retn	bsr r8 rax mov ecx CONST mov r9 rdx xor r8 CONST sub r8d CONST sub ecx r8d shr r9 cl mov ecx r8d shl rax cl shl rdx cl or r9 rax mov eax CONST mov [CONST_VAR] rdx sub eax r8d mov [CONST_VAR+CONST] r9 mov [CONST_VAR] eax mov eax CONST retn	mov ecx CONST mov r10 rdx mov rax rdx sub ecx r8d shr r10 cl lea ecx [r8+CONST] shl rax cl jmp JUMP_ADDR_8
[ph]libcap-git-setcap_init
endbr64 cmp cs:xxx CONST jz JUMP_ADDR_4	sub rsp CONST lea rsi sub_xxx lea rdi GLOBAL_VAR call callfunc_xxx test eax eax jz JUMP_ADDR_3	lea rax unk_xxx mov cs:xxx rax	add rsp CONST retn	lea rax unk_xxx mov cs:xxx rax retn
[ph]libcap-git-setcap_free_key_mem
endbr64 push r12 push rbp mov rbp rdi sub rsp CONST mov r12 [CONST_VAR+CONST] test r12 r12 jz JUMP_ADDR_2	lea rsi GLOBAL_VAR mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_4	mov rdi rbp call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_5	mov edi cs:xxx add rsp CONST xor esi esi pop rbp pop r12 jmp UNK_ADDR	mov rdi r12 call sub_xxx jmp JUMP_ADDR_2	add rsp CONST pop rbp pop r12 retn
[ph]libcap-git-setcap___dlerror
endbr64 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax cmp cs:xxx CONST mov [rsp] CONST jz JUMP_ADDR_16	lea rsi sub_xxx lea rdi GLOBAL_VAR call callfunc_xxx mov rbx cs:xxx	test rbx rbx jz JUMP_ADDR_22	mov eax [rbx+CONST] mov rbp [rbx+CONST] test eax eax jz JUMP_ADDR_10	test rbp rbp jz JUMP_ADDR_7	lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_28	mov [rbx+CONST] CONST	mov rax [rsp]	mov rdx [rsp+CONST] sub rdx fs:xxx jnz JUMP_ADDR_30	add rsp CONST pop rbx pop rbp retn	test rbp rbp jz JUMP_ADDR_7	mov edi [rbx] mov [rsp] rbp test edi edi jz JUMP_ADDR_25	call sub_xxx mov rsi [rbx+CONST] mov edx CONST lea rdi GLOBAL_VAR mov rbp rax call sub_xxx mov rdx [rbx+CONST] mov rdi rsp mov r9 rbp mov r8 rax lea rcx unk_xxx lea rax GLOBAL_VAR cmp [rdx] CONST lea rsi GLOBAL_VAR cmovnz rcx rax xor eax eax call sub_xxx cmp eax CONST jz JUMP_ADDR_26	mov rbp [rbx+CONST] lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_29	mov rax [rsp] mov [rbx+CONST] rax	mov [rbx+CONST] CONST jmp JUMP_ADDR_8	mov eax cs:xxx mov rbx cs:xxx test eax eax jnz JUMP_ADDR_2	cmp cs:xxx CONST jz JUMP_ADDR_27	lea rsi sub_xxx lea rdi GLOBAL_VAR call callfunc_xxx mov rbx cs:xxx test eax eax mov eax cs:xxx jnz JUMP_ADDR_27	or eax CONST mov cs:xxx eax	test rbx rbx jnz JUMP_ADDR_3	nop [rax]	cmp cs:xxx CONST jz JUMP_ADDR_24	mov edi cs:xxx call callfunc_xxx mov rbx rax test rax rax jnz JUMP_ADDR_3	lea rbx unk_xxx jmp JUMP_ADDR_3	mov edx CONST mov rsi rbp lea rdi GLOBAL_VAR call sub_xxx mov rdx [rbx+CONST] mov rdi rsp lea rcx unk_xxx mov r8 rax lea rax GLOBAL_VAR lea rsi GLOBAL_VAR cmp [rdx] CONST cmovnz rcx rax xor eax eax call sub_xxx cmp eax CONST jnz JUMP_ADDR_13	mov rax [rsp] jmp JUMP_ADDR_15	lea rbx unk_xxx or eax CONST mov cs:xxx rbx mov cs:xxx eax jmp JUMP_ADDR_20	mov rdi rbp call sub_xxx jmp JUMP_ADDR_6	mov rdi rbp call sub_xxx jmp JUMP_ADDR_14	call sub_xxx
[ph]libcap-git-setcap__dlerror_run
endbr64 cmp cs:xxx CONST push r12 mov r12 rdi push rbp mov rbp rsi push rbx jz JUMP_ADDR_8	lea rsi sub_xxx lea rdi GLOBAL_VAR call callfunc_xxx mov rbx cs:xxx	test rbx rbx jz JUMP_ADDR_14	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_6	cmp [rbx+CONST] CONST jnz JUMP_ADDR_7	mov [rbx+CONST] CONST	lea rdx [rbx+CONST] lea rsi [rbx+CONST] mov r8 rbp mov rcx r12 lea rdi [rbx+CONST] call sub_xxx mov [rbx] eax xor eax eax cmp [rbx+CONST] CONST setz al mov [rbx+CONST] eax setnz al pop rbx movzx eax al pop rbp pop r12 retn	call sub_xxx jmp JUMP_ADDR_5	mov eax cs:xxx mov rbx cs:xxx test eax eax jnz JUMP_ADDR_2	cmp cs:xxx CONST jz JUMP_ADDR_19	lea rsi sub_xxx lea rdi GLOBAL_VAR call callfunc_xxx mov rbx cs:xxx test eax eax mov eax cs:xxx jnz JUMP_ADDR_19	or eax CONST mov cs:xxx eax	test rbx rbx jnz JUMP_ADDR_3	nop [rax]	cmp cs:xxx CONST jz JUMP_ADDR_16	mov edi cs:xxx call callfunc_xxx mov rbx rax test rax rax jnz JUMP_ADDR_3	mov esi CONST mov edi CONST call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_20	cmp cs:xxx CONST jz JUMP_ADDR_3	mov edi cs:xxx mov rsi rax call callfunc_xxx jmp JUMP_ADDR_3	lea rbx unk_xxx or eax CONST mov cs:xxx rbx mov cs:xxx eax jmp JUMP_ADDR_12	lea rbx unk_xxx jmp JUMP_ADDR_3
[ph]libcap-git-setcap___libc_register_dlfcn_hook
endbr64 sub rsp CONST lea rsi GLOBAL_VAR call sub_xxx test rax rax jz JUMP_ADDR_2	lea rdx off_xxx mov [rax] rdx	add rsp CONST retn
[ph]libcap-git-setcap___dladdr
endbr64 xor ecx ecx xor edx edx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___dladdr1
endbr64 cmp ecx CONST jz JUMP_ADDR_4	cmp ecx CONST mov ecx CONST jz JUMP_ADDR_3	xor edx edx	jmp UNK_JUMP_ADDR	mov rcx rdx xor edx edx jmp JUMP_ADDR_3
[ph]libcap-git-setcap_dlinfo_doit
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR] cmp [rbx+CONST] CONST ja JUMP_ADDR_10	mov eax [rbx+CONST] lea rdx unk_xxx movsxd rax [rdx+rax*4] add rax rdx jmp rax	mov rax [rbx+CONST] mov rdx [CONST_VAR+CONST] mov [rax] rdx pop rbx retn	mov rax [rbx+CONST] mov [rax] rdi pop rbx retn	mov rsi [rbx+CONST] xor edx edx pop rbx jmp UNK_JUMP_ADDR	mov rsi [rbx+CONST] mov edx CONST pop rbx jmp UNK_JUMP_ADDR	mov rsi [CONST_VAR+CONST] mov rdi [rbx+CONST] pop rbx jmp UNK_JUMP_ADDR	mov rax [rbx+CONST] mov [rax] CONST mov rdx [CONST_VAR+CONST] mov [rax] rdx pop rbx retn	xor eax eax cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_11	mov rdx [rbx+CONST] mov [rdx] rax pop rbx retn	lea rcx GLOBAL_VAR xor edx edx xor esi esi xor edi edi call sub_xxx	call sub_xxx jmp JUMP_ADDR_9
[ph]libcap-git-setcap___dlinfo
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] esi mov rsi rsp mov [rsp+CONST+var_xxx] rdx call sub_xxx neg eax sbb eax eax mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_2	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap_dlmopen_doit
endbr64 push rbx cmp [CONST_VAR] CONST jnz JUMP_ADDR_2	mov rdx [CONST_VAR+CONST] mov esi [CONST_VAR+CONST] mov rbx rdi lea rax unk_xxx mov rdi [CONST_VAR+CONST] mov r9 cs:xxx or esi CONST mov r8d cs:xxx test rdi rdi cmovz rdi rax sub rsp CONST push cs:xxx xor ecx ecx call sub_xxx mov [rbx+CONST] rax pop rax pop rdx pop rbx retn	lea rcx GLOBAL_VAR xor edx edx xor esi esi mov edi CONST call sub_xxx
[ph]libcap-git-setcap___dlmopen
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] rsi mov rsi rsp mov [rsp+CONST+var_xxx] edx mov [rsp+CONST+var_xxx] rcx call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_2	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rax [rsp+CONST+var_xxx]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap_strspn_ifunc
endbr64 test cs:xxx CONST lea rdx sub_xxx lea rax loc_xxx cmovnz rax rdx retn
[ph]libcap-git-setcap___strsep_g
endbr64 push r12 push rbx sub rsp CONST mov r12 [CONST_VAR] test r12 r12 jz JUMP_ADDR_3	mov rbx rdi mov rdi r12 call sub_xxx add rax r12 cmp [rax] CONST jz JUMP_ADDR_4	mov [rax] CONST add rax CONST mov [rbx] rax	add rsp CONST mov rax r12 pop rbx pop r12 retn	mov [rbx] CONST add rsp CONST mov rax r12 pop rbx pop r12 retn
[ph]libcap-git-setcap___strspn_sse42
endbr64 mov rdx rdi mov r8 rdi sub rsp CONST mov ecx CONST mov rdi rsp xor eax eax cld rep CONST mov rax rsi nop [rax+rax+CONST] nop [rax]	mov cl [rax] test cl cl jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] test cl CONST jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] test cl CONST jz JUMP_ADDR_5	mov [rsp+rcx+CONST+var_xxx] cl mov cl [rax+CONST] add rax CONST mov [rsp+rcx+CONST+var_xxx] cl test cl CONST jnz JUMP_ADDR_1	lea rax [rdx+CONST] nop [rax+rax+CONST] nop [rax]	add rax CONST mov cl [rax] test [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_13	mov cl [rax+CONST] test [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_12	mov cl [rax+CONST] test [rsp+rcx+CONST+var_xxx] cl jz JUMP_ADDR_11	mov cl [rax+CONST] test [rsp+rcx+CONST+var_xxx] cl jnz JUMP_ADDR_6	inc rax	inc rax	inc rax	add rsp CONST sub rax rdx retn	endbr64 cmp [CONST_VAR] CONST jz JUMP_ADDR_25	mov edx esi and edx CONST jnz JUMP_ADDR_21	movdqa xmm0 [CONST_VAR] pcmpistri xmm0 xmm0 xmm0 cmp ecx CONST jz JUMP_ADDR_32	mov esi edi and esi CONST jz JUMP_ADDR_26	mov r8 rdi movsxd rax esi lea rdx unk_xxx and r8 CONST movdqu xmm2 [rdx+rax] mov edx CONST movdqa xmm1 [r8] pshufb xmm1 xmm2 pcmpistri xmm0 xmm1 xmm1 sub edx esi movsxd rax ecx cmp edx eax jg JUMP_ADDR_20	pcmpistri xmm1 xmm1 xmm1 cmp edx ecx jle JUMP_ADDR_31	retn	mov r8 rsi movsxd rax edx lea rcx unk_xxx and r8 CONST movdqu xmm1 [rcx+rax] mov eax CONST movdqa xmm0 [r8] pshufb xmm0 xmm1 pcmpistri xmm0 xmm0 xmm0 sub eax edx cmp eax ecx jnz JUMP_ADDR_17	movdqa xmm1 [r8+CONST] pcmpistri xmm1 xmm1 xmm1 add eax ecx cmp eax CONST jg JUMP_ADDR_33	test ecx ecx jz JUMP_ADDR_17	movdqu xmm0 [CONST_VAR] jmp JUMP_ADDR_17	xor eax eax retn	mov rax rdi	pcmpistri xmm0 [rax] [rax] jb JUMP_ADDR_30	nop [rax+rax+CONST]	add rax CONST pcmpistri xmm0 [rax] [rax] jnb JUMP_ADDR_29	movsxd rcx ecx add rax rcx sub rax rdi retn	lea rax [r8+CONST] jmp JUMP_ADDR_27	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_17	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___getdents64
endbr64 mov eax CONST cmp rdx rax cmova rdx rax mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn
[ph]libcap-git-setcap_getpid
endbr64 mov eax CONST syscall retn
[ph]libcap-git-setcap___pread64_nocancel
endbr64 mov r10 rcx mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov rax CONST retn
[ph]libcap-git-setcap___profil_counter
endbr64 mov rax [rdx+CONST] sub rax cs:xxx mov rdx rax mov ecx cs:xxx shr rax CONST shr rdx CONST movzx edx dx imul rax rcx imul rdx rcx shr rdx CONST add rax rdx cmp rax cs:xxx jnb JUMP_ADDR_2	mov rdx cs:xxx add [rdx+rax*2] CONST	retn
[ph]libcap-git-setcap_profil
endbr64 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax mov rax cs:xxx test rdi rdi jz JUMP_ADDR_9	mov rbx rdi mov rbp rsi mov r12 rdx mov r13d ecx test rax rax jz JUMP_ADDR_8	xor edx edx lea rsi unk_xxx mov edi CONST call sub_xxx test eax eax js JUMP_ADDR_14	lea r14 unk_xxx xor edx edx mov edi CONST mov rsi r14 call sub_xxx test eax eax js JUMP_ADDR_14	mov rsi rbp lea rax sub_xxx mov rdx r14 mov edi CONST shr rsi CONST mov cs:xxx rbx mov cs:xxx rsi lea rsi [rsp+CONST+var_xxx] mov cs:xxx r12 mov cs:xxx r13d mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx test eax eax js JUMP_ADDR_14	mov [rsp+CONST+var_xxx] CONST call sub_xxx mov rsi rsp mov edi CONST mov r8d eax mov eax CONST cdq idiv r8d lea rdx unk_xxx cdqe mov [rsp+CONST+var_xxx+CONST] rax movdqa xmm0 [rsp+CONST+var_xxx] movaps [rsp+CONST+var_xxx] xmm0 call sub_xxx	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_15	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 retn	lea r14 unk_xxx jmp JUMP_ADDR_4	test rax rax jz JUMP_ADDR_13	xor edx edx lea rsi unk_xxx mov edi CONST call sub_xxx test eax eax js JUMP_ADDR_14	mov cs:xxx CONST mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_15	add rsp CONST xor edx edx mov edi CONST pop rbx lea rsi unk_xxx pop rbp pop r12 pop r13 pop r14 jmp UNK_JUMP_ADDR	xor eax eax jmp JUMP_ADDR_6	mov eax CONST jmp JUMP_ADDR_6	call sub_xxx
[ph]libcap-git-setcap___profile_frequency
endbr64 mov eax cs:xxx retn
[ph]libcap-git-setcap__dl_fixup
endbr64 push rbx mov r10 rdi mov esi esi lea rdx [CONST_VAR+rsi*2] sub rsp CONST mov rax [CONST_VAR+CONST] mov rdi [rax+CONST] mov rax [r10+CONST] mov rax [rax+CONST] lea r8 [rax+rdx*8] mov rax [r10+CONST] mov rsi [r8+CONST] mov rbx [r8] mov rax [rax+CONST] mov rcx rsi shr rcx CONST lea rdx [rcx+rcx*2] lea rdx [rax+rdx*8] mov rax [r10] mov [rsp+CONST+var_xxx] rdx add rbx rax cmp esi CONST jnz JUMP_ADDR_20	test [rdx+CONST] CONST jnz JUMP_ADDR_16	mov r8 [r10+CONST] test r8 r8 jz JUMP_ADDR_4	mov rax [r8+CONST] movzx eax [rax+rcx*2] and eax CONST lea rcx [rax+rax*2] mov rax [r10+CONST] lea r8 [rax+rcx*8] xor eax eax mov r9d [r8+CONST] test r9d r9d cmovz r8 rax	mov ecx fs:xxx mov eax CONST test ecx ecx jnz JUMP_ADDR_19	mov edx [rdx] lea r11 [rsp+CONST+var_xxx] mov r9d CONST mov rsi r10 mov rcx [r10+CONST] push CONST push rax add rdi rdx mov rdx r11 call sub_xxx mov r8 rax mov eax fs:xxx pop rcx pop rsi test eax eax jnz JUMP_ADDR_17	mov rdx [rsp+CONST+var_xxx] xor eax eax test rdx rdx jz JUMP_ADDR_11	cmp [rdx+CONST] CONST jz JUMP_ADDR_14	test r8 r8 jz JUMP_ADDR_14	mov rax [r8]	add rax [rdx+CONST] movzx edx [rdx+CONST] and edx CONST cmp dl CONST jz JUMP_ADDR_15	mov edx cs:xxx test edx edx jnz JUMP_ADDR_13	mov [rbx] rax	add rsp CONST pop rbx retn	xor eax eax jmp JUMP_ADDR_10	call rax jmp JUMP_ADDR_11	xor ecx ecx cmp [rdx+CONST] CONST cmovz rax rcx jmp JUMP_ADDR_10	xor eax eax xchg eax fs:xxx cmp eax CONST jnz JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov rax fs:xxx lea rdi [rax+CONST] mov eax CONST syscall jmp JUMP_ADDR_6	mov fs:xxx CONST mov eax CONST jmp JUMP_ADDR_5	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_profile_fixup
endbr64 push r13 mov r10 rdi push r12 push rbp mov rbp r8 push rbx sub rsp CONST mov rbx [CONST_VAR+CONST] test rbx rbx jz JUMP_ADDR_18	mov esi esi mov r12 rdx mov rax rsi shl rax CONST add rbx rax mov eax [rbx+CONST] test eax eax jnz JUMP_ADDR_15	mov rdx [r10+CONST] mov rax [CONST_VAR+CONST] mov r8 [rdx+CONST] mov rdi [rax+CONST] lea rax [CONST_VAR+rsi*2] lea rax [r8+rax*8] mov rcx [rax+CONST] mov rax [r10+CONST] mov rdx rcx mov rax [rax+CONST] shr rdx CONST lea rsi [rdx+rdx*2] lea rax [rax+rsi*8] mov [rsp+CONST+var_xxx] rax cmp ecx CONST jnz JUMP_ADDR_25	test [rax+CONST] CONST jnz JUMP_ADDR_20	mov r8 [r10+CONST] test r8 r8 jz JUMP_ADDR_6	mov rcx [r8+CONST] movzx edx [rcx+rdx*2] and edx CONST lea rcx [rdx+rdx*2] mov rdx [r10+CONST] lea r8 [rdx+rcx*8] xor edx edx mov esi [r8+CONST] test esi esi cmovz r8 rdx	mov ecx fs:xxx mov edx CONST test ecx ecx jnz JUMP_ADDR_22	lea r11 [rsp+CONST+var_xxx] mov eax [rax] mov r9d CONST mov rsi r10 mov rcx [r10+CONST] push CONST push rdx add rdi rax mov rdx r11 call sub_xxx mov r8 rax mov eax fs:xxx pop rdx pop rcx test eax eax jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] xor r13d r13d test rax rax jz JUMP_ADDR_13	cmp [rax+CONST] CONST jz JUMP_ADDR_17	test r8 r8 jz JUMP_ADDR_17	mov r13 [r8]	add r13 [rax+CONST] movzx eax [rax+CONST] and eax CONST cmp al CONST jz JUMP_ADDR_19	mov eax cs:xxx test eax eax jnz JUMP_ADDR_16	mov [rbx] r13 mov [rbx+CONST] CONST jmp JUMP_ADDR_16	mov r13 [rbx]	mov [rbp+CONST] CONST mov rsi r13 mov rdi r12 call sub_xxx add rsp CONST mov rax r13 pop rbx pop rbp pop r12 pop r13 retn	xor r13d r13d jmp JUMP_ADDR_12	mov [r8] CONST add rsp CONST pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR	call r13 mov r13 rax jmp JUMP_ADDR_13	cmp [rax+CONST] CONST jz JUMP_ADDR_17	mov r13 [r10] jmp JUMP_ADDR_12	mov fs:xxx CONST mov edx CONST jmp JUMP_ADDR_7	xor eax eax xchg eax fs:xxx cmp eax CONST jnz JUMP_ADDR_8	xor r10d r10d mov edx CONST mov esi CONST mov rax fs:xxx lea rdi [rax+CONST] mov eax CONST syscall jmp JUMP_ADDR_8	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_call_pltexit
endbr64 retn
[ph]libcap-git-setcap_add_to_global_update
push r15 push r14 push r13 lea r13 off_xxx push r12 push rbp push rbx sub rsp CONST mov r15 [CONST_VAR+CONST] lea rax [r15+r15*8] lea r14 [r15+rax*2] lea rax [r13+r14*8+CONST] mov rdx [rax+CONST] mov r12d [rdx+CONST] mov edx [CONST_VAR+CONST] test edx edx jz JUMP_ADDR_9	mov rbp rdi xor ebx ebx nop [rax+CONST]	mov rdx [rbp+CONST] mov eax ebx mov rdx [rdx+rax*8] movzx eax [rdx+CONST] test al CONST jnz JUMP_ADDR_5	or eax CONST mov [rdx+CONST] al lea rax [r13+r14*8+CONST] cmp [rax+CONST] r12d jbe JUMP_ADDR_10	mov rax [rax+CONST] mov ecx r12d add r12d CONST mov rax [rax] mov [rax+rcx*8] rdx test cs:xxx CONST jnz JUMP_ADDR_8	add ebx CONST cmp [rbp+CONST] ebx ja JUMP_ADDR_2	lea rax [r15+r15*8] lea rax [r15+rax*2] lea rdx [r13+rax*8+CONST] mov rax [rdx+CONST] mov ecx [rdx+CONST] mov edx r12d mov eax [rax+CONST] sub edx eax cmp ecx edx jb JUMP_ADDR_11	lea rdx [r15+r15*8] add eax ecx lea rdx [r15+rdx*2] sub eax r12d lea rdx [r13+rdx*8+CONST] mov [rdx+CONST] eax mov rax [rdx+CONST] mov [rax+CONST] r12d add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r8 [rdx+CONST] mov rsi [rdx+CONST] lea rdi GLOBAL_VAR xor eax eax mov rdx r8 call sub_xxx jmp JUMP_ADDR_5	mov ecx [rax+CONST] mov eax r12d jmp JUMP_ADDR_7	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_call_dl_init
endbr64 mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov esi [CONST_VAR+CONST] mov rdi [CONST_VAR] jmp JUMP_ADDR_1	endbr64 push r15 push r14 mov r14 rdi push r13 mov r13 rcx push r12 mov r12 rdx push rbp mov ebp esi push rbx sub rsp CONST mov r15 [CONST_VAR+CONST] mov rbx [CONST_VAR+CONST] mov rdi cs:xxx test rdi rdi jnz JUMP_ADDR_14	test rbx rbx jz JUMP_ADDR_4	test r15 r15 jnz JUMP_ADDR_8	mov eax [r14+CONST] lea ebx [rax+CONST] test eax eax jz JUMP_ADDR_7	shl rbx CONST nop [rax+rax+CONST]	mov rax [r14+CONST] mov rcx r13 mov rdx r12 mov esi ebp mov rdi [rax+rbx] sub rbx CONST call sub_xxx cmp rbx CONST jnz JUMP_ADDR_6	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rbx [rbx+CONST] shr rbx CONST test ebx ebx jz JUMP_ADDR_4	test cs:xxx CONST jnz JUMP_ADDR_15	mov rax [r14] add rax [r15+CONST] lea edx [rbx+CONST] lea rbx [rax+CONST] lea r15 [rbx+rdx*8] jmp JUMP_ADDR_12	add rbx CONST	mov rdx r13 mov rsi r12 mov edi ebp call callfunc_xxx mov rax rbx cmp r15 rbx jnz JUMP_ADDR_11	jmp JUMP_ADDR_4	call sub_xxx mov cs:xxx CONST jmp JUMP_ADDR_2	mov rsi [r14+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_17	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_10
[ph]libcap-git-setcap_add_to_global_resize_failure.isra.0
sub rsp CONST mov rsi [CONST_VAR] lea rcx GLOBAL_VAR xor edx edx mov edi CONST call sub_xxx
[ph]libcap-git-setcap_add_to_global_resize
push r15 push r14 push r13 push r12 mov r12 rdi push rbp lea rbp off_xxx push rbx sub rsp CONST mov rbx [CONST_VAR+CONST] mov edx [CONST_VAR+CONST] lea rax [rbx+rbx*8] lea rax [rbx+rax*2] mov esi [rbp+rax*8+CONST] test edx edx jz JUMP_ADDR_5	mov rax [CONST_VAR+CONST] lea ecx [rdx+CONST] lea rdx [rax+CONST] lea rdi [rdx+rcx*8] xor ecx ecx jmp JUMP_ADDR_3	add rdx CONST	mov rax [rax] movzx eax [rax+CONST] and eax CONST cmp al CONST mov rax rdx adc ecx CONST cmp rdi rdx jnz JUMP_ADDR_2	add ecx esi lea rax [rbx+rbx*8] mov esi ecx lea rax [rbx+rax*2] mov [rbp+rax*8+CONST] esi jb JUMP_ADDR_16	lea rax [rbx+rbx*8] lea rax [rbx+rax*2] lea rax [rbp+rax*8+CONST] mov r13 [rax+CONST] mov eax [rax+CONST] mov r14d [r13+CONST] add rsi r14 test eax eax jz JUMP_ADDR_10	cmp rax rsi jnb JUMP_ADDR_9	add rsi rsi mov eax esi mov r15d esi cmp rsi rax jnz JUMP_ADDR_16	mov r8 [r13+CONST] test r15d r15d jnz JUMP_ADDR_12	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	add rsi CONST mov eax esi mov r15d esi cmp rsi rax jnz JUMP_ADDR_16	xor r8d r8d test r15d r15d jz JUMP_ADDR_9	mov edi r15d mov [rsp+CONST+var_xxx] r8 shl rdi CONST call sub_xxx mov r8 [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_16	mov rsi [r13+CONST] lea rdx ds:xxx mov rdi rax mov [rsp+CONST+var_xxx] r8 call sub_xxx mov rcx rax lea rax [rbx+rbx*8] lea rax [rbx+rax*2] mov [rbp+rax*8+CONST] r15d mov [r13+CONST] rcx mov eax fs:xxx test eax eax mov r8 [rsp+CONST+var_xxx] jnz JUMP_ADDR_15	add rsp CONST mov rdi r8 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	call sub_xxx mov r8 [rsp+CONST+var_xxx] jmp JUMP_ADDR_14	mov rdi [r12+CONST] call sub_xxx
[ph]libcap-git-setcap__dl_find_dso_for_object
endbr64 push r12 push rbx sub rsp CONST cmp cs:xxx CONST jz JUMP_ADDR_8	mov r12 cs:xxx mov rbx rdi test r12 r12 jz JUMP_ADDR_8	nop [rax+CONST]	cmp [r12+CONST] rbx ja JUMP_ADDR_7	cmp [r12+CONST] rbx jbe JUMP_ADDR_7	test [r12+CONST] CONST jnz JUMP_ADDR_9	mov rsi rbx mov rdi r12 call sub_xxx test eax eax jnz JUMP_ADDR_9	mov r12 [r12+CONST] test r12 r12 jnz JUMP_ADDR_3	xor r12d r12d add rsp CONST mov rax r12 pop rbx pop r12 retn	cmp [r12+CONST] CONST jnz JUMP_ADDR_11	add rsp CONST mov rax r12 pop rbx pop r12 retn	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_open
endbr64 push r15 push r14 mov r14 rdi push r13 push r12 push rbp push rbx sub rsp CONST test sil CONST jz JUMP_ADDR_27	mov r13d esi mov r15 rdx mov rbx rcx mov r12d r8d cmp cs:xxx CONST mov rbp r9 jz JUMP_ADDR_3	lea rdi GLOBAL_VAR call callfunc_xxx	cmp rbx CONST jz JUMP_ADDR_12	lea rax [rbx+CONST] test rax CONST jnz JUMP_ADDR_15	mov [rsp+CONST+var_xxx] rbp mov rax [rsp+CONST+arg_xxx] mov rbp rsp lea rsi sub_xxx lea rdx [rsp+CONST+var_xxx] mov rdi rbp mov [rsp+CONST+var_xxx] r12d mov [rsp+CONST+var_xxx] r14 mov [rsp+CONST+var_xxx] r13d mov [rsp+CONST+var_xxx] r15 mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rax call sub_xxx mov r12d eax call sub_xxx mov rsi [rsp+CONST+var_xxx] test rsi rsi js JUMP_ADDR_7	lea rax [CONST_VAR+rsi*8] mov ecx [rsp+CONST+var_xxx] lea rdx [CONST_VAR+rax*2] lea rax off_xxx mov [rax+rdx*8+CONST] ecx	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_16	xor edi edi call sub_xxx mov eax [rax+CONST] test eax eax jnz JUMP_ADDR_28	cmp cs:xxx CONST jz JUMP_ADDR_11	lea rdi GLOBAL_VAR call callfunc_xxx	mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp cs:xxx CONST jz JUMP_ADDR_14	lea rdi GLOBAL_VAR call callfunc_xxx	lea rcx GLOBAL_VAR xor edx edx mov rsi r14 mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR xor edx edx mov rsi r14 mov edi CONST call sub_xxx	cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_24	mov rdi [rsp+CONST+var_xxx] test rdi rdi jz JUMP_ADDR_20	and r13d CONST jz JUMP_ADDR_25	mov esi CONST call sub_xxx mov rsi [rsp+CONST+var_xxx]	xor edi edi call sub_xxx mov edx [rax+CONST] test edx edx jnz JUMP_ADDR_26	cmp cs:xxx CONST jz JUMP_ADDR_23	lea rdi GLOBAL_VAR call callfunc_xxx	xor edx edx mov rsi rbp mov edi r12d call sub_xxx	lea rax [rbx+rbx*8] lea rdx [rbx+rax*2] lea rax off_xxx mov [rax+rdx*8+CONST] CONST jmp JUMP_ADDR_17	mov cs:xxx CONST jmp JUMP_ADDR_19	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi rdi lea rcx GLOBAL_VAR xor edx edx mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_show_scope
endbr64 push r15 mov r15 rdi push r14 push r13 mov r13d esi push r12 push rbp push rbx sub rsp CONST mov rsi [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_2	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	xor eax eax lea rdi GLOBAL_VAR call sub_xxx mov rax [r15+CONST] test rax rax jz JUMP_ADDR_12	movsxd rdx r13d lea rcx GLOBAL_VAR lea rbp GLOBAL_VAR cmp [rax+rdx*8] CONST mov [rsp+CONST+var_xxx] rcx lea rbx ds:xxx lea r12 GLOBAL_VAR jz JUMP_ADDR_11	nop [rax+rax+CONST]	mov esi r13d xor eax eax lea rdi GLOBAL_VAR call sub_xxx mov rax [r15+CONST] mov rsi [rax+rbx] mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_10	xor r14d r14d nop [rax+rax+CONST]	mov rsi [CONST_VAR] mov eax r14d mov rax [CONST_VAR+rax*8] mov rsi [rax+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_9	mov rax cs:xxx mov rsi [rax] test rsi rsi cmovz rsi r12	xor eax eax mov rdi rbp add r14d CONST call sub_xxx mov rax [r15+CONST] mov rsi [rax+rbx] cmp [CONST_VAR+CONST] r14d ja JUMP_ADDR_7	mov rdi [rsp+CONST+var_xxx] xor eax eax add rbx CONST add r13d CONST call sub_xxx mov rax [r15+CONST] cmp [rax+rbx] CONST jnz JUMP_ADDR_5	mov rdi [rsp+CONST+var_xxx] add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	xor eax eax lea rdi GLOBAL_VAR call sub_xxx lea rax GLOBAL_VAR mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_11
[ph]libcap-git-setcap_dl_open_worker
endbr64 push r15 mov esi CONST push r14 push r13 push r12 push rbp push rbx mov rbx rdi sub rsp CONST mov r15 [CONST_VAR] mov ebp [CONST_VAR+CONST] mov rdi r15 call sub_xxx test rax rax jz JUMP_ADDR_57	mov rdi [rbx+CONST] mov r13 cs:xxx call sub_xxx mov r12 rax test rax rax cmovz r12 r13 mov r13 [rbx+CONST] cmp r13 CONST jnz JUMP_ADDR_3	mov r13 [r12+CONST] mov [rbx+CONST] r13	lea rax [r13+r13*8+CONST] lea rcx off_xxx mov rsi r13 lea rax [r13+rax*2+CONST] lea rax [rcx+rax*8] cmp [rax+CONST] CONST mov eax [rax+CONST] setnz [rbx+CONST] xor edi edi mov [rbx+CONST] eax call sub_xxx mov r9 [rbx+CONST] mov r8d ebp xor ecx ecx or r8d CONST mov edx CONST mov rsi r15 mov rdi r12 call sub_xxx mov [rbx+CONST] rax mov r14 rax test rax rax jz JUMP_ADDR_91	test ebp CONST jnz JUMP_ADDR_56	mov eax [rax+CONST] mov r12d ebp and r12d CONST cmp [r14+CONST] CONST lea ecx [rax+CONST] mov [r14+CONST] ecx jnz JUMP_ADDR_116	test r12d r12d jnz JUMP_ADDR_124	mov r8d ebp mov rdi r14 xor ecx ecx xor edx edx and r8d CONST xor esi esi xor r12d r12d call sub_xxx mov edi [r14+CONST] test edi edi jnz JUMP_ADDR_10	jmp JUMP_ADDR_13	add r12d CONST cmp [r14+CONST] r12d jbe JUMP_ADDR_13	mov rdx [r14+CONST] mov eax r12d mov rax [rdx+rax*8] mov rdi [rax+CONST] cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_9	xor edx edx xor esi esi add r12d CONST call sub_xxx cmp [r14+CONST] r12d ja JUMP_ADDR_10	nop [rax+rax+CONST]	mov rsi [rbx+CONST] xor edi edi call sub_xxx mov [rax+CONST] CONST mov r15 rax mov [rsp+CONST+var_xxx] rax call sub_xxx nop mov edx [r14+CONST] lea eax [rdx+CONST] test edx edx jz JUMP_ADDR_19	mov rdi [r14+CONST] mov r8d cs:xxx lea rax [CONST_VAR+rax*8] jmp JUMP_ADDR_16	mov rax rdx	mov rdx [rax] test [rdx+CONST] CONST jnz JUMP_ADDR_18	mov ecx [rdx+CONST] mov esi ecx and esi r8d cmp ecx esi jnz JUMP_ADDR_93	lea rdx [rax+CONST] cmp rdi rax jnz JUMP_ADDR_15	mov rdi r14 call sub_xxx test cs:xxx CONST jnz JUMP_ADDR_133	mov eax ebp mov esi cs:xxx and eax CONST mov [rsp+CONST+var_xxx] eax test esi esi jz JUMP_ADDR_94	mov rsi [r14+CONST] xor eax eax xor r8d r8d mov ecx CONST mov rdx [CONST_VAR] nop [rax]	mov rdx [rdx+CONST] mov edi eax add eax CONST test [rdx+CONST] CONST jnz JUMP_ADDR_24	cmp ecx CONST mov r8d eax cmovz ecx edi	mov edx eax mov rdx [CONST_VAR+rdx*8] test rdx rdx jnz JUMP_ADDR_22	lea edx [r8+CONST] cmp ecx r8d jnb JUMP_ADDR_131	mov r12d edx sub edx ecx xor r13d r13d lea r15 ds:xxx sub r12 rdx shl r12 CONST jmp JUMP_ADDR_28	mov rsi [r14+CONST] mov r15 rdx	mov rdi [CONST_VAR+r15] mov rdx [CONST_VAR+CONST] test [rdx+CONST] CONST jnz JUMP_ADDR_32	test r13d r13d jnz JUMP_ADDR_31	nop	mov rsi [CONST_VAR+CONST] mov edx [rsp+CONST+var_xxx] xor ecx ecx mov r13d CONST call sub_xxx	lea rdx [r15+CONST] cmp r12 r15 jnz JUMP_ADDR_27	mov ecx [r14+CONST] xor r15d r15d test ecx ecx jnz JUMP_ADDR_36	jmp JUMP_ADDR_132	mov eax [r14+CONST] add r15d CONST cmp r15d eax jnb JUMP_ADDR_60	mov rdx [r14+CONST] mov eax r15d mov r12 [rdx+rax*8] movzx eax [r12+CONST] and eax CONST cmp al CONST jnz JUMP_ADDR_35	mov rsi [r12+CONST] mov rax [CONST_VAR] test rax rax jz JUMP_ADDR_125	lea rdi [r14+CONST] lea rdx [CONST_VAR+CONST] nop [rax+CONST]	cmp rax rdi jz JUMP_ADDR_35	mov rax [rdx] add rdx CONST test rax rax jnz JUMP_ADDR_39	nop [rax+CONST]	mov rdx rax add rax CONST cmp [CONST_VAR+rax*8] CONST jnz JUMP_ADDR_42	add rdx CONST	mov rdi [r12+CONST] cmp rdi rdx ja JUMP_ADDR_35	lea r10 [r12+CONST] cmp rdi CONST ja JUMP_ADDR_134	mov [rsp+CONST+var_xxx] CONST mov r11 r10 cmp rsi r10 jz JUMP_ADDR_134	mov rdi r11 shl rdx CONST mov [rsp+CONST+var_xxx] r10 call sub_xxx mov rdi [r12+CONST] mov r10 [rsp+CONST+var_xxx] mov [r12+CONST] rax cmp r10 rdi jz JUMP_ADDR_49	call sub_xxx	mov rax [rsp+CONST+var_xxx] mov [r12+CONST] rax jmp JUMP_ADDR_35	test r12b r12b jnz JUMP_ADDR_99	test r13d r13d jz JUMP_ADDR_53	nop	cmp [rbx+CONST] CONST jz JUMP_ADDR_98	mov eax [rbx+CONST] lea rdx [rsp+CONST+var_xxx] xor edi edi mov [rsp+CONST+var_xxx] r14 lea rsi sub_xxx mov [rsp+CONST+var_xxx] eax mov rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax mov rax [rbx+CONST] mov [rsp+CONST+var_xxx] rax call sub_xxx mov eax [rsp+CONST+var_xxx] test eax eax jnz JUMP_ADDR_97	test cs:xxx CONST jnz JUMP_ADDR_127	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r13 [rbx+CONST] cmp r13 CONST jz JUMP_ADDR_1	mov esi CONST mov rdi r15 mov r12 rax call sub_xxx test rax rax jnz JUMP_ADDR_3	jmp JUMP_ADDR_1	test eax eax jz JUMP_ADDR_132	xor r12d r12d xor r15d r15d jmp JUMP_ADDR_63	add r15d CONST cmp r15d [r14+CONST] jnb JUMP_ADDR_67	mov rdx [r14+CONST] mov eax r15d mov rdi [rdx+rax*8] test [CONST_VAR+CONST] CONST jnz JUMP_ADDR_62	cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_62	xor esi esi mov r12d CONST add r15d CONST call sub_xxx cmp r15d [r14+CONST] jb JUMP_ADDR_63	nop [rax+rax+CONST]	and ebp CONST mov [rsp+CONST+var_xxx] ebp jnz JUMP_ADDR_96	mov rax [r14+CONST] lea rcx off_xxx lea rbp GLOBAL_VAR lea rdx [rax+rax*8] lea rax [rax+rdx*2] mov r15 [rcx+rax*8] test r15 r15 jz JUMP_ADDR_74	nop [rax+rax+CONST]	cmp [r15+CONST] CONST jz JUMP_ADDR_73	test cs:xxx CONST jnz JUMP_ADDR_95	mov edx CONST mov [r15+CONST] dx	mov r15 [r15+CONST] test r15 r15 jnz JUMP_ADDR_70	mov ebp [r14+CONST] xor r15d r15d mov r8d ebp test ebp ebp jnz JUMP_ADDR_79	jmp JUMP_ADDR_106	test cs:xxx CONST jnz JUMP_ADDR_90	mov r8d [r14+CONST]	add r15d CONST mov ebp r8d cmp r15d r8d jnb JUMP_ADDR_50	mov rdx [r14+CONST] mov eax r15d xor esi esi mov rdi [rdx+rax*8] movzx eax [CONST_VAR+CONST] and eax CONST cmp al CONST jnz JUMP_ADDR_76	mov r10 [CONST_VAR+CONST] mov rax [r10] test rax rax jz JUMP_ADDR_126	lea rsi [r14+CONST] lea rdx [r10+CONST]	cmp rax rsi jz JUMP_ADDR_78	mov rax [rdx] add rdx CONST test rax rax jnz JUMP_ADDR_82	xor esi esi nop [rax+rax+CONST]	mov rax rsi add rsi CONST cmp [r10+rsi*8] CONST lea rdx ds:xxx jnz JUMP_ADDR_85	add rax CONST	cmp [CONST_VAR+CONST] rax jbe JUMP_ADDR_142	mov [r10+rax*8] CONST mov rax [CONST_VAR+CONST] lea r8 [r14+CONST] mov [rax+rdx] r8 test cs:xxx CONST jz JUMP_ADDR_77	nop [rax+rax+CONST]	call sub_xxx jmp JUMP_ADDR_77	and ebp CONST jnz JUMP_ADDR_56	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rsi [rdx+CONST] lea rcx GLOBAL_VAR xor edi edi lea rdx GLOBAL_VAR call sub_xxx	mov eax ebp and eax CONST mov [rsp+CONST+var_xxx] eax jmp JUMP_ADDR_21	mov rdx [r15+CONST] mov rsi [r15+CONST] mov rdi rbp xor eax eax call sub_xxx jmp JUMP_ADDR_72	mov rdi r14 call sub_xxx jmp JUMP_ADDR_68	mov rdi r14 call sub_xxx jmp JUMP_ADDR_55	mov rax [rbx+CONST] lea rcx off_xxx xor esi esi lea rdx [rax+rax*8] lea rax [rax+rdx*2] mov rdi [rcx+rax*8+CONST] call sub_xxx jmp JUMP_ADDR_54	test r8d r8d jz JUMP_ADDR_108	xor r12d r12d jmp JUMP_ADDR_102	add r12d CONST cmp r12d r8d jnb JUMP_ADDR_108	mov rsi [r14+CONST] mov edx r12d mov r15 [CONST_VAR+rdx*8] test [r15+CONST] CONST jnz JUMP_ADDR_101	cmp [r15+CONST] CONST jz JUMP_ADDR_101	mov esi CONST mov rdi r15 call sub_xxx test [r15+CONST] CONST mov r8d [r14+CONST] jz JUMP_ADDR_101	cmp r8d ebp cmovz ebp r12d jmp JUMP_ADDR_101	test r12b r12b jz JUMP_ADDR_51	nop [rax+rax+CONST]	add cs:xxx CONST jz JUMP_ADDR_136	cmp [r14+CONST] ebp ja JUMP_ADDR_112	jmp JUMP_ADDR_51	add ebp CONST cmp ebp [r14+CONST] jnb JUMP_ADDR_51	mov rsi [r14+CONST] mov edx ebp mov r12 [CONST_VAR+rdx*8] movzx edx [r12+CONST] and dx CONST cmp dx CONST jnz JUMP_ADDR_111	cmp [r12+CONST] CONST jz JUMP_ADDR_111	and [r12+CONST] CONST mov rdi r12 call cs:xxx test [r12+CONST] CONST jz JUMP_ADDR_111	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	test cs:xxx CONST jnz JUMP_ADDR_139	and ebp CONST jz JUMP_ADDR_128	test [r14+CONST] CONST jz JUMP_ADDR_137	test r12d r12d jz JUMP_ADDR_129	test cs:xxx CONST jnz JUMP_ADDR_143	mov [r14+CONST] CONST	test [r14+CONST] CONST jnz JUMP_ADDR_129	mov rdi r14 call sub_xxx jmp JUMP_ADDR_129	mov [r14+CONST] CONST jmp JUMP_ADDR_7	mov edx CONST jmp JUMP_ADDR_44	mov eax CONST xor edx edx xor esi esi jmp JUMP_ADDR_87	mov ecx [r14+CONST] mov rdx [r14+CONST] lea rdi GLOBAL_VAR xor eax eax mov rsi [r14+CONST] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	test r12d r12d jnz JUMP_ADDR_140	mov rsi [rbx+CONST] xor edi edi call sub_xxx mov r8d [rax+CONST] test r8d r8d jz JUMP_ADDR_56	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	xor r13d r13d jmp JUMP_ADDR_33	xor r12d r12d jmp JUMP_ADDR_67	xor esi esi mov rdi r14 call sub_xxx jmp JUMP_ADDR_20	lea rax [CONST_VAR+CONST_VAR] shl rdi CONST mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] r10 mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rax call sub_xxx mov rsi [rsp+CONST+var_xxx] mov r10 [rsp+CONST+var_xxx] test rax rax mov rdx [rsp+CONST+var_xxx] mov r11 rax jnz JUMP_ADDR_47	lea rcx GLOBAL_VAR xor edx edx mov edi CONST lea rsi GLOBAL_VAR call sub_xxx	lea rdi GLOBAL_VAR xor eax eax call sub_xxx	mov rdi r14 call sub_xxx test r12d r12d jz JUMP_ADDR_122	jmp JUMP_ADDR_120	mov rdx [r14+CONST] mov rsi [r14+CONST] lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_117	test cs:xxx CONST jnz JUMP_ADDR_145	mov [r14+CONST] CONST jmp JUMP_ADDR_129	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	cmp [r14+CONST] CONST jnz JUMP_ADDR_121	mov rdx [r14+CONST] mov rsi [r14+CONST] lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_121	cmp [r14+CONST] CONST jnz JUMP_ADDR_141	mov rdx [r14+CONST] mov rsi [r14+CONST] lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_141
[ph]libcap-git-setcap_call_destructors
endbr64 mov rax [CONST_VAR+CONST] push r12 mov r12 rdi push rbp push rbx test rax rax jz JUMP_ADDR_4	mov rbp [rax+CONST] mov rax [CONST_VAR+CONST] add rbp [CONST_VAR] mov rax [rax+CONST] shr rax CONST lea edx [rax+CONST] test eax eax jz JUMP_ADDR_4	lea rbx [rbp+rdx*8+CONST] nop [rax+CONST]	call callfunc_xxx mov rax rbx sub rbx CONST cmp rbp rax jnz JUMP_ADDR_3	mov rdx [r12+CONST] test rdx rdx jz JUMP_ADDR_6	mov rax [r12] pop rbx add rax [rdx+CONST] pop rbp pop r12 jmp rax	pop rbx pop rbp pop r12 retn
[ph]libcap-git-setcap_remove_slotinfo
push rbp mov rbp rsi mov rsi rdi push rbx sub rsi rdx mov rbx rdx sub rsp CONST mov rdx [rbp+CONST] cmp rsi rdx jb JUMP_ADDR_4	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_9	add rdx rbx movzx ecx cl call sub_xxx test al al jnz JUMP_ADDR_8	mov rdi [rbp+CONST] add rdi rbx jmp JUMP_ADDR_10	shl rsi CONST add rsi rbp mov rdx [CONST_VAR+CONST] test rdx rdx jz JUMP_ADDR_7	cmp [rdx+CONST] rdi jnz JUMP_ADDR_15	mov rax cs:xxx mov [CONST_VAR+CONST] CONST lea rdx [rax+CONST] mov [CONST_VAR+CONST] rdx	cmp cs:xxx rdi jz JUMP_ADDR_10	add rsp CONST mov eax CONST pop rbx pop rbp retn	test cl cl jnz JUMP_ADDR_16	mov rax cs:xxx xor edx edx test rbx rbx lea rcx [rbx+CONST] lea rsi [rax+CONST] mov rax rdi cmovnz rsi rdx sub rax rbx jmp JUMP_ADDR_12	lea rdi [rcx+rax] sub rax CONST mov rdx rax shl rdx CONST cmp [rbp+rdx+CONST] CONST jnz JUMP_ADDR_14	cmp rax rsi ja JUMP_ADDR_11	add rsp CONST xor eax eax pop rbx pop rbp retn	mov cs:xxx rdi jmp JUMP_ADDR_8	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_close_worker
endbr64 mov rcx CONST
[ph]libcap-git-setcap__dl_close
endbr64 cmp cs:xxx CONST push rbp mov rbp rdi jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call callfunc_xxx	cmp [rbp+CONST] CONST jnz JUMP_ADDR_5	mov eax [rbp+CONST] test eax eax jz JUMP_ADDR_8	xor esi esi mov rdi rbp call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_7	lea rdi GLOBAL_VAR pop rbp jmp UNK_ADDR	pop rbp retn	cmp cs:xxx CONST jz JUMP_ADDR_10	lea rdi GLOBAL_VAR call callfunc_xxx	mov rsi [rbp+CONST] lea rcx GLOBAL_VAR xor edx edx xor edi edi call sub_xxx
[ph]libcap-git-setcap__dl_sort_maps
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 push rbx sub rsp CONST mov [rbp+var_xxx] rdi mov [rbp+var_xxx] esi mov [rbp+var_xxx] rdx mov [rbp+var_xxx] cl cmp esi CONST jbe JUMP_ADDR_30	mov edx esi mov rax rsp xor esi esi xor r14d r14d mov rbx rdx add rdx rdx mov [rbp+var_xxx] rax lea rax [rdx+CONST] shr rax CONST shl rax CONST sub rsp rax mov r15 rsp mov rdi r15 call sub_xxx mov rcx [rbp+var_xxx] lea eax [rbx+CONST] xor r8d r8d mov [rbp+var_xxx] eax mov [rbp+var_xxx] rax lea rax [rcx+rax*8] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rax mov rax r14 mov r14d r8d mov r8 rax nop [rax+CONST]	movzx eax [r15+r8*2] add eax CONST cmp [rbp+var_xxx] CONST mov [rbp+var_xxx] ax mov [r15+r8*2] ax mov rax [rbp+var_xxx] lea rdi [rax+r8*8] mov rbx [CONST_VAR] jnz JUMP_ADDR_26	cmp r14d [rbp+var_xxx] jnb JUMP_ADDR_8	mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] movzx r9d [rbp+var_xxx]	mov rsi [r13+CONST] mov ecx r12d mov rax [CONST_VAR+CONST] test rax rax jnz JUMP_ADDR_10	test r9b r9b jnz JUMP_ADDR_17	sub r12 CONST sub r13 CONST cmp r14d r12d jb JUMP_ADDR_5	mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jz JUMP_ADDR_29	mov [rbp+var_xxx] rax jmp JUMP_ADDR_15	mov rdx [rax] test rdx rdx jz JUMP_ADDR_6	add rax CONST cmp rdx rbx jnz JUMP_ADDR_10	mov r10d [rbp+var_xxx] mov r11d ecx mov rax [rbp+var_xxx] mov [rbp+var_xxx] r8 sub r11d r14d mov [rbp+var_xxx] ecx lea rdx ds:xxx lea rsi [rax+r10*8] mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r11 mov [rbp+var_xxx] r10 call sub_xxx mov r10 [rbp+var_xxx] mov ecx [rbp+var_xxx] mov [r13+CONST] rbx mov r13 [rbp+var_xxx] mov r11 [rbp+var_xxx] mov r8 [rbp+var_xxx] test r13 r13 jz JUMP_ADDR_14	lea rdi [r13+r8+CONST] lea rsi [r13+r10+CONST] mov rdx r11 mov [rbp+var_xxx] ecx movzx ebx [CONST_VAR] mov [rbp+var_xxx] r8 mov [rbp+var_xxx] r10 mov [rbp+var_xxx] r11 call sub_xxx mov [r13+r12+CONST] bl mov ecx [rbp+var_xxx] mov r8 [rbp+var_xxx] mov r10 [rbp+var_xxx] mov r11 [rbp+var_xxx]	mov eax [rbp+var_xxx] movzx edx [r15+r10*2] sub eax r14d cmp edx eax jbe JUMP_ADDR_16	mov ebx [rbp+var_xxx] mov edx [rbp+var_xxx] xor esi esi mov rax [rbp+var_xxx] sub edx ebx mov r14d ebx add rdx rdx lea rdi [r15+rax*2] call sub_xxx lea eax [rbx+CONST] mov r8d ebx mov [rbp+var_xxx] eax jmp JUMP_ADDR_2	lea rdi [r15+r8*2] lea rdx [r11+r11] mov [rbp+var_xxx] ecx lea rsi [r15+r10*2] mov [rbp+var_xxx] r8 call sub_xxx mov ecx [rbp+var_xxx] movzx eax [rbp+var_xxx] mov r8 [rbp+var_xxx] mov [r15+rcx*2] ax jmp JUMP_ADDR_2	mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_7	lea rdx [rax+CONST] mov eax [rax] sub eax CONST nop [rax+CONST]	cmp eax CONST jz JUMP_ADDR_7	mov r10d eax sub eax CONST cmp [rdx+r10*8] rbx jnz JUMP_ADDR_19	mov rax [rbx+CONST] test rax rax jnz JUMP_ADDR_24	jmp JUMP_ADDR_12	add rax CONST cmp rsi rdx jz JUMP_ADDR_7	mov rdx [rax] test rdx rdx jnz JUMP_ADDR_23	jmp JUMP_ADDR_12	cmp [rbx+CONST] rbx jnz JUMP_ADDR_8	cmp [rbx+CONST] CONST jnz JUMP_ADDR_3	mov eax [rbp+var_xxx] cmp [rbp+var_xxx] eax jnz JUMP_ADDR_9	mov rsp [rbp+var_xxx]	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn
[ph]libcap-git-setcap__dl_call_libc_early_init
endbr64 test rdi rdi jz JUMP_ADDR_5	push rbp mov r8d CONST mov ebp esi lea rcx GLOBAL_VAR push rbx mov edx CONST lea rsi GLOBAL_VAR mov rbx rdi sub rsp CONST call sub_xxx test rax rax jz JUMP_ADDR_7	cmp [rax+CONST] CONST jz JUMP_ADDR_6	mov rdx [rbx]	add rdx [rax+CONST] add rsp CONST movzx edi bpl pop rbx pop rbp jmp rdx	retn	xor edx edx jmp JUMP_ADDR_4	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_tlsdesc_resolve_rela_fixup
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST mov rax [CONST_VAR+CONST] mov r12 [CONST_VAR] mov r13 [CONST_VAR+CONST] add r12 [rax+CONST] mov rax [CONST_VAR] cmp r12 rax jz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	cmp cs:xxx CONST mov rbx rdi mov rbp rsi jz JUMP_ADDR_4	lea rdi GLOBAL_VAR call callfunc_xxx	mov rax [rbx] cmp r12 rax jz JUMP_ADDR_7	cmp cs:xxx CONST jz JUMP_ADDR_1	lea rdi GLOBAL_VAR call callfunc_xxx add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	lea rax sub_xxx mov [rbx] rax mov rax [rbp+CONST] mov edx [r13+CONST] mov rdi [rax+CONST] mov rax [rbp+CONST] lea rcx [rdx+rdx*2] mov rax [rax+CONST] lea rax [rax+rcx*8] mov [rsp+CONST+var_xxx] rax movzx ecx [rax+CONST] shr cl CONST jz JUMP_ADDR_13	test [rax+CONST] CONST jnz JUMP_ADDR_13	mov r8 [rbp+CONST] test r8 r8 jz JUMP_ADDR_11	mov rcx [r8+CONST] movzx edx [rcx+rdx*2] and edx CONST lea rcx [rdx+rdx*2] mov rdx [rbp+CONST] lea r8 [rdx+rcx*8] xor edx edx mov ecx [r8+CONST] test ecx ecx cmovz r8 rdx	lea rdx [rsp+CONST+var_xxx] mov eax [rax] mov rsi rbp mov r9d CONST mov rcx [rbp+CONST] push CONST push CONST add rdi rax call sub_xxx mov rbp rax pop rax pop rdx cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_13	mov rax [r13+CONST] mov [rbx+CONST] rax lea rax sub_xxx mov [rbx] rax jmp JUMP_ADDR_5	mov rdx [rbp+CONST] lea rax [rdx+CONST] cmp rax CONST jbe JUMP_ADDR_15	mov rcx [rsp+CONST+var_xxx] mov rax [r13+CONST] add rax [rcx+CONST] sub rax rdx mov [rbx+CONST] rax lea rax sub_xxx mov [rbx] rax jmp JUMP_ADDR_5	mov rdi rbp call sub_xxx mov rdx [rbp+CONST] jmp JUMP_ADDR_14
[ph]libcap-git-setcap__dl_tlsdesc_resolve_hold_fixup
endbr64 mov rax [CONST_VAR] cmp rax rsi jz JUMP_ADDR_2	retn	cmp cs:xxx CONST jz JUMP_ADDR_6	sub rsp CONST lea rdi GLOBAL_VAR call callfunc_xxx cmp cs:xxx CONST jz JUMP_ADDR_5	lea rdi GLOBAL_VAR add rsp CONST jmp UNK_ADDR	add rsp CONST retn	cmp cs:xxx CONST jz JUMP_ADDR_1	lea rdi GLOBAL_VAR jmp UNK_ADDR
[ph]libcap-git-setcap__dl_unmap
endbr64 mov r8 [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi r8 sub rsi r8 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__dl_cet_open_check
endbr64 movzx eax cs:xxx mov r10 rdi mov edi cs:xxx mov esi eax shr al CONST and esi CONST and eax CONST cmp esi CONST setz dl cmp eax CONST setz cl and dl cl jnz JUMP_ADDR_15	test dil CONST jz JUMP_ADDR_14	push r15 mov ecx edi push r14 shr ecx CONST push r13 push r12 push rbp push rbx mov ebx edi and ebx CONST sub rsp CONST mov [rsp+CONST+var_xxx] bl mov ebx ecx and ebx CONST cmp esi CONST setnz r11b mov [rsp+CONST+var_xxx] bl and r11d edi cmp eax CONST setnz r8b mov ebp r11d and r8d ecx or bpl r8b jz JUMP_ADDR_16	mov edi [r10+CONST] lea ecx [CONST_VAR+CONST] test edi edi jz JUMP_ADDR_38	mov rbx [r10+CONST] mov edi ecx xor r14d r14d xor r9d r9d mov [rsp+CONST+var_xxx] r10 movzx r10d [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx lea rdi [rbx+rdi*8] xor ebx ebx jmp JUMP_ADDR_9	mov r12d [r12+CONST] movzx r15d [rsp+CONST+var_xxx] and r11d r12d xor r15d r11d and r15b r13b cmovnz edx r15d cmovnz rbx rcx cmp eax CONST jz JUMP_ADDR_7	shr r12d CONST and r8d r12d	cmp r10b r8b cmovnz r14d ebp cmovnz r9 rcx	sub ecx CONST sub rdi CONST cmp ecx CONST jz JUMP_ADDR_20	mov r12 [CONST_VAR] test [r12+CONST] CONST jnz JUMP_ADDR_8	mov r13d edx xor r13d CONST cmp esi CONST jnz JUMP_ADDR_5	movzx r15d [rsp+CONST+var_xxx] xor r15d r11d and r15b r13b jz JUMP_ADDR_13	mov edx r15d mov ebx ecx	mov r12d [r12+CONST] jmp JUMP_ADDR_6	retn	mov fs:xxx edi retn	xor r8d r8d	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_29	cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_29	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r10 [rsp+CONST+var_xxx] cmp r11b [rsp+CONST+var_xxx] jnz JUMP_ADDR_22	cmp [rsp+CONST+var_xxx] r8b jz JUMP_ADDR_19	cmp esi CONST jz JUMP_ADDR_25	test dl dl jz JUMP_ADDR_25	mov rax [rsp+CONST+var_xxx] lea rcx GLOBAL_VAR lea rdx GLOBAL_VAR xor edi edi mov rax [rax+rbx*8] mov rsi [rax+CONST] call sub_xxx	cmp eax CONST jz JUMP_ADDR_28	test r14b r14b jnz JUMP_ADDR_39	cmp esi CONST jnz JUMP_ADDR_19	mov ebp r11d jmp JUMP_ADDR_32	cmp eax CONST jz JUMP_ADDR_31	cmp esi CONST jnz JUMP_ADDR_19	xor r9d r9d xor ebx ebx	mov esi ebp mov edi CONST xor esi CONST movzx esi sil mov eax esi or eax CONST test r8b r8b cmovz esi eax mov eax CONST syscall test eax eax jz JUMP_ADDR_36	mov rcx [r10+CONST] test dl dl jnz JUMP_ADDR_37	mov rdx [rcx+r9*8]	mov rsi [rdx+CONST] mov edi eax lea rcx GLOBAL_VAR lea rdx GLOBAL_VAR neg edi call sub_xxx	movzx ebp bpl not esi and cs:xxx esi mov eax ebp or eax CONST test r8b r8b cmovnz ebp eax mov fs:xxx ebp jmp JUMP_ADDR_19	mov rdx [rcx+rbx*8] jmp JUMP_ADDR_35	xor [rsp+CONST+var_xxx] r8b mov ebp r11d xor [rsp+CONST+var_xxx] r11b jmp JUMP_ADDR_17	mov rax [rsp+CONST+var_xxx] lea rcx GLOBAL_VAR lea rdx GLOBAL_VAR xor edi edi mov rax [rax+r9*8] mov rsi [rax+CONST] call sub_xxx
[ph]libcap-git-setcap__dl_addr
endbr64 push r15 push r14 push r13 mov r13 rsi push r12 mov r12 rdi push rbp mov rbp rdx push rbx mov rbx rcx sub rsp CONST cmp cs:xxx CONST jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call callfunc_xxx	mov rdi r12 xor r14d r14d call sub_xxx mov r8 rax test rax rax jz JUMP_ADDR_31	mov rax [rax+CONST] mov rdx [r8+CONST] mov [r13+CONST] rax mov [r13+CONST] rdx cmp [rax] CONST jz JUMP_ADDR_64	mov rax [r8+CONST] mov r11 [r8+CONST] mov rsi [rax+CONST] mov rax [r8+CONST] mov rax [rax+CONST] mov [rsp] rax mov rax [r8+CONST] mov eax [rax+CONST] mov [rsp+CONST] eax test r11 r11 jz JUMP_ADDR_34	mov edx [r8+CONST] test edx edx jz JUMP_ADDR_22	mov rax [r8+CONST] sub edx CONST xor r11d r11d lea rdi [rax+CONST] lea r15 [CONST_VAR+rdx*4] jmp JUMP_ADDR_9	mov rax rdi cmp r15 rdi jz JUMP_ADDR_23	add rdi CONST	mov eax [rax] test eax eax jz JUMP_ADDR_7	mov r9 [r8+CONST] lea rax [r9+rax*4] jmp JUMP_ADDR_19	cmp [rdx+CONST] CONST jz JUMP_ADDR_18	movzx r10d [rdx+CONST] and r10d CONST cmp r10b CONST jz JUMP_ADDR_18	mov r14 [rdx+CONST] mov r10 [r8] add r10 r14 cmp r12 r10 jb JUMP_ADDR_18	test cx cx jz JUMP_ADDR_52	mov rcx [rdx+CONST] test rcx rcx jnz JUMP_ADDR_54	cmp r12 r10 jz JUMP_ADDR_55	nop [rax+CONST]	add rax CONST test [rax+CONST] CONST jnz JUMP_ADDR_7	mov rdx rax sub rdx r9 sar rdx CONST mov edx edx lea rdx [rdx+rdx*2] lea rdx [CONST_VAR+rdx*8] movzx ecx [rdx+CONST] test cx cx jz JUMP_ADDR_11	cmp cx CONST jz JUMP_ADDR_18	jmp JUMP_ADDR_12	xor r11d r11d nop [rax+rax+CONST]	test rbp rbp jz JUMP_ADDR_25	mov [rbp+CONST] r8	test rbx rbx jz JUMP_ADDR_27	mov [rbx] r11	test r11 r11 jz JUMP_ADDR_58	mov eax [r11] add rax [rsp] cmp [r11+CONST] CONST mov [r13+CONST] rax jz JUMP_ADDR_66	mov rax [r8]	add rax [r11+CONST] mov r14d CONST mov [r13+CONST] rax	cmp cs:xxx CONST jz JUMP_ADDR_33	lea rdi GLOBAL_VAR call callfunc_xxx	add rsp CONST mov eax r14d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [r8+CONST] mov rcx [rsp] test rax rax jz JUMP_ADDR_36	mov rax [rax+CONST] mov eax [rax+CONST] lea rax [rax+rax*2] lea rcx [CONST_VAR+rax*8]	cmp rsi rcx jnb JUMP_ADDR_23	movzx edx [CONST_VAR+CONST] mov eax edx shr al CONST sub eax CONST cmp al CONST jbe JUMP_ADDR_41	nop [rax]	add rsi CONST cmp rsi rcx jnb JUMP_ADDR_23	movzx edx [CONST_VAR+CONST] mov eax edx shr al CONST sub eax CONST cmp al CONST ja JUMP_ADDR_39	movzx eax [CONST_VAR+CONST] and eax CONST sub eax CONST cmp eax CONST jbe JUMP_ADDR_39	and edx CONST cmp dl CONST jz JUMP_ADDR_39	movzx eax [CONST_VAR+CONST] test ax ax jnz JUMP_ADDR_59	mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_39	mov rdx [r8] add rdx rax cmp r12 rdx jb JUMP_ADDR_39	jz JUMP_ADDR_49	mov rdi [CONST_VAR+CONST]	add rdx rdi cmp r12 rdx jnb JUMP_ADDR_39	test r11 r11 jz JUMP_ADDR_51	cmp [r11+CONST] rax jnb JUMP_ADDR_39	mov eax [rsp+CONST] cmp eax [CONST_VAR] cmova r11 rsi jmp JUMP_ADDR_39	cmp r12 r10 jz JUMP_ADDR_55	mov rcx [rdx+CONST]	add rcx r10 cmp r12 rcx jnb JUMP_ADDR_18	test r11 r11 jz JUMP_ADDR_57	cmp r14 [r11+CONST] jbe JUMP_ADDR_18	mov ecx [rsp+CONST] cmp ecx [rdx] cmova r11 rdx jmp JUMP_ADDR_18	mov [r13+CONST] CONST mov r14d CONST mov [r13+CONST] CONST jmp JUMP_ADDR_31	cmp ax CONST jz JUMP_ADDR_39	mov rax [CONST_VAR+CONST] mov rdx [r8] add rdx rax cmp r12 rdx jb JUMP_ADDR_39	mov rdi [CONST_VAR+CONST] test rdi rdi jnz JUMP_ADDR_48	cmp r12 rdx jnz JUMP_ADDR_39	jmp JUMP_ADDR_49	test [r8+CONST] CONST jnz JUMP_ADDR_4	mov rax cs:xxx mov rax [rax] mov [r13+CONST] rax jmp JUMP_ADDR_4	xor eax eax jmp JUMP_ADDR_30
[ph]libcap-git-setcap__dl_addr_inside_object
endbr64 movzx ecx [CONST_VAR+CONST] sub rsi [CONST_VAR] test cx cx jz JUMP_ADDR_6	movzx eax cx mov rdi [CONST_VAR+CONST] lea rdx ds:xxx sub rdx rax shl rdx CONST lea rax [CONST_VAR+rdx+CONST] lea rdx [CONST_VAR+rdx+CONST] lea edi [rcx+CONST] lea rcx ds:xxx sub rcx rdi shl rcx CONST sub rdx rcx jmp JUMP_ADDR_3	sub rax CONST cmp rax rdx jz JUMP_ADDR_6	cmp [rax] CONST jnz JUMP_ADDR_2	mov rcx rsi sub rcx [rax+CONST] cmp rcx [rax+CONST] jnb JUMP_ADDR_2	mov eax CONST retn	xor eax eax retn
[ph]libcap-git-setcap___mpn_add_n
endbr64 xor r8 r8 mov r10 [CONST_VAR] mov r11 [rdx] lea rsi [CONST_VAR+rcx*8+CONST] lea rdx [rdx+rcx*8+CONST] lea rdi [CONST_VAR+rcx*8+CONST] mov eax ecx neg rcx and eax CONST jz JUMP_ADDR_4	add rcx rax cmp eax CONST jl JUMP_ADDR_5	jz JUMP_ADDR_6	shr r8 CONST jmp JUMP_ADDR_10	shr r8 CONST mov r8 r10 mov r9 r11 lea rcx [rcx+CONST] jmp JUMP_ADDR_9	shr r8 CONST jmp JUMP_ADDR_12	shr r8 CONST mov r8 r10 mov r9 r11 jmp JUMP_ADDR_11	adc r10 r11 mov [CONST_VAR+CONST] r10 mov eax ecx adc eax eax retn	mov r8 [CONST_VAR+rcx*8+CONST] mov r9 [rdx+rcx*8+CONST] adc r10 r11 mov [CONST_VAR+rcx*8+CONST] r10	mov r10 [CONST_VAR+rcx*8+CONST] mov r11 [rdx+rcx*8+CONST] adc r8 r9 mov [CONST_VAR+rcx*8+CONST] r8	mov r8 [CONST_VAR+rcx*8+CONST] mov r9 [rdx+rcx*8+CONST] adc r10 r11 mov [CONST_VAR+rcx*8+CONST] r10	mov r10 [CONST_VAR+rcx*8] mov r11 [rdx+rcx*8] adc r8 r9 mov [CONST_VAR+rcx*8] r8	jrcxz JUMP_ADDR_7	lea rcx [rcx+CONST] jmp JUMP_ADDR_8
[ph]libcap-git-setcap___mpn_addmul_1
endbr64 push rbx push rbp lea rbx [rdx] neg rbx mov rax [CONST_VAR] mov r10 [CONST_VAR] lea rdi [CONST_VAR+rdx*8+CONST] lea rsi [CONST_VAR+rdx*8] mul rcx bt ebx CONST jb JUMP_ADDR_3	lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] lea rbp [rdx] mul rcx add rbx CONST jns JUMP_ADDR_9	lea r8 [rax] mov rax [CONST_VAR+rbx*8] lea r9 [rdx] jmp JUMP_ADDR_6	add rbx CONST jns JUMP_ADDR_10	lea r8 [rax] mov rax [CONST_VAR+rbx*8] lea r9 [rdx] mul rcx lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] lea rbp [rdx] jmp JUMP_ADDR_7	mul rcx add r10 r8 lea r8 [rax] mov rax [CONST_VAR+rbx*8] adc r11 r9 mov [CONST_VAR+rbx*8+CONST] r10 mov r10 [CONST_VAR+rbx*8] lea r9 [rdx] adc rbp CONST	mul rcx add r10 r11 lea r11 [rax] mov rax [CONST_VAR+rbx*8+CONST] adc r8 rbp mov [CONST_VAR+rbx*8] r10 mov r10 [CONST_VAR+rbx*8+CONST] lea rbp [rdx] adc r9 CONST	add rbx CONST js JUMP_ADDR_5	mul rcx add r10 r8 adc r11 r9 mov [CONST_VAR+CONST] r10 adc rbp CONST	mov r10 [CONST_VAR] add r10 r11 adc rax rbp mov [CONST_VAR] r10 adc rdx CONST	mov r10 [CONST_VAR+CONST] add r10 rax mov [CONST_VAR+CONST] r10 mov eax ebx adc rax rdx pop rbp pop rbx retn
[ph]libcap-git-setcap_dlopen_doit
endbr64 push rbx mov esi [CONST_VAR+CONST] test esi CONST jnz JUMP_ADDR_2	mov rdx [CONST_VAR+CONST] mov rbx rdi mov rdi [CONST_VAR] or esi CONST lea rax unk_xxx mov r9 cs:xxx mov r8d cs:xxx test rdi rdi cmovz rdi rax sub rsp CONST push cs:xxx xor ecx ecx call sub_xxx mov [rbx+CONST] rax pop rax pop rdx pop rbx retn	mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx xor edx edx xor esi esi xor edi edi mov rcx rax call sub_xxx
[ph]libcap-git-setcap___dlopen
endbr64 sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdi lea rdi sub_xxx mov [rsp+CONST+var_xxx] esi mov rsi rsp mov [rsp+CONST+var_xxx] rdx call sub_xxx mov r8d eax xor eax eax test r8d r8d jnz JUMP_ADDR_2	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rax [rsp+CONST+var_xxx]	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_4	add rsp CONST retn	call sub_xxx
[ph]libcap-git-setcap_dlclose_doit
endbr64 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___dlclose
endbr64 sub rsp CONST mov rsi rdi lea rdi sub_xxx call sub_xxx neg eax sbb eax eax add rsp CONST retn
[ph]libcap-git-setcap_dlsym_doit
endbr64 push rbx mov rbx rdi mov rdx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR] call sub_xxx mov [rbx+CONST] rax pop rbx retn
[ph]libcap-git-setcap___dlsym
endbr64 push r12 sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax cmp cs:xxx CONST mov [rsp+CONST] rdx mov [rsp] rdi mov [rsp+CONST] rsi jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call callfunc_xxx	mov rsi rsp lea rdi sub_xxx call sub_xxx test eax eax mov eax CONST cmovz rax [rsp+CONST] cmp cs:xxx CONST mov r12 rax jz JUMP_ADDR_4	lea rdi GLOBAL_VAR call callfunc_xxx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_6	add rsp CONST mov rax r12 pop r12 retn	call sub_xxx
[ph]libcap-git-setcap_dlvsym_doit
endbr64 push rbx mov rbx rdi mov rcx [CONST_VAR+CONST] mov rdx [CONST_VAR+CONST] mov rsi [CONST_VAR+CONST] mov rdi [CONST_VAR] call sub_xxx mov [rbx+CONST] rax pop rbx retn
[ph]libcap-git-setcap___dlvsym
endbr64 push r12 sub rsp CONST mov rax fs:xxx mov [rsp+CONST] rax xor eax eax cmp cs:xxx CONST mov [rsp] rdi mov [rsp+CONST] rsi mov [rsp+CONST] rcx mov [rsp+CONST] rdx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call callfunc_xxx	mov rsi rsp lea rdi sub_xxx call sub_xxx test eax eax mov eax CONST cmovz rax [rsp+CONST] cmp cs:xxx CONST mov r12 rax jz JUMP_ADDR_4	lea rdi GLOBAL_VAR call callfunc_xxx	mov rax [rsp+CONST] sub rax fs:xxx jnz JUMP_ADDR_6	add rsp CONST mov rax r12 pop r12 retn	call sub_xxx
[ph]libcap-git-setcap___setitimer
endbr64 mov eax CONST syscall cmp rax CONST ja JUMP_ADDR_2	retn	mov rdx CONST neg eax mov fs:xxx eax mov eax CONST retn
[ph]libcap-git-setcap__dl_build_local_scope
mov [CONST_VAR] rsi movzx eax [CONST_VAR+CONST] mov r8d CONST and eax CONST or eax CONST mov [CONST_VAR+CONST] al mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_7	push r12 lea r12 [CONST_VAR+CONST] push rbp mov rbp rdi push rbx mov rsi [rax+CONST] lea rbx [rax+CONST] test rsi rsi jz JUMP_ADDR_5	test [CONST_VAR+CONST] CONST jz JUMP_ADDR_6	mov rsi [rbx+CONST] add rbx CONST test rsi rsi jnz JUMP_ADDR_2	sub r12 rbp mov r8 r12 sar r8 CONST	pop rbx mov rax r8 pop rbp pop r12 retn	mov rdi r12 call sub_xxx lea r12 [r12+rax*8] jmp JUMP_ADDR_3	mov rax r8 retn
[ph]libcap-git-setcap_openaux
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR] mov ecx [rbx+CONST] mov rsi [rbx+CONST] movzx eax [CONST_VAR+CONST] mov r8d [rbx+CONST] mov r9 [CONST_VAR+CONST] mov edx eax and edx CONST test al CONST mov eax CONST cmovz edx eax call sub_xxx mov [rbx+CONST] rax pop rbx retn
[ph]libcap-git-setcap__dl_map_object_deps
endbr64 push rbp mov r9d edx lea eax [r9+CONST] lea rax [rax+rax*2] mov rbp rsp push r15 lea rax ds:xxx push r14 shr rax CONST push r13 shl rax CONST push r12 push rbx sub rsp CONST mov [rbp+var_xxx] r8d sub rsp rax movzx eax [CONST_VAR+CONST] mov [rbp+var_xxx] rdi lea r8 [rsp+CONST+var_xxx] mov [rbp+var_xxx] ecx and r8 CONST mov [rbp+var_xxx] al and eax CONST lea rdx [r8+CONST] or eax CONST mov [r8+CONST] rdi mov r15 r8 mov [r8] CONST mov [r8+CONST] rdx mov [CONST_VAR+CONST] al test r9d r9d jz JUMP_ADDR_138	lea eax [r9+CONST] mov rdi rsi mov ecx CONST mov [rbp+var_xxx] eax nop [rax]	lea eax [rcx+CONST] mov rsi [CONST_VAR] mov r10d ecx mov [rdx] CONST mov rcx rax lea rax [rax+rax*2] add rdi CONST add rdx CONST lea rax [r8+rax*8] mov [rdx+CONST] rsi mov [rdx+CONST] rax movzx eax [CONST_VAR+CONST] and eax CONST or eax CONST mov [CONST_VAR+CONST] al cmp r9d r10d jnz JUMP_ADDR_2	lea rax [r9+r9*2] mov r14 [r8+CONST] lea rax [r8+rax*8] mov [rbp+var_xxx] rax	mov rax [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rax+CONST] CONST lea rax [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax mov rax CONST mov eax fs:xxx mov [rbp+var_xxx] eax mov rax CONST mov fs:xxx CONST mov [rbp+var_xxx] r8 mov [rbp+CONST] r15	mov rax [rbp+var_xxx] mov r15 [r14+CONST] mov [rax] CONST test r15 r15 jz JUMP_ADDR_107	xor r15d r15d	cmp [r14+CONST] CONST jnz JUMP_ADDR_15	cmp [r14+CONST] CONST jnz JUMP_ADDR_15	cmp [r14+CONST] CONST mov [rbp+var_xxx] CONST jnz JUMP_ADDR_15	test r15 r15 jz JUMP_ADDR_13	mov eax [rbp+var_xxx] mov [r15+rax*8] CONST lea edi [rax+rax+CONST] lea ebx [rax+CONST] shl rdi CONST call sub_xxx mov r12 rax test rax rax jz JUMP_ADDR_183	mov [rax] r14 lea r13 ds:xxx mov rsi r15 lea rdi [rax+CONST] mov rdx r13 call sub_xxx mov eax [rbp+var_xxx] mov rdx r13 mov rsi r12 add eax CONST lea rdi [r12+rax*8] call sub_xxx or [r14+CONST] CONST mov [r14+CONST] r12	mov rax [rbp+var_xxx] mov r9d [rax] test r9d r9d jnz JUMP_ADDR_104	mov rax [rbp+var_xxx] mov r14 [rax+CONST] jmp JUMP_ADDR_5	mov rax [r14+CONST] mov rbx [r14+CONST] mov [rbp+var_xxx] r14 mov rax [rax+CONST] mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax mov eax [rbp+var_xxx] mov [rbp+var_xxx] eax mov rax [rbx] test rax rax jz JUMP_ADDR_173	mov rsi [rbp+var_xxx] mov [rbp+var_xxx] CONST mov [rbp+var_xxx] rsi jmp JUMP_ADDR_30	mov r11d cs:xxx test r11d r11d jnz JUMP_ADDR_174	mov rdi r13 call sub_xxx mov rdi [r14+CONST] mov rdx rax mov rcx rax test rdi rdi jz JUMP_ADDR_36	cmp rdi CONST jz JUMP_ADDR_33	mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax call sub_xxx mov rdx [rbp+var_xxx] mov rcx [rbp+var_xxx]	mov rsi cs:xxx cmp rax rsi cmovb rax rsi cmp rax CONST jbe JUMP_ADDR_23	sub rax CONST imul rax r12 lea rcx [rdx+rax]	add rcx CONST mov rsi r13 mov rdi r14 and rcx CONST sub rsp rcx lea rdx [rsp+CONST+var_xxx] and rdx CONST call sub_xxx cmp [rax] CONST jz JUMP_ADDR_34	lea rdx [rbp+var_xxx] lea rdi [rbp+var_xxx] mov [rbp+var_xxx] rax lea rsi sub_xxx call sub_xxx cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_51	mov rax [rbp+var_xxx] test [rax+CONST] CONST jnz JUMP_ADDR_27	sub rsp CONST mov rdi [rbp+var_xxx] add [rbp+var_xxx] CONST lea rdx [rsp+CONST+var_xxx] and rdx CONST mov [rdx+CONST] rax mov [rdx] CONST mov [rdx+CONST] CONST mov [CONST_VAR+CONST] rdx movzx ecx [rax+CONST] mov [rbp+var_xxx] rdx and ecx CONST or ecx CONST mov [rax+CONST] cl	test r15 r15 jz JUMP_ADDR_29	mov edx [rbp+var_xxx] mov [r15+rdx*8] rax lea eax [rdx+CONST] mov [rbp+var_xxx] eax	mov rax [rbx+CONST] add rbx CONST test rax rax jz JUMP_ADDR_10	cmp rax CONST jnz JUMP_ADDR_39	mov r13 [rbp+var_xxx] add r13 [rbx+CONST] mov rdi r13 call sub_xxx mov r12 rax test rax rax jnz JUMP_ADDR_17	mov rax r13 jmp JUMP_ADDR_24	xor eax eax jmp JUMP_ADDR_21	test cs:xxx CONST jz JUMP_ADDR_29	mov rsi r13 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_29	mov rax [r14+CONST] cmp [rax] CONST jnz JUMP_ADDR_176	mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rdx call sub_xxx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [r14+CONST] rax mov rdi rax lea rax [rax+CONST] cmp rax CONST ja JUMP_ADDR_33	mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] jmp JUMP_ADDR_21	and rax CONST cmp rax CONST jnz JUMP_ADDR_29	mov r12 [rbp+var_xxx] add r12 [rbx+CONST] mov rdi r12 call sub_xxx mov r13 rax test rax rax jz JUMP_ADDR_113	mov r10d cs:xxx test r10d r10d jnz JUMP_ADDR_182	mov rdi r12 call sub_xxx mov rdi [r14+CONST] mov rdx rax mov rcx rax test rdi rdi jz JUMP_ADDR_134	cmp rdi CONST jz JUMP_ADDR_137	mov [rbp+var_xxx] rax mov [rbp+var_xxx] rax call sub_xxx mov rdx [rbp+var_xxx] mov rcx [rbp+var_xxx]	mov rsi cs:xxx cmp rax rsi cmovb rax rsi cmp rax CONST jbe JUMP_ADDR_47	sub rax CONST imul rax r13 lea rcx [rdx+rax]	add rcx CONST mov rsi r12 mov rdi r14 and rcx CONST sub rsp rcx lea rdx [rsp+CONST+var_xxx] and rdx CONST call sub_xxx cmp [rax] CONST jnz JUMP_ADDR_112	cmp [rbx] CONST jz JUMP_ADDR_181	test cs:xxx CONST jz JUMP_ADDR_29	mov rsi r12 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_29	mov r15 [rbp+CONST] mov r12d eax test eax eax jz JUMP_ADDR_102	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_54	call sub_xxx	mov rax CONST mov edi fs:xxx test edi edi jnz JUMP_ADDR_56	mov eax [rbp+var_xxx] test eax eax jnz JUMP_ADDR_106	mov rbx [rbp+var_xxx] mov rax [rbx+CONST] mov [rbp+var_xxx] rax test rax rax jz JUMP_ADDR_59	movzx eax [rbx+CONST] mov [rbp+var_xxx] al and eax CONST cmp al CONST jz JUMP_ADDR_128	mov [rbp+var_xxx] CONST	mov eax [rbp+var_xxx] lea edi [rax+rax+CONST] shl rdi CONST call sub_xxx mov r14 rax test rax rax jz JUMP_ADDR_180	mov ebx [rbp+var_xxx] mov rdi [rbp+var_xxx] xor r13d r13d mov ecx CONST mov r8d [rbp+var_xxx] lea eax [rbx+CONST] mov [CONST_VAR+CONST] ebx lea rdx [r14+rax*8] mov [CONST_VAR+CONST] rdx nop	mov rax [r15+CONST] test r8d r8d jnz JUMP_ADDR_100	mov esi r13d cmp rdi rax mov [rdx+rsi*8] rax cmovz ecx r13d add r13d CONST	and [rax+CONST] CONST mov r15 [r15+CONST] test r15 r15 jnz JUMP_ADDR_61	mov [rbp+var_xxx] ecx test cs:xxx CONST jnz JUMP_ADDR_139	mov rax [rbp+var_xxx] mov r8 [rax+CONST] test r8 r8 jz JUMP_ADDR_85	test r13d r13d jz JUMP_ADDR_132	xor ecx ecx nop [rax+CONST]	mov rsi [rdx+rcx*8] add rcx CONST movzx eax [CONST_VAR+CONST] and eax CONST or eax CONST mov [CONST_VAR+CONST] al cmp r13d ecx ja JUMP_ADDR_68	mov rax [rbp+var_xxx] lea rsi [r8+CONST] and [rax+CONST] CONST mov ecx [r8] test ecx ecx jz JUMP_ADDR_83	lea rax [CONST_VAR+CONST] mov [rbp+var_xxx] r12d xor ebx ebx mov r12 r8 mov [rbp+var_xxx] r13d mov r13 rsi mov [rbp+var_xxx] rax mov [rbp+var_xxx] r14 jmp JUMP_ADDR_72	add ebx CONST cmp [r12] ebx jbe JUMP_ADDR_81	mov eax ebx lea rdx ds:xxx mov rax [r13+rax*8+CONST] test [rax+CONST] CONST jz JUMP_ADDR_71	mov rax [rbp+var_xxx] mov [rbp+var_xxx] rdx mov eax [rax+CONST] lea rdi ds:xxx call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_71	mov rdx [rbp+var_xxx] lea rdi [rax+CONST] mov rsi r13 lea r14d [rbx+CONST] call sub_xxx mov r11d [r12] cmp r14d r11d jnb JUMP_ADDR_130	lea edx [r11+CONST] mov ecx r14d mov rsi [rbp+var_xxx] sub edx ebx lea rax [r13+rcx*8+CONST] add rdx rcx mov ecx ebx lea rdi [CONST_VAR+rdx*8]	mov rdx [rax] test [rdx+CONST] CONST jnz JUMP_ADDR_78	mov esi ecx add ecx CONST mov [r15+rsi*8+CONST] rdx	add rax CONST cmp rdi rax jnz JUMP_ADDR_76	lea eax [r14+r11+CONST] sub eax ebx mov ebx eax	mov [r15] ecx add ebx CONST cmp [r12] ebx ja JUMP_ADDR_72	mov r13d [rbp+var_xxx] mov r12d [rbp+var_xxx] mov r14 [rbp+var_xxx] test r13d r13d jz JUMP_ADDR_133	mov rax [rbp+var_xxx] mov rdx [rax+CONST]	xor eax eax nop [rax+rax+CONST]	mov rcx [rdx+rax*8] add rax CONST and [rcx+CONST] CONST cmp r13d eax ja JUMP_ADDR_84	mov eax [rbp+var_xxx] cmp eax r13d jnb JUMP_ADDR_133	mov rsi [rbp+var_xxx] mov ebx r13d lea rdx ds:xxx mov rsi [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_126	mov ecx eax mov rax [CONST_VAR+rcx*8] mov [r14] rax xor eax eax nop	mov rdx [CONST_VAR+rax*8] mov [r14+rax*8+CONST] rdx add rax CONST cmp rcx rax jnz JUMP_ADDR_88	mov edi [rbp+var_xxx] lea eax [CONST_VAR+CONST] cmp eax r13d jnb JUMP_ADDR_92	lea ecx [r13+CONST] mov edx eax sub ecx edi lea rax ds:xxx lea rcx [rdx+rcx+CONST] shl rcx CONST nop [rax+CONST]	mov rdx [CONST_VAR+rax] mov [r14+rax] rdx add rax CONST cmp rcx rax jnz JUMP_ADDR_91	mov rdx [r14] mov rax [rdx+CONST] lea rcx [rax+rax*8] lea rcx [rax+rcx*2] lea rax off_xxx cmp rdx [rax+rcx*8+CONST] jz JUMP_ADDR_127	lea esi [r13+CONST] lea rdi [r14+CONST] xor ecx ecx xor edx edx call sub_xxx	mov [r14+rbx*8] CONST mov rax [rbp+var_xxx] or [rax+CONST] CONST mov [rax+CONST] r14 test r15 r15 jz JUMP_ADDR_96	mov rdi [rax+CONST] mov [rax+CONST] r15 call sub_xxx	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_98	mov rdi rax call sub_xxx	test r12d r12d jnz JUMP_ADDR_177	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	test [rax+CONST] CONST jz JUMP_ADDR_62	sub [CONST_VAR+CONST] CONST jmp JUMP_ADDR_63	mov r12d CONST jmp JUMP_ADDR_52	mov r8d [rax] test r8d r8d jz JUMP_ADDR_164	mov rax [rax+CONST] test rax rax jnz JUMP_ADDR_103	mov r15 [rbp+CONST] xor r12d r12d jmp JUMP_ADDR_52	mov rbx CONST mov fs:xxx eax jmp JUMP_ADDR_56	cmp [r14+CONST] CONST jnz JUMP_ADDR_7	cmp r14 [rbp+var_xxx] jz JUMP_ADDR_7	movzx eax [r14+CONST] test ax ax jz JUMP_ADDR_7	movzx esi ax lea rdi [rbp+var_xxx] mov edx CONST call sub_xxx test al al jz JUMP_ADDR_175	mov r15 [rbp+var_xxx] jmp JUMP_ADDR_7	mov r12 rax	mov [rbp+var_xxx] r12 test cs:xxx CONST jnz JUMP_ADDR_168	lea r12 [rbp+var_xxx] lea rdx [rbp+var_xxx] lea rsi sub_xxx mov rdi r12 call sub_xxx cmp [rbp+var_xxx] CONST jnz JUMP_ADDR_166	mov rsi [rbp+var_xxx] sub rsp CONST lea rcx [rsp+CONST+var_xxx] movdqu xmm0 [CONST_VAR] and rcx CONST movaps [rcx] xmm0 mov rax [CONST_VAR+CONST] movaps [rbp+var_xxx] xmm0 mov [rcx+CONST] rax mov rax [rbp+var_xxx] mov [CONST_VAR] CONST mov [CONST_VAR+CONST] rax test r15 r15 jz JUMP_ADDR_117	mov edx [rbp+var_xxx] lea edi [rdx+CONST] mov [r15+rdx*8] rax mov rax [rbp+var_xxx] mov [rbp+var_xxx] edi	test [rax+CONST] CONST jnz JUMP_ADDR_158	mov rdi [rbp+var_xxx] add [rbp+var_xxx] CONST mov [CONST_VAR+CONST] rcx movzx edx [rax+CONST] and edx CONST or edx CONST mov [rax+CONST] dl mov rdx [rax+CONST] test rdx rdx jz JUMP_ADDR_120	mov rsi [rax+CONST] mov [rdx+CONST] rsi	mov rsi [rax+CONST] test rsi rsi jz JUMP_ADDR_122	mov [CONST_VAR+CONST] rdx	mov rdx [rcx+CONST] mov rsi [rdx+CONST] mov [rax+CONST] rsi mov [rdx+CONST] rax mov rsi [rax+CONST] test rsi rsi jz JUMP_ADDR_124	mov [CONST_VAR+CONST] rax	mov [rax+CONST] rdx mov rsi [rbp+var_xxx] cmp [rbp+var_xxx] rsi jz JUMP_ADDR_157	mov [rbp+var_xxx] rcx jmp JUMP_ADDR_29	mov rdi r14 call sub_xxx jmp JUMP_ADDR_92	xor ecx ecx xor edx edx mov esi r13d mov rdi r14 call sub_xxx jmp JUMP_ADDR_94	cmp [rbx+CONST] CONST jz JUMP_ADDR_59	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov ecx ebx mov ebx r14d jmp JUMP_ADDR_80	mov rax [rbp+var_xxx] mov r8 [rax+CONST] test r8 r8 jz JUMP_ADDR_133	mov rax [rbp+var_xxx] lea rsi [r8+CONST] and [rax+CONST] CONST mov eax [r8] test eax eax jnz JUMP_ADDR_70	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov rax [r14+CONST] cmp [rax] CONST jnz JUMP_ADDR_188	mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rdx call sub_xxx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [r14+CONST] rax mov rdi rax lea rax [rax+CONST] cmp rax CONST ja JUMP_ADDR_137	mov [rbp+var_xxx] rdx mov [rbp+var_xxx] rcx call sub_xxx mov rcx [rbp+var_xxx] mov rdx [rbp+var_xxx] jmp JUMP_ADDR_45	xor eax eax jmp JUMP_ADDR_45	mov [rbp+var_xxx] r8 mov r14 [rbp+var_xxx] mov [rbp+var_xxx] CONST jmp JUMP_ADDR_4	mov rax [rbp+var_xxx] cmp cs:xxx rax jnz JUMP_ADDR_65	test r13d r13d jz JUMP_ADDR_131	lea ebx [r13+CONST] xor ecx ecx mov [rbp+var_xxx] r15 mov r15 r14 lea rax ds:xxx mov [rbp+var_xxx] r12d mov r14 rcx mov rbx [rbp+var_xxx] mov [rbp+var_xxx] rax mov [rbp+var_xxx] r13d jmp JUMP_ADDR_144	cmp [rbp+var_xxx] r14 jz JUMP_ADDR_171	mov rdx [rbx+CONST] add r14 CONST	mov r13 [rdx+r14] cmp rbx r13 jz JUMP_ADDR_142	mov rax [r13+CONST] test rax rax jz JUMP_ADDR_147	mov esi [rax+CONST] test esi esi jnz JUMP_ADDR_142	cmp [r13+CONST] CONST jnz JUMP_ADDR_186	cmp [r13+CONST] CONST jnz JUMP_ADDR_186	mov rdi r15 mov rsi r13 call sub_xxx mov r12 rax mov edi eax cmp eax [rbp+var_xxx] ja JUMP_ADDR_187	test eax eax jz JUMP_ADDR_155	mov rax [r15] xor edx edx and [rax+CONST] CONST lea rax [r15+CONST] jmp JUMP_ADDR_154	mov rsi [rax] and [CONST_VAR+CONST] CONST mov rsi [rax] cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_165	add rax CONST	add edx CONST cmp edi edx jnz JUMP_ADDR_152	mov eax r12d lea rdx ds:xxx mov rdi rdx mov [rbp+var_xxx] rdx call sub_xxx mov rdx [rbp+var_xxx] test rax rax mov [r13+CONST] rax jz JUMP_ADDR_180	lea rdi [rax+CONST] mov [rax+CONST] r12d sub rdx CONST mov rsi r15 mov [rax] rdi call sub_xxx jmp JUMP_ADDR_142	mov [rbp+var_xxx] rcx mov [rbp+var_xxx] rcx jmp JUMP_ADDR_29	mov rdx rcx jmp JUMP_ADDR_160	cmp [rdx+CONST] rax jz JUMP_ADDR_162	mov rsi rdx mov rdx [rdx+CONST] test rdx rdx jnz JUMP_ADDR_159	mov rsi [rbp+var_xxx] movdqa xmm2 [rcx] movups [CONST_VAR] xmm2 mov rax [rcx+CONST] mov [CONST_VAR+CONST] rax jmp JUMP_ADDR_29	mov rdi [rbp+var_xxx] mov [CONST_VAR+CONST] rcx mov rdi [rbp+var_xxx] mov rdx [CONST_VAR+CONST] cmp rdx rdi mov rdx [rdx+CONST] cmovz rdi rsi mov [CONST_VAR+CONST] rdx mov rdx [rax+CONST] mov [rbp+var_xxx] rdi test rdx rdx jnz JUMP_ADDR_119	jmp JUMP_ADDR_120	mov [rbp+var_xxx] rax jmp JUMP_ADDR_14	or [r13+CONST] CONST jmp JUMP_ADDR_153	cmp [rbx] CONST jnz JUMP_ADDR_51	mov rdi r12 call sub_xxx jmp JUMP_ADDR_29	mov rdx [r14+CONST] cmp [rdx] CONST jnz JUMP_ADDR_170	mov rax cs:xxx mov rdx [rax] lea rax GLOBAL_VAR test rdx rdx cmovz rdx rax	mov rsi r12 lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_114	mov rax [rbp+var_xxx] mov r14 r15 mov r12d [rbp+var_xxx] mov r15 [rbp+var_xxx] mov r13d [rbp+var_xxx] mov r8 [rax+CONST] test r8 r8 jz JUMP_ADDR_85	mov rdx [rax+CONST] jmp JUMP_ADDR_67	mov [rbp+var_xxx] CONST jmp JUMP_ADDR_10	lea rcx GLOBAL_VAR xor edx edx mov rsi r13 xor edi edi call sub_xxx	mov rax [rbp+var_xxx] lea rcx GLOBAL_VAR xor edx edx mov edi CONST mov rsi [rax+CONST] call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	cmp r12d CONST jnz JUMP_ADDR_179	xor r12d r12d	lea rsi [rbp+var_xxx] xor edx edx mov edi r12d call sub_xxx	mov rax [rbp+var_xxx] lea rcx GLOBAL_VAR xor edx edx mov edi CONST mov rsi [rax+CONST] call sub_xxx	lea rcx GLOBAL_VAR xor edx edx mov rsi r12 xor edi edi call sub_xxx	lea rcx GLOBAL_VAR xor edx edx mov rsi r12 xor edi edi call sub_xxx	mov rdi [rbp+var_xxx] cmp rdi [rbp+var_xxx] jz JUMP_ADDR_185	call sub_xxx	mov rax [rbp+var_xxx] lea rcx GLOBAL_VAR xor edx edx mov edi CONST mov rsi [rax+CONST] call sub_xxx	mov rsi [r13+CONST] lea rcx GLOBAL_VAR xor edx edx mov edi CONST call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_call_init
push r14 push r13 mov r13 rcx push r12 mov r12 rdx push rbp mov ebp esi push rbx mov rax [CONST_VAR+CONST] mov rbx rdi movzx eax [rax+CONST] test al CONST jnz JUMP_ADDR_2	test al CONST jnz JUMP_ADDR_17	movzx eax [rbx+CONST] test al CONST jnz JUMP_ADDR_12	mov rsi [rbx+CONST] or eax CONST mov [rbx+CONST] al cmp [CONST_VAR] CONST jz JUMP_ADDR_13	test cs:xxx CONST jnz JUMP_ADDR_16	mov rax [rbx+CONST] test rax rax jz JUMP_ADDR_7	mov rax [rax+CONST] mov rdx r13 add rax [rbx] mov rsi r12 mov edi ebp call rax	mov rcx [rbx+CONST] test rcx rcx jz JUMP_ADDR_12	mov rax [rbx+CONST] mov rdx [rax+CONST] mov rax [rbx] add rax [rcx+CONST] shr rdx CONST test edx edx jz JUMP_ADDR_12	sub edx CONST lea rbx [rax+CONST] lea r14 [rbx+rdx*8] jmp JUMP_ADDR_11	add rbx CONST	mov rdx r13 mov rsi r12 mov edi ebp call callfunc_xxx mov rax rbx cmp r14 rbx jnz JUMP_ADDR_10	pop rbx pop rbp pop r12 pop r13 pop r14 retn	test al CONST jz JUMP_ADDR_12	test cs:xxx CONST jz JUMP_ADDR_5	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	lea rdi GLOBAL_VAR xor eax eax call sub_xxx jmp JUMP_ADDR_5	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap__dl_check_map_versions
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] esi mov [rsp+CONST+var_xxx] edx test rax rax jz JUMP_ADDR_30	mov r13 [rax+CONST] mov rbp rdi mov rax [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rdi test rax rax jz JUMP_ADDR_29	mov rax [rax+CONST] add rax [rbp+CONST] xor r15d r15d cmp [rax] CONST mov [rsp+CONST+var_xxx] rax jnz JUMP_ADDR_78	mov [rsp+CONST+var_xxx] r13	mov rax [rsp+CONST+var_xxx] lea rdi off_xxx mov r12d [rax+CONST] mov rax [rbp+CONST] add r12 [rsp+CONST+var_xxx] lea rdx [rax+rax*8] lea rax [rax+rdx*2] mov rbx [CONST_VAR+rax*8] test rbx rbx jnz JUMP_ADDR_7	jmp JUMP_ADDR_31	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_31	mov rsi rbx mov rdi r12 call sub_xxx test eax eax jz JUMP_ADDR_6	mov ecx [rsp+CONST+var_xxx] test ecx ecx jnz JUMP_ADDR_76	mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] rbp mov r12d [rax+CONST] add r12 rax	movzx eax [r12+CONST] mov r13d [r12+CONST] add r13 [rsp+CONST+var_xxx] mov ebx [r12] mov [rsp+CONST+var_xxx] ax mov rax [rsp+CONST+var_xxx] mov r14 [rax+CONST] mov rax [rsp+CONST+var_xxx] mov rbp [rax+CONST] cmp [rbp+CONST] CONST jnz JUMP_ADDR_12	mov rax cs:xxx mov rbp [rax] lea rax GLOBAL_VAR test rbp rbp cmovz rbp rax	mov rax [r14+CONST] mov r11 [rax+CONST] test cs:xxx CONST jnz JUMP_ADDR_42	mov rax [r14+CONST] test rax rax jz JUMP_ADDR_38	mov rdx [rax+CONST] test rdx rdx jz JUMP_ADDR_88	add rdx [r14] cmp [rdx] CONST jnz JUMP_ADDR_21	mov [rsp+CONST+var_xxx] r14 mov r14 r12 mov r12 r11 mov [rsp+CONST+var_xxx] rbp mov rbp r13 mov r13d ebx mov rbx rdx	cmp r13d [rbx+CONST] jz JUMP_ADDR_25	mov eax [rbx+CONST] test eax eax jz JUMP_ADDR_64	add rbx rax cmp [rbx] CONST jz JUMP_ADDR_17	mov r14 [rsp+CONST+var_xxx] mov rdx rbx	mov [rsp+CONST+var_xxx] CONST movzx edi [rdx] xor ecx ecx lea rsi [rsp+CONST+var_xxx] mov edx CONST call sub_xxx mov rsi [r14+CONST] mov rcx rax cmp [CONST_VAR] CONST jnz JUMP_ADDR_23	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	lea rbp [rsp+CONST+var_xxx] lea rdx GLOBAL_VAR xor eax eax mov rdi rbp call sub_xxx	lea rdx GLOBAL_VAR mov rsi rbp xor edi edi call sub_xxx	mov eax [rbx+CONST] mov rdi rbp mov esi [rbx+rax] add rsi r12 call sub_xxx test eax eax jnz JUMP_ADDR_18	mov r12 r14	movzx eax [r12+CONST] and eax CONST cmp r15d eax cmovb r15d eax mov eax [r12+CONST] test eax eax jz JUMP_ADDR_61	add r12 rax jmp JUMP_ADDR_10	xor r15d r15d cmp [rsp+CONST+var_xxx] CONST jnz JUMP_ADDR_46	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov esi [rbp+CONST] test esi esi jz JUMP_ADDR_37	xor r13d r13d jmp JUMP_ADDR_34	add r13d CONST cmp r13d [rbp+CONST] jnb JUMP_ADDR_37	mov rdx [rbp+CONST] mov eax r13d mov rdi r12 lea rbx ds:xxx mov rsi [rdx+rax*8] call sub_xxx test eax eax jz JUMP_ADDR_33	mov rax [rbp+CONST] mov rbx [rax+rbx] test rbx rbx jnz JUMP_ADDR_8	nop [rax+rax+CONST]	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	mov edx [rsp+CONST+var_xxx] test edx edx jz JUMP_ADDR_27	mov rsi [r14+CONST] mov r8 rbp cmp [CONST_VAR] CONST jnz JUMP_ADDR_41	mov rax cs:xxx mov rsi [rax] test rsi rsi jz JUMP_ADDR_90	lea rbp [rsp+CONST+var_xxx] mov rcx r8 lea rdx GLOBAL_VAR xor eax eax mov rdi rbp call sub_xxx jmp JUMP_ADDR_24	mov rdx [r14+CONST] mov rcx [r14+CONST] cmp [rdx] CONST jz JUMP_ADDR_60	mov rax [rsp+CONST+var_xxx] mov r8 rbp mov rsi r13 mov [rsp+CONST+var_xxx] r11 lea rdi GLOBAL_VAR mov r9 [rax+CONST] xor eax eax call sub_xxx mov r11 [rsp+CONST+var_xxx] jmp JUMP_ADDR_13	cmp [rsp+CONST+var_xxx] CONST mov r13 [rsp+CONST+var_xxx] jz JUMP_ADDR_49	nop [rax+CONST]	mov rax [rsp+CONST+var_xxx] mov rdx [rax+CONST] add rdx [rbp+CONST] jmp JUMP_ADDR_48	add rdx rax	movzx eax [rdx+CONST] and eax CONST cmp r15d eax cmovb r15d eax mov eax [rdx+CONST] test eax eax jnz JUMP_ADDR_47	test r15d r15d jz JUMP_ADDR_30	lea edi [r15+CONST] mov esi CONST mov rbx rdi call sub_xxx mov [rbp+CONST] rax mov rsi rax test rax rax jz JUMP_ADDR_85	mov rax [rbp+CONST] mov [rbp+CONST] ebx mov rax [rax+CONST] mov [rbp+CONST] rax mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_69	mov rdi [rax+CONST] add rdi [rbp+CONST] nop [rax]	mov eax [CONST_VAR+CONST] add rax rdi jmp JUMP_ADDR_55	add rax rdx	movzx edx [rax+CONST] mov r8d edx mov ecx edx and r8d CONST and cx CONST cmp ebx r8d jbe JUMP_ADDR_57	movzx ecx cx and edx CONST mov r8d [rax] lea rcx [rcx+rcx*2] lea rcx [CONST_VAR+rcx*8] mov [rcx+CONST] edx mov edx [rax+CONST] mov [rcx+CONST] r8d add rdx r13 mov [rcx] rdx mov edx [CONST_VAR+CONST] add rdx r13 mov [rcx+CONST] rdx	mov edx [rax+CONST] test edx edx jnz JUMP_ADDR_54	mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_69	add rdi rax jmp JUMP_ADDR_53	mov rax cs:xxx mov rdx [rax] lea rax GLOBAL_VAR test rdx rdx cmovz rdx rax jmp JUMP_ADDR_43	mov rbp [rsp+CONST+var_xxx]	mov rdi [rsp+CONST+var_xxx] mov eax [CONST_VAR+CONST] test eax eax jz JUMP_ADDR_44	add rdi rax mov [rsp+CONST+var_xxx] rdi jmp JUMP_ADDR_4	mov r13 rbp mov r12 r14 mov rbp [rsp+CONST+var_xxx] mov r14 [rsp+CONST+var_xxx] test [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_82	mov eax [rsp+CONST+var_xxx] test eax eax jz JUMP_ADDR_27	mov rsi [r14+CONST] mov r11 r13 mov r8 rbp cmp [CONST_VAR] CONST jnz JUMP_ADDR_68	mov rax cs:xxx mov rsi [rax] test rsi rsi jz JUMP_ADDR_89	lea rbp [rsp+CONST+var_xxx] mov rcx r11 lea rdx GLOBAL_VAR xor eax eax mov rdi rbp call sub_xxx jmp JUMP_ADDR_24	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_30	mov rax [rax+CONST] add rax [rbp+CONST] jmp JUMP_ADDR_72	add rax rdx	test [rax+CONST] CONST jnz JUMP_ADDR_74	mov ecx [rax+CONST] movzx edx [rax+CONST] mov edi [rax+CONST] mov ecx [rax+rcx] and edx CONST lea rdx [rdx+rdx*2] lea rdx [CONST_VAR+rdx*8] add rcx r13 mov [rdx+CONST] edi mov [rdx] rcx mov [rdx+CONST] CONST	mov edx [rax+CONST] test edx edx jnz JUMP_ADDR_71	jmp JUMP_ADDR_30	test [rbx+CONST] CONST jz JUMP_ADDR_9	jmp JUMP_ADDR_62	mov [rsp+CONST+var_xxx] CONST movzx edi [rax] xor ecx ecx lea rsi [rsp+CONST+var_xxx] mov edx CONST call sub_xxx mov rsi [rbp+CONST] mov rcx rax cmp [CONST_VAR] CONST jz JUMP_ADDR_81	lea rbp [rsp+CONST+var_xxx] lea rdx GLOBAL_VAR xor eax eax mov rdi rbp call sub_xxx xor edi edi	xor edx edx mov rsi rbp call sub_xxx	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax jmp JUMP_ADDR_79	mov rsi [r14+CONST] mov r11 r13 mov r8 rbp cmp [CONST_VAR] CONST jnz JUMP_ADDR_84	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	lea rbp [rsp+CONST+var_xxx] mov rcx r11 xor eax eax lea rdx GLOBAL_VAR mov rdi rbp call sub_xxx jmp JUMP_ADDR_24	mov rsi [rbp+CONST] cmp [CONST_VAR] CONST jnz JUMP_ADDR_87	mov rax cs:xxx mov rsi [rax] lea rax GLOBAL_VAR test rsi rsi cmovz rsi rax	lea rbp [rsp+CONST+var_xxx] lea rdx GLOBAL_VAR mov rdi rbp call sub_xxx mov edi CONST jmp JUMP_ADDR_80	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx	lea rsi GLOBAL_VAR jmp JUMP_ADDR_68	lea rsi GLOBAL_VAR jmp JUMP_ADDR_41
[ph]libcap-git-setcap__dl_check_all_versions
endbr64 push r13 push r12 push rbp push rbx sub rsp CONST test rdi rdi jz JUMP_ADDR_6	mov rbx rdi mov ebp esi mov r13d edx xor r12d r12d jmp JUMP_ADDR_3	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_5	test [rbx+CONST] CONST jnz JUMP_ADDR_2	mov rdi rbx mov edx r13d mov esi ebp call sub_xxx mov rbx [rbx+CONST] test eax eax setnz al movzx eax al or r12d eax test rbx rbx jnz JUMP_ADDR_3	add rsp CONST mov eax r12d pop rbx pop rbp pop r12 pop r13 retn	add rsp CONST xor r12d r12d pop rbx mov eax r12d pop rbp pop r12 pop r13 retn
[ph]libcap-git-setcap_check_match_0
push r14 mov r14 rdx push r13 mov r13d ecx push r12 push rbp mov ebp r8d push rbx mov rax [CONST_VAR+CONST] lea rdx [rbp+rbp*2+CONST] mov rbx rdi mov rax [rax+CONST] lea r12 [rax+rdx*8] movzx eax [r12+CONST] and eax CONST cmp [r12+CONST] CONST jz JUMP_ADDR_5	mov edx CONST bt edx eax jb JUMP_ADDR_7	mov rax [rbx+CONST] mov edi [r12] add rdi [rax+CONST] call sub_xxx test eax eax jnz JUMP_ADDR_7	mov rax [rbx+CONST] movzx eax [rax+rbp*2] and eax CONST lea rdx [rax+rax*2] mov rax [rbx+CONST] lea rax [rax+rdx*8] cmp [rax+CONST] r13d jnz JUMP_ADDR_7	mov rdi [rax] mov rsi r14 call sub_xxx pop rbx pop rbp test eax eax mov eax CONST cmovnz r12 rax mov rax r12 pop r12 pop r13 pop r14 retn	cmp [r12+CONST] CONST jz JUMP_ADDR_1	cmp al CONST jz JUMP_ADDR_1	xor r12d r12d pop rbx pop rbp mov rax r12 pop r12 pop r13 pop r14 retn
[ph]libcap-git-setcap__dl_lookup_direct
endbr64 push r15 push r14 mov r14 rdi push r13 mov r13d r8d push r12 mov r12 rcx push rbp mov rbp rsi push rbx sub rsp CONST mov r10 [CONST_VAR+CONST] mov ecx [CONST_VAR+CONST] test r10 r10 jz JUMP_ADDR_8	mov eax edx mov r9d edx xor edx edx xor r10d r10d div ecx mov rax [CONST_VAR+CONST] mov eax [rax+rdx*4] test eax eax jz JUMP_ADDR_7	mov rdi [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rdi lea rbx [CONST_VAR+rax*4] xchg ax ax	mov r15d [rbx] mov edx r15d xor edx r9d shr edx CONST jnz JUMP_ADDR_5	mov r8 rbx sub r8 [rsp+CONST+var_xxx] mov ecx r13d mov rdx r12 sar r8 CONST mov rsi rbp mov rdi r14 mov [rsp+CONST+var_xxx] r9d call sub_xxx mov r9d [rsp+CONST+var_xxx] test rax rax mov r10 rax jnz JUMP_ADDR_7	add rbx CONST and r15d CONST jz JUMP_ADDR_3	xor r10d r10d	add rsp CONST mov rax r10 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	movzx edx [CONST_VAR] xor eax eax test rdx rdx jz JUMP_ADDR_16	movzx eax [rbp+CONST] test al al jz JUMP_ADDR_21	shl rdx CONST add rdx rax movzx eax [rbp+CONST] test al al jz JUMP_ADDR_22	shl rdx CONST add rax rdx movzx edx [rbp+CONST] test dl dl jz JUMP_ADDR_16	shl rax CONST add rdx rax movzx eax [rbp+CONST] test al al jz JUMP_ADDR_22	shl rdx CONST lea rsi [rbp+CONST] add rax rdx movzx edx [rbp+CONST] test dl dl jz JUMP_ADDR_15	shl rax CONST add rsi CONST add rax rdx mov rdx rax shr rdx CONST and edx CONST xor rax rdx movzx edx [CONST_VAR] test dl dl jnz JUMP_ADDR_14	and eax CONST nop [rax]	xor edx edx div ecx mov rax [r14+CONST] mov edx edx mov ebx [rax+rdx*4] test ebx ebx jnz JUMP_ADDR_19	jmp JUMP_ADDR_7	mov rax [r14+CONST] mov ebx [rax+rbx*4] test ebx ebx jz JUMP_ADDR_7	mov r8d ebx mov ecx r13d mov rdx r12 mov rsi rbp mov rdi r14 call sub_xxx mov r10 rax test rax rax jz JUMP_ADDR_18	jmp JUMP_ADDR_7	movzx eax dl jmp JUMP_ADDR_16	mov eax edx jmp JUMP_ADDR_16
[ph]libcap-git-setcap_call_dl_lookup
endbr64 push rbx mov rbx rdi mov rsi [CONST_VAR] xor r9d r9d mov eax [rbx+CONST] mov rdx [CONST_VAR+CONST] mov rcx [CONST_VAR+CONST] mov rdi [CONST_VAR+CONST] push CONST push rax mov r8 [rbx+CONST] call sub_xxx mov [rbx] rax pop rax pop rdx pop rbx retn
[ph]libcap-git-setcap_do_sym
push r12 mov r12 rdx push rbp mov rbp rsi push rbx mov rbx rcx add rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] CONST test rdi rdi jz JUMP_ADDR_22	cmp rdi CONST jz JUMP_ADDR_11	lea rdx [rsp+CONST+var_xxx] push CONST lea rcx [CONST_VAR+CONST] mov rsi rdi push r8 xor r9d r9d mov r8 rbx mov rdi rbp call sub_xxx mov rcx rax pop rax pop rdx	mov rdx [rsp+CONST+var_xxx] xor eax eax test rdx rdx jz JUMP_ADDR_8	cmp [rdx+CONST] CONST jz JUMP_ADDR_10	test rcx rcx jz JUMP_ADDR_10	mov rax [rcx]	add rax [rdx+CONST] movzx edx [rdx+CONST] and edx CONST cmp dl CONST jz JUMP_ADDR_17	mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_28	sub rsp CONST pop rbx pop rbp pop r12 retn	xor eax eax jmp JUMP_ADDR_7	mov rdi rdx call sub_xxx mov rsi rax test rax rax jz JUMP_ADDR_18	cmp rax cs:xxx jz JUMP_ADDR_19	mov rdx rsi nop [rax+CONST]	mov rcx rdx mov rdx [rdx+CONST] test rdx rdx jnz JUMP_ADDR_14	lea rdx [rsp+CONST+var_xxx] push rsi add rcx CONST push CONST	mov rdi rbp xor r9d r9d mov r8 rbx call sub_xxx pop rsi pop rdi mov rcx rax jmp JUMP_ADDR_3	call rax jmp JUMP_ADDR_8	mov rsi cs:xxx test rsi rsi jz JUMP_ADDR_21	cmp [CONST_VAR+CONST] r12 ja JUMP_ADDR_21	cmp [CONST_VAR+CONST] r12 ja JUMP_ADDR_13	lea rcx GLOBAL_VAR xor edx edx xor esi esi xor edi edi call sub_xxx	mov rdi rdx mov [rsp+CONST+var_xxx] r8d call sub_xxx mov rsi rax test rax rax cmovz rsi cs:xxx mov eax fs:xxx test eax eax mov r8d [rsp+CONST+var_xxx] jnz JUMP_ADDR_24	or r8d CONST mov rcx [CONST_VAR+CONST] lea rdx [rsp+CONST+var_xxx] push CONST push r8 jmp JUMP_ADDR_16	or r8d CONST lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbp mov [rsp+CONST+var_xxx] rsi mov [rsp+CONST+var_xxx] rbx mov [rsp+CONST+var_xxx] r8d mov [rsp+CONST+var_xxx] rax mov fs:xxx CONST lea rbp [rsp+CONST+var_xxx] lea rdx [rsp+CONST+var_xxx] lea rsi sub_xxx mov rdi rbp call sub_xxx mov r8d eax xor eax eax xchg eax fs:xxx cmp eax CONST jnz JUMP_ADDR_26	xor r10d r10d mov edx CONST mov esi CONST mov rax fs:xxx lea rdi [rax+CONST] mov eax CONST syscall	cmp [rsp+CONST+var_xxx] CONST mov rcx [rsp+CONST+var_xxx] jz JUMP_ADDR_3	xor edx edx mov rsi rbp mov edi r8d call sub_xxx	call sub_xxx
[ph]libcap-git-setcap__dl_vsym
endbr64 sub rsp CONST mov r9 rcx movzx ecx [rdx] mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax mov [rsp+CONST+var_xxx] rdx mov [rsp+CONST+var_xxx] CONST test rcx rcx jz JUMP_ADDR_9	mov r8 rdx movzx edx [rdx+CONST] test dl dl jz JUMP_ADDR_11	movzx eax dl movzx edx [r8+CONST] shl rcx CONST add rax rcx test dl dl jz JUMP_ADDR_9	shl rax CONST add rax rdx movzx edx [r8+CONST] test dl dl jz JUMP_ADDR_9	shl rax CONST add rax rdx movzx edx [r8+CONST] test dl dl jz JUMP_ADDR_9	shl rax CONST lea rcx [r8+CONST] add rax rdx movzx edx [r8+CONST] test dl dl jz JUMP_ADDR_9	nop [rax+CONST]	shl rax CONST add rcx CONST add rax rdx mov rdx rax shr rdx CONST and edx CONST xor rax rdx movzx edx [rcx] test dl dl jnz JUMP_ADDR_7	and eax CONST nop [rax+rax+CONST]	xor r8d r8d mov rdx r9 mov rcx rsp mov [rsp+CONST+var_xxx] eax mov [rsp+CONST+var_xxx] CONST call sub_xxx mov rdx [rsp+CONST+var_xxx] sub rdx fs:xxx jnz JUMP_ADDR_12	add rsp CONST retn	movzx eax cl jmp JUMP_ADDR_9	call sub_xxx
[ph]libcap-git-setcap__dl_sym
endbr64 mov r8d CONST xor ecx ecx jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___unordtf2
endbr64 sub rsp CONST movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 stmxcsr [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx+CONST] mov rdx [rsp+CONST+var_xxx+CONST] mov rsi CONST mov rcx [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] mov r9 rax shr rax CONST and r9 rsi and rsi rdx shr rdx CONST and edx CONST and eax CONST jnz JUMP_ADDR_5	or rcx r9 jz JUMP_ADDR_14	mov edi CONST cmp rdx CONST jz JUMP_ADDR_24	mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx]	add rsp CONST retn	test rdx rdx jnz JUMP_ADDR_11	mov rdi rsi or rdi r8 setnz dil movzx edi dil add edi edi cmp rax CONST jnz JUMP_ADDR_20	or rcx r9 jz JUMP_ADDR_19	mov rax CONST test r9 rax jz JUMP_ADDR_26	cmp rdx CONST jz JUMP_ADDR_28	mov eax CONST jmp JUMP_ADDR_21	xor edi edi cmp rax CONST jz JUMP_ADDR_7	xor eax eax cmp rdx CONST jnz JUMP_ADDR_4	jmp JUMP_ADDR_16	test rdx rdx jz JUMP_ADDR_23	cmp rdx CONST jnz JUMP_ADDR_4	or r8 rsi jz JUMP_ADDR_4	mov rax CONST test rsi rax jz JUMP_ADDR_32	mov eax CONST jmp JUMP_ADDR_4	cmp rdx CONST jz JUMP_ADDR_27	xor eax eax	test edi edi jnz JUMP_ADDR_3	add rsp CONST retn	xor edi edi or rsi r8 setnz dil add edi edi jmp JUMP_ADDR_20	or r8 rsi jz JUMP_ADDR_3	mov rax CONST test rsi rax jnz JUMP_ADDR_31	or edi CONST mov eax CONST jmp JUMP_ADDR_3	mov rax rsi or rax r8 jz JUMP_ADDR_20	or r8 rsi mov eax CONST jz JUMP_ADDR_21	mov rdx CONST test rsi rdx jnz JUMP_ADDR_21	jmp JUMP_ADDR_26	mov eax CONST jmp JUMP_ADDR_3	xor edi edi jmp JUMP_ADDR_26
[ph]libcap-git-setcap___lttf2
endbr64 push r12 push rbp push rbx sub rsp CONST movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 stmxcsr [rsp+CONST+var_xxx] mov rax [rsp+CONST+var_xxx+CONST] mov rsi [rsp+CONST+var_xxx] mov rdx CONST mov r10 [rsp+CONST+var_xxx] mov r11 rax mov rdi rax shr rax CONST mov rcx rax mov rax [rsp+CONST+var_xxx+CONST] and r11 rdx shr rdi CONST and rdx rax mov r9 rdx mov rdx rax shr rax CONST shr rdx CONST and edx CONST and edi CONST mov r8 rdi jnz JUMP_ADDR_7	mov rbx r11 or rbx rsi jz JUMP_ADDR_21	mov edi CONST	cmp rdx CONST jz JUMP_ADDR_26	mov rbx r11 or rbx rsi setz bpl setz bl movzx ebp bpl test rdx rdx jz JUMP_ADDR_23	test ebp ebp jnz JUMP_ADDR_28	jmp JUMP_ADDR_12	test rdx rdx jnz JUMP_ADDR_15	mov rbx r9 xor edi edi or rbx r10 setnz dil add edi edi cmp r8 CONST jnz JUMP_ADDR_31	mov rbx r11 or rbx rsi jnz JUMP_ADDR_19	cmp rdx CONST jz JUMP_ADDR_17	test rdx rdx jz JUMP_ADDR_31	cmp rcx rax jz JUMP_ADDR_33	cmp rcx CONST sbb rax rax and eax CONST sub rax CONST test edi edi jnz JUMP_ADDR_20	add rsp CONST pop rbx pop rbp pop r12 retn	xor edi edi cmp r8 CONST jz JUMP_ADDR_9	cmp rdx CONST jnz JUMP_ADDR_12	mov rbx r9 or rbx r10 jz JUMP_ADDR_12	nop [rax+CONST]	or edi CONST mov eax CONST	mov [rsp+CONST+var_xxx] rax call sub_xxx mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 retn	xor edi edi test rdx rdx jnz JUMP_ADDR_3	mov rbx r9 xor edi edi mov ebp CONST or rbx r10 mov ebx CONST setnz dil add edi edi	mov r12 r9 or r12 r10 jnz JUMP_ADDR_5	xor eax eax test bl bl jnz JUMP_ADDR_29	jmp JUMP_ADDR_13	mov rbx r9 or rbx r10 jnz JUMP_ADDR_19	mov rbx r11 or rbx rsi jnz JUMP_ADDR_12	test rax rax jz JUMP_ADDR_44	test edi edi jnz JUMP_ADDR_20	add rsp CONST pop rbx pop rbp pop r12 retn	mov rbx r9 or rbx r10 jnz JUMP_ADDR_12	jmp JUMP_ADDR_13	cmp r8 rdx jle JUMP_ADDR_36	test rax rax jnz JUMP_ADDR_44	mov eax CONST jmp JUMP_ADDR_29	jl JUMP_ADDR_28	cmp r11 r9 ja JUMP_ADDR_13	setz al cmp rsi r10 jbe JUMP_ADDR_40	test al al jnz JUMP_ADDR_13	cmp r11 r9 jb JUMP_ADDR_43	cmp rsi r10 jnb JUMP_ADDR_45	test al al jz JUMP_ADDR_45	test rcx rcx mov rax CONST cmovnz rax rcx jmp JUMP_ADDR_29	mov rax CONST jmp JUMP_ADDR_29	xor eax eax jmp JUMP_ADDR_29
[ph]libcap-git-setcap___sfp_handle_exceptions
endbr64 test dil CONST jz JUMP_ADDR_2	pxor xmm0 xmm0 divss xmm0 xmm0	test dil CONST jz JUMP_ADDR_4	fnstenv [rsp+var_xxx] or [rsp+var_xxx] CONST fldenv [rsp+var_xxx] wait	test dil CONST jz JUMP_ADDR_6	movss xmm0 cs:xxx divss xmm0 cs:xxx	test dil CONST jz JUMP_ADDR_8	fnstenv [rsp+var_xxx] or [rsp+var_xxx] CONST fldenv [rsp+var_xxx] wait	test dil CONST jz JUMP_ADDR_10	fnstenv [rsp+var_xxx] or [rsp+var_xxx] CONST fldenv [rsp+var_xxx] wait	and edi CONST jz JUMP_ADDR_12	movss xmm0 cs:xxx divss xmm0 cs:xxx	retn
[ph]libcap-git-setcap_init_dwarf_reg_size_table
endbr64 mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST retn
[ph]libcap-git-setcap_uw_install_context_1
call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	push rax call sub_xxx	push rax call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	push rax call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	call sub_xxx	push rax call sub_xxx	push rax call sub_xxx	call sub_xxx	endbr64 push rbp mov rbp cs:xxx test rbp rbp jz JUMP_ADDR_32	lea rsi GLOBAL_VAR mov rdi rbp call sub_xxx test eax eax jnz JUMP_ADDR_33	pop rbp retn	mov rdi rbp call sub_xxx pop rbp mov cs:xxx CONST retn	sub rsp CONST mov r9 rdi mov r8 rsi test [CONST_VAR+CONST] CONST jz JUMP_ADDR_36	cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_37	cmp [r8+CONST] CONST jz JUMP_ADDR_57	xor eax eax lea r10 GLOBAL_VAR jmp JUMP_ADDR_42	test rdx rdx jz JUMP_ADDR_41	cmp [r10+rax] CONST jnz UNK_JUMP_ADDR	mov [rdx] rsi	add rax CONST cmp rax CONST jz JUMP_ADDR_53	cmp [r9+rax+CONST] CONST mov rdx [r9+rax*8] mov rsi [r8+rax*8] jnz UNK_JUMP_ADDR	cmp [r8+rax+CONST] CONST jnz JUMP_ADDR_38	test rsi rsi setnz dil test rdx rdx setnz cl test dil cl jz JUMP_ADDR_41	cmp rdx rsi jz JUMP_ADDR_41	movzx ecx [r10+rax] cmp ecx CONST jnb JUMP_ADDR_51	test cl CONST jnz JUMP_ADDR_61	test ecx ecx jz JUMP_ADDR_41	movzx edi [CONST_VAR] mov [rdx] dil test cl CONST jz JUMP_ADDR_41	movzx esi [CONST_VAR+rcx+CONST] mov [rdx+rcx+CONST] si jmp JUMP_ADDR_41	mov rdi [CONST_VAR] add rax CONST mov [rdx] rdi mov rdi [CONST_VAR+rcx+CONST] mov [rdx+rcx+CONST] rdi lea rdi [rdx+CONST] and rdi CONST sub rdx rdi add ecx edx sub rsi rdx shr ecx CONST rep CONST cmp rax CONST jnz JUMP_ADDR_42	nop [rax+CONST]	xor eax eax test [r9+CONST] CONST jz JUMP_ADDR_55	cmp [r9+CONST] CONST jnz JUMP_ADDR_56	cmp [r9+CONST] CONST jz JUMP_ADDR_62	add rsp CONST retn	cmp cs:xxx CONST mov rax [r8+CONST] jnz UNK_JUMP_ADDR	mov [rsp+CONST+var_xxx] rax test [r8+CONST] CONST jz JUMP_ADDR_60	mov [r8+CONST] CONST	lea rax [rsp+CONST+var_xxx] mov [r8+CONST] rax jmp JUMP_ADDR_37	mov edi [CONST_VAR] mov [rdx] edi mov esi [CONST_VAR+rcx+CONST] mov [rdx+rcx+CONST] esi jmp JUMP_ADDR_41	movzx edx cs:xxx mov rax [r8+CONST] test [r8+CONST] CONST jz JUMP_ADDR_64	cmp [r8+CONST] CONST jnz JUMP_ADDR_66	cmp dl CONST jnz UNK_JUMP_ADDR	mov rax [rax]	sub rax [r9+CONST] add rax [r8+CONST] jmp JUMP_ADDR_56
[ph]libcap-git-setcap_read_encoded_value
push rbx cmp sil CONST jz UNK_JUMP_ADDR	mov r9d esi mov r8 rdx mov r10 rcx and r9d CONST cmp r9b CONST jz JUMP_ADDR_34	ja JUMP_ADDR_7	cmp r9b CONST jnz JUMP_ADDR_11	mov rdi [CONST_VAR+CONST] cmp sil CONST jz JUMP_ADDR_9	mov eax esi and eax CONST cmp al CONST ja UNK_JUMP_ADDR	lea rdx unk_xxx movzx eax al movsxd rax [rdx+rax*4] add rax rdx jmp rax	cmp r9b CONST jnz JUMP_ADDR_16	mov rdi [CONST_VAR+CONST] cmp sil CONST jnz JUMP_ADDR_5	lea rax [r8+CONST] and rax CONST mov rdx [rax] add rax CONST	mov [r10] rdx pop rbx retn	ja UNK_JUMP_ADDR	test sil CONST jnz UNK_JUMP_ADDR	xor edi edi	cmp sil CONST jnz JUMP_ADDR_5	jmp JUMP_ADDR_9	cmp r9b CONST jz JUMP_ADDR_13	jmp UNK_JUMP_ADDR	mov rdx [r8] lea rax [r8+CONST]	test rdx rdx jz JUMP_ADDR_10	cmp r9b CONST cmovz rdi r8 add rdx rdi test sil sil jns JUMP_ADDR_10	mov rdx [rdx] mov [r10] rdx pop rbx retn	movzx edx [r8] lea rax [r8+CONST] jmp JUMP_ADDR_19	movsxd rdx [r8] lea rax [r8+CONST] jmp JUMP_ADDR_19	movsx rdx [r8] lea rax [r8+CONST] jmp JUMP_ADDR_19	mov edx [r8] lea rax [r8+CONST] jmp JUMP_ADDR_19	mov rax r8 xor edx edx xor ecx ecx nop	movzx ebx [rax] add rax CONST mov r11 rbx and r11d CONST shl r11 cl add ecx CONST or rdx r11 test bl bl js JUMP_ADDR_27	cmp ecx CONST ja JUMP_ADDR_19	and ebx CONST jz JUMP_ADDR_19	mov r11 CONST shl r11 cl or rdx r11 jmp JUMP_ADDR_20	mov rax r8 xor edx edx xor ecx ecx nop [rax+rax+CONST]	movzx ebx [rax] add rax CONST mov r11 rbx and r11d CONST shl r11 cl add ecx CONST or rdx r11 test bl bl js JUMP_ADDR_32	jmp JUMP_ADDR_19	mov rdi [CONST_VAR+CONST] jmp JUMP_ADDR_14
[ph]libcap-git-setcap_execute_stack_op
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rcx cmp rdi rsi jnb JUMP_ADDR_112	mov r12 rsi mov r15 rdx mov ebx CONST lea r14 unk_xxx lea rbp unk_xxx lea r13 GLOBAL_VAR nop	movzx edx [CONST_VAR] lea rsi [CONST_VAR+CONST] mov ecx edx cmp dl CONST ja JUMP_ADDR_13	cmp dl CONST jbe JUMP_ADDR_43	lea eax [rdx+CONST] cmp al CONST ja UNK_JUMP_ADDR	lea rdx unk_xxx movzx eax al movsxd rax [rdx+rax*4] add rax rdx jmp rax	mov r8 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] nop [rax+rax+CONST]	cmp ebx CONST jg UNK_JUMP_ADDR	movsxd rax ebx mov rdi rsi add ebx CONST mov [rsp+rax*8+CONST+var_xxx] r8	cmp r12 rdi ja JUMP_ADDR_2	test ebx ebx jz UNK_JUMP_ADDR	sub ebx CONST movsxd rbx ebx mov rax [rsp+rbx*8+CONST+var_xxx]	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp dl CONST ja JUMP_ADDR_18	cmp dl CONST ja JUMP_ADDR_101	cmp dl CONST ja JUMP_ADDR_38	cmp dl CONST jnz JUMP_ADDR_34	jmp UNK_JUMP_ADDR	cmp dl CONST ja JUMP_ADDR_32	lea eax [rcx+CONST] cmp al CONST ja UNK_JUMP_ADDR	movzx eax al movsxd rax [rbp+rax*4+CONST] add rax rbp jmp rax	xor eax eax xor ecx ecx	movzx r8d [CONST_VAR] add rsi CONST mov rdi r8 and edi CONST shl rdi cl add ecx CONST or rax rdi test r8b r8b js JUMP_ADDR_22	cmp ecx CONST ja JUMP_ADDR_26	and r8d CONST jz JUMP_ADDR_26	mov rdi CONST shl rdi cl or rax rdi	sub edx CONST cmp edx CONST jg UNK_JUMP_ADDR	movsxd rdx edx movzx ecx [r13+rdx+CONST] mov r8 [r15+rdx*8] test [r15+CONST] CONST jz JUMP_ADDR_29	cmp [r15+rdx+CONST] CONST jnz JUMP_ADDR_31	cmp cl CONST jnz UNK_JUMP_ADDR	mov r8 [r8]	add r8 rax jmp JUMP_ADDR_7	cmp dl CONST jnz JUMP_ADDR_142	movzx esi [CONST_VAR+CONST] lea rdx [CONST_VAR+CONST] lea rcx [rsp+CONST+var_xxx] mov rdi r15 call sub_xxx mov r8 [rsp+CONST+var_xxx] mov rsi rax jmp JUMP_ADDR_7	mov r8 CONST mov eax CONST shl rax cl test rax r8 jz JUMP_ADDR_44	cmp ebx CONST jle UNK_JUMP_ADDR	lea edi [rbx+CONST] sub ebx CONST lea edx [rcx+CONST] movsxd rax edi movsxd rbx ebx mov r8 [rsp+rax*8+CONST+var_xxx] mov r9 [rsp+rbx*8+CONST+var_xxx] cmp dl CONST ja UNK_JUMP_ADDR	lea rcx unk_xxx movzx edx dl movsxd rdx [rcx+rdx*4] add rdx rcx jmp rdx	cmp dl CONST jz JUMP_ADDR_105	jbe JUMP_ADDR_41	lea r8d [rdx+CONST] jmp JUMP_ADDR_7	jnz JUMP_ADDR_35	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	mov r8 CONST test rax r8 jz JUMP_ADDR_50	test ebx ebx jz UNK_JUMP_ADDR	sub ebx CONST movsxd rax ebx mov r8 [rsp+rax*8+CONST+var_xxx] cmp cl CONST ja JUMP_ADDR_106	cmp cl CONST jbe UNK_JUMP_ADDR	sub ecx CONST cmp cl CONST ja UNK_JUMP_ADDR	movzx ecx cl movsxd rax [r14+rcx*4] add rax r14 jmp rax	cmp edx CONST jnz JUMP_ADDR_144	test ebx ebx jz UNK_JUMP_ADDR	sub ebx CONST lea rdx [CONST_VAR+CONST] movsxd rax ebx cmp [rsp+rax*8+CONST+var_xxx] CONST jz JUMP_ADDR_111	movsx rdi [CONST_VAR+CONST] add rdi rdx jmp JUMP_ADDR_9	xor r8d r8d xor ecx ecx nop [rax]	movzx edx [CONST_VAR] add rsi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or r8 rax test dl dl js JUMP_ADDR_55	cmp ecx CONST ja JUMP_ADDR_7	and edx CONST jz JUMP_ADDR_7	mov rax CONST shl rax cl or r8 rax jmp JUMP_ADDR_7	xor r8d r8d xor ecx ecx nop [rax]	movzx edx [CONST_VAR] add rsi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or r8 rax test dl dl js JUMP_ADDR_60	jmp JUMP_ADDR_7	cmp ebx CONST jle UNK_JUMP_ADDR	lea ecx [rbx+CONST] lea edx [rbx+CONST] lea eax [rbx+CONST] movsxd rcx ecx movsxd rdx edx cdqe mov rdi [rsp+rcx*8+CONST+var_xxx] mov r9 [rsp+rdx*8+CONST+var_xxx] mov r8 [rsp+rax*8+CONST+var_xxx] mov [rsp+rcx*8+CONST+var_xxx] r9 mov [rsp+rdx*8+CONST+var_xxx] r8 mov [rsp+rax*8+CONST+var_xxx] rdi mov rdi rsi jmp JUMP_ADDR_9	test ebx ebx jz UNK_JUMP_ADDR	lea eax [rbx+CONST] cdqe mov r8 [rsp+rax*8+CONST+var_xxx] jmp JUMP_ADDR_7	cmp ebx CONST jle UNK_JUMP_ADDR	lea eax [rbx+CONST] cdqe mov r8 [rsp+rax*8+CONST+var_xxx] jmp JUMP_ADDR_7	test ebx ebx jz UNK_JUMP_ADDR	sub ebx CONST mov rdi rsi jmp JUMP_ADDR_9	lea eax [rbx+CONST] movzx edx [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] cdqe cmp rdx rax jge UNK_JUMP_ADDR	sub rax rdx mov r8 [rsp+rax*8+CONST+var_xxx] jmp JUMP_ADDR_7	movsx r8 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	movzx r8d [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	movsx r8 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	movzx r8d [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	movsxd r8 [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	mov r8d [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] jmp JUMP_ADDR_7	cmp ebx CONST jle UNK_JUMP_ADDR	lea edx [rbx+CONST] lea eax [rbx+CONST] movsxd rdx edx cdqe mov rdi [rsp+rax*8+CONST+var_xxx] mov rcx [rsp+rdx*8+CONST+var_xxx] mov [rsp+rdx*8+CONST+var_xxx] rdi mov rdi rsi mov [rsp+rax*8+CONST+var_xxx] rcx jmp JUMP_ADDR_9	xor edi edi xor ecx ecx nop [rax+CONST]	movzx edx [CONST_VAR] add rsi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rdi rax test dl dl js JUMP_ADDR_81	cmp edi CONST jg UNK_JUMP_ADDR	movsxd rdi edi movzx eax [r13+CONST_VAR+CONST] mov r8 [r15+rdi*8] test [r15+CONST] CONST jz JUMP_ADDR_85	cmp [r15+CONST_VAR+CONST] CONST jnz JUMP_ADDR_7	cmp al CONST jnz UNK_JUMP_ADDR	mov r8 [r8] jmp JUMP_ADDR_7	mov rdi rsi jmp JUMP_ADDR_9	xor edx edx xor ecx ecx nop [rax+CONST]	movzx edi [CONST_VAR] add rsi CONST mov rax rdi and eax CONST shl rax cl add ecx CONST or rdx rax test dil dil js JUMP_ADDR_89	xor r9d r9d xor ecx ecx nop [rax+rax+CONST]	movzx edi [CONST_VAR] add rsi CONST mov rax rdi and eax CONST shl rax cl add ecx CONST or r9 rax test dil dil js JUMP_ADDR_91	cmp ecx CONST ja JUMP_ADDR_95	and edi CONST jz JUMP_ADDR_95	mov rax CONST shl rax cl or r9 rax	cmp edx CONST jg UNK_JUMP_ADDR	movsxd rdx edx movzx eax [r13+rdx+CONST] mov r8 [r15+rdx*8] test [r15+CONST] CONST jz JUMP_ADDR_98	cmp [r15+rdx+CONST] CONST jnz JUMP_ADDR_100	cmp al CONST jnz UNK_JUMP_ADDR	mov r8 [r8]	add r8 r9 jmp JUMP_ADDR_7	sub edx CONST cmp edx CONST jg UNK_JUMP_ADDR	movsxd rdx edx movzx eax [r13+rdx+CONST] mov r8 [r15+rdx*8] test [r15+CONST] CONST jz JUMP_ADDR_85	cmp [r15+rdx+CONST] CONST jnz JUMP_ADDR_7	jmp JUMP_ADDR_85	movsx rax [CONST_VAR+CONST] lea rdi [CONST_VAR+rax+CONST] jmp JUMP_ADDR_9	cmp cl CONST jnz JUMP_ADDR_143	movzx eax [CONST_VAR+CONST] lea rsi [CONST_VAR+CONST] cmp al CONST jz JUMP_ADDR_130	ja JUMP_ADDR_139	cmp al CONST jnz JUMP_ADDR_137	movzx r8d [r8] jmp JUMP_ADDR_7	mov rdi rdx jmp JUMP_ADDR_9	mov rax rcx jmp JUMP_ADDR_12	mov rax r8 xor edx edx mov ebx edi div r9 mov r8 rdx jmp JUMP_ADDR_7	imul r8 r9 mov ebx edi jmp JUMP_ADDR_7	or r8 r9 mov ebx edi jmp JUMP_ADDR_7	add r8 r9 mov ebx edi jmp JUMP_ADDR_7	mov ecx r9d mov ebx edi shl r8 cl jmp JUMP_ADDR_7	mov ecx r9d mov ebx edi shr r8 cl jmp JUMP_ADDR_7	mov ecx r9d mov ebx edi sar r8 cl jmp JUMP_ADDR_7	xor r8 r9 mov ebx edi jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setz r8b movzx r8d r8b jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setnl r8b movzx r8d r8b jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setnle r8b movzx r8d r8b jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setle r8b movzx r8d r8b jmp JUMP_ADDR_7	mov rax r8 mov ebx edi cqo idiv r9 mov r8 rax jmp JUMP_ADDR_7	sub r8 r9 mov ebx edi jmp JUMP_ADDR_7	and r8 r9 mov ebx edi jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setl r8b movzx r8d r8b jmp JUMP_ADDR_7	cmp r8 r9 mov ebx edi setnz r8b movzx r8d r8b jmp JUMP_ADDR_7	mov r8d [r8] jmp JUMP_ADDR_7	not r8 jmp JUMP_ADDR_7	neg r8 jmp JUMP_ADDR_7	mov rax r8 neg rax cmovns r8 rax jmp JUMP_ADDR_7	xor edi edi xor ecx ecx nop [rax+rax+CONST]	movzx edx [CONST_VAR] add rsi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rdi rax test dl dl js JUMP_ADDR_135	add r8 rdi jmp JUMP_ADDR_7	cmp al CONST jnz JUMP_ADDR_141	movzx r8d [r8] jmp JUMP_ADDR_7	cmp al CONST jz JUMP_ADDR_86	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_uw_update_context_1
push r15 mov r15 rdi push r14 push r13 push r12 push rbp push rbx sub rsp CONST movdqu xmm0 [CONST_VAR] movdqu xmm1 [CONST_VAR+CONST] movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rsi movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movaps [rsp+CONST+var_xxx] xmm0 movdqu xmm6 [CONST_VAR+CONST] movdqu xmm7 [CONST_VAR+CONST] movaps [rsp+CONST+var_xxx] xmm1 movdqu xmm0 [CONST_VAR+CONST] movdqu xmm1 [CONST_VAR+CONST] movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 movdqu xmm2 [CONST_VAR+CONST] movdqu xmm3 [CONST_VAR+CONST] movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 movaps [rsp+CONST+var_xxx] xmm7 movaps [rsp+CONST+var_xxx] xmm0 movaps [rsp+CONST+var_xxx] xmm1 movaps [rsp+CONST+var_xxx] xmm2 movaps [rsp+CONST+var_xxx] xmm3 mov rax [CONST_VAR+CONST] movdqu xmm4 [CONST_VAR+CONST] movdqu xmm5 [CONST_VAR+CONST] movdqu xmm6 [CONST_VAR+CONST] bt rax CONST movaps [rsp+CONST+var_xxx] xmm4 movaps [rsp+CONST+var_xxx] xmm5 movaps [rsp+CONST+var_xxx] xmm6 jnb JUMP_ADDR_2	cmp [rsp+CONST+var_xxx+CONST] CONST jnz JUMP_ADDR_3	cmp [rsp+CONST+var_xxx+CONST] CONST jz JUMP_ADDR_44	mov rax [r15+CONST] mov r14 CONST and r14 rax mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] r14 jz JUMP_ADDR_5	mov [r15+CONST] CONST	mov rax [rsp+CONST+var_xxx] mov [r15+CONST] CONST mov eax [rax+CONST] cmp eax CONST jnz JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] mov rax [rax+CONST] cmp eax CONST jg UNK_JUMP_ADDR	lea rbx GLOBAL_VAR cdqe movzx edx [rbx+rax] mov r11 [rsp+rax*8+CONST+var_xxx] mov [rsp+CONST+var_xxx] rbx test [rsp+CONST+var_xxx+CONST] CONST jz JUMP_ADDR_9	cmp [rsp+rax+CONST+var_xxx+CONST] CONST jnz JUMP_ADDR_11	cmp dl CONST jnz UNK_JUMP_ADDR	mov r11 [r11]	mov rax [rsp+CONST+var_xxx] add r11 [rax+CONST] jmp JUMP_ADDR_16	cmp eax CONST jnz JUMP_ADDR_48	mov rax [rsp+CONST+var_xxx] xor esi esi xor ecx ecx mov rdi [rax+CONST] nop [rax+CONST]	movzx edx [CONST_VAR] add rdi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_14	lea rdx [rsp+CONST+var_xxx] add rsi rdi xor ecx ecx call sub_xxx mov r11 rax lea rax GLOBAL_VAR mov [rsp+CONST+var_xxx] rax	lea rax [rsp+CONST+var_xxx] mov rbx [rsp+CONST+var_xxx] mov r12 r15 lea rbp GLOBAL_VAR mov [rsp+CONST+var_xxx] rax lea r13 [r15+CONST] lea r10 [rbp+CONST] mov [r15+CONST] r11 lea r14 unk_xxx mov [rsp+CONST+var_xxx] r15 mov r15 r11 nop [rax+rax+CONST]	cmp [rbx+CONST] CONST ja JUMP_ADDR_27	mov eax [rbx+CONST] movsxd rax [r14+rax*4] add rax r14 jmp rax	mov rdi [rbx] xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edx [CONST_VAR] add rdi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_20	mov rdx [rsp+CONST+var_xxx] add rsi rdi mov rcx r15 call sub_xxx cmp [rbp+CONST] CONST ja UNK_JUMP_ADDR	mov [r13+CONST] CONST lea r10 unk_xxx mov [r12] rax jmp JUMP_ADDR_27	mov rax [rbx] add rax r15	cmp [rbp+CONST] CONST ja UNK_JUMP_ADDR	mov [r13+CONST] CONST	mov [r12] rax	add rbp CONST add rbx CONST add r13 CONST add r12 CONST cmp r10 rbp jnz JUMP_ADDR_17	mov rbx [rsp+CONST+var_xxx] mov rsi [rsp+CONST+var_xxx] mov r15 [rsp+CONST+var_xxx] mov rax rbx btr rax CONST cmp [CONST_VAR+CONST] CONST jz JUMP_ADDR_30	mov rax rbx bts rax CONST	mov [r15+CONST] rax add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [rbx] xor esi esi xor ecx ecx nop	movzx edx [CONST_VAR] add rdi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_32	mov rdx [rsp+CONST+var_xxx] add rsi rdi mov rcx r15 call sub_xxx cmp [rsp+CONST+var_xxx] CONST lea r10 unk_xxx jz JUMP_ADDR_26	jmp JUMP_ADDR_36	mov rax [rbx] add rax r15 cmp [rsp+CONST+var_xxx] CONST jz JUMP_ADDR_26	mov [r13+CONST] CONST jmp JUMP_ADDR_26	mov rdx [rbx] movsxd rax edx cmp [rsp+rax+CONST+var_xxx+CONST] CONST jnz JUMP_ADDR_40	cmp [rsp+CONST+var_xxx] CONST mov rax [rsp+rax*8+CONST+var_xxx] jz JUMP_ADDR_26	jmp JUMP_ADDR_36	cmp edx CONST jg UNK_JUMP_ADDR	mov rsi [rsp+CONST+var_xxx] movzx edx [CONST_VAR+rax] mov rax [rsp+rax*8+CONST+var_xxx] test [rsp+CONST+var_xxx+CONST] CONST jnz JUMP_ADDR_24	cmp dl CONST jnz UNK_JUMP_ADDR	mov rax [rax] jmp JUMP_ADDR_24	cmp cs:xxx CONST mov rax [r15+CONST] jnz UNK_JUMP_ADDR	mov [rsp+CONST+var_xxx] rax test [rsp+CONST+var_xxx+CONST] CONST jz JUMP_ADDR_47	mov [rsp+CONST+var_xxx+CONST] CONST	lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx+CONST] rax jmp JUMP_ADDR_3	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_execute_cfa_program
mov [rcx+CONST] CONST cmp rdi rsi jnb JUMP_ADDR_121	push rbp mov rax rdi xor r8d r8d mov rbp rsp push r15 mov r15 rdx push r14 lea r14 unk_xxx push r13 mov r13 rsi push r12 push rbx mov rbx rcx sub rsp CONST mov r12 [rdx+CONST] shr r12 CONST add r12 [rdx+CONST] nop [rax]	mov rsi [rbx+CONST] cmp rsi r12 jnb JUMP_ADDR_10	movzx edx [rax] lea r9 [rax+CONST] mov ecx edx and ecx CONST cmp cl CONST jz JUMP_ADDR_8	cmp cl CONST jz JUMP_ADDR_13	cmp cl CONST jz JUMP_ADDR_11	cmp dl CONST ja UNK_JUMP_ADDR	movsxd rdx [r14+rdx*4] add rdx r14 jmp rdx	and edx CONST imul rdx [rbx+CONST] mov rax r9 add rdx rsi mov [rbx+CONST] rdx	cmp rax r13 jb JUMP_ADDR_2	lea rsp [rbp+CONST] pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn	mov eax edx and edx CONST and eax CONST cmp al CONST ja JUMP_ADDR_17	shl rdx CONST mov rax r9 mov [rbx+rdx+CONST] CONST jmp JUMP_ADDR_9	mov edi edx mov rax r9 and edx CONST xor r10d r10d and edi CONST xor ecx ecx	movzx r9d [rax] add rax CONST mov rsi r9 and esi CONST shl rsi cl add ecx CONST or r10 rsi test r9b r9b js JUMP_ADDR_14	imul r10 [rbx+CONST] cmp dil CONST ja JUMP_ADDR_9	shl rdx CONST add rdx rbx mov [rdx+CONST] CONST mov [rdx] r10 jmp JUMP_ADDR_9	mov rax r9 jmp JUMP_ADDR_9	mov [rbx+CONST] r9 xor eax eax xor ecx ecx mov [rbx+CONST] CONST nop [rax]	movzx esi [r9] add r9 CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rax rdx test sil sil js JUMP_ADDR_19	add rax r9 jmp JUMP_ADDR_9	mov rdx r9 lea rcx [rbp+CONST] mov rdi r15 mov [rbp+CONST] r8 movzx esi [rbx+CONST] call sub_xxx mov rdx [rbp+CONST] mov r8 [rbp+CONST] mov [rbx+CONST] rdx jmp JUMP_ADDR_9	movzx edx [rax+CONST] imul rdx [rbx+CONST] add rax CONST add rdx rsi mov [rbx+CONST] rdx jmp JUMP_ADDR_9	movzx edx [rax+CONST] imul rdx [rbx+CONST] add rax CONST add rdx rsi mov [rbx+CONST] rdx jmp JUMP_ADDR_9	mov edx [rax+CONST] imul rdx [rbx+CONST] add rax CONST add rdx rsi mov [rbx+CONST] rdx jmp JUMP_ADDR_9	test r8 r8 jz UNK_JUMP_ADDR	mov rax r8 mov r8 [r8+CONST]	mov rdi rax mov ecx CONST mov rsi rbx rep CONST mov [rbx+CONST] rax mov rax r9 jmp JUMP_ADDR_9	mov rax [rbx+CONST] mov ecx CONST mov rdi rbx mov rsi rax rep CONST mov [rax+CONST] r8 mov r8 rax mov rax r9 jmp JUMP_ADDR_9	xor esi esi xor ecx ecx nop [rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_30	cmp rsi CONST ja JUMP_ADDR_33	shl rsi CONST lea rax [rbx+CONST_VAR] mov [rax+CONST] CONST mov [rax] r9	xor eax eax xor ecx ecx nop [rax+rax+CONST]	movzx esi [r9] add r9 CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rax rdx test sil sil js JUMP_ADDR_34	add rax r9 jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_37	xor r9d r9d xor ecx ecx	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_39	cmp rsi CONST ja JUMP_ADDR_9	shl rsi CONST lea rdx [rbx+CONST_VAR] mov [rdx+CONST] CONST mov [rdx] r9 jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_43	xor r9d r9d xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_45	cmp ecx CONST ja JUMP_ADDR_49	and edi CONST jnz JUMP_ADDR_122	nop [rax+CONST]	imul r9 [rbx+CONST] cmp rsi CONST ja JUMP_ADDR_9	shl rsi CONST lea rdx [rbx+CONST_VAR] mov [rdx+CONST] CONST mov [rdx] r9 jmp JUMP_ADDR_9	xor esi esi xor ecx ecx nop [rax]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_52	mov [rbx+CONST] rsi xor ecx ecx xor esi esi nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_54	cmp ecx CONST ja JUMP_ADDR_58	and edx CONST jz JUMP_ADDR_58	mov rax CONST shl rax cl or rsi rax	mov [rbx+CONST] CONST	imul rsi [rbx+CONST] mov rax r9 mov [rbx+CONST] rsi jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_61	xor r9d r9d xor ecx ecx	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_63	imul r9 [rbx+CONST] cmp rsi CONST ja JUMP_ADDR_9	shl rsi CONST neg r9 lea rdx [rbx+CONST_VAR] mov [rdx+CONST] CONST mov [rdx] r9 jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx xchg ax ax	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_67	xor r9d r9d xor ecx ecx	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_69	imul r9 [rbx+CONST] cmp rsi CONST ja JUMP_ADDR_9	shl rsi CONST lea rdx [rbx+CONST_VAR] mov [rdx+CONST] CONST mov [rdx] r9 jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_73	xor r9d r9d xor ecx ecx	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_75	cmp ecx CONST ja JUMP_ADDR_70	and edi CONST jz JUMP_ADDR_70	mov rdx CONST shl rdx cl or r9 rdx jmp JUMP_ADDR_70	xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_80	cmp rsi CONST ja JUMP_ADDR_83	shl rsi CONST lea rax [rbx+CONST_VAR] mov [rax+CONST] CONST mov [rax] r9	xor eax eax xor ecx ecx nop [rax+rax+CONST]	movzx esi [r9] add r9 CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rax rdx test sil sil js JUMP_ADDR_84	add rax r9 jmp JUMP_ADDR_9	xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_87	mov [r15+CONST] rsi mov rax r9 jmp JUMP_ADDR_9	xor esi esi xor ecx ecx xchg ax ax	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_90	cmp ecx CONST ja JUMP_ADDR_59	and edx CONST jz JUMP_ADDR_59	mov rax CONST shl rax cl or rsi rax jmp JUMP_ADDR_59	mov rax r9 xor edi edi xor ecx ecx nop [rax+rax+CONST]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rdi rdx test sil sil js JUMP_ADDR_95	cmp rdi CONST ja JUMP_ADDR_9	shl rdi CONST mov [rbx+CONST_VAR+CONST] CONST jmp JUMP_ADDR_9	mov rax r9 xor edi edi xor ecx ecx nop [rax]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rdi rdx test sil sil js JUMP_ADDR_99	jmp JUMP_ADDR_96	mov rax r9 xor edi edi xor ecx ecx nop [rax+CONST]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or rdi rdx test sil sil js JUMP_ADDR_102	cmp rdi CONST ja JUMP_ADDR_9	shl rdi CONST mov [rbx+CONST_VAR+CONST] CONST jmp JUMP_ADDR_9	mov rax r9 xor esi esi xor ecx ecx nop [rax]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or rsi rdx test dil dil js JUMP_ADDR_106	xor r9d r9d xor ecx ecx nop [rax+rax+CONST]	movzx edi [rax] add rax CONST mov rdx rdi and edx CONST shl rdx cl add ecx CONST or r9 rdx test dil dil js JUMP_ADDR_108	jmp JUMP_ADDR_49	xor esi esi xor ecx ecx nop [rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_111	mov [rbx+CONST] rsi mov rax r9 jmp JUMP_ADDR_9	xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_114	mov [rbx+CONST] rsi xor ecx ecx xor esi esi nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_116	mov [rbx+CONST] rsi mov rax r9 mov [rbx+CONST] CONST jmp JUMP_ADDR_9	xor esi esi xor ecx ecx nop [rax+rax+CONST]	movzx edx [r9] add r9 CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rsi rax test dl dl js JUMP_ADDR_119	mov [rbx+CONST] rsi mov rax r9 mov [rbx+CONST] CONST jmp JUMP_ADDR_9	retn	mov rdx CONST shl rdx cl or r9 rdx jmp JUMP_ADDR_49
[ph]libcap-git-setcap_uw_frame_state_for
push r15 mov ecx CONST xor eax eax push r14 push r13 push r12 mov r12 rdi mov rdi rsi push rbp push rbx sub rsp CONST rep CONST mov [r12+CONST] CONST mov [r12+CONST] CONST mov rdx [r12+CONST] test rdx rdx jz JUMP_ADDR_50	mov rax [r12+CONST] mov rbp rsi lea rsi [r12+CONST] shr rax CONST lea rdi [rdx+rax+CONST] call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_54	mov rax [r12+CONST] lea r13 [rbx+CONST] mov [rbp+CONST] rax movsxd rax [rbx+CONST] sub r13 rax lea r14 [r13+CONST] mov rdi r14 call cs:xxx cmp [r13+CONST] CONST lea rax [r14+rax+CONST] jz JUMP_ADDR_33	movzx edi [r13+CONST] movzx edx [rax] cmp dil CONST ja JUMP_ADDR_58	xor r8d r8d xor ecx ecx nop [rax+rax+CONST]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or r8 rdx test sil sil js JUMP_ADDR_5	mov [rbp+CONST] r8 xor ecx ecx xor r8d r8d nop	mov r9 rax movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or r8 rdx test sil sil js JUMP_ADDR_7	cmp ecx CONST ja JUMP_ADDR_11	and esi CONST jz JUMP_ADDR_11	mov rdx CONST shl rdx cl or r8 rdx	mov [rbp+CONST] r8 xor ecx ecx xor r8d r8d cmp dil CONST jz JUMP_ADDR_39	nop [rax+rax+CONST]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or r8 rdx test sil sil js JUMP_ADDR_13	mov [rbp+CONST] r8 xor r15d r15d mov [rbp+CONST] CONST movzx edx [r14] cmp dl CONST jz JUMP_ADDR_35	test dl dl jz JUMP_ADDR_63	add r14 CONST lea r8 unk_xxx	sub edx CONST cmp dl CONST ja JUMP_ADDR_22	movzx edx dl movsxd rdx [r8+rdx*4] add rdx r8 jmp rdx	movzx edx [rax] add rax CONST mov [rbp+CONST] dl movzx edx [r14] add r14 CONST test dl dl jnz JUMP_ADDR_17	test r15 r15 jnz JUMP_ADDR_23	mov r15 rax nop [rax+CONST]	test r15 r15 jz JUMP_ADDR_59	mov eax [r13+CONST] mov rcx rbp mov rdx r12 mov rdi r15 lea rsi [r13+rax+CONST] call sub_xxx movzx eax [rbp+CONST] cmp al CONST jz JUMP_ADDR_60	and eax CONST cmp al CONST jz JUMP_ADDR_57	jbe JUMP_ADDR_48	mov edx CONST cmp al CONST jnz JUMP_ADDR_46	add rdx rbx cmp [rbp+CONST] CONST movzx esi [rbp+CONST] jz JUMP_ADDR_51	xor r8d r8d xor ecx ecx nop [rax+CONST]	movzx edi [rdx] add rdx CONST mov rax rdi and eax CONST shl rax cl add ecx CONST or r8 rax test dil dil js JUMP_ADDR_29	lea r13 [rdx+r8] cmp sil CONST jnz JUMP_ADDR_53	mov eax [rbx] mov rcx rbp mov rdx r12 mov rdi r13 lea rsi [rbx+rax+CONST] call sub_xxx xor eax eax	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp [r13+CONST] CONST jnz JUMP_ADDR_3	mov rdx [rax] lea r14 [r13+CONST] add rax CONST mov [rbp+CONST] rdx jmp JUMP_ADDR_3	xor ecx ecx nop [rax+rax+CONST]	movzx esi [rax] add rax CONST mov rdx rsi and edx CONST shl rdx cl add ecx CONST or r15 rdx test sil sil js JUMP_ADDR_36	mov [rbp+CONST] CONST movzx edx [r14+CONST] add r15 rax lea rcx [r14+CONST] test dl dl jz JUMP_ADDR_23	mov r14 rcx jmp JUMP_ADDR_16	movzx r8d [rax] lea rax [r9+CONST] jmp JUMP_ADDR_14	movzx edx [rax] add r14 CONST add rax CONST mov [rbp+CONST] dl movzx edx [r14+CONST] test dl dl jnz JUMP_ADDR_17	jmp JUMP_ADDR_20	movzx esi [rax] lea rdx [rax+CONST] lea rcx [rsp+CONST+var_xxx] mov rdi r12 add r14 CONST call sub_xxx mov rdx [rsp+CONST+var_xxx] lea r8 unk_xxx mov [rbp+CONST] rdx movzx edx [r14+CONST] test dl dl jnz JUMP_ADDR_17	jmp JUMP_ADDR_20	mov [rbp+CONST] CONST movzx edx [r14] add r14 CONST test dl dl jnz JUMP_ADDR_17	jmp JUMP_ADDR_20	cmp al CONST jnz UNK_JUMP_ADDR	mov edx CONST jmp JUMP_ADDR_27	test al al jz JUMP_ADDR_47	jmp UNK_JUMP_ADDR	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r13 rdx cmp sil CONST jz JUMP_ADDR_31	lea rcx [rsp+CONST+var_xxx] mov rdi r12 call sub_xxx mov r13 rax mov rax [rsp+CONST+var_xxx] mov [r12+CONST] rax jmp JUMP_ADDR_31	lea rcx [rsp+CONST+var_xxx] movzx esi sil mov rdi r12 call sub_xxx mov rax [rsp+CONST+var_xxx] mov [r12+CONST] rax jmp JUMP_ADDR_31	mov rdx [r12+CONST] mov rax [r12+CONST] cmp [rdx] CONST jnz JUMP_ADDR_50	mov rcx CONST cmp [rdx+CONST] rcx jnz JUMP_ADDR_50	mov rdx [rax+CONST] lea rsi [rax+CONST] mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov rcx rdx sub rsi rdx mov [rbp+CONST] CONST sub rcx rax mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] rsi lea rsi [rax+CONST] mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rsi rdx sub rcx rdx mov [rbp+CONST] CONST mov [rbp+CONST] rcx lea rcx [rax+CONST] sub rcx rdx mov [rbp+CONST] CONST mov [rbp+CONST] rcx lea rcx [rax+CONST] add rax CONST sub rax rdx sub rcx rdx mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] rsi mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] rax xor eax eax mov [rbp+CONST] rcx mov [rbp+CONST] CONST mov [rbp+CONST] CONST mov [rbp+CONST] CONST jmp JUMP_ADDR_32	mov edx CONST jmp JUMP_ADDR_27	cmp dl CONST jz JUMP_ADDR_61	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edx CONST jmp JUMP_ADDR_27	cmp [rax+CONST] CONST jnz JUMP_ADDR_59	add rax CONST jmp JUMP_ADDR_4	mov r15 rax jmp JUMP_ADDR_23
[ph]libcap-git-setcap_uw_init_context_1
push r13 xor eax eax mov ecx CONST push r12 mov r12 rsi push rbp mov rbp rdi push rbx mov rbx rdx sub rsp CONST rep CONST lea r13 [rsp+CONST+var_xxx] mov rdi rbp mov rsi r13 mov rax [rsp+CONST] mov [rbp+CONST] rax mov rax CONST mov [rbp+CONST] rax call sub_xxx test eax eax jnz UNK_JUMP_ADDR	cmp cs:xxx CONST jz JUMP_ADDR_7	lea rsi sub_xxx lea rdi unk_xxx call callfunc_xxx test eax eax jnz JUMP_ADDR_7	cmp cs:xxx CONST jnz UNK_JUMP_ADDR	mov [rsp+CONST+var_xxx] r12 test [rbp+CONST] CONST jz JUMP_ADDR_6	mov [rbp+CONST] CONST	lea rax [rsp+CONST+var_xxx] mov rsi r13 mov rdi rbp mov [rsp+CONST+var_xxx] CONST mov [rbp+CONST] rax mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx mov [rbp+CONST] rbx add rsp CONST pop rbx pop rbp pop r12 pop r13 retn	cmp cs:xxx CONST jnz JUMP_ADDR_3	mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap__Unwind_RaiseException_Phase2
push r15 push r14 lea r14 GLOBAL_VAR push r13 mov r13d CONST push r12 push rbp mov rbp rdi push rbx mov rbx rsi sub rsp CONST mov [rsp+CONST+var_xxx] rdx lea r12 [rsp+CONST+var_xxx] jmp JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_4	mov esi r15d mov rdx [rbp+CONST] mov r8 rbx mov rcx rbp or esi CONST mov edi CONST call rax cmp eax CONST jz JUMP_ADDR_15	cmp eax CONST jnz JUMP_ADDR_13	test r15d r15d jnz JUMP_ADDR_16	mov rsi r12 mov rdi rbx call sub_xxx mov rax [rsp+CONST+var_xxx] xor edx edx mov rcx rax shl rcx CONST cmp [rsp+rcx+CONST+var_xxx] CONST jz JUMP_ADDR_11	cmp eax CONST jg UNK_JUMP_ADDR	cdqe movzx ecx [r14+rax] mov rdx [rbx+rax*8] test [rbx+CONST] CONST jz JUMP_ADDR_9	cmp [rbx+rax+CONST] CONST jnz JUMP_ADDR_11	cmp cl CONST jnz UNK_JUMP_ADDR	mov rdx [rdx]	mov [rbx+CONST] rdx add r13 CONST	mov rsi r12 mov rdi rbx call sub_xxx mov rdx [rbx+CONST] xor r9d r9d mov r8d eax mov rax [rbx+CONST] shr rdx CONST sub rax rdx cmp rax [rbp+CONST] setz r9b lea r15d ds:xxx test r8d r8d jz JUMP_ADDR_1	mov eax CONST	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdi [rsp+CONST+var_xxx] mov [CONST_VAR] r13 jmp JUMP_ADDR_14	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__Unwind_ForcedUnwind_Phase2
push r15 push r14 push r13 mov r13 rsi push r12 mov r12 rdi push rbp mov ebp CONST push rbx sub rsp CONST mov rax [CONST_VAR+CONST] mov r14 [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rdx lea rbx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_12	mov rax [rsp+CONST+var_xxx] mov r9 r14 mov r8 r13 mov rcx r12 mov esi CONST mov edi CONST call rax test eax eax jnz JUMP_ADDR_16	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_5	mov rdx [r12] mov r8 r13 mov rcx r12 mov esi CONST mov edi CONST call rax mov r15d eax cmp eax CONST jz JUMP_ADDR_18	cmp eax CONST jnz JUMP_ADDR_16	mov rsi rbx mov rdi r13 call sub_xxx mov rax [rsp+CONST+var_xxx] xor edx edx mov rcx rax shl rcx CONST cmp [rsp+rcx+CONST+var_xxx] CONST jz JUMP_ADDR_11	cmp eax CONST jg UNK_JUMP_ADDR	cdqe lea rsi GLOBAL_VAR movzx ecx [CONST_VAR+rax] mov rdx [r13+rax*8+CONST] test [r13+CONST] CONST jz JUMP_ADDR_9	cmp [r13+rax+CONST] CONST jnz JUMP_ADDR_11	cmp cl CONST jnz UNK_JUMP_ADDR	mov rdx [rdx]	mov [r13+CONST] rdx add rbp CONST	mov rsi rbx mov rdi r13 call sub_xxx mov r15d eax test eax eax jz JUMP_ADDR_14	cmp eax CONST jnz JUMP_ADDR_16	mov rdx [r12] cmp r15d CONST jnz JUMP_ADDR_1	mov rax [rsp+CONST+var_xxx] mov r9 r14 mov r8 r13 mov rcx r12 mov esi CONST mov edi CONST call rax test eax eax jz JUMP_ADDR_18	mov r15d CONST	add rsp CONST mov eax r15d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rax [rsp+CONST+var_xxx] mov [rax] rbp jmp JUMP_ADDR_17
[ph]libcap-git-setcap__Unwind_GetGR
endbr64 cmp esi CONST jg UNK_JUMP_ADDR	movsxd rsi esi mov rax [CONST_VAR+rsi*8] test [CONST_VAR+CONST] CONST jz JUMP_ADDR_3	cmp [CONST_VAR+CONST_VAR+CONST] CONST jnz JUMP_ADDR_5	lea rdx GLOBAL_VAR cmp [rdx+CONST_VAR] CONST jnz UNK_JUMP_ADDR	mov rax [rax]	retn
[ph]libcap-git-setcap__Unwind_GetCFA
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_SetGR
endbr64 cmp esi CONST jg UNK_JUMP_ADDR	movsxd rsi esi lea rax GLOBAL_VAR movzx eax [rax+CONST_VAR] test [CONST_VAR+CONST] CONST jz JUMP_ADDR_3	cmp [CONST_VAR+CONST_VAR+CONST] CONST jnz JUMP_ADDR_5	mov rcx [CONST_VAR+rsi*8] cmp al CONST jnz UNK_JUMP_ADDR	mov [rcx] rdx retn	mov [CONST_VAR+rsi*8] rdx retn
[ph]libcap-git-setcap__Unwind_GetIP
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_GetIPInfo
endbr64 mov rax [CONST_VAR+CONST] sar rax CONST and eax CONST mov [CONST_VAR] eax mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_SetIP
endbr64 mov [CONST_VAR+CONST] rsi retn
[ph]libcap-git-setcap__Unwind_GetLanguageSpecificData
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_GetRegionStart
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_FindEnclosingFunction
endbr64 sub rsp CONST sub rdi CONST mov rsi rsp call sub_xxx test rax rax cmovnz rax [rsp+CONST] add rsp CONST retn
[ph]libcap-git-setcap__Unwind_GetDataRelBase
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap__Unwind_GetTextRelBase
endbr64 mov rax [CONST_VAR+CONST] retn
[ph]libcap-git-setcap___frame_state_for
endbr64 push rbp xor eax eax mov r9 rdi mov ecx CONST push rbx add r9 CONST mov rbp rsi sub rsp CONST mov r8 rsp lea rbx [rsp+CONST] mov rdi r8 mov rsi rbx rep CONST mov rdi r8 mov [rsp+CONST] r9 mov rax CONST mov [rsp+CONST] rax call sub_xxx test eax eax jnz JUMP_ADDR_8	cmp [rsp+CONST] CONST jz JUMP_ADDR_8	lea rcx ds:xxx mov rdi rbp mov rax rbx lea rdx [rbp+CONST] lea r8 [rsp+CONST] sub rdi rcx nop [rax+rax+CONST]	mov ecx [rax+CONST] mov [rdx] cl cmp cl CONST jz JUMP_ADDR_5	xor esi esi cmp cl CONST jnz JUMP_ADDR_6	mov rsi [rax]	add rax CONST mov [CONST_VAR+rdx*8+CONST] rsi add rdx CONST cmp rax r8 jnz JUMP_ADDR_3	mov rax [rsp+CONST] mov [rbp+CONST] rax mov rax [rsp+CONST] mov [rbp+CONST] ax mov rax [rsp+CONST] mov [rbp+CONST] ax mov rax [rsp+CONST] mov [rbp+CONST] rax mov rax [rsp+CONST] mov [rbp+CONST] rax add rsp CONST mov rax rbp pop rbx pop rbp retn	add rsp CONST xor eax eax pop rbx pop rbp retn
[ph]libcap-git-setcap__Unwind_DebugHook
endbr64 nop retn
[ph]libcap-git-setcap__Unwind_RaiseException
endbr64 push rbp mov rbp rsp push r15 push r14 lea r15 [rbp+var_xxx] mov r14 rdi lea rsi [rbp+arg_xxx] push r13 mov rdi r15 lea r13 [rbp+var_xxx] push r12 lea r12 [rbp+var_xxx] push rbx lea rbx GLOBAL_VAR push rdx push rax sub rsp CONST mov rdx [rbp+CONST] call sub_xxx movdqa xmm0 [rbp+var_xxx] movdqa xmm1 [rbp+var_xxx] movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] movdqa xmm4 [rbp+var_xxx] movdqa xmm5 [rbp+var_xxx] movaps [rbp+var_xxx] xmm0 movdqa xmm6 [rbp+var_xxx] movdqa xmm7 [rbp+var_xxx] movaps [rbp+var_xxx] xmm1 movdqa xmm0 [rbp+var_xxx] movdqa xmm1 [rbp+var_xxx] movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm3 movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] movaps [rbp+var_xxx] xmm4 movdqa xmm4 [rbp+var_xxx] movaps [rbp+var_xxx] xmm5 movdqa xmm5 [rbp+var_xxx] movaps [rbp+var_xxx] xmm6 movdqa xmm6 [rbp+var_xxx] movaps [rbp+var_xxx] xmm7 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm1 movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm3 movaps [rbp+var_xxx] xmm4 movaps [rbp+var_xxx] xmm5 movaps [rbp+var_xxx] xmm6 jmp JUMP_ADDR_12	test eax eax jnz JUMP_ADDR_14	mov rax [rbp+var_xxx] test rax rax jz JUMP_ADDR_5	mov rdx [r14] mov r8 r12 mov rcx r14 mov esi CONST mov edi CONST call rax cmp eax CONST jz JUMP_ADDR_15	cmp eax CONST jnz JUMP_ADDR_14	mov rsi r13 mov rdi r12 call sub_xxx mov rax [rbp+var_xxx] xor edx edx mov rcx rax shl rcx CONST cmp [rbp+rcx+var_xxx] CONST jz JUMP_ADDR_11	cmp eax CONST jg UNK_JUMP_ADDR	cdqe movzx ecx [rbx+rax] mov rdx [rbp+rax*8+var_xxx] test [rbp+var_xxx+CONST] CONST jz JUMP_ADDR_9	cmp [rbp+rax+var_xxx+CONST] CONST jnz JUMP_ADDR_11	cmp cl CONST jnz UNK_JUMP_ADDR	mov rdx [rdx]	mov [rbp+var_xxx+CONST] rdx	mov rsi r13 mov rdi r12 call sub_xxx cmp eax CONST jnz JUMP_ADDR_1	mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] leave retn	mov eax CONST jmp JUMP_ADDR_13	movdqa xmm7 [rbp+var_xxx] mov rdx [rbp+var_xxx] mov [r14+CONST] CONST mov rsi r12 movdqa xmm0 [rbp+var_xxx] mov rax [rbp+var_xxx] mov rdi r14 movaps [rbp+var_xxx] xmm7 movdqa xmm7 [rbp+var_xxx] shr rdx CONST movdqa xmm1 [rbp+var_xxx] movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] movaps [rbp+var_xxx] xmm0 sub rax rdx movaps [rbp+var_xxx] xmm7 movdqa xmm7 [rbp+var_xxx] movdqa xmm4 [rbp+var_xxx] mov rdx r13 movdqa xmm5 [rbp+var_xxx] movdqa xmm6 [rbp+var_xxx] mov [r14+CONST] rax movaps [rbp+var_xxx] xmm7 movdqa xmm7 [rbp+var_xxx] movdqa xmm0 [rbp+var_xxx] movaps [rbp+var_xxx] xmm1 movaps [rbp+var_xxx] xmm7 movdqa xmm7 [rbp+var_xxx] movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm7 movdqa xmm7 [rbp+var_xxx] movaps [rbp+var_xxx] xmm3 movaps [rbp+var_xxx] xmm4 movaps [rbp+var_xxx] xmm5 movaps [rbp+var_xxx] xmm6 movaps [rbp+var_xxx] xmm7 movaps [rbp+var_xxx] xmm0 movdqa xmm1 [rbp+var_xxx] movaps [rbp+var_xxx] xmm1 call sub_xxx cmp eax CONST jnz JUMP_ADDR_13	mov rsi r12 mov rdi r15 call sub_xxx mov rsi [rbp+var_xxx+CONST] mov rdi [rbp+var_xxx] mov rdx rax xor eax eax call sub_xxx rdsspq rax test rax rax jz JUMP_ADDR_21	mov rax [rbp+var_xxx] mov ecx CONST jmp JUMP_ADDR_19	incsspq rcx sub rax CONST	cmp rax CONST ja JUMP_ADDR_18	incsspq rax	mov rcx rdx mov [rbp+rdx+CONST] rsi mov rax [rbp+var_xxx] lea rcx [rbp+rcx+CONST] mov rdx [rbp+var_xxx] mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] mov rbp [rbp+var_xxx] mov rsp rcx pop rcx jmp rcx
[ph]libcap-git-setcap__Unwind_ForcedUnwind
endbr64 push rbp mov rbp rsp push r15 push r14 lea r14 [rbp+var_xxx] push r13 mov r13 rsi lea rsi [rbp+arg_xxx] push r12 mov r12 rdi mov rdi r14 push rbx mov rbx rdx push rdx push rax sub rsp CONST mov rdx [rbp+CONST] call sub_xxx movdqa xmm0 [rbp+var_xxx] mov rdi r12 movdqa xmm1 [rbp+var_xxx] movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] mov [r12+CONST] r13 lea r13 [rbp+var_xxx] movdqa xmm4 [rbp+var_xxx] movdqa xmm5 [rbp+var_xxx] mov rsi r13 mov [r12+CONST] rbx movdqa xmm6 [rbp+var_xxx] movdqa xmm7 [rbp+var_xxx] movaps [rbp+var_xxx] xmm0 lea rdx [rbp+var_xxx] movdqa xmm0 [rbp+var_xxx] movaps [rbp+var_xxx] xmm1 movdqa xmm1 [rbp+var_xxx] movaps [rbp+var_xxx] xmm2 movdqa xmm2 [rbp+var_xxx] movaps [rbp+var_xxx] xmm3 movdqa xmm3 [rbp+var_xxx] movaps [rbp+var_xxx] xmm4 movdqa xmm4 [rbp+var_xxx] movaps [rbp+var_xxx] xmm5 movdqa xmm5 [rbp+var_xxx] movaps [rbp+var_xxx] xmm6 movdqa xmm6 [rbp+var_xxx] movaps [rbp+var_xxx] xmm7 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm1 movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm3 movaps [rbp+var_xxx] xmm4 movaps [rbp+var_xxx] xmm5 movaps [rbp+var_xxx] xmm6 call sub_xxx cmp eax CONST jz JUMP_ADDR_2	mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] leave retn	mov rsi r13 mov rdi r14 call sub_xxx mov rsi [rbp+var_xxx+CONST] mov rdi [rbp+var_xxx] mov rdx rax xor eax eax call sub_xxx rdsspq rax test rax rax jz JUMP_ADDR_7	mov rax [rbp+var_xxx] cmp rax CONST jbe JUMP_ADDR_6	mov ecx CONST	incsspq rcx sub rax CONST cmp rax CONST ja JUMP_ADDR_5	incsspq rax	mov rcx rdx mov [rbp+rdx+CONST] rsi mov rax [rbp+var_xxx] lea rcx [rbp+rcx+CONST] mov rdx [rbp+var_xxx] mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] mov rbp [rbp+var_xxx] mov rsp rcx pop rcx jmp rcx
[ph]libcap-git-setcap__Unwind_Resume
endbr64 push rbp mov rbp rsp push r15 push r14 lea rsi [rbp+arg_xxx] lea r14 [rbp+var_xxx] push r13 lea r13 [rbp+var_xxx] push r12 mov r12 rdi mov rdi r13 push rbx push rdx push rax sub rsp CONST mov rdx [rbp+CONST] call sub_xxx movdqa xmm0 [rbp+var_xxx] mov rsi r14 movdqa xmm1 [rbp+var_xxx] movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] lea rdx [rbp+var_xxx] mov rdi r12 movdqa xmm4 [rbp+var_xxx] movdqa xmm5 [rbp+var_xxx] movaps [rbp+var_xxx] xmm0 movdqa xmm6 [rbp+var_xxx] movdqa xmm7 [rbp+var_xxx] movaps [rbp+var_xxx] xmm1 movdqa xmm0 [rbp+var_xxx] movdqa xmm1 [rbp+var_xxx] movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm3 movdqa xmm2 [rbp+var_xxx] movdqa xmm3 [rbp+var_xxx] movaps [rbp+var_xxx] xmm4 movdqa xmm4 [rbp+var_xxx] cmp [r12+CONST] CONST movaps [rbp+var_xxx] xmm5 movdqa xmm5 [rbp+var_xxx] movaps [rbp+var_xxx] xmm6 movdqa xmm6 [rbp+var_xxx] movaps [rbp+var_xxx] xmm7 movaps [rbp+var_xxx] xmm0 movaps [rbp+var_xxx] xmm1 movaps [rbp+var_xxx] xmm2 movaps [rbp+var_xxx] xmm3 movaps [rbp+var_xxx] xmm4 movaps [rbp+var_xxx] xmm5 movaps [rbp+var_xxx] xmm6 jnz JUMP_ADDR_9	call sub_xxx	cmp eax CONST jnz UNK_JUMP_ADDR	mov rsi r14 mov rdi r13 call sub_xxx mov rsi [rbp+var_xxx+CONST] mov rdi [rbp+var_xxx] xor edx edx call sub_xxx rdsspq rdx test rdx rdx jz JUMP_ADDR_8	mov rdx [rbp+var_xxx] cmp rdx CONST jbe JUMP_ADDR_7	mov ecx CONST nop [rax+rax+CONST]	incsspq rcx sub rdx CONST cmp rdx CONST ja JUMP_ADDR_6	incsspq rdx	mov rcx rax mov [rbp+rax+CONST] rsi mov rax [rbp+var_xxx] lea rcx [rbp+rcx+CONST] mov rdx [rbp+var_xxx] mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] mov rbp [rbp+var_xxx] mov rsp rcx pop rcx jmp rcx	call sub_xxx jmp JUMP_ADDR_2
[ph]libcap-git-setcap__Unwind_Resume_or_Rethrow
endbr64 push rbp mov rbp rsp push r15 push r14 push r13 push r12 mov r12 rdi push rbx push rdx push rax sub rsp CONST cmp [CONST_VAR+CONST] CONST jnz JUMP_ADDR_2	call sub_xxx mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] leave retn	mov rdx [rbp+CONST] lea r13 [rbp+var_xxx] lea rsi [rbp+arg_xxx] mov ebx CONST mov rdi r13 lea r14 [rbp+var_xxx] call sub_xxx mov rcx rbx mov rsi r13 lea rdi [rbp+var_xxx] rep CONST lea rdx [rbp+var_xxx] mov rsi r14 mov rdi r12 mov rbx rcx call sub_xxx cmp eax CONST jnz UNK_JUMP_ADDR	mov rsi r14 mov rdi r13 call sub_xxx mov rsi [rbp+var_xxx] mov rdi [rbp+var_xxx] mov rdx rax call sub_xxx rdsspq rbx test rbx rbx jz JUMP_ADDR_8	mov rax [rbp+var_xxx] cmp rax CONST jbe JUMP_ADDR_7	mov ecx CONST	incsspq rcx sub rax CONST cmp rax CONST ja JUMP_ADDR_6	incsspq rax	mov rcx rdx mov [rbp+rdx+CONST] rsi mov rax [rbp+var_xxx] lea rcx [rbp+rcx+CONST] mov rdx [rbp+var_xxx] mov rbx [rbp+var_xxx] mov r12 [rbp+var_xxx] mov r13 [rbp+var_xxx] mov r14 [rbp+var_xxx] mov r15 [rbp+var_xxx] mov rbp [rbp+var_xxx] mov rsp rcx pop rcx jmp rcx
[ph]libcap-git-setcap__Unwind_DeleteException
endbr64 mov rax [CONST_VAR+CONST] mov rsi rdi test rax rax jz JUMP_ADDR_2	mov edi CONST jmp rax	retn
[ph]libcap-git-setcap__Unwind_Backtrace
endbr64 push rbp mov rbp rsp push r15 push r14 mov r14 rdi push r13 mov r13 rsi lea rsi [rbp+arg_xxx] push r12 lea r12 [rbp+var_xxx] push rbx lea rbx [rbp+var_xxx] mov rdi rbx sub rsp CONST mov rdx [rbp+CONST] call sub_xxx jmp JUMP_ADDR_10	mov rsi r13 mov rdi rbx call r14 test eax eax jnz JUMP_ADDR_12	cmp r15d CONST jz JUMP_ADDR_13	mov rsi r12 mov rdi rbx call sub_xxx mov rax [rbp+var_xxx] xor edx edx mov rcx rax shl rcx CONST cmp [rbp+rcx+var_xxx] CONST jz JUMP_ADDR_9	cmp eax CONST jg UNK_JUMP_ADDR	cdqe lea rsi GLOBAL_VAR movzx ecx [CONST_VAR+rax] mov rdx [rbp+rax*8+var_xxx] test [rbp+var_xxx] CONST jz JUMP_ADDR_7	cmp [rbp+rax+var_xxx] CONST jnz JUMP_ADDR_9	cmp cl CONST jnz UNK_JUMP_ADDR	mov rdx [rdx]	mov [rbp+var_xxx] rdx	mov rsi r12 mov rdi rbx call sub_xxx mov r15d eax test eax eax jz JUMP_ADDR_1	cmp eax CONST jz JUMP_ADDR_1	mov r15d CONST	add rsp CONST mov eax r15d pop rbx pop r12 pop r13 pop r14 pop r15 pop rbp retn
[ph]libcap-git-setcap_fde_unencoded_compare
endbr64 mov rcx [rdx+CONST] mov eax CONST cmp [CONST_VAR+CONST] rcx ja JUMP_ADDR_2	sbb eax eax	retn
[ph]libcap-git-setcap_frame_downheap
push r15 movsxd r9 ecx mov r15 rdi push r14 lea ecx [r9+r9+CONST] push r13 mov r13d r8d push r12 mov r12 rdx push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rsi cmp ecx r8d jl JUMP_ADDR_6	jmp JUMP_ADDR_8	lea r14 [r12+rax+CONST] mov [rsp+CONST+var_xxx] r9d mov rsi [rbx] mov rdi r15 mov rdx [r14] mov rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] ecx call rax mov ecx [rsp+CONST+var_xxx] movsxd r9 [rsp+CONST+var_xxx] test eax eax cmovns ebp ecx cmovs rbx r14	lea r14 [r12+r9*8] mov rdx [rbx] mov rax [rsp+CONST+var_xxx] mov rdi r15 mov rsi [r14] call rax test eax eax jns JUMP_ADDR_8	mov rax [r14] mov rdx [rbx] lea ecx [rbp+rbp+CONST] mov [r14] rdx mov [rbx] rax cmp r13d ecx jle JUMP_ADDR_8	movsxd r9 ebp	movsxd rax ecx lea ebp [rcx+CONST] shl rax CONST lea rbx [r12+rax] cmp ebp r13d jl JUMP_ADDR_2	mov ebp ecx jmp JUMP_ADDR_3	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn
[ph]libcap-git-setcap_frame_heapsort
push r15 push r14 lea r14 [rdx+CONST] push r13 mov r13 rsi push r12 mov r12 rdi push rbp mov rbp rdx push rbx sub rsp CONST mov rax [rdx+CONST] mov rbx rax mov [rsp+CONST+var_xxx] rax mov r15d eax shr rbx CONST sub ebx CONST js JUMP_ADDR_3	nop [rax+rax+CONST]	mov ecx ebx mov r8d r15d mov rdx r14 mov rsi r13 mov rdi r12 call sub_xxx sub ebx CONST jnb JUMP_ADDR_2	mov r15d [rsp+CONST+var_xxx] sub r15d CONST movsxd rbx r15d test r15d r15d jle JUMP_ADDR_6	nop [rax+CONST]	mov rdx [rbp+rbx*8+CONST] mov rax [rbp+CONST] mov r8d ebx xor ecx ecx mov rsi r13 mov rdi r12 mov [rbp+CONST] rdx mov rdx r14 mov [rbp+rbx*8+CONST] rax sub rbx CONST call sub_xxx test ebx ebx jg JUMP_ADDR_5	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn
[ph]libcap-git-setcap_read_encoded_value_with_base
mov r9 rsi mov r8 rcx mov rsi rdx cmp dil CONST jz JUMP_ADDR_7	mov eax edi and eax CONST cmp al CONST ja UNK_JUMP_ADDR	lea rdx unk_xxx movzx eax al movsxd rax [rdx+rax*4] add rax rdx jmp rax	mov rdx [CONST_VAR] lea rax [CONST_VAR+CONST]	test rdx rdx jz JUMP_ADDR_6	mov ecx edi and ecx CONST cmp cl CONST cmovz r9 rsi add rdx r9 test dil dil js JUMP_ADDR_8	mov [r8] rdx retn	lea rax [rdx+CONST] and rax CONST mov rdx [rax] add rax CONST mov [r8] rdx retn	mov rdx [rdx] mov [r8] rdx retn
[ph]libcap-git-setcap_get_cie_encoding
push rbp mov rbp rdi push rbx lea rbx [CONST_VAR+CONST] mov rdi rbx sub rsp CONST call cs:xxx movzx ecx [rbp+CONST] lea rax [rbx+rax+CONST] cmp cl CONST ja JUMP_ADDR_21	cmp [rbp+CONST] CONST jz JUMP_ADDR_4	xor r8d r8d	add rsp CONST mov eax r8d pop rbx pop rbp retn	add rax CONST cmp [rax+CONST] CONST js JUMP_ADDR_4	nop [rax+rax+CONST]	mov rdx rax add rax CONST cmp [rax+CONST] CONST js JUMP_ADDR_6	cmp cl CONST jz JUMP_ADDR_20	nop [rax+rax+CONST]	add rax CONST cmp [rax+CONST] CONST js JUMP_ADDR_9	lea rbx [rbp+CONST] xchg ax ax	add rax CONST cmp [rax+CONST] CONST js JUMP_ADDR_11	movzx edx [rbp+CONST] lea rbp [rsp+CONST+var_xxx] cmp dl CONST jnz JUMP_ADDR_17	jmp JUMP_ADDR_19	cmp dl CONST jz JUMP_ADDR_16	cmp dl CONST jnz JUMP_ADDR_2	movzx edx [rbx+CONST] add rbx CONST add rax CONST cmp dl CONST jz JUMP_ADDR_19	cmp dl CONST jnz JUMP_ADDR_14	movzx edi [rax] lea rdx [rax+CONST] mov rcx rbp xor esi esi add rbx CONST and edi CONST call sub_xxx movzx edx [rbx] cmp dl CONST jnz JUMP_ADDR_17	movzx r8d [rax] add rsp CONST pop rbx pop rbp mov eax r8d retn	lea rax [rdx+CONST] jmp JUMP_ADDR_10	cmp [rax] CONST mov r8d CONST jnz JUMP_ADDR_3	cmp [rax+CONST] CONST jnz JUMP_ADDR_3	add rax CONST jmp JUMP_ADDR_1
[ph]libcap-git-setcap_classify_object_over_fdes
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov ebp [CONST_VAR] mov [rsp+CONST+var_xxx] rdi test ebp ebp jz JUMP_ADDR_36	mov rbx rsi xor r13d r13d xor r14d r14d xor ecx ecx mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_9	jbe JUMP_ADDR_27	mov edx CONST cmp al CONST jnz JUMP_ADDR_25	mov rax [rsp+CONST+var_xxx] mov rcx r12 test rax rdx jz JUMP_ADDR_8	mov rsi [rsp+CONST+var_xxx] add [rsp+CONST+var_xxx] CONST cmp [CONST_VAR] rax jbe JUMP_ADDR_7	mov [CONST_VAR] rax	mov rcx r12	lea rbx [rbx+rbp+CONST] mov ebp [rbx] test ebp ebp jz JUMP_ADDR_35	movsxd rax [rbx+CONST] test eax eax jz JUMP_ADDR_8	lea r9 [rbx+CONST] mov r15d r14d sub r9 rax mov r12 r9 cmp r9 rcx jz JUMP_ADDR_20	mov rdi r9 call sub_xxx mov r14d eax cmp eax CONST jz JUMP_ADDR_34	mov r15d eax cmp al CONST jz JUMP_ADDR_24	and eax CONST cmp al CONST jz JUMP_ADDR_33	jbe JUMP_ADDR_29	cmp al CONST jnz JUMP_ADDR_23	mov rax [rsp+CONST+var_xxx] mov r13 [rax+CONST] nop [rax+CONST]	mov rax [rsp+CONST+var_xxx] movzx eax [rax+CONST] mov edx eax and dx CONST cmp dx CONST jz JUMP_ADDR_31	shr ax CONST movzx eax al cmp eax r14d jz JUMP_ADDR_20	mov rax [rsp+CONST+var_xxx] or [rax+CONST] CONST	lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] movzx edi r14b mov rsi r13 call sub_xxx cmp r15b CONST jz JUMP_ADDR_32	mov eax r15d and eax CONST cmp al CONST jnz JUMP_ADDR_2	mov edx CONST jmp JUMP_ADDR_4	cmp al CONST jnz JUMP_ADDR_38	xor r13d r13d jmp JUMP_ADDR_17	cmp al CONST jnz JUMP_ADDR_37	mov rdx CONST jmp JUMP_ADDR_4	test al al jz JUMP_ADDR_26	jmp UNK_JUMP_ADDR	test r14b CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_24	movzx edx r15b mov rcx [rsp+CONST+var_xxx] and ax CONST shl edx CONST or eax edx mov [rcx+CONST] ax jmp JUMP_ADDR_20	xor edx edx jmp JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx] mov r13 [rax+CONST] jmp JUMP_ADDR_17	mov [rsp+CONST+var_xxx] CONST	mov rax [rsp+CONST+var_xxx] add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_35	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_fde_single_encoding_compare
endbr64 push r12 push rbp push rbx mov rbx rdx sub rsp CONST movzx eax [CONST_VAR+CONST] shr ax CONST movzx r12d al cmp al CONST jz JUMP_ADDR_9	mov edx eax and edx CONST cmp dl CONST jz JUMP_ADDR_12	jbe JUMP_ADDR_10	cmp dl CONST jnz JUMP_ADDR_8	mov rbp [CONST_VAR+CONST] nop [rax+CONST]	lea rdx [CONST_VAR+CONST] mov rcx rsp mov rsi rbp mov edi r12d call sub_xxx lea rdx [rbx+CONST] mov rsi rbp mov edi r12d lea rcx [rsp+CONST+var_xxx] call sub_xxx mov rbx [rsp+CONST+var_xxx] mov eax CONST cmp [rsp+CONST+var_xxx] rbx ja JUMP_ADDR_7	sbb eax eax	add rsp CONST pop rbx pop rbp pop r12 retn	cmp dl CONST jnz JUMP_ADDR_13	xor ebp ebp jmp JUMP_ADDR_5	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_9	mov rbp [CONST_VAR+CONST] jmp JUMP_ADDR_5	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_fde_mixed_encoding_compare
endbr64 push r12 mov r12 rdi lea rdi [CONST_VAR+CONST] push rbp mov rbp rsi push rbx mov rbx rdx sub rsp CONST movsxd rax [CONST_VAR+CONST] sub rdi rax call sub_xxx lea rdx [rbp+CONST] movzx edi al cmp al CONST jz JUMP_ADDR_16	mov ecx eax and ecx CONST cmp cl CONST jz JUMP_ADDR_21	jbe JUMP_ADDR_17	cmp cl CONST jnz JUMP_ADDR_15	mov rsi [r12+CONST] nop [rax+rax+CONST]	mov rcx rsp call sub_xxx movsxd rax [rbx+CONST] lea rdi [rbx+CONST] sub rdi rax call sub_xxx lea rdx [rbx+CONST] movzx edi al cmp al CONST jz JUMP_ADDR_14	mov ecx eax and ecx CONST cmp cl CONST jz JUMP_ADDR_22	jbe JUMP_ADDR_19	cmp cl CONST jnz JUMP_ADDR_13	mov rsi [r12+CONST] nop [rax]	lea rcx [rsp+CONST+var_xxx] call sub_xxx mov rbx [rsp+CONST+var_xxx] mov eax CONST cmp [rsp+CONST+var_xxx] rbx ja JUMP_ADDR_12	sbb eax eax	add rsp CONST pop rbx pop rbp pop r12 retn	cmp cl CONST jnz JUMP_ADDR_24	xor esi esi jmp JUMP_ADDR_10	cmp cl CONST jnz JUMP_ADDR_23	xor esi esi jmp JUMP_ADDR_5	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_16	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_14	mov rsi [r12+CONST] jmp JUMP_ADDR_5	mov rsi [r12+CONST] jmp JUMP_ADDR_10	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_add_fdes
push r15 mov r15 rdi push r14 push r13 push r12 mov r12 rsi push rbp push rbx mov rbx rdx sub rsp CONST movzx eax [CONST_VAR+CONST] shr ax CONST cmp al CONST jz JUMP_ADDR_46	mov edx eax movzx r14d al and edx CONST cmp dl CONST jz JUMP_ADDR_45	jbe JUMP_ADDR_40	cmp dl CONST jnz JUMP_ADDR_38	mov r9 [CONST_VAR+CONST] nop [rax+CONST]	mov ebp [rbx] xor r13d r13d test ebp ebp jz JUMP_ADDR_20	nop [rax]	movsxd rax [rbx+CONST] test eax eax jz JUMP_ADDR_19	test [r15+CONST] CONST jz JUMP_ADDR_21	lea r10 [rbx+CONST] sub r10 rax cmp r10 r13 jz JUMP_ADDR_21	mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] cmp al CONST mov r14d eax mov r11d eax jz JUMP_ADDR_44	and eax CONST cmp al CONST jz JUMP_ADDR_42	jbe JUMP_ADDR_32	cmp al CONST jnz JUMP_ADDR_36	mov r9 [r15+CONST] mov r13 r10 test r14d r14d jnz JUMP_ADDR_43	xchg ax ax	xor r14d r14d cmp [rbx+CONST] CONST jz JUMP_ADDR_19	mov rax [r12] test rax rax jz JUMP_ADDR_19	mov rdx [rax+CONST] lea rcx [rdx+CONST] mov [rax+CONST] rcx mov [rax+rdx*8+CONST] rbx	lea rbx [rbx+rbp+CONST] mov ebp [rbx] test ebp ebp jnz JUMP_ADDR_7	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test r14d r14d jz JUMP_ADDR_16	mov rsi r9 lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] movzx edi r14b mov [rsp+CONST+var_xxx] r9 call sub_xxx cmp r14b CONST mov r9 [rsp+CONST+var_xxx] mov r11d r14d jz JUMP_ADDR_47	mov edx r11d and edx CONST cmp dl CONST jz JUMP_ADDR_35	jbe JUMP_ADDR_28	mov eax CONST cmp dl CONST jnz JUMP_ADDR_30	and rax [rsp+CONST+var_xxx] jnz JUMP_ADDR_17	jmp JUMP_ADDR_19	test dl dl jnz JUMP_ADDR_48	mov rax CONST jmp JUMP_ADDR_26	cmp dl CONST jz JUMP_ADDR_29	jmp UNK_JUMP_ADDR	and r11d CONST jnz UNK_JUMP_ADDR	mov r13 r10 xor r9d r9d test r14d r14d jz JUMP_ADDR_16	lea rdx [rbx+CONST] lea rcx [rsp+CONST+var_xxx] movzx edi r14b xor esi esi mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r11d r14d mov r9 [rsp+CONST+var_xxx] mov edx r11d and edx CONST cmp dl CONST jnz JUMP_ADDR_24	mov eax CONST jmp JUMP_ADDR_26	cmp al CONST jz JUMP_ADDR_33	jmp UNK_JUMP_ADDR	cmp dl CONST jnz JUMP_ADDR_49	xor r9d r9d jmp JUMP_ADDR_5	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_39	mov r9 [r15+CONST] mov r13 r10 test r14d r14d jz JUMP_ADDR_16	mov rsi r9 lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] movzx edi r14b mov [rsp+CONST+var_xxx] r11b mov [rsp+CONST+var_xxx] r9 call sub_xxx mov r9 [rsp+CONST+var_xxx] movzx r11d [rsp+CONST+var_xxx] jmp JUMP_ADDR_23	lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] xor esi esi mov edi CONST mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r13 [rsp+CONST+var_xxx] xor eax eax xor r9d r9d jmp JUMP_ADDR_26	mov r9 [CONST_VAR+CONST] jmp JUMP_ADDR_5	xor r9d r9d mov r14d CONST jmp JUMP_ADDR_5	xor eax eax jmp JUMP_ADDR_26	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_linear_search_fdes
push r15 mov r15 rdi push r14 push r13 push r12 mov r12 rdx push rbp push rbx mov rbx rsi sub rsp CONST movzx eax [CONST_VAR+CONST] shr ax CONST cmp al CONST jz JUMP_ADDR_46	mov edx eax movzx r14d al and edx CONST cmp dl CONST jz JUMP_ADDR_45	jbe JUMP_ADDR_38	cmp dl CONST jnz JUMP_ADDR_36	mov r9 [CONST_VAR+CONST] nop [rax+CONST]	mov ebp [rbx] xor r13d r13d test ebp ebp jnz JUMP_ADDR_17	jmp JUMP_ADDR_41	lea r10 [rbx+CONST] sub r10 rax cmp r10 r13 jz JUMP_ADDR_19	mov rdi r10 mov [rsp+CONST+var_xxx] r10 call sub_xxx mov r10 [rsp+CONST+var_xxx] cmp al CONST mov r14d eax mov r11d eax jz JUMP_ADDR_44	and eax CONST cmp al CONST jz JUMP_ADDR_42	jbe JUMP_ADDR_34	cmp al CONST jnz JUMP_ADDR_31	mov r9 [r15+CONST] mov r13 r10 test r14d r14d jnz JUMP_ADDR_43	nop	mov rax [rbx+CONST] mov rdx [rbx+CONST] xor r14d r14d mov [rsp+CONST+var_xxx] rax mov [rsp+CONST+var_xxx] rdx test rax rax jz JUMP_ADDR_16	mov rcx r12 sub rcx rax cmp rcx rdx jb JUMP_ADDR_26	lea rbx [rbx+rbp+CONST] mov ebp [rbx] test ebp ebp jz JUMP_ADDR_41	movsxd rax [rbx+CONST] test eax eax jz JUMP_ADDR_16	test [r15+CONST] CONST jnz JUMP_ADDR_7	test r14d r14d jz JUMP_ADDR_14	mov rsi r9 lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] movzx edi r14b mov [rsp+CONST+var_xxx] r9 call sub_xxx mov edi r14d xor esi esi lea rcx [rsp+CONST+var_xxx] and edi CONST mov rdx rax call sub_xxx cmp r14b CONST mov r9 [rsp+CONST+var_xxx] mov r11d r14d jz JUMP_ADDR_47	mov eax r11d and eax CONST cmp al CONST jz JUMP_ADDR_40	jbe JUMP_ADDR_27	mov edx CONST cmp al CONST jnz JUMP_ADDR_29	mov rax [rsp+CONST+var_xxx] test rax rdx jz JUMP_ADDR_16	mov rcx r12 mov rdx [rsp+CONST+var_xxx] sub rcx rax cmp rcx rdx jnb JUMP_ADDR_16	add rsp CONST mov rax rbx pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	test al al jnz JUMP_ADDR_48	mov rdx CONST jmp JUMP_ADDR_24	cmp al CONST jz JUMP_ADDR_28	jmp UNK_JUMP_ADDR	cmp al CONST jnz JUMP_ADDR_50	mov r13 r10 xor r9d r9d test r14d r14d jz JUMP_ADDR_14	jmp JUMP_ADDR_20	and r11d CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_32	cmp dl CONST jnz JUMP_ADDR_49	xor r9d r9d jmp JUMP_ADDR_5	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_37	mov edx CONST jmp JUMP_ADDR_24	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r9 [r15+CONST] mov r13 r10 test r14d r14d jz JUMP_ADDR_14	mov rsi r9 lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] movzx edi r14b mov [rsp+CONST+var_xxx] r11b mov [rsp+CONST+var_xxx] r9 call sub_xxx mov edi r14d lea rcx [rsp+CONST+var_xxx] xor esi esi mov rdx rax and edi CONST call sub_xxx mov r9 [rsp+CONST+var_xxx] movzx r11d [rsp+CONST+var_xxx] jmp JUMP_ADDR_21	lea rcx [rsp+CONST+var_xxx] lea rdx [rbx+CONST] xor esi esi mov edi CONST mov [rsp+CONST+var_xxx] r10 call sub_xxx mov edi r14d lea rcx [rsp+CONST+var_xxx] xor esi esi mov rdx rax and edi CONST call sub_xxx mov r13 [rsp+CONST+var_xxx] xor edx edx xor r9d r9d jmp JUMP_ADDR_24	mov r9 [CONST_VAR+CONST] jmp JUMP_ADDR_5	xor r9d r9d mov r14d CONST jmp JUMP_ADDR_5	xor edx edx jmp JUMP_ADDR_24	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__Unwind_IteratePhdrCallback
endbr64 push r15 mov rcx rdi mov rdi rsi push r14 push r13 push r12 push rbp push rbx mov rbx rdx sub rsp CONST mov edx [rdx+CONST] mov rax [rcx+CONST] mov r8 [rcx] test edx edx jz JUMP_ADDR_2	cmp rsi CONST ja JUMP_ADDR_23	cmp rdi CONST jbe JUMP_ADDR_22	mov [rsp+CONST+var_xxx] CONST xor r12d r12d	movzx edx [rcx+CONST] test dx dx jz JUMP_ADDR_28	xor r13d r13d xor r14d r14d xor r10d r10d xor r11d r11d lea rcx ds:xxx mov r15d CONST sub rcx rdx lea rdx [rax+rcx*8] xor ecx ecx jmp JUMP_ADDR_9	cmp esi CONST jz JUMP_ADDR_27	cmp esi CONST cmovz rcx rax	add rax CONST cmp rdx rax jz JUMP_ADDR_13	mov esi [rax] cmp esi CONST jnz JUMP_ADDR_6	mov rsi [rax+CONST] mov r9 [rbx] add rsi r8 cmp r9 rsi jb JUMP_ADDR_8	mov rbp [rax+CONST] add rbp rsi cmp r9 rbp cmovb r13 rbp cmovb r14 rsi cmovb r10 r15 add rax CONST cmp rdx rax jnz JUMP_ADDR_9	nop [rax+CONST]	test r10 r10 jz JUMP_ADDR_28	cmp rdi CONST jbe JUMP_ADDR_19	mov rax cs:xxx test r12 r12 jz JUMP_ADDR_18	mov rdi [rsp+CONST+var_xxx] test rdi rdi jz JUMP_ADDR_18	mov rdx [r12+CONST] mov cs:xxx r12 mov [CONST_VAR+CONST] rdx mov [r12+CONST] rax mov rax r12	mov [rax+CONST] r8 mov [rax+CONST] r11 mov [rax+CONST] rcx mov [rax] r14 mov [rax+CONST] r13	test r11 r11 jz JUMP_ADDR_28	add r8 [r11+CONST] cmp [r8] CONST mov rbp r8 jz JUMP_ADDR_38	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov rdx [rcx+CONST] cmp rdx cs:xxx mov rsi [rcx+CONST] jz JUMP_ADDR_29	mov cs:xxx rdx lea rdx unk_xxx mov cs:xxx rsi lea rsi [rdx+CONST] nop [rax+CONST]	mov [rdx+CONST] CONST mov [rdx+CONST] CONST mov [rdx+CONST] rdx add rdx CONST cmp rdx rsi jnz JUMP_ADDR_25	lea rdx unk_xxx xor r12d r12d mov cs:xxx CONST mov cs:xxx rdx mov [rbx+CONST] CONST mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_4	mov r11 rax jmp JUMP_ADDR_8	add rsp CONST xor eax eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	cmp cs:xxx rsi jnz JUMP_ADDR_24	mov r10 cs:xxx test r10 r10 jz JUMP_ADDR_3	mov r12 r10 mov r9 [rbx] xor r11d r11d mov rdx [r12] mov rsi [r12+CONST] cmp r9 rdx jb JUMP_ADDR_34	nop [rax+CONST]	cmp r9 rsi jb JUMP_ADDR_85	or rdx rsi jz JUMP_ADDR_60	mov rdx [r12+CONST] test rdx rdx jz JUMP_ADDR_60	mov r11 r12 mov r12 rdx mov rdx [r12] mov rsi [r12+CONST] cmp r9 rdx jb JUMP_ADDR_34	jmp JUMP_ADDR_33	movzx edi [rbp+CONST] lea r8 [r8+CONST] mov eax edi cmp dil CONST jz JUMP_ADDR_57	mov edx edi and edx CONST cmp dl CONST jz JUMP_ADDR_61	jbe JUMP_ADDR_58	cmp dl CONST jnz JUMP_ADDR_56	mov rsi [rbx+CONST] nop [rax]	mov rdx r8 lea rcx [rsp+CONST+var_xxx] call sub_xxx movzx edx [rbp+CONST] cmp dl CONST jz JUMP_ADDR_45	cmp [rbp+CONST] CONST jz JUMP_ADDR_62	mov r13 [rbx+CONST] mov r12 [rbx+CONST] lea rdi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] CONST mov rsi [rsp+CONST+var_xxx] mov rdx [rbx] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] r13 mov [rsp+CONST+var_xxx] r12 mov [rsp+CONST+var_xxx] rsi call sub_xxx mov [rbx+CONST] rax mov rbp rax test rax rax jz JUMP_ADDR_21	lea rdi [rax+CONST] movsxd rax [rax+CONST] sub rdi rax call sub_xxx lea rdx [rbp+CONST] movzx edi al cmp al CONST jz JUMP_ADDR_53	mov ecx eax and ecx CONST cmp cl CONST jz JUMP_ADDR_84	jbe JUMP_ADDR_52	mov rsi r12 cmp cl CONST jz JUMP_ADDR_54	cmp cl CONST jz JUMP_ADDR_53	jmp UNK_JUMP_ADDR	test al CONST jnz UNK_JUMP_ADDR	xor esi esi	lea rcx [rsp+CONST+var_xxx] call sub_xxx mov rax [rsp+CONST+var_xxx]	mov [rbx+CONST] rax jmp JUMP_ADDR_21	cmp dl CONST jnz JUMP_ADDR_96	xor esi esi jmp JUMP_ADDR_43	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_57	mov [rsp+CONST+var_xxx] r11 jmp JUMP_ADDR_4	mov rsi [rbx+CONST] jmp JUMP_ADDR_43	mov ecx edx movzx edi dl and ecx CONST cmp cl CONST jz JUMP_ADDR_87	jbe JUMP_ADDR_81	cmp cl CONST jnz JUMP_ADDR_79	mov rsi [rbx+CONST]	lea rcx [rsp+CONST+var_xxx] mov rdx rax call sub_xxx mov rcx [rsp+CONST+var_xxx] mov rdx rax test rcx rcx jz JUMP_ADDR_21	mov r8 rax mov r13 [rbx] and r8d CONST jnz JUMP_ADDR_45	movsxd rax [rax] add rax rbp cmp rax r13 ja JUMP_ADDR_21	sub rcx CONST lea r12 [rdx+rcx*8] movsxd rax [r12] add rax rbp cmp rax r13 jbe JUMP_ADDR_73	cmp rcx r8 jbe JUMP_ADDR_92	lea rax [rcx+r8] shr rax CONST lea rdi ds:xxx lea r12 [rdx+CONST_VAR] movsxd rsi [r12] add rsi rbp cmp rsi r13 ja JUMP_ADDR_83	lea r8 [rax+CONST] movsxd rax [rdx+CONST_VAR+CONST] add rax rbp cmp rax r13 jbe JUMP_ADDR_70	movsxd r14 [r12+CONST] add r14 rbp movsxd rax [r14+CONST] lea rdi [r14+CONST] sub rdi rax call sub_xxx cmp al CONST jz JUMP_ADDR_94	mov ecx eax and ecx CONST cmp cl CONST jz JUMP_ADDR_93	jbe JUMP_ADDR_90	mov edx CONST cmp cl CONST jnz JUMP_ADDR_88	and eax CONST add rdx r14 lea rcx [rsp+CONST+var_xxx] xor esi esi mov edi eax call sub_xxx movsxd rax [r12] mov rdx [rsp+CONST+var_xxx] add rax rbp add rdx rax cmp rdx r13 jbe JUMP_ADDR_55	mov [rbx+CONST] r14 jmp JUMP_ADDR_55	cmp cl CONST jnz JUMP_ADDR_95	xor esi esi jmp JUMP_ADDR_66	and edx CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_80	mov rcx rax jmp JUMP_ADDR_70	mov rsi r13 jmp JUMP_ADDR_54	mov rdi r11 mov r8 [r12+CONST] mov r11 [r12+CONST] cmp r12 r10 jz JUMP_ADDR_19	mov rax [r12+CONST] mov cs:xxx r12 mov [CONST_VAR+CONST] rax mov [r12+CONST] r10 jmp JUMP_ADDR_19	mov rsi [rbx+CONST] jmp JUMP_ADDR_66	cmp cl CONST jnz UNK_JUMP_ADDR	mov edx CONST jmp JUMP_ADDR_77	test cl cl jz JUMP_ADDR_89	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR	mov edx CONST jmp JUMP_ADDR_77	mov edx CONST jmp JUMP_ADDR_77	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_search_object
push r15 push r14 push r13 push r12 mov r12 rdi push rbp push rbx sub rsp CONST movzx eax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rsi test al CONST jz JUMP_ADDR_17	mov rbx [r12+CONST] test al CONST jnz JUMP_ADDR_29	movzx eax [r12+CONST] test ax CONST jz JUMP_ADDR_24	shr ax CONST movzx edx al mov [rsp+CONST+var_xxx] edx cmp al CONST jz JUMP_ADDR_57	mov edx eax and edx CONST cmp dl CONST jz JUMP_ADDR_100	jbe JUMP_ADDR_60	cmp dl CONST jnz JUMP_ADDR_56	mov r13 [r12+CONST] nop [rax+CONST]	mov r15 [rbx+CONST] test r15 r15 jz JUMP_ADDR_15	and eax CONST xor r12d r12d lea rbp [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] eax lea rax [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_12	add rax [rsp+CONST+var_xxx] cmp rax rdi ja JUMP_ADDR_16	lea r12 [r8+CONST] cmp r12 r15 jnb JUMP_ADDR_15	lea r8 [r15+r12] mov rcx [rsp+CONST+var_xxx] mov edi [rsp+CONST+var_xxx] mov rsi r13 shr r8 CONST mov r14 [rbx+r8*8+CONST] mov [rsp+CONST+var_xxx] r8 lea rdx [r14+CONST] call sub_xxx mov edi [rsp+CONST+var_xxx] xor esi esi mov rcx rbp mov rdx rax call sub_xxx mov rax [rsp+CONST+var_xxx] mov rdi [rsp+CONST+var_xxx] mov r8 [rsp+CONST+var_xxx] cmp rax rdi jbe JUMP_ADDR_10	mov r15 r8 cmp r12 r15 jb JUMP_ADDR_12	nop [rax+rax+CONST]	xor r14d r14d	add rsp CONST mov rax r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov edx [CONST_VAR+CONST] mov ecx edx shr ecx CONST mov ebx ecx mov [rsp+CONST+var_xxx] rbx test rbx rbx jnz JUMP_ADDR_62	mov rbp [CONST_VAR+CONST] test al CONST jz JUMP_ADDR_41	mov rsi [rbp+CONST] test rsi rsi jnz JUMP_ADDR_22	jmp JUMP_ADDR_104	mov rsi [rbp+CONST] add rbp CONST add [rsp+CONST+var_xxx] rax test rsi rsi jz JUMP_ADDR_42	mov rdi r12 call sub_xxx cmp rax CONST jnz JUMP_ADDR_21	mov [r12+CONST] CONST lea rax unk_xxx mov [r12+CONST] rax jmp JUMP_ADDR_43	mov rdx [rbx+CONST] xor ecx ecx jmp JUMP_ADDR_27	lea rax [rdx+rcx] shr rax CONST mov r14 [rbx+rax*8+CONST] mov rsi [r14+CONST] cmp [rsp+CONST+var_xxx] rsi jnb JUMP_ADDR_58	mov rdx rax	cmp rdx rcx ja JUMP_ADDR_25	jmp JUMP_ADDR_15	mov r13 [rbx+CONST] test r13 r13 jz JUMP_ADDR_15	mov [rsp+CONST+var_xxx] CONST jmp JUMP_ADDR_34	add rax [rsp+CONST+var_xxx] cmp rcx rax jb JUMP_ADDR_16	lea rax [rbp+CONST] mov [rsp+CONST+var_xxx] rax	cmp [rsp+CONST+var_xxx] r13 jnb JUMP_ADDR_15	mov rax [rsp+CONST+var_xxx] lea rbp [r13+rax+CONST] shr rbp CONST mov r14 [rbx+rbp*8+CONST] movsxd rax [r14+CONST] lea rdi [r14+CONST] sub rdi rax call sub_xxx lea rdx [r14+CONST] mov r15d eax movzx edi al cmp al CONST jz JUMP_ADDR_52	and eax CONST cmp al CONST jz JUMP_ADDR_55	jbe JUMP_ADDR_53	cmp al CONST jnz JUMP_ADDR_51	mov rsi [r12+CONST] nop [rax+CONST]	lea rcx [rsp+CONST+var_xxx] call sub_xxx mov edi r15d lea rcx [rsp+CONST+var_xxx] xor esi esi mov rdx rax and edi CONST call sub_xxx mov rax [rsp+CONST+var_xxx] mov rcx [rsp+CONST+var_xxx] cmp rcx rax jnb JUMP_ADDR_31	mov r13 rbp jmp JUMP_ADDR_33	mov rsi rbp call sub_xxx mov [rsp+CONST+var_xxx] rax cmp rax CONST jz JUMP_ADDR_23	mov rbx [rsp+CONST+var_xxx] mov rax rbx and eax CONST cmp rax rbx mov edx eax mov eax CONST cmovnz edx eax mov eax [r12+CONST] shl edx CONST and eax CONST or eax edx mov [r12+CONST] eax test rbx rbx jnz JUMP_ADDR_62	mov rax [rsp+CONST+var_xxx] cmp [r12] rax ja JUMP_ADDR_15	movzx eax [r12+CONST] mov rbp [r12+CONST] test al CONST jnz JUMP_ADDR_1	test al CONST jz JUMP_ADDR_98	mov rsi [rbp+CONST] test rsi rsi jz JUMP_ADDR_15	nop [rax+rax+CONST]	mov rdx [rsp+CONST+var_xxx] mov rdi r12 call sub_xxx mov r14 rax test rax rax jnz JUMP_ADDR_16	mov rsi [rbp+CONST] add rbp CONST test rsi rsi jnz JUMP_ADDR_48	jmp JUMP_ADDR_15	cmp al CONST jnz JUMP_ADDR_105	xor esi esi jmp JUMP_ADDR_39	test r15b CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_52	mov rsi [r12+CONST] jmp JUMP_ADDR_39	cmp dl CONST jnz JUMP_ADDR_106	xor r13d r13d jmp JUMP_ADDR_8	add rsi [r14+CONST] cmp [rsp+CONST+var_xxx] rsi jb JUMP_ADDR_16	lea rcx [rax+CONST] jmp JUMP_ADDR_27	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_57	mov rax [rsp+CONST+var_xxx] lea rbp ds:xxx mov rdi rbp call sub_xxx mov [rsp+CONST+var_xxx] rax mov rbx rax test rax rax jz JUMP_ADDR_43	mov [rax+CONST] CONST mov rdi rbp call sub_xxx mov [rsp+CONST+var_xxx] rax mov r13 rax test rax rax jz JUMP_ADDR_65	mov [rax+CONST] CONST	movzx r14d [r12+CONST] mov r15 [r12+CONST] test r14b CONST jz JUMP_ADDR_99	mov rdx [r15] test rdx rdx jz UNK_JUMP_ADDR	lea rbp [rsp+CONST+var_xxx] nop [rax+rax+CONST]	mov rsi rbp mov rdi r12 add r15 CONST call sub_xxx mov rdx [r15] test rdx rdx jnz JUMP_ADDR_68	mov rax [rbx+CONST] mov rdx [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rax cmp [rsp+CONST+var_xxx] rdx jnz UNK_JUMP_ADDR	and r14d CONST lea rbp sub_xxx jnz JUMP_ADDR_72	test [r12+CONST] CONST lea rbp sub_xxx lea rax sub_xxx cmovnz rbp rax	test r13 r13 jz JUMP_ADDR_101	lea rax [rbx+CONST] xor edx edx lea r14 unk_xxx mov [rsp+CONST+var_xxx] rax mov r15 rax nop [rax]	lea rax [rdx+CONST] mov [r13+rdx*8+CONST] r14 mov [rsp+CONST+var_xxx] rax cmp [rsp+CONST+var_xxx] rax jz JUMP_ADDR_79	mov r14 r15 jmp JUMP_ADDR_77	mov rax r14 sub rax [rsp+CONST+var_xxx] sar rax CONST add rax CONST mov r14 [r13+rax*8+CONST] mov [r13+rax*8+CONST] CONST lea rax unk_xxx cmp r14 rax jz JUMP_ADDR_78	mov rsi [r15+CONST] mov rdx [r14] mov rdi r12 call rbp test eax eax js JUMP_ADDR_76	mov rdx [rsp+CONST+var_xxx] add r15 CONST jmp JUMP_ADDR_74	xor edi edi xor ecx ecx xor eax eax jmp JUMP_ADDR_83	mov [rbx+rcx*8+CONST] rsi add rcx CONST	lea rsi [rax+CONST] cmp rax rdx jz JUMP_ADDR_85	mov rax rsi	cmp [r13+rax*8+CONST] CONST mov rsi [rbx+rax*8+CONST] jnz JUMP_ADDR_80	mov [r13+rdi*8+CONST] rsi add rdi CONST jmp JUMP_ADDR_81	mov [rbx+CONST] rcx add rcx rdi mov [r13+CONST] rdi cmp rcx [rsp+CONST+var_xxx] jnz UNK_JUMP_ADDR	mov rdx r13 mov rsi rbp mov rdi r12 call sub_xxx mov rax [r13+CONST] test rax rax jz JUMP_ADDR_96	mov r15 [rbx+CONST] nop [rax]	lea rdx [rax+CONST] mov [rsp+CONST+var_xxx] rdx lea rdx [rax+CONST] mov rcx [r13+rdx*8+CONST] mov [rsp+CONST+var_xxx] rcx test r15 r15 jz JUMP_ADDR_102	lea r14 [rax+r15+CONST] mov rcx r15 jmp JUMP_ADDR_91	mov rax [rbx+rcx*8+CONST] mov [rbx+r14*8+CONST] rax sub r14 CONST test rcx rcx jz JUMP_ADDR_94	mov r15 rcx lea rcx [rcx+CONST] mov rdx [rsp+CONST+var_xxx] mov rdi r12 mov [rsp+CONST+var_xxx] rcx mov rsi [rbx+rcx*8+CONST] call rbp mov rcx [rsp+CONST+var_xxx] test eax eax jg JUMP_ADDR_90	mov rax [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov [rbx+r14*8+CONST] rax jz JUMP_ADDR_95	mov rax [rsp+CONST+var_xxx] jmp JUMP_ADDR_88	mov r14 [rsp+CONST+var_xxx] xor r15d r15d jmp JUMP_ADDR_92	mov rax [r13+CONST] add [rbx+CONST] rax	mov rdi r13 call sub_xxx	mov rax [r12+CONST] or [r12+CONST] CONST mov [r12+CONST] rbx mov [rbx] rax jmp JUMP_ADDR_43	mov rdx [rsp+CONST+var_xxx] add rsp CONST mov rsi rbp mov rdi r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp UNK_JUMP_ADDR	lea rbp [rsp+CONST+var_xxx] mov rdx r15 mov rdi r12 mov rsi rbp call sub_xxx jmp JUMP_ADDR_69	mov r13 [r12+CONST] jmp JUMP_ADDR_8	mov rdx rbx mov rsi rbp mov rdi r12 call sub_xxx jmp JUMP_ADDR_97	mov rdi [rsp+CONST+var_xxx] cmp [rsp+CONST+var_xxx] CONST mov [rbx+rdx*8] rdi jz JUMP_ADDR_95	lea r14 [rax+CONST] mov rax [r13+rax*8+CONST] mov [rsp+CONST+var_xxx] r14 mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_92	and edx CONST mov [CONST_VAR+CONST] edx jmp JUMP_ADDR_43	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___register_frame_info_bases
endbr64 test rdi rdi jz JUMP_ADDR_8	mov r8d [CONST_VAR] test r8d r8d jz JUMP_ADDR_8	push rbp push rbx mov rbx rsi sub rsp CONST mov rbp CONST mov [CONST_VAR] CONST mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdi mov [CONST_VAR+CONST] CONST test rbp rbp jz JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov eax cs:xxx test eax eax jz JUMP_ADDR_9	test rbp rbp jz JUMP_ADDR_7	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	retn	mov cs:xxx CONST test rbp rbp jnz JUMP_ADDR_6	jmp JUMP_ADDR_7
[ph]libcap-git-setcap___register_frame_info
endbr64 test rdi rdi jz JUMP_ADDR_8	mov edx [CONST_VAR] test edx edx jz JUMP_ADDR_8	push rbp push rbx mov rbx rsi sub rsp CONST mov rbp CONST mov [CONST_VAR+CONST] rdi mov [CONST_VAR] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST test rbp rbp jz JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov eax cs:xxx test eax eax jz JUMP_ADDR_9	test rbp rbp jz JUMP_ADDR_7	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	retn	mov cs:xxx CONST test rbp rbp jnz JUMP_ADDR_6	jmp JUMP_ADDR_7
[ph]libcap-git-setcap___register_frame
endbr64 mov eax [CONST_VAR] test eax eax jnz JUMP_ADDR_2	retn	push rbp mov rbp rdi mov edi CONST call sub_xxx mov rdi rbp xor ecx ecx xor edx edx mov rsi rax pop rbp jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___register_frame_info_table_bases
endbr64 push rbp push rbx mov rbx rsi sub rsp CONST mov rbp CONST mov [CONST_VAR] CONST mov [CONST_VAR+CONST] rdx mov [CONST_VAR+CONST] rcx mov [CONST_VAR+CONST] rdi mov [CONST_VAR+CONST] CONST test rbp rbp jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov eax cs:xxx test eax eax jz JUMP_ADDR_6	test rbp rbp jz JUMP_ADDR_5	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	mov cs:xxx CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap___register_frame_info_table
endbr64 push rbp push rbx mov rbx rsi sub rsp CONST mov rbp CONST mov [CONST_VAR+CONST] rdi mov [CONST_VAR] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST mov [CONST_VAR+CONST] CONST test rbp rbp jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov eax cs:xxx test eax eax jz JUMP_ADDR_6	test rbp rbp jz JUMP_ADDR_5	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	mov cs:xxx CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap___register_frame_table
endbr64 push rbp mov rbp rdi mov edi CONST push rbx sub rsp CONST call sub_xxx mov [rax+CONST] rbp mov rbp CONST mov rbx rax mov [rax] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST mov [rax+CONST] CONST test rbp rbp jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx mov cs:xxx rbx mov [rbx+CONST] rax mov eax cs:xxx test eax eax jz JUMP_ADDR_6	test rbp rbp jz JUMP_ADDR_5	add rsp CONST lea rdi unk_xxx pop rbx pop rbp jmp UNK_ADDR	add rsp CONST pop rbx pop rbp retn	mov cs:xxx CONST jmp JUMP_ADDR_3
[ph]libcap-git-setcap___deregister_frame_info_bases
endbr64 push r12 push rbp push rbx test rdi rdi jz JUMP_ADDR_19	mov eax [CONST_VAR] mov rbx rdi test eax eax jz JUMP_ADDR_19	mov rbp CONST test rbp rbp jz JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx	mov rax cs:xxx test rax rax jz JUMP_ADDR_12	lea rcx GLOBAL_VAR jmp JUMP_ADDR_7	lea rcx [r12+CONST] test rax rax jz JUMP_ADDR_12	mov rdx [rax+CONST] mov r12 rax mov rax [rax+CONST] cmp rbx rdx jnz JUMP_ADDR_6	mov [rcx] rax	test rbp rbp jz JUMP_ADDR_11	lea rdi unk_xxx call callfunc_xxx	mov rax r12 pop rbx pop rbp pop r12 retn	mov r12 cs:xxx test r12 r12 jz JUMP_ADDR_20	lea rax GLOBAL_VAR jmp JUMP_ADDR_16	cmp rbx [CONST_VAR] jz JUMP_ADDR_23	lea rax [r12+CONST] mov r12 [r12+CONST] test r12 r12 jz JUMP_ADDR_20	mov rdi [r12+CONST] test [r12+CONST] CONST jnz JUMP_ADDR_14	cmp rbx rdi jnz JUMP_ADDR_15	mov rdx [r12+CONST] mov [rax] rdx jmp JUMP_ADDR_9	xor r12d r12d pop rbx pop rbp mov rax r12 pop r12 retn	test rbp rbp jz JUMP_ADDR_22	lea rdi unk_xxx call callfunc_xxx	call sub_xxx	mov rdx [r12+CONST] mov [rax] rdx call sub_xxx jmp JUMP_ADDR_9
[ph]libcap-git-setcap___deregister_frame_info
endbr64 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap___deregister_frame
endbr64 mov eax [CONST_VAR] test eax eax jnz JUMP_ADDR_2	retn	sub rsp CONST call sub_xxx add rsp CONST mov rdi rax jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap__Unwind_Find_FDE
endbr64 push r15 push r14 mov r14 rdi push r13 push r12 push rbp mov rbp rsi push rbx sub rsp CONST mov eax cs:xxx test eax eax jnz JUMP_ADDR_5	mov [rsp+CONST+var_xxx] r14 mov rsi rsp lea rdi sub_xxx mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] CONST call sub_xxx test eax eax js JUMP_ADDR_31	mov r15 [rsp+CONST+var_xxx] test r15 r15 jz JUMP_ADDR_4	mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] rax mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] rax mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] rax	add rsp CONST mov rax r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r13 CONST test r13 r13 jz JUMP_ADDR_7	lea rdi unk_xxx call callfunc_xxx	mov rbx cs:xxx test rbx rbx jnz JUMP_ADDR_10	jmp JUMP_ADDR_19	mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_19	cmp r14 [rbx] jb JUMP_ADDR_9	mov rsi r14 mov rdi rbx call sub_xxx mov r15 rax test rax rax jz JUMP_ADDR_19	test r13 r13 jnz JUMP_ADDR_32	movzx eax [rbx+CONST] mov r13 [rbx+CONST] mov r12 [rbx+CONST] shr ax CONST mov [rbp+CONST] r13 mov [rbp+CONST] r12 mov edx eax movzx edi al test [rbx+CONST] CONST jnz JUMP_ADDR_33	lea r8 [r15+CONST] cmp dl CONST jz JUMP_ADDR_28	mov eax edx and eax CONST cmp al CONST jz JUMP_ADDR_34	jbe JUMP_ADDR_27	mov rsi r12 cmp al CONST jnz JUMP_ADDR_29	mov rcx rsp mov rdx r8 call sub_xxx mov rax [rsp+CONST+var_xxx] mov [rbp+CONST] rax jmp JUMP_ADDR_4	lea r12 GLOBAL_VAR nop [rax+rax+CONST]	mov rbx cs:xxx test rbx rbx jz JUMP_ADDR_35	mov rax [rbx+CONST] mov rsi r14 mov rdi rbx mov cs:xxx rax call sub_xxx mov rdx r12 mov r15 rax mov rax cs:xxx test rax rax jz JUMP_ADDR_25	mov rcx [rbx] jmp JUMP_ADDR_24	lea rdx [rax+CONST] mov rax [rax+CONST] test rax rax jz JUMP_ADDR_25	cmp [rax] rcx jnb JUMP_ADDR_23	mov [rbx+CONST] rax mov [rdx] rbx test r15 r15 jz JUMP_ADDR_20	jmp JUMP_ADDR_12	and edx CONST jnz UNK_JUMP_ADDR	xor esi esi jmp JUMP_ADDR_18	cmp al CONST jz JUMP_ADDR_28	jmp UNK_JUMP_ADDR	xor r15d r15d jmp JUMP_ADDR_4	lea rdi unk_xxx call callfunc_xxx jmp JUMP_ADDR_13	movsxd rax [r15+CONST] lea rdi [r15+CONST] sub rdi rax call sub_xxx mov edx eax movzx edi al jmp JUMP_ADDR_14	mov rsi r13 jmp JUMP_ADDR_18	test r13 r13 jz JUMP_ADDR_1	lea rdi unk_xxx call callfunc_xxx jmp JUMP_ADDR_1
[ph]libcap-git-setcap_base_of_encoded_value
mov eax edi cmp dil CONST jz JUMP_ADDR_11	mov edx eax mov rdi rsi and edx CONST cmp dl CONST jz JUMP_ADDR_12	ja JUMP_ADDR_5	cmp dl CONST jnz JUMP_ADDR_7	jmp UNK_JUMP_ADDR	cmp dl CONST jnz JUMP_ADDR_10	jmp UNK_JUMP_ADDR	ja UNK_JUMP_ADDR	test al CONST jnz UNK_JUMP_ADDR	jmp JUMP_ADDR_11	cmp dl CONST jnz JUMP_ADDR_13	xor eax eax retn	jmp UNK_JUMP_ADDR	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_read_encoded_value_with_base_0
mov r9 rsi mov r8 rcx mov rsi rdx cmp dil CONST jz JUMP_ADDR_7	mov eax edi and eax CONST cmp al CONST ja UNK_JUMP_ADDR	lea rdx unk_xxx movzx eax al movsxd rax [rdx+rax*4] add rax rdx jmp rax	mov rdx [CONST_VAR] lea rax [CONST_VAR+CONST]	test rdx rdx jz JUMP_ADDR_6	mov ecx edi and ecx CONST cmp cl CONST cmovz r9 rsi add rdx r9 test dil dil js JUMP_ADDR_8	mov [r8] rdx retn	lea rax [rdx+CONST] and rax CONST mov rdx [rax] add rax CONST mov [r8] rdx retn	mov rdx [rdx] mov [r8] rdx retn
[ph]libcap-git-setcap___gcc_personality_v0
endbr64 push r15 push r14 push r13 push r12 push rbp push rbx sub rsp CONST mov [rsp+CONST+var_xxx] rcx mov [rsp+CONST+var_xxx] r8 mov [rsp+CONST+var_xxx] CONST cmp edi CONST jnz JUMP_ADDR_5	and esi CONST jnz JUMP_ADDR_6	nop [rax]	mov eax CONST	add rsp CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	add rsp CONST mov eax CONST pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	mov r15 [rsp+CONST+var_xxx] mov rdi r15 call sub_xxx mov rbx rax test rax rax jz JUMP_ADDR_3	xor eax eax test r15 r15 jz JUMP_ADDR_9	mov rdi r15 call sub_xxx	mov [rsp+CONST+var_xxx] rax movzx edx [rbx] lea r13 [rbx+CONST] cmp dl CONST jz JUMP_ADDR_34	mov eax edx movzx r14d dl and eax CONST cmp al CONST jz JUMP_ADDR_40	ja JUMP_ADDR_14	cmp al CONST jnz JUMP_ADDR_16	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rsi rax jmp JUMP_ADDR_19	cmp al CONST jnz JUMP_ADDR_35	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rsi rax jmp JUMP_ADDR_19	ja UNK_JUMP_ADDR	and edx CONST jnz UNK_JUMP_ADDR	xor esi esi	mov rdx r13 lea rcx [rsp+CONST+var_xxx] mov edi r14d call sub_xxx mov r13 rax	movzx eax [r13+CONST] lea rsi [r13+CONST] xor edi edi mov [rsp+CONST+var_xxx] al cmp al CONST jz JUMP_ADDR_24	xor ecx ecx	movzx edx [CONST_VAR] add rsi CONST mov rax rdx and eax CONST shl rax cl add ecx CONST or rdi rax test dl dl js JUMP_ADDR_22	add rdi rsi	mov [rsp+CONST+var_xxx] rdi movzx eax [CONST_VAR] lea r12 [CONST_VAR+CONST] xor edi edi xor ecx ecx mov [rsp+CONST+var_xxx] al nop [rax+CONST]	movzx esi [r12] add r12 CONST mov rax rsi and eax CONST shl rax cl add ecx CONST or rdi rax test sil sil js JUMP_ADDR_25	add rdi r12 lea rsi [rsp+CONST+var_xxx] mov [rsp+CONST+var_xxx] rdi mov rdi [rsp+CONST+var_xxx] call sub_xxx cmp [rsp+CONST+var_xxx] CONST sbb rax CONST mov rbx rax cmp r12 [rsp+CONST+var_xxx] jnb JUMP_ADDR_3	lea r15 [rsp+CONST+var_xxx] lea r14 [rsp+CONST+var_xxx] lea r13 [rsp+CONST+var_xxx] nop [rax+rax+CONST]	movzx ebp [rsp+CONST+var_xxx] xor esi esi mov edi ebp call sub_xxx mov rdx r12 mov rcx r15 mov edi ebp mov rsi rax call sub_xxx movzx ebp [rsp+CONST+var_xxx] xor esi esi mov r12 rax mov edi ebp call sub_xxx mov rdx r12 mov rcx r14 mov edi ebp mov rsi rax call sub_xxx movzx r12d [rsp+CONST+var_xxx] xor esi esi mov rbp rax mov edi r12d call sub_xxx mov edi r12d mov rcx r13 mov rdx rbp mov rsi rax call sub_xxx mov r12 rax xchg ax ax	add r12 CONST cmp [r12+CONST] CONST js JUMP_ADDR_29	mov rax [rsp+CONST+var_xxx] add rax [rsp+CONST+var_xxx] cmp rax rbx ja JUMP_ADDR_3	add rax [rsp+CONST+var_xxx] cmp rax rbx ja JUMP_ADDR_37	cmp [rsp+CONST+var_xxx] r12 ja JUMP_ADDR_28	jmp JUMP_ADDR_3	mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_20	cmp al CONST jz JUMP_ADDR_18	jmp UNK_JUMP_ADDR	mov rax [rsp+CONST+var_xxx] test rax rax jz JUMP_ADDR_3	add rax [rsp+CONST+var_xxx] mov r13 rax jz JUMP_ADDR_3	mov rbx [rsp+CONST+var_xxx] mov rdx [rsp+CONST+var_xxx] xor esi esi mov rdi rbx call sub_xxx xor edx edx mov esi CONST mov rdi rbx call sub_xxx mov rsi r13 mov rdi rbx call sub_xxx mov eax CONST jmp JUMP_ADDR_4	mov rdi [rsp+CONST+var_xxx] call sub_xxx mov rsi rax jmp JUMP_ADDR_19
[ph]libcap-git-setcap___dl_iterate_phdr
endbr64 push r15 push r14 push r13 push r12 push rbp mov rbp rsi push rbx mov rbx rdi sub rsp CONST mov rax fs:xxx mov [rsp+CONST+var_xxx] rax xor eax eax cmp cs:xxx CONST jz JUMP_ADDR_2	lea rdi unk_xxx call callfunc_xxx	mov r15 cs:xxx mov r12d cs:xxx test r15 r15 jz JUMP_ADDR_8	mov r13 rsp jmp JUMP_ADDR_6	mov rdx rbp mov esi CONST mov rdi r13 call rbx mov r14d eax test eax eax jnz JUMP_ADDR_9	mov r15 [r15+CONST] test r15 r15 jz JUMP_ADDR_8	mov rdi [r15+CONST] mov rax [CONST_VAR] mov [rsp+CONST+var_xxx] rax mov rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] CONST mov [rsp+CONST+var_xxx] rax mov rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax movzx eax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] ax mov rax cs:xxx mov [rsp+CONST+var_xxx] rax sub rax r12 mov [rsp+CONST+var_xxx] rax mov rax [CONST_VAR+CONST] mov [rsp+CONST+var_xxx] rax test rax rax jz JUMP_ADDR_4	call sub_xxx mov [rsp+CONST+var_xxx] rax jmp JUMP_ADDR_4	xor r14d r14d	cmp cs:xxx CONST jz JUMP_ADDR_11	lea rdi unk_xxx call callfunc_xxx	mov rax [rsp+CONST+var_xxx] sub rax fs:xxx jnz JUMP_ADDR_13	add rsp CONST mov eax r14d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 retn	call sub_xxx
[ph]libcap-git-setcap_free_mem
endbr64 push rbp push rbx sub rsp CONST mov rbp cs:xxx test rbp rbp jz JUMP_ADDR_5	lea rbx GLOBAL_VAR nop [rax]	mov rax [rbp+CONST] mov rdi [rbp+CONST] mov cs:xxx rax cmp rdi rbx jz JUMP_ADDR_4	call sub_xxx	mov rdi [rbp+CONST] call sub_xxx mov rdi rbp call sub_xxx mov rbp cs:xxx test rbp rbp jnz JUMP_ADDR_2	mov rdi cs:xxx lea rax GLOBAL_VAR cmp rdi rax jz JUMP_ADDR_7	call sub_xxx	mov rsi sub_xxx mov rdi cs:xxx call sub_xxx mov rbp cs:xxx mov cs:xxx CONST test rbp rbp jz JUMP_ADDR_10	nop [rax+rax+CONST]	mov rdi rbp mov rbp [rbp+CONST] mov cs:xxx rbp call sub_xxx test rbp rbp jnz JUMP_ADDR_9	add rsp CONST pop rbx pop rbp retn
[ph]libcap-git-setcap__nl_finddomain_subfreeres
endbr64 push rbp push rbx sub rsp CONST mov rbp cs:xxx test rbp rbp jnz JUMP_ADDR_3	jmp JUMP_ADDR_6	mov rbp rbx	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_5	call sub_xxx	mov rdi [rbp+CONST] mov rbx [rbp+CONST] call sub_xxx mov rdi rbp call sub_xxx test rbx rbx jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp retn
[ph]libcap-git-setcap__nl_unload_domain
endbr64 push r12 mov r12 rdi lea rax unk_xxx push rbp push rbx mov rdi [CONST_VAR+CONST] cmp rdi rax jz JUMP_ADDR_2	call sub_xxx	cmp [r12+CONST] CONST jz JUMP_ADDR_9	xor ebx ebx jmp JUMP_ADDR_7	mov rdi [rbp+CONST] cmp rdi CONST jz JUMP_ADDR_6	call sub_xxx	add rbx CONST cmp [r12+CONST] rbx jbe JUMP_ADDR_9	mov rdx [r12+CONST] lea rax [rbx+rbx*2] lea rbp [rdx+rax*8] mov rdi [rbp+CONST] call sub_xxx mov rdi [rbp+CONST] lea rax [CONST_VAR+CONST] cmp rax CONST ja JUMP_ADDR_4	call sub_xxx jmp JUMP_ADDR_4	mov rdi [r12+CONST] call sub_xxx cmp cs:xxx CONST jz JUMP_ADDR_11	lea rdi [r12+CONST] call callfunc_xxx	mov rdi [r12+CONST] call sub_xxx mov eax [r12+CONST] test eax eax jz JUMP_ADDR_13	mov rdi [r12] mov rsi [r12+CONST] call sub_xxx pop rbx mov rdi r12 pop rbp pop r12 jmp UNK_JUMP_ADDR	mov rdi [r12] call sub_xxx pop rbx mov rdi r12 pop rbp pop r12 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_buffer_free
endbr64 push rbx mov rbx cs:xxx mov cs:xxx CONST test rbx rbx jz JUMP_ADDR_3	nop [rax+rax+CONST]	mov rdi [rbx+CONST] call sub_xxx mov rbx [rbx+CONST] mov cs:xxx rbx test rbx rbx jnz JUMP_ADDR_2	pop rbx retn
[ph]libcap-git-setcap_free_derivation
endbr64 push r13 mov r13 rdi push r12 push rbp push rbx sub rsp CONST cmp [CONST_VAR+CONST] CONST mov rdx [CONST_VAR+CONST] jz JUMP_ADDR_7	xor ebx ebx xor ebp ebp	lea rax [rdx+rbx] mov ecx [rax+CONST] test ecx ecx jle JUMP_ADDR_6	cmp [rax] CONST jz JUMP_ADDR_6	mov r12 [rax+CONST] ror r12 CONST xor r12 fs:xxx test r12 r12 jz JUMP_ADDR_6	mov rdi r12 call sub_xxx mov rdi [r13+CONST] add rdi rbx call r12 mov rdx [r13+CONST]	add rbp CONST add rbx CONST cmp [r13+CONST] rbp ja JUMP_ADDR_2	test rdx rdx jz JUMP_ADDR_9	mov rdi [rdx+CONST] call sub_xxx mov rax [r13+CONST] lea rdx [rax+rax*2] lea rax [rax+rdx*4] mov rdx [r13+CONST] lea rax [rdx+rax*8] mov rdi [rax+CONST] call sub_xxx mov rdi [r13+CONST] call sub_xxx	add rsp CONST mov rdi r13 pop rbx pop rbp pop r12 pop r13 jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_free_modules_db
endbr64 push rbx mov rbx rdi mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_2	call sub_xxx	mov rdi [rbx+CONST] test rdi rdi jz JUMP_ADDR_5	call sub_xxx jmp JUMP_ADDR_5	test rbx rbx jz JUMP_ADDR_7	mov rdi rbx mov rbx [rbx+CONST] mov rax [CONST_VAR+CONST] cmp [rax] CONST jnz JUMP_ADDR_4	call sub_xxx test rbx rbx jnz JUMP_ADDR_5	pop rbx retn
[ph]libcap-git-setcap_free_mem_0
endbr64 sub rsp CONST call sub_xxx call sub_xxx mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_2	mov rsi sub_xxx call sub_xxx	mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_4	call sub_xxx	mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_6	lea rsi sub_xxx add rsp CONST jmp UNK_JUMP_ADDR	add rsp CONST retn
[ph]libcap-git-setcap_free_mem_1
endbr64 mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_3	lea rax unk_xxx cmp rdi rax jz JUMP_ADDR_3	jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap_free_mem_2
endbr64 mov eax cs:xxx mov rdi cs:xxx test eax eax jnz JUMP_ADDR_4	test rdi rdi jz JUMP_ADDR_3	mov rsi cs:xxx jmp UNK_JUMP_ADDR	retn	jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_do_release_all
endbr64 push rbp mov rbp rdi mov rdi [CONST_VAR+CONST] test rdi rdi jz JUMP_ADDR_2	call sub_xxx	mov rdi rbp pop rbp jmp UNK_JUMP_ADDR
[ph]libcap-git-setcap_free_mem_3
endbr64 sub rsp CONST mov rdi cs:xxx lea rsi sub_xxx call sub_xxx mov cs:xxx CONST add rsp CONST retn
[ph]libcap-git-setcap_free_category
endbr64 push r14 lea rax GLOBAL_VAR push r13 push r12 mov r12 rdx push rbp push rbx movsxd rbx edi mov rbp [rax+rbx*8] cmp rdx rsi jz JUMP_ADDR_6	lea rax GLOBAL_VAR lea r13 off_xxx cmp [rax+rbx*8] CONST jz JUMP_ADDR_4	lea rax GLOBAL_VAR mov [r13+rbx*8+CONST] rdx mov rax [rax+rbx*8] test rax rax jz JUMP_ADDR_4	call rax	add rbx CONST lea r14 GLOBAL_VAR mov rdi [r13+rbx*8+CONST] cmp rdi r14 jz JUMP_ADDR_6	call sub_xxx mov [r13+rbx*8+CONST] r14	test rbp rbp jnz JUMP_ADDR_9	jmp JUMP_ADDR_13	mov rbp rbx	mov rdi [rbp+CONST] test rdi rdi jz JUMP_ADDR_12	cmp r12 rdi jz JUMP_ADDR_12	call sub_xxx	mov rdi [rbp+CONST] mov rbx [rbp+CONST] call sub_xxx mov rdi rbp call sub_xxx test rbx rbx jnz JUMP_ADDR_8	pop rbx pop rbp pop r12 pop r13 pop r14 retn
[ph]libcap-git-setcap__nl_locale_subfreeres
endbr64 cmp cs:xxx CONST push rbx jz JUMP_ADDR_2	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_4	mov rax CONST mov rdx off_xxx xor edi edi mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_6	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_8	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_10	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_12	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_14	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_16	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_18	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_20	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_22	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	cmp cs:xxx CONST jz JUMP_ADDR_24	mov rax CONST mov rdx off_xxx mov edi CONST mov rax fs:xxx mov rsi [rax] call sub_xxx	mov rdi cs:xxx lea rbx GLOBAL_VAR cmp rdi rbx jz JUMP_ADDR_26	call sub_xxx mov cs:xxx rbx	pop rbx jmp JUMP_ADDR_27	endbr64 push r12 mov r12 cs:xxx push rbp push rbx test r12 r12 jz JUMP_ADDR_38	nop [rax+CONST]	mov rbp r12 xor ebx ebx mov r12 [r12] mov rdi [rbp+CONST] call sub_xxx jmp JUMP_ADDR_31	add rbx CONST	cmp rbx CONST jz JUMP_ADDR_30	mov rdi [rbp+rbx*8+CONST] test rdi rdi jz JUMP_ADDR_36	mov rax [CONST_VAR+CONST] test rax rax jz JUMP_ADDR_35	call rax mov rdi [rbp+rbx*8+CONST]	call sub_xxx	cmp rbx CONST jnz JUMP_ADDR_30	mov rdi rbp call sub_xxx test r12 r12 jnz JUMP_ADDR_29	mov rbx cs:xxx mov cs:xxx CONST test rbx rbx jz JUMP_ADDR_43	lea rax GLOBAL_VAR cmp rbx rax jnz JUMP_ADDR_44	mov esi [rbx+CONST] mov rdi [rbx] mov cs:xxx CONST call sub_xxx mov rbx [rbx+CONST] test rbx rbx jz JUMP_ADDR_43	xchg ax ax	mov rbp rbx mov rbx [rbx+CONST] mov rdi [rbp+CONST] mov esi [rbp+CONST] call sub_xxx mov rdi rbp call sub_xxx test rbx rbx jnz JUMP_ADDR_42	pop rbx pop rbp pop r12 retn	lea rcx GLOBAL_VAR mov edx CONST lea rsi GLOBAL_VAR lea rdi GLOBAL_VAR call sub_xxx
[ph]libcap-git-setcap_free_mem_4
endbr64 sub rsp CONST call sub_xxx mov rsi sub_xxx mov rdi cs:xxx call sub_xxx mov cs:xxx CONST add rsp CONST retn
[ph]libcap-git-setcap_free_mem_5
endbr64 mov rdi cs:xxx test rdi rdi jz JUMP_ADDR_8	push rbp xor ebp ebp push rbx sub rsp CONST nop [rax+rax+CONST]	mov rbx [CONST_VAR+rbp] test rbx rbx jz JUMP_ADDR_6	nop [rax+CONST]	mov rdi rbx mov rbx [rbx] call sub_xxx test rbx rbx jnz JUMP_ADDR_4	mov rdi cs:xxx	add rbp CONST cmp rbp CONST jnz JUMP_ADDR_2	add rsp CONST pop rbx pop rbp jmp UNK_JUMP_ADDR	retn
[ph]libcap-git-setcap_free_mem_6
endbr64 push rbx mov eax fs:xxx test eax eax jnz JUMP_ADDR_7	mov edx CONST cmpxchg cs:xxx edx	mov rdi cs:xxx lea rbx unk_xxx cmp rdi rbx jz JUMP_ADDR_4	call sub_xxx	mov cs:xxx CONST mov cs:xxx CONST mov cs:xxx rbx mov eax fs:xxx test eax eax jnz JUMP_ADDR_9	sub cs:xxx CONST	pop rbx retn	xor eax eax mov edx CONST lock CONST edx jz JUMP_ADDR_2	lea rdi GLOBAL_VAR call sub_xxx jmp JUMP_ADDR_2	xor eax eax xchg eax cs:xxx cmp eax CONST jle JUMP_ADDR_6	xor r10d r10d mov edx CONST mov esi CONST mov eax CONST lea rdi GLOBAL_VAR syscall pop rbx retn
[ph]libcap-git-setcap_free_slotinfo
endbr64 push rbx mov rbx rdi mov eax CONST sub rsp CONST mov rdi [CONST_VAR] test rdi rdi jz JUMP_ADDR_7	add rdi CONST call sub_xxx test al al jz JUMP_ADDR_7	mov rdi [rbx] mov rsi [CONST_VAR] test rsi rsi jz JUMP_ADDR_8	xor edx edx jmp JUMP_ADDR_5	add rdx CONST cmp rdx rsi jz JUMP_ADDR_8	mov rcx rdx shl rcx CONST cmp [CONST_VAR+rcx+CONST] CONST jz JUMP_ADDR_4	xor eax eax	add rsp CONST pop rbx retn	mov [rsp+CONST+var_xxx] al call sub_xxx mov [rbx] CONST movzx eax [rsp+CONST+var_xxx] add rsp CONST pop rbx retn
[ph]libcap-git-setcap_free_mem_7
endbr64 push rbp push rbx sub rsp CONST mov rbx cs:xxx cmp rbx cs:xxx jz JUMP_ADDR_3	nop [rax+rax+CONST]	mov rdi rbx mov rbx [rbx] call sub_xxx cmp cs:xxx rbx jnz JUMP_ADDR_2	cmp cs:xxx CONST jz JUMP_ADDR_13	mov rbp cs:xxx test rbp rbp jz JUMP_ADDR_12	nop [rax+rax+CONST]	mov rax [rbp+CONST] mov rbx [rax+CONST] mov [rax+CONST] CONST	test rbx rbx jz JUMP_ADDR_10	mov rdi rbx mov rbx [rbx+CONST] mov edx [CONST_VAR+CONST] test edx edx jnz JUMP_ADDR_7	call sub_xxx test rbx rbx jnz JUMP_ADDR_8	test [rbp+CONST] CONST jnz JUMP_ADDR_14	mov [rbp+CONST] CONST mov rbp [rbp+CONST] test rbp rbp jnz JUMP_ADDR_6	mov eax cs:xxx test eax eax jnz JUMP_ADDR_15	mov rax cs:xxx lea rdi [rax+CONST] call sub_xxx mov rdi cs:xxx mov cs:xxx CONST add rsp CONST pop rbx pop rbp jmp UNK_JUMP_ADDR	mov rdi [rbp+CONST] call sub_xxx jmp JUMP_ADDR_11	mov rax cs:xxx mov ecx cs:xxx cmp [rax+CONST] ecx jnz JUMP_ADDR_13	mov rdx cs:xxx mov rdi [rax] mov [rax] rdx mov cs:xxx CONST call sub_xxx jmp JUMP_ADDR_13
